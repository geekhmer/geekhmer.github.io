<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-02-23T00:00:27+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slim Template Language]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/22/slim-template-language/"/>
    <updated>2015-02-22T22:29:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/22/slim-template-language</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Slim Template Language" />
</p>




<p>
  Slim is a replacement for ERB, similar to HAML. Slim provides a nice lean syntax that&#8217;s easy to pick up and learn. In this article we will learn how to use Slim. Let’s run through this with me.
</p>




<p>
  <strong>Basic Syntax</strong><br/>
  Slim is actually really easy to learn. Indentation matters, but the indentation depth can be chosen as you like. If you want to first indent 2 spaces, then 5 spaces, it&#8217;s your choice.
</p>




<p>
  Example: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span>
</span><span class='line'>  <span class="o">|</span> <span class="no">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">very</span> <span class="n">long</span> <span class="n">paragraph</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Which translates to:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">very</span> <span class="n">long</span> <span class="n">paragraph</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In the above example you&#8217;ll notice two things. First, the pipe (|) character is used to delimit free-form text on a new line. Second, we simply used p to specify the paragraph tag. This works for any tag, for instance you could just as easily have done:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span>
</span><span class='line'>  <span class="o">|</span> <span class="no">Large</span> <span class="no">Title</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Or more simply:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="no">Large</span> <span class="no">Title</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In the above example that we didn&#8217;t specify the pipe (|) character. The pipe (|) character is only needed if we are entering free-form text on a new line.
</p>




<p>
  You can create a div with a default class by using:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Which translates to:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;class&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can create a div with an id by using:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#id</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Which translates to:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;id&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What about html attributes? Well, we specify them similarly to how we would in html:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">meta</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Which translates to:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">meta</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;viewport&quot;</span> <span class="n">content</span><span class="o">=</span><span class="s2">&quot;width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/meta&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  To specify a doctype:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">doctype</span> <span class="n">html</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Which translates to:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, all is great, but what about Ruby code? Inserting Ruby code is pretty easy. Code that doesn&#8217;t return a result, such as if statements or loops, are prefixed with a dash (-).
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span> <span class="k">if</span> <span class="vi">@products</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="nb">p</span> <span class="no">No</span> <span class="n">results</span> <span class="n">found</span><span class="o">.</span> <span class="no">Please</span> <span class="n">try</span> <span class="n">again</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Which is equivalent to:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="vi">@products</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="no">No</span> <span class="n">results</span> <span class="n">found</span><span class="o">.</span>  <span class="no">Please</span> <span class="n">try</span> <span class="n">again</span><span class="o">.</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Slim will auto close your Ruby code as well, so end isn&#8217;t needed.
</p>




<p>
  If you have code that returns output, such as the printing of a variable or property, you can use the equal (=) sign.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Which is equivalent to:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">name</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Your strings are Rubyized:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">|</span> <span class="no">Hello</span> <span class="c1">#{user.name}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can embed javascript as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">javascript</span><span class="p">:</span>
</span><span class='line'>  <span class="n">alert</span><span class="p">(</span><span class="s2">&quot;hello world!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customize the Ruby on Rails Application Generator]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/22/customize-the-ruby-on-rails-application-generator/"/>
    <updated>2015-02-22T13:05:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/22/customize-the-ruby-on-rails-application-generator</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Customize the Ruby on Rails Application Generator" />
</p>




<p>
  So far if you create a Rails app, you know that it can quickly to do things like:<br/>
  - Add RSpec and Cucumber.<br/>
  - Disable/turn off Test Unit.<br/>
  - Switch the default database engine to PostgreSQL.<br/>
  - Add other Gems such as HAML, CoffeeScript, &#8230;
</p>




<p>
  Luckily we can customize what the Rails app generator generates. In this article, I will use Rails app templates to customize the default behavior of the Rails application generator. Let’s run through this with me.
</p>




<p>
  <strong>Rails App Templates</strong><br/>
  Rails app templates allow you to run actual commands during the generation process. For example, I want to install rspec and haml, create a readme.md file, and commit the whole thing to git. I can easily do this by creating an Rails application template. Let create a file called app_template.rb and add the codes below:
</p>




<figure class='code'><figcaption><span>app_template.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remove_file</span> <span class="s1">&#39;README.doc&#39;</span>
</span><span class='line'><span class="n">create_file</span> <span class="s1">&#39;README.md&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml-rails&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;bundle install&#39;</span>
</span><span class='line'><span class="n">generate</span> <span class="s1">&#39;rspec:install&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="ss">:init</span>
</span><span class='line'><span class="n">git</span> <span class="ss">add</span><span class="p">:</span> <span class="s1">&#39;--all&#39;</span><span class="p">,</span> <span class="ss">commit</span><span class="p">:</span> <span class="s1">&#39;-m &quot;Initialize Commit&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you generate a new app with the parameters <code>-m app_template.rb</code> it will run the instructions you listed in the template. The code listed above will get executed when you run the following command:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">blog</span> <span class="o">-</span><span class="n">m</span> <span class="n">app_template</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you browse your Rails project you&#8217;ll see that rspec, haml got installed and the default readme file was removed and a readme.md file was added, and finally everything was committed to git.
</p>




<p>
  In addition, you can have the application template prompt the user for more information. The code listed below allows you to do like this:
</p>




<figure class='code'><figcaption><span>app_template.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">remove_file</span> <span class="s1">&#39;README.doc&#39;</span>
</span><span class='line'><span class="n">create_file</span> <span class="s1">&#39;README.md&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;haml-rails&#39;</span>
</span><span class='line'><span class="n">run</span> <span class="s1">&#39;bundle install&#39;</span>
</span><span class='line'><span class="n">generate</span> <span class="s1">&#39;rspec:install&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">yes?</span> <span class="s1">&#39;Do you wish to generate a root controller? (y/n)&#39;</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="n">ask</span><span class="p">(</span><span class="s1">&#39;What do you want to call it?&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">underscore</span>
</span><span class='line'>  <span class="n">generate</span> <span class="ss">:controller</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2"> show&quot;</span>
</span><span class='line'>  <span class="n">route</span> <span class="s2">&quot;root to: &#39;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="se">\#</span><span class="s2">show&#39;&quot;</span>
</span><span class='line'>  <span class="n">route</span> <span class="s2">&quot;resource :</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">, only: [:show]&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="ss">:init</span>
</span><span class='line'><span class="n">git</span> <span class="ss">add</span><span class="p">:</span> <span class="s1">&#39;--all&#39;</span><span class="p">,</span> <span class="ss">commit</span><span class="p">:</span> <span class="s1">&#39;-m &quot;Initial Commit&quot;&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In the code above, the yes? function will prompt the user with a yes/no question. The ask function will prompt the user for text input. In this case, we ask the user if they wish to generate a root controller, and if they say yes, we prompt them for a name.
</p>




<p>
  So far so good, That&#8217;s it! See ya!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/21/liquid-on-rails/"/>
    <updated>2015-02-21T22:59:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/21/liquid-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Liquid on Rails" />
</p>




<p>
  Now you have a basic grasp on the Liquid template engine itself, let&#8217;s learn how to utilize it in our Ruby on Rails application. First you need to add the gem to the Gemfile. Add the following line to the Gemfile:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;liquid&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.6.1&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then run <code>bundle install</code> to install the Liquid gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then create a model called Page. The Page model will be used to represent a page owned by a specific user. Run the commands below to create this model:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Page</span> <span class="ss">user</span><span class="p">:</span><span class="n">string</span> <span class="ss">template</span><span class="p">:</span><span class="n">text</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then open up your seeds (<code>db/seeds.rb</code>) file and modify it so that it looks somethings like below:
</p>




<figure class='code'><figcaption><span>seeds </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Page</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'>
</span><span class='line'><span class="no">Page</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s2">&quot;JingLong&quot;</span><span class="p">,</span> <span class="ss">template</span><span class="p">:</span> <span class="sx">%{</span>
</span><span class='line'><span class="sx">  Hello {{ user }}, here is your shopping list.</span>
</span><span class='line'><span class="sx">  &lt;ul&gt;</span>
</span><span class='line'><span class="sx">    {% for item in list %}</span>
</span><span class='line'><span class="sx">      &lt;li&gt;{{ item.name }}&lt;/li&gt;</span>
</span><span class='line'><span class="sx">    {% endfor %}</span>
</span><span class='line'><span class="sx">  &lt;/ul&gt;</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Page</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s2">&quot;Bunlong&quot;</span><span class="p">,</span> <span class="ss">template</span><span class="p">:</span> <span class="sx">%{</span>
</span><span class='line'><span class="sx">  What is up my man? Here is your shopping list.</span>
</span><span class='line'><span class="sx">  &lt;ul&gt;</span>
</span><span class='line'><span class="sx">    {% for item in list %}</span>
</span><span class='line'><span class="sx">      &lt;li&gt;{{ item.name }}&lt;/li&gt;</span>
</span><span class='line'><span class="sx">    {% endfor %}</span>
</span><span class='line'><span class="sx">  &lt;/ul&gt;</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Page</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s2">&quot;Rubyist&quot;</span><span class="p">,</span> <span class="ss">template</span><span class="p">:</span> <span class="sx">%{</span>
</span><span class='line'><span class="sx">  HTTP 200:  Shopping List Found</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  Items in your list:</span>
</span><span class='line'><span class="sx">  &lt;ul&gt;</span>
</span><span class='line'><span class="sx">    {% for item in list %}</span>
</span><span class='line'><span class="sx">      &lt;li&gt;{{ item.name }}&lt;/li&gt;</span>
</span><span class='line'><span class="sx">    {% endfor %}</span>
</span><span class='line'><span class="sx">  &lt;/ul&gt;</span>
</span><span class='line'><span class="sx">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then run <code>rake db:seed</code> command to seed the database with your sample data:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then create a homes controller that will allow you to play with liquid. Run the command below to create the homes controller:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">Homes</span> <span class="n">show</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then create a pages controller. This controller will be used to display a user&#8217;s page. Run the commands below to create the pages controller:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">Pages</span> <span class="n">show</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then modify your routes (<code>config/routes.rb</code>) file so that it looks somethings like below:
</p>




<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;homes#show&quot;</span>
</span><span class='line'><span class="n">resource</span> <span class="ss">:home</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="o">]</span>
</span><span class='line'><span class="n">resources</span> <span class="ss">:pages</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then modify your homes controller (<code>app/controllers/homes_controller.rb</code>) to pull down a list of all the user&#8217;s pages. Open up your homes controller and modify it so that it looks somethings like below:
</p>




<figure class='code'><figcaption><span>homes_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@pages</span> <span class="o">=</span> <span class="no">Page</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then modify your pages controller (<code>app/controllers/pages_controller.rb</code>) to pull down the correct page for the specified user. Open up your pages controller and modify it so that it looks somethings like below:
</p>




<figure class='code'><figcaption><span>pages_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@page</span> <span class="o">=</span> <span class="no">Page</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then create a few helper (<code>app/helpers/pages_helper.rb</code>) methods for use with this example. Open up your pages helper and modify it so that it looks somethings like below:
</p>




<figure class='code'><figcaption><span>pages_helper.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">PagesHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shopping_list</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span><span class="s2">&quot;user&quot;</span> <span class="o">=&gt;</span> <span class="n">user</span><span class="p">,</span> <span class="s2">&quot;list&quot;</span> <span class="o">=&gt;</span> <span class="n">shopping_list_items</span><span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">shopping_list_items</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Apple&#39;</span><span class="p">,</span> <span class="s2">&quot;quantity_needed&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Stoberry&#39;</span><span class="p">,</span> <span class="s2">&quot;quantity_needed&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="s2">&quot;name&quot;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Cherry&#39;</span><span class="p">,</span> <span class="s2">&quot;quantity_needed&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;3&quot;</span><span class="p">},</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The codes above gives you some sample data to play around with.
</p>




<p>
  Then modify your pages show view (<code>pp/views/pages/show.html.erb</code>) to look somethings like below:
</p>




<figure class='code'><figcaption><span>show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;&lt;</span><span class="sx">%= @page.user %&gt;&#39;s Personal Page&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;% template =</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="vi">@page</span><span class="o">.</span><span class="n">template</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;%= template.render(shopping_list(@page.user)).html_safe %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The codes above tells Rails to render your template using the Liquid Template Engine. 
</p>




<p>
  Finally, open up the show view for your home controller (<code>app/views/homes/show.html.erb</code>) and add in the code listed below:
</p>




<figure class='code'><figcaption><span>show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">User</span> <span class="no">Pages</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;ul&gt;</span>
</span><span class='line'><span class="sr">  &lt;% @pages.each do |page| %&gt;</span>
</span><span class='line'><span class="sr">    &lt;li&gt;&lt;%= link_to &quot;</span><span class="si">#{</span><span class="n">page</span><span class="o">.</span><span class="n">user</span><span class="si">}</span><span class="sr">&#39;s page&quot;, page_path(page) %&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you fire up a rails server and visit your development site, you&#8217;ll notice that you can browse each user&#8217;s pages and get a customized version of each one. 
</p>




<p>
  However, what if you want to use the Liquid templating engine as a replacement for erb itself? take it easy, first, create a new file in the lib folder called liquid_view.rb (<code>lib/liquid_view.rb</code>) and add in the codes listed below:
</p>




<figure class='code'><figcaption><span>liquid_view.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LiquidView</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">call</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>
</span><span class='line'>    <span class="s2">&quot;LiquidView.new(self).render(</span><span class="si">#{</span><span class="n">template</span><span class="o">.</span><span class="n">source</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">, local_assigns)&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@view</span> <span class="o">=</span> <span class="n">view</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">template</span><span class="p">,</span> <span class="n">local_assigns</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="vi">@view</span><span class="o">.</span><span class="n">controller</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;Content-Type&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;text/html; charset=utf-8&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assigns</span> <span class="o">=</span> <span class="vi">@view</span><span class="o">.</span><span class="n">assigns</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@view</span><span class="o">.</span><span class="n">content_for?</span><span class="p">(</span><span class="ss">:layout</span><span class="p">)</span>
</span><span class='line'>      <span class="n">assigns</span><span class="o">[</span><span class="s2">&quot;content_for_layout&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@view</span><span class="o">.</span><span class="n">content_for</span><span class="p">(</span><span class="ss">:layout</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">assigns</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">local_assigns</span><span class="o">.</span><span class="n">stringify_keys</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">controller</span> <span class="o">=</span> <span class="vi">@view</span><span class="o">.</span><span class="n">controller</span>
</span><span class='line'>    <span class="n">filters</span> <span class="o">=</span> <span class="k">if</span> <span class="n">controller</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:liquid_filters</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'>                <span class="n">controller</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:liquid_filters</span><span class="p">)</span>
</span><span class='line'>              <span class="k">elsif</span> <span class="n">controller</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:master_helper_module</span><span class="p">)</span>
</span><span class='line'>                <span class="o">[</span><span class="n">controller</span><span class="o">.</span><span class="n">master_helper_module</span><span class="o">]</span>
</span><span class='line'>              <span class="k">else</span>
</span><span class='line'>                <span class="o">[</span><span class="n">controller</span><span class="o">.</span><span class="n">_helpers</span><span class="o">]</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">liquid</span> <span class="o">=</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">template</span><span class="p">)</span>
</span><span class='line'>    <span class="n">liquid</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">assigns</span><span class="p">,</span> <span class="ss">:filters</span> <span class="o">=&gt;</span> <span class="n">filters</span><span class="p">,</span> <span class="ss">:registers</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:action_view</span> <span class="o">=&gt;</span> <span class="vi">@view</span><span class="p">,</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="vi">@view</span><span class="o">.</span><span class="n">controller</span><span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compilable?</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Create an initializer called liquid_template_handler (<code>config/initializers/liquid_template_handler.rb</code>) and add the code listed below:
</p>




<figure class='code'><figcaption><span>liquid_template_handler.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;liquid_view&#39;</span>
</span><span class='line'><span class="ss">ActionView</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_template_handler</span> <span class="ss">:liquid</span><span class="p">,</span> <span class="no">LiquidView</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Let restarting your Rails server you will be able to create actual views with the .liquid extension that uses the liquid templating engine.
</p>




<p>
  So far so good, That&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liquid Template Engine]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/21/liquid-template-engine/"/>
    <updated>2015-02-21T15:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/21/liquid-template-engine</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Liquid Template Engine" />
</p>




<p>
  Liquid is a templating engine that allows you to enable your users to quickly and easily customize your views at run-time while maintaining the safety, security, and integrity of your servers.
</p>




<p>
  <strong>Liquid Syntax</strong><br/>
  In liquid, there are two different types of markup.
</p>




<p>
  The first type of markup is output markup, is denoted by double sets of curly braces.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Hi</span> <span class="p">{{</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The second type of markup is tag markup, is typically used for logic and control structures such as loops.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="k">for</span> <span class="n">user</span> <span class="k">in</span> <span class="n">users</span> <span class="sx">%}</span>
</span><span class='line'><span class="sx">    &lt;li&gt;{{ user.name }</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/li&gt;</span>
</span><span class='line'><span class="sr">  {% endfor %}</span>
</span><span class='line'><span class="sr">&lt;/u</span><span class="n">l</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can do basic if statements as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s1">&#39;JingLong&#39;</span> <span class="sx">%}</span>
</span><span class='line'><span class="sx">  Hi JingLong!</span>
</span><span class='line'><span class="sx">{% elsif user.name == &#39;Bunlong&#39; %}</span>
</span><span class='line'>  <span class="no">Hey</span> <span class="no">Bunlong</span><span class="o">!</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">else</span> <span class="sx">%}</span>
</span><span class='line'><span class="sx">  Hello {{ user.name }</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>List of All of the Tags Available in Liquid</strong><br/>
</p>


<table>
<thead>
<tr>
<th>Tag </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>assign </td>
<td> Assigns some value to a variable.</td>
</tr>
<tr>
<td>capture </td>
<td> Block tag that captures text into a variable.</td>
</tr>
<tr>
<td>case </td>
<td> Block tag, its the standard case&hellip;when block.</td>
</tr>
<tr>
<td>comment </td>
<td> Block tag, comments out the text in the block.</td>
</tr>
<tr>
<td>cycle </td>
<td> Cycle is usually used within a loop to alternate between values, like colors or DOM classes.</td>
</tr>
<tr>
<td>for </td>
<td> For loop.</td>
</tr>
<tr>
<td>if </td>
<td> Standard if/else block.</td>
</tr>
<tr>
<td>include </td>
<td> Includes another template; useful for partials.</td>
</tr>
<tr>
<td>raw </td>
<td> Temporarily disable tag processing to avoid syntax conflicts.</td>
</tr>
<tr>
<td>unless </td>
<td> Mirror of if statement.</td>
</tr>
</tbody>
</table>


<p>
  <br/>
  So far so good, That’s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Difference Between Path and URL in Ruby on Rails?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/21/what-is-difference-between-path-and-url-in-ruby-on-rails/"/>
    <updated>2015-02-21T11:23:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/21/what-is-difference-between-path-and-url-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="What is Difference Between Path and URL in Ruby on Rails?" />
</p>




<p>
  Have you ever wondered what is difference between <code>_path</code> and <code>_url</code> in Ruby on Rails?
</p>




<p>
  For example <code>root_path</code> and <code>root_url</code>. As it turns out, <code>_path</code> only returns the url relative to your domain. 
</p>




<p>
  For instance, <code>root_path</code> returns <code>/</code> while <code>root_url</code> returns <code>http://mydomain.com/</code>.
</p>




<p>
  You should always use <code>_url</code> for redirects and <code>_path</code> for hyperlinks unless you have a good reason not to do so.
</p>




<p>
  So far so good, That&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stashing Codes Changes in Git]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/20/stashing-codes-changes-in-git/"/>
    <updated>2015-02-20T19:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/20/stashing-codes-changes-in-git</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Stashing Codes Changes in Git" />
</p>




<p>
  Using version control, is best to commit your code in small, discrete chunks rather than making large commits. However, What happens when you are working on a large change, and your boss comes to you and tells you they need an urgent bug fixed? With the git stash command you can quickly and easily store your code away and recall it for later use. Let’s run through this with me.
</p>




<p>
  <strong>Stash the Code</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Reapply the Changes You Sent to the Stash Type</strong><br/>
  What if you want to reapply your changes? Use <code>git stash apply</code> to reapply all the changes you stashed away with git stash.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>List All of the Stashes You&#8217;ve Made Type</strong><br/>
  Git stash supports stashing multiple times. To see a list of all the code you&#8217;ve stashed, use <code>git stash list</code>. The git stash list will show you a list of all the stashes you&#8217;ve made.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Stash Apply From the Earlier List</strong><br/>
  If the first stash is named stash@{1}, you can type <code>git stash apply stash@{1}</code> to apply the changes from that stash.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secrets.yml File in Ruby on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/20/secrets-dot-yml-file-in-ruby-on-rails/"/>
    <updated>2015-02-20T00:40:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/20/secrets-dot-yml-file-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Secrets.yml File in Ruby on Rails" />
</p>




<p>
  You maybe have noticed a file called <code>secrets.yml</code> in the config directory of a Ruby on Rails 4.1 project. This feature was added as part of Rails 4.1 in order to have a common storage location for the keys and credentials for various services. You can use the secrets.yml for everything from AWS credentials to your secret_key_base (the default in Rails 4.1).
</p>




<figure class='code'><figcaption><span>secrets.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="n">secret_key_base</span><span class="p">:</span> <span class="n">super_long_secret_key_for_development</span>
</span><span class='line'>  <span class="n">active_merchant_login</span><span class="p">:</span> <span class="mi">112233</span>
</span><span class='line'>  <span class="n">active_merchant_password</span><span class="p">:</span> <span class="n">super_secret_password</span>
</span><span class='line'>
</span><span class='line'><span class="nb">test</span><span class="p">:</span>
</span><span class='line'>  <span class="n">secret_key_base</span><span class="p">:</span> <span class="n">super_long_secret_key_for_test</span>
</span><span class='line'>  <span class="n">active_merchant_login</span><span class="p">:</span> <span class="mi">112233</span>
</span><span class='line'>  <span class="n">active_merchant_password</span><span class="p">:</span> <span class="n">super_secret_password</span>
</span><span class='line'>
</span><span class='line'><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="n">secret_key_base</span><span class="p">:</span> <span class="o">&lt;</span><span class="sx">%= ENV[&quot;SECRET_KEY_BASE&quot;] %&gt;</span>
</span><span class='line'><span class="sx">  active_merchant_login: &lt;%=</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;AM_LOGIN&quot;</span><span class="o">]</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  active_merchant_password: &lt;%= ENV[&quot;AM_PASSWORD&quot;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You have add this file to your <code>.gitignore</code> file to avoid accidently pushing your keys to git. You can also store your production keys in this file if you wish.
</p>




<p>
  To access the various keys in the secrets.yml file:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">secrets</span><span class="o">.</span><span class="n">key_name</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example: The following code will returns the merchant login.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">secrets</span><span class="o">.</span><span class="n">active_merchant_login</span> <span class="c1"># returns 112233 on development/test</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Model Change Tracking with ActiveModel::Dirty]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/19/ruby-on-rails-model-change-tracking-with-activemodel-dirty/"/>
    <updated>2015-02-19T09:09:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/19/ruby-on-rails-model-change-tracking-with-activemodel-dirty</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Ruby on Rails Model Change Tracking with ActiveModel::Dirty" />
</p>




<p>
  ActiveModel::Dirty is a library that is built into Ruby on Rails that allows you to quickly and easily track what attributes on a model have changed. This article will show you how to use it.
</p>




<p>
  <strong>Checking Whenever the Model Has Changed</strong><br/>
  Checking whether the model has changed using the <code>changed?</code> method:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed?</span>  <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you change an attribute on the model, the <code>changed?</code> method will returns true:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Mac Pro&quot;</span>
</span><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed?</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Tracking the Change</strong><br/>
  You can track what the change by using the <code>attr_change</code> method:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">name_change</span> <span class="c1"># =&gt; [&quot;Mac Pro&quot;, &quot;IBM ThinkPad&quot;]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can get a list of all of the changed attributes on the model as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed</span> <span class="c1"># =&gt; [&quot;name&quot;]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can get the original value using the <code>attr_was</code> method as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">name_was</span> <span class="c1">#=&gt; &quot;IBM ThinkPad&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can view a list of all of the original values using the <code>changed_attributes</code> method as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed_attributes</span> <span class="c1"># =&gt; {&quot;name&quot; =&gt; &quot;IBM ThinkPad&quot;}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can list all of the changes on the model using the <code>changes</code> method as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changes</span> <span class="c1"># =&gt; {&quot;name&quot; =&gt; [&quot;IBM ThinkPad&quot;, &quot;Mac Pro&quot;]}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can view changes that were made even after the model was saved using the <code>previous_changes</code> method as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">pre</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;prettyprint&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">product</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="n">product</span><span class="o">.</span><span class="n">changes</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'>  <span class="n">product</span><span class="o">.</span><span class="n">previous_changes</span> <span class="c1"># =&gt; {&quot;name&quot; =&gt; [&quot;IBM ThinkPad&quot;, &quot;Mac Pro&quot;]}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can view changes that were made even after the model was saved using the <code>previous_changes</code> method as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">pre</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;prettyprint&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">product</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="n">product</span><span class="o">.</span><span class="n">changes</span> <span class="c1"># =&gt; {}</span>
</span><span class='line'>  <span class="n">product</span><span class="o">.</span><span class="n">previous_changes</span> <span class="c1"># =&gt; {&quot;name&quot; =&gt; [&quot;IBM ThinkPad&quot;, &quot;Mac Pro&quot;]}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/pre&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can reset the model using the reload! method as well:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">reload!</span>
</span><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">previous_changes</span> <span class="c1"># =&gt; {}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, for more detail <a href="http://api.rubyonrails.org/classes/ActiveModel/Dirty.html" target="_blank">Ruby on Rails API</a>. That&#8217;s it! See ya!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Download File via FTP]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/18/ruby-download-file-via-ftp/"/>
    <updated>2015-02-18T23:24:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/18/ruby-download-file-via-ftp</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Ruby Download File via FTP" />
</p>




<p>
  Download files from FTP server is quite easy using Ruby.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/ftp&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ftp</span> <span class="o">=</span> <span class="ss">Net</span><span class="p">:</span><span class="ss">:FTP</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s2">&quot;your_host_name.com&quot;</span><span class="p">,</span> <span class="mi">21</span><span class="p">)</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">login</span><span class="p">(</span><span class="s2">&quot;your_username&quot;</span><span class="p">,</span><span class="s2">&quot;your_password&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="s2">&quot;/your_directory&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">passive</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">getbinaryfile</span><span class="p">(</span><span class="s2">&quot;your_source_file&quot;</span><span class="p">,</span> <span class="s2">&quot;your_dest_file&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Parsing JSON]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/18/ruby-on-rails-parsing-json/"/>
    <updated>2015-02-18T22:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/18/ruby-on-rails-parsing-json</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Parsing JSON" />
</p>




<p>
  Sometime you have to deal with parsing out JSON. Luckily, this is very easy in any recent version of Ruby. Given the string below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;products&quot;</span><span class="p">:</span> <span class="o">[</span><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Mac Pro&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;price&quot;</span><span class="p">:</span> <span class="s2">&quot;2500&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can easily parse this string by using:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In the above code, it will return a ruby hash that mimics the JSON structure. This means that you can do stuff like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span><span class="o">[</span><span class="s2">&quot;products&quot;</span><span class="o">][</span><span class="mi">0</span><span class="o">][</span><span class="s2">&quot;name&quot;</span><span class="o">]</span> <span class="c1"># =&gt; &quot;Mac Pro&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, that&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What does Gemfile.lock File use for in Ruby on Rails?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/18/what-does-gemfile-dot-lock-file-use-for-in-ruby-on-rails/"/>
    <updated>2015-02-18T20:35:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/18/what-does-gemfile-dot-lock-file-use-for-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="What does Gemfile.lock File use for in Ruby on Rails?" />
</p>




<p>
  You have noticed a file called Gemfile.lock in your Ruby on Rails application and have wondered what is it, how it works. The file may have even given you trouble when you attempted to push changes to source control. In this article I will discuss what exactly this Gemfile.lock file is and how it helps your Ruby on Rails application.
</p>




<p>
  <strong>Gemfile.lock</strong><br/>
  If you actually opened the Gemfile.lock file you probably saw a bunch of text as below:
</p>




<figure class='code'><figcaption><span>Gemfile.lock </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GEM</span>
</span><span class='line'>  <span class="ss">remote</span><span class="p">:</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">rubygems</span><span class="o">.</span><span class="n">org</span><span class="o">/</span>
</span><span class='line'>  <span class="ss">specs</span><span class="p">:</span>
</span><span class='line'>    <span class="n">actionmailer</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionpack</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mail</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">actionpack</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">builder</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">erubis</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span><span class="o">-</span><span class="nb">test</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">activemodel</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">builder</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">activenavbar</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">activerecord</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activemodel</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activerecord</span><span class="o">-</span><span class="n">deprecated_finders</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">arel</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">activerecord</span><span class="o">-</span><span class="n">deprecated_finders</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">activesupport</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">i18n</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="p">,</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="n">minitest</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">multi_json</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="n">thread_safe</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">tzinfo</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">37</span><span class="p">)</span>
</span><span class='line'>    <span class="n">arel</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">atomic</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bootstrap</span><span class="o">-</span><span class="n">sass</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sass</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">builder</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">capybara</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mime</span><span class="o">-</span><span class="n">types</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>      <span class="n">nokogiri</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span><span class="o">-</span><span class="nb">test</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="n">xpath</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">coderay</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">coffee</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">coffee</span><span class="o">-</span><span class="n">script</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">coffee</span><span class="o">-</span><span class="n">script</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">coffee</span><span class="o">-</span><span class="n">script</span><span class="o">-</span><span class="n">source</span>
</span><span class='line'>      <span class="n">execjs</span>
</span><span class='line'>    <span class="n">coffee</span><span class="o">-</span><span class="n">script</span><span class="o">-</span><span class="n">source</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">columnize</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="n">database_cleaner</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">debugger</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>      <span class="n">columnize</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">debugger</span><span class="o">-</span><span class="n">linecache</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">debugger</span><span class="o">-</span><span class="n">ruby_core_source</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">debugger</span><span class="o">-</span><span class="n">linecache</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">debugger</span><span class="o">-</span><span class="n">ruby_core_source</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">diff</span><span class="o">-</span><span class="n">lcs</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">erubis</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">execjs</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">factory_girl</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">factory_girl_rails</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">factory_girl</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">haml</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="n">haml</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionpack</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">haml</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">hike</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">i18n</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>    <span class="n">jbuilder</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">multi_json</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">jquery</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">thor</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">14</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">json</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mail</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mime</span><span class="o">-</span><span class="n">types</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>      <span class="n">treetop</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="n">method_source</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mime</span><span class="o">-</span><span class="n">types</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">25</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mini_portile</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">minitest</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">multi_json</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mysql2</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>    <span class="n">nokogiri</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">mini_portile</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">olive</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">polyglot</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pry</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">12</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>      <span class="n">coderay</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">method_source</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>      <span class="n">slop</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pry</span><span class="o">-</span><span class="n">debugger</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">debugger</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="n">pry</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">quiet_assets</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rack</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rack</span><span class="o">-</span><span class="nb">test</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rails</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionmailer</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionpack</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activerecord</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">bundler</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sprockets</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">railties</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionpack</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rake</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>      <span class="n">thor</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">18</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rake</span> <span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rdoc</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">json</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rspec</span><span class="o">-</span><span class="n">core</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rspec</span><span class="o">-</span><span class="n">expectations</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>      <span class="n">diff</span><span class="o">-</span><span class="n">lcs</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rspec</span><span class="o">-</span><span class="n">mocks</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="n">rspec</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionpack</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activemodel</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rspec</span><span class="o">-</span><span class="n">core</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rspec</span><span class="o">-</span><span class="n">expectations</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rspec</span><span class="o">-</span><span class="n">mocks</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sass</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sass</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">railties</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sass</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sprockets</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">8</span><span class="p">,</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">.</span><span class="mi">11</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sprockets</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sdoc</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">json</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rdoc</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">shoulda</span><span class="o">-</span><span class="n">matchers</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">slop</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sprockets</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">11</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">hike</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">multi_json</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">rack</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">tilt</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="p">,</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">sprockets</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">actionpack</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">activesupport</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">sprockets</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thor</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">18</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">thread_safe</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">atomic</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">7</span><span class="p">,</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">tilt</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">treetop</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>      <span class="n">polyglot</span>
</span><span class='line'>      <span class="n">polyglot</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">turbolinks</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">coffee</span><span class="o">-</span><span class="n">rails</span>
</span><span class='line'>    <span class="n">tzinfo</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">39</span><span class="p">)</span>
</span><span class='line'>    <span class="n">uglifier</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">execjs</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">json</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">xpath</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">nokogiri</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">PLATFORMS</span>
</span><span class='line'>  <span class="n">ruby</span>
</span><span class='line'>
</span><span class='line'><span class="no">DEPENDENCIES</span>
</span><span class='line'>  <span class="n">activenavbar</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">bootstrap</span><span class="o">-</span><span class="n">sass</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">capybara</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">coffee</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">database_cleaner</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">factory_girl_rails</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">haml</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jbuilder</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">jquery</span><span class="o">-</span><span class="n">rails</span>
</span><span class='line'>  <span class="n">json</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">mysql2</span>
</span><span class='line'>  <span class="n">olive</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">pry</span>
</span><span class='line'>  <span class="n">pry</span><span class="o">-</span><span class="n">debugger</span>
</span><span class='line'>  <span class="n">quiet_assets</span>
</span><span class='line'>  <span class="n">rails</span> <span class="p">(</span><span class="o">=</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rspec</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">14</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sass</span><span class="o">-</span><span class="n">rails</span> <span class="p">(</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sdoc</span>
</span><span class='line'>  <span class="n">shoulda</span><span class="o">-</span><span class="n">matchers</span>
</span><span class='line'>  <span class="n">turbolinks</span>
</span><span class='line'>  <span class="n">uglifier</span> <span class="p">(</span><span class="o">&gt;=</span> <span class="mi">1</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The Gemfile.lock file stores a complete snapshot of every version of every gem your Ruby on Rails application uses. The reason for this is simple. Let&#8217;s say you are using Rails 4.1.6 and Rails 5.0 comes out. You don&#8217;t want this new version to be pushed to your application during the next update. Why? You developed your application using the old version, and the new version may not be compatible with your code. That is why it is also important to check your Gemfile.lock into source control with the rest of your application.
</p>




<p>
  The Gemfile.lock file not only stores exact version information, but bundler USES that version information to rebuild the snapshot on production. If you take a look at your Gemfile (not Gemfile.lock) for example you will see the following line:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Bundler knows that you used version 4.0.1 during development. When this file is pushed to production and you run a bundle install &#8211;deployment, bundler will recreate a snapshot of all of the gems that you were using on your development machine.
</p>




<p>
  When does this file get updated? Any time you add a new gem to your gemfile (and run a bundle install) or type bundle update [gem name] your Gemfile.lock will get updated. If you attempt to update the version of a Gem in your Gemfile, bundler will warn you to do a bundle update the next time you try to run a bundle install.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">You</span> <span class="n">have</span> <span class="ss">requested</span><span class="p">:</span>
</span><span class='line'>  <span class="n">coffee</span><span class="o">-</span><span class="n">rails</span> <span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>
</span><span class='line'><span class="no">The</span> <span class="n">bundle</span> <span class="n">currently</span> <span class="n">has</span> <span class="n">coffee</span><span class="o">-</span><span class="n">rails</span> <span class="n">locked</span> <span class="n">at</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span>
</span><span class='line'><span class="no">Try</span> <span class="n">running</span> <span class="s1">&#39;bundle update coffee-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In this case, you would be unable to proceed until you run bundle update coffee-rails, which would then update your Gemfile.lock to include the new version of coffee-rails. This is also why it&#8217;s disastrous to run a bundle update without specifying a gem. Bundle update rebuilds the entire Gemfile.lock file from scratch, blowing away all of the old versions and replacing them with the latest ones allowed by the Gemfile.
</p>




<p>
  So far so good, the Gemfile.lock file is designed to save headache and frustration when deploying your application both across development machines as well as to production. It&#8217;s always a good idea to make sure that you check this file into source control and be aware of how it works. That&#8217;s it! See ya!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails with Endless Scrolling]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/12/ruby-on-rails-with-endless-scrolling/"/>
    <updated>2015-02-12T23:20:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/12/ruby-on-rails-with-endless-scrolling</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails with Endless Scrolling" />
</p>




<p>
  Endless scrolling allows a website to let users avoid having to click page links or pagination in order to load additional pages of content. It is used by a number of sites such as Pinterest in order to enhanced the user experience. This article will show you how to implement endless scrolling in your Rails application. Let’s run through this with me.
</p>




<p>
  <strong>Create Rails Project</strong><br/>
  To create a Rails project; open up your terminal and type commands below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">endless_scrolling</span> <span class="o">-</span><span class="n">d</span> <span class="n">mysql</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Setting up</strong><br/>
  Ruby on Rails endless scrolling uses the will_paginate gem to manage paging. This has a couple of advantages.
</p>




<p>
  First, if your endless scrolling code doesn&#8217;t work properly or is disabled, the pagination links themselves will still be present and allow the user to page.
</p>




<p>
  Second, the will_paginate gem provides us with the pagination functionality itself so that we do not need to reinvent the wheel.
</p>




<p>
  To get started, add the will_paginate gem to your <code>Gemfile</code> file.
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.7&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then run a <code>bundle install</code> to install the gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  we will create a simple Post model with the fields title, and body. In addition, we will create a simple Posts controller with an index method. Run the commands below to create these items:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Post</span> <span class="n">title</span> <span class="ss">body</span><span class="p">:</span><span class="n">text</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">Posts</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then open up your routes (<code>config/routes.rb</code>) file and modify it so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;posts#index&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then we need some seed data to play with. Open up your seeds.rb file and add in the code listed below. This code will create 100 posts for us to play with:
</p>




<figure class='code'><figcaption><span>seeds.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Lipsum Post </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="sx">%{</span>
</span><span class='line'><span class="sx">    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In feugiat purus dapibus fermentum sagittis. Fusce in tempus felis. Phasellus a erat ut lorem lacinia bibendum. Vivamus viverra facilisis neque, in scelerisque urna pharetra vel. Donec a est mauris. Integer eget metus quis eros egestas elementum. Integer bibendum risus hendrerit dapibus tempor. Fusce placerat in orci vitae tincidunt.</span>
</span><span class='line'><span class="sx">  }</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then run rake db:seed to create the seed data:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then open up your Posts controller (<code>app/controllers/posts_controller.rb</code>) and modify it so that it looks like the code listed below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">,</span> <span class="ss">:per_page</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now modify the index view for your Posts controller so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>posts_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">paginate</span><span class="p">(</span><span class="ss">:page</span> <span class="o">=&gt;</span> <span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">,</span> <span class="ss">:per_page</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then modify the index (<code>app/views/posts/index.html.erb</code>) view for your Posts controller so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;posts&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Posts</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= render @posts %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;%=</span> <span class="n">will_paginate</span> <span class="vi">@posts</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then let&#8217;s create the post partial. Create a file called _post.html.erb (<code>app/views/posts/_post.html.erb</code>) for your Posts controller and add in the code listed below:
</p>




<figure class='code'><figcaption><span>_post.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;post&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;&lt;</span><span class="sx">%= post.title %&gt;&lt;/h2&gt;</span>
</span><span class='line'><span class="sx">  &lt;p&gt;&lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you were to start a rails server at this point, you&#8217;d see a typical paginated list of posts. Now it&#8217;s time to add in the javascript that will make endless scrolling work. Open up your application.js (<code>app/assets/javascripts/application.js</code>) file and add in the code listed below:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">document</span><span class="p">)</span><span class="o">.</span><span class="n">ready</span><span class="p">(</span><span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="err">$</span><span class="p">(</span><span class="s1">&#39;.pagination&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">length</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">$</span><span class="p">(</span><span class="n">window</span><span class="p">)</span><span class="o">.</span><span class="n">scroll</span><span class="p">(</span><span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">url</span> <span class="o">=</span> <span class="err">$</span><span class="p">(</span><span class="s1">&#39;.pagination .next_page&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">url</span> <span class="o">&amp;&amp;</span> <span class="err">$</span><span class="p">(</span><span class="n">window</span><span class="p">)</span><span class="o">.</span><span class="n">scrollTop</span><span class="p">()</span> <span class="o">&gt;</span> <span class="err">$</span><span class="p">(</span><span class="n">document</span><span class="p">)</span><span class="o">.</span><span class="n">height</span><span class="p">()</span> <span class="o">-</span> <span class="err">$</span><span class="p">(</span><span class="n">window</span><span class="p">)</span><span class="o">.</span><span class="n">height</span><span class="p">()</span> <span class="o">-</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">$</span><span class="p">(</span><span class="s1">&#39;.pagination&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="s2">&quot;Please Wait...&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="vg">$.</span><span class="n">getScript</span><span class="p">(</span><span class="n">url</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">$</span><span class="p">(</span><span class="n">window</span><span class="p">)</span><span class="o">.</span><span class="n">scroll</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then create a file called index.js.erb (<code>app/views/posts/index.js.erb</code>) for your Posts controller and add in the code listed below:
</p>




<figure class='code'><figcaption><span>index.js.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="s1">&#39;#posts&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;&lt;%= escape_javascript render(@posts) %&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="s1">&#39;.pagination&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replaceWith</span><span class="p">(</span><span class="s1">&#39;&lt;%= escape_javascript will_paginate(@posts) %&gt;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The code works by watching the window&#8217;s scroll event. When the user scrolls past the specified threshold, more posts are loaded using AJAX. That&#8217;s it, thank you!. See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Generate Random Data]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/11/ruby-on-rails-generate-random-data/"/>
    <updated>2015-02-11T19:21:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/11/ruby-on-rails-generate-random-data</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Generate Random Data" />
</p>




<p>
  Sometimes we need to programmatically generate text in Ruby on Rails. We may not have any data available to play with or we may need text in order to mock up the user interface. In this article I will cover 2 different methods of generating random text. Let’s run through this with me.
</p>




<p>
  <strong>Random Letters</strong><br/>
  If you just need fill text, you can add this helper to your application helper (<code>app/helpers/application_helper.rb</code>):
</p>




<figure class='code'><figcaption><span>application_helper.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">random_string</span><span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="n">include_uppercase</span> <span class="o">=</span> <span class="kp">true</span><span class="p">,</span> <span class="n">include_lowercase</span> <span class="o">=</span> <span class="kp">true</span><span class="p">,</span> <span class="n">include_numbers</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="n">l</span><span class="o">.</span><span class="n">push</span> <span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;z&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">include_uppercase</span>
</span><span class='line'>    <span class="n">l</span><span class="o">.</span><span class="n">push</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">include_lowercase</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">l</span><span class="o">.</span><span class="n">push</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span> <span class="k">if</span> <span class="n">include_numbers</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="n">l</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_a</span> <span class="p">}</span><span class="o">.</span><span class="n">flatten</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">l</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The helper has 1 required argument is length, which determines the length of the string. To generate a random string of 200 characters, call the helper like below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">random_string</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Forgery Gem</strong><br/>
  The <a href="https://github.com/sevenwire/forgery" target="_blank">forgery</a> gem provides a great way to generate random data. Not only can forgery generate random words (based off lorem ipsum), but it can also generate random email addresses, and much more. To use forgery, just include the forgery gem in your gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;forgery&#39;</span><span class="p">,</span> <span class="s1">&#39;0.6.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then run <code>bundle install</code> to install the Gem.
</p>




<p>
  After installing the Gem, you are ready to go to generate words:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="no">Forgery</span><span class="p">(</span><span class="ss">:lorem_ipsum</span><span class="p">)</span><span class="o">.</span><span class="n">words</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  To generate a random email address:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="no">Forgery</span><span class="p">(</span><span class="s1">&#39;internet&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">email_address</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, I hope all you guys enjoy it. See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Uploads Multiple Files with DropzoneJS and Paperclip Gem]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/10/ruby-on-rails-uploads-multiple-files-with-dropzonejs-and-paperclip-gem/"/>
    <updated>2015-02-10T21:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/10/ruby-on-rails-uploads-multiple-files-with-dropzonejs-and-paperclip-gem</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Uploads Multiple Files with DropzoneJS and Paperclip Gem" />
</p>




<p>
  <a href="http://www.dropzonejs.com/" target="_blank">DropzoneJS</a> is a javascript library for allowing multiple file uploads via AJAX. It features drag and drop support, folder support, and much more on browsers that support these features.
</p>




<p>
  In this article I will show you how to implement multiple images files uploads directly to paperclip using DropzoneJS. Let’s run through this with me.
</p>




<p>
  <strong>Create Rails Project</strong><br/>
  To create a Rails project; open up your terminal and type commands below: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">dropzone</span> <span class="o">-</span><span class="n">d</span> <span class="n">mysql</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Add Gems</strong><br/>
  We will add two gems to our Gemfile. <code>dropzonejs-rails</code> gem is a helper gem that integrates DropzoneJS into our Rails app. <code>paperclip</code> for processing image uploads.
</p>




<p>
  Open up your <code>Gemfile</code> and add in the lines listed below:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;paperclip&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 4.2&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;dropzonejs-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now let&#8217;s run a bundle install to install the gems:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Create a Image Model</strong><br/>
  Now we will create a model to store our image information for Paperclip. Run the command below to create the image model and migrate the database:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="n">image</span> <span class="ss">avatar</span><span class="p">:</span><span class="n">attachment</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then add some code to Image model to tell paperclip we want to have an attachment attached. Open up your image model (<code>app/models/image.rb:</code>) and add the code listed below:
</p>




<figure class='code'><figcaption><span>image.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Image</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_attached_file</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="ss">:styles</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:medium</span> <span class="o">=&gt;</span> <span class="s2">&quot;300x300&gt;&quot;</span><span class="p">,</span> <span class="ss">:thumb</span> <span class="o">=&gt;</span> <span class="s2">&quot;100x100&gt;&quot;</span> <span class="p">},</span> <span class="ss">:default_url</span> <span class="o">=&gt;</span> <span class="s2">&quot;/images/:style/missing.png&quot;</span>
</span><span class='line'>  <span class="n">validates_attachment_content_type</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="ss">:content_type</span> <span class="o">=&gt;</span> <span class="sr">/\Aimage\/.*\Z/</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Create a Images Controller</strong><br/>
  Then create an Images controller which will be used to display and allow the upload of our images. Run the command below to create this controller:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">images</span> <span class="n">index</span> <span class="n">create</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then update our routes file to set up the routes for our images controller. Open up the routes file (<code>config/routes.rb</code>) and modify it:
</p>




<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:images</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;images#index&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then modify our Images controller to add logic to handle the file upload as well as listing each of the images. Open up the Images controller (<code>app/controllers/images_controller.rb</code>) and modify it:
</p>




<figure class='code'><figcaption><span>images_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ImagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@images</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="vi">@image</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@image</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">image_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@image</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span> <span class="ss">message</span><span class="p">:</span> <span class="s2">&quot;success&quot;</span><span class="p">,</span> <span class="ss">fileID</span><span class="p">:</span> <span class="vi">@image</span><span class="o">.</span><span class="n">id</span> <span class="p">},</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span> <span class="ss">error</span><span class="p">:</span> <span class="vi">@image</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)},</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">image_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:image</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:avatar</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  DropzoneJS expects a json return, so the create method returns a JSON success or failure based on whether the image was uploaded successfully or not.
</p>




<p>
  Then add Bootstrap to our application. Open up your application layout (<code>app/views/layouts/application.html.erb</code>)and modify it:
</p>




<figure class='code'><figcaption><span>application.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">DropzoneJS</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= javascript_include_tag &#39;application&#39;, &#39;data-turbolinks-track&#39; =&gt; true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= stylesheet_link_tag    &#39;http:/</span><span class="o">/</span><span class="n">yandex</span><span class="o">.</span><span class="n">st</span><span class="o">/</span><span class="n">bootstrap</span><span class="o">/</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">css</span><span class="o">/</span><span class="n">bootstrap</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">css</span><span class="s1">&#39;, media: &#39;</span><span class="n">all</span><span class="s1">&#39;, &#39;</span><span class="n">data</span><span class="o">-</span><span class="n">turbolinks</span><span class="o">-</span><span class="n">track</span><span class="s1">&#39; =&gt; true %&gt;</span>
</span><span class='line'><span class="s1">  &lt;%= javascript_include_tag &#39;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">yandex</span><span class="o">.</span><span class="n">st</span><span class="o">/</span><span class="n">bootstrap</span><span class="o">/</span><span class="mi">3</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">js</span><span class="o">/</span><span class="n">bootstrap</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">js</span><span class="s1">&#39;, &#39;</span><span class="n">data</span><span class="o">-</span><span class="n">turbolinks</span><span class="o">-</span><span class="n">track</span><span class="err">&#39;</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= csrf_meta_tags %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/head&gt;</span>
</span><span class='line'><span class="sr">&lt;body&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= yield %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, then create our views. First let&#8217;s create the index view (<code>app/views/images/index.html.erb</code>). Open up your index view for the images controller and modify it:
</p>




<figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">My</span> <span class="no">Images</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;%= form_for(Image.new, html: { multipart: true, class: &quot;dropzone&quot;}) do |f|  %&gt;</span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;fallback&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= f.file_field :avatar %&gt;&lt;br&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= f.submit &quot;Upload my Avatar&quot; %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;div class=&quot;index&quot;&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">render</span> <span class="s2">&quot;index&quot;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then we need to add some JavaScript to tell Rails how to handle the remote ajax file processing that we will do using dropzone. Create a view called <code>app/views/images/index.js.erb</code> for your images controller and add the code listed below:
</p>




<figure class='code'><figcaption><span>index.js.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="s2">&quot;.index&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">html</span><span class="p">(</span><span class="s2">&quot;&lt;%= escape_javascript(render(&#39;index&#39;)) %&gt;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then create the partial that we reference in the previous code. Create a new partial called <code>app/views/images/_index.html.erb</code> for your images controller and add the code listed below:
</p>




<figure class='code'><figcaption><span>_index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @images.each </span><span class="k">do</span> <span class="o">|</span><span class="n">image</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=&quot;img-thumbnail&quot;&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">image_tag</span> <span class="n">image</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="ss">:thumb</span><span class="p">),</span> <span class="ss">alt</span><span class="p">:</span> <span class="n">image</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">url</span><span class="p">(</span><span class="ss">:thumb</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then modify our application.css and add the dropzone css require. Open up your <code>app/assets/stylesheets/application.css</code> file and modify it:
</p>




<figure class='code'><figcaption><span>application.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/*</span>
</span><span class='line'><span class="sr"> *= require_tree .</span>
</span><span class='line'><span class="sr"> *= require dropzone/</span><span class="n">dropzone</span>
</span><span class='line'> <span class="o">*=</span> <span class="n">require_self</span>
</span><span class='line'> <span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then modify our application.js and add the dropzone js require. Open up your <code>app/assets/javascripts/application.js</code> file and modify it:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/= require dropzone</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then add a bit more JavaScript to finish things up. Open up your <code>app/assets/javascripts/images.js</code> file and add in the code listed below:
</p>




<figure class='code'><figcaption><span>images.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">document</span><span class="p">)</span><span class="o">.</span><span class="n">ready</span><span class="p">(</span><span class="n">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="sr">//</span> <span class="n">disable</span> <span class="n">auto</span> <span class="n">discover</span>
</span><span class='line'>  <span class="no">Dropzone</span><span class="o">.</span><span class="n">autoDiscover</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">var</span> <span class="n">dropzone</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">Dropzone</span> <span class="p">(</span><span class="s2">&quot;.dropzone&quot;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">maxFilesize</span><span class="p">:</span> <span class="mi">256</span><span class="p">,</span> <span class="sr">//</span> <span class="n">set</span> <span class="n">the</span> <span class="n">maximum</span> <span class="n">file</span> <span class="n">size</span> <span class="n">to</span> <span class="mi">256</span> <span class="no">MB</span>
</span><span class='line'>    <span class="ss">paramName</span><span class="p">:</span> <span class="s2">&quot;image[avatar]&quot;</span><span class="p">,</span> <span class="sr">//</span> <span class="no">Rails</span> <span class="n">expects</span> <span class="n">the</span> <span class="n">file</span> <span class="n">upload</span> <span class="n">to</span> <span class="n">be</span> <span class="n">something</span> <span class="n">like</span> <span class="n">model</span><span class="o">[</span><span class="n">field_name</span><span class="o">]</span>
</span><span class='line'>    <span class="ss">addRemoveLinks</span><span class="p">:</span> <span class="kp">false</span> <span class="sr">//</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">show</span> <span class="n">remove</span> <span class="n">links</span> <span class="n">on</span> <span class="n">dropzone</span> <span class="n">itself</span><span class="o">.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">dropzone</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;success&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">file</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">this</span><span class="o">.</span><span class="n">removeFile</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
</span><span class='line'>    <span class="vg">$.</span><span class="n">getScript</span><span class="p">(</span><span class="s2">&quot;/images&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, if you start your Rails server and navigate to http://localhost:3000 you will notice that you can drag and drop images onto the app. On certain browsers, such as Google Chrome, you can even drag and drop one or more folders of images onto the dropzone placeholder and have them upload. In addition you can also click the dropzone and select a file via the file selection screen. That&#8217;s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Git with Ruby on Rails Project]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/09/use-git-with-ruby-on-rails-project/"/>
    <updated>2015-02-09T23:31:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/09/use-git-with-ruby-on-rails-project</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Install Git on Linux/Ubuntu" />
</p>




<p>
  Well, in the previous article I&#8217;ve shown you &#8221;<a href="http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu/">Install Git on Linux/Ubuntu</a>&#8221;, and in this article I want to show you &#8220;Create Ruby on Rails project and using Git&#8221;. Let’s run through this with me.
</p>




<p>
  <strong>Create Ruby on Rails Project</strong><br/>
  Type command below to create a Rails project:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">todo</span> <span class="o">-</span><span class="n">d</span> <span class="n">mysql</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Initialize Git</strong><br/>
  Type command below to initialize git:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="n">todo</span>
</span><span class='line'><span class="n">git</span> <span class="n">init</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Ignore File/Dir</strong><br/>
  Git uses file <code>.gitignore</code> to determine which files and directories to ignore, before you make a commit.
</p>




<p>
  <code>.gitignore</code> file should be committed into your repository, in order to share the ignore rules with any other users that clone the repository.
</p>




<p>
  Type command below to create a <code>.gitignore</code> file:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="o">.</span><span class="n">gitignore</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then type file/dir or content that you want git to ignore:
</p>




<figure class='code'><figcaption><span>.gitignore </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">log</span><span class="o">/*.</span><span class="n">log</span>
</span><span class='line'><span class="n">tmp</span><span class="o">/**/*</span>
</span><span class='line'><span class="n">config</span><span class="o">/</span><span class="n">database</span><span class="o">.</span><span class="n">yml</span>
</span><span class='line'><span class="n">db</span><span class="o">/*.</span><span class="n">mysql</span>
</span><span class='line'><span class="sr">/public/</span><span class="n">assets</span><span class="o">/**</span>
</span><span class='line'><span class="sr">/vendor/</span><span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to add Rails project into git:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to commit into git:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;initialize income&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And type command below to push to the repository branch master:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Git on Linux/Ubuntu]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu/"/>
    <updated>2015-02-09T22:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Install Git on Linux/Ubuntu" />
</p>




<p>
  <strong>Overview</strong><br/>
  Git is a free and open source distributed version control system with an emphasis on speed, data integrity, and support for distributed, non-linear workflows.
</p>




<p>
  <strong>Installation</strong><br/>
  Use command line below to update local package index and then install the packages:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">build</span><span class="o">-</span><span class="n">essential</span> <span class="n">libssl</span><span class="o">-</span><span class="n">dev</span> <span class="n">libcurl4</span><span class="o">-</span><span class="n">gnutls</span><span class="o">-</span><span class="n">dev</span> <span class="n">libexpat1</span><span class="o">-</span><span class="n">dev</span> <span class="n">gettext</span> <span class="n">unzip</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Setting Up Git</strong><br/>
  Now you have git installed, you need to do a few things so that the commit messages that will be generated for you will contain your correct information.
</p>




<p>
  You need to provide your name and email address by using <code>git config</code> because git embeds this information into each commit you do. You can go ahead and add this information by typing:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="s2">&quot;Your Name&quot;</span>
</span><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="s2">&quot;youremail@domain.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You can see all of the configuration items that you have been set by typing command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">list</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What you will see:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="o">=</span><span class="no">Your</span> <span class="no">Name</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="o">=</span><span class="n">youremail</span><span class="vi">@domain</span><span class="o">.</span><span class="n">com</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The information is stored in the configuration file, which you can optionally edit by hand with your text editor like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="o">~</span><span class="sr">/.gitconfig</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">user</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="no">Your</span> <span class="no">Name</span>
</span><span class='line'>  <span class="n">email</span> <span class="o">=</span> <span class="n">youremail</span><span class="vi">@domain</span><span class="o">.</span><span class="n">com</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, now you should have git installed and ready to use on your system. To learn more about how to use Git, check out these: <a href="https://try.github.io/levels/1/challenges/1" target="_blank">www.try.github.io</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails connect to Multiple Databases And Migrations]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/07/ruby-on-rails-connect-to-multiple-databases-and-migrations/"/>
    <updated>2015-02-07T23:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/07/ruby-on-rails-connect-to-multiple-databases-and-migrations</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails connect to Multiple Databases And Migrations" />
</p>




<p>
  Ruby on Rails connect to Multiple Databases and using ActiveRecord with multiple databases, it’s really simple take it easy. Let’s run through this.
</p>




<p>
  <strong>Rake Tasks</strong><br/>
   Well, I want to handle migrations for two databases, so I need two separate Rake tasks to handle that:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Migrate the database through scripts in db/migrate directory.&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:migrate</span> <span class="k">do</span>
</span><span class='line'>    <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s2">&quot;db:migrate_db1&quot;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>    <span class="ss">Rake</span><span class="p">:</span><span class="ss">:Task</span><span class="o">[</span><span class="s2">&quot;db:migrate_db2&quot;</span><span class="o">].</span><span class="n">invoke</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:migrate_db1</span> <span class="k">do</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span> <span class="no">DB1_CONF</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migrator</span><span class="o">.</span><span class="n">migrate</span><span class="p">(</span><span class="s2">&quot;db/migrate/db1/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:migrate_db2</span> <span class="k">do</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span> <span class="no">DB2_CONF</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migrator</span><span class="o">.</span><span class="n">migrate</span><span class="p">(</span><span class="s2">&quot;db/migrate/db2/&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  My first task is <code>db:migrate</code> that delegates out to <code>db:migrate_db1</code> & <code>db:migrate_db2</code>.
</p>




<p>
  Each of those establish a connection to the database and then runs the migrations from their own separate folders. This allows you to store migrations in separate folders so you can easily manage them.
</p>




<p>
  The migrations are exactly the same as normal.
</p>




<p>
  <strong>Database Connections</strong><br/>
  In order to get those migrations to work, I need to configure the database connections. I&#8217;m going to define everything in the <code>database.yml</code> just like normal, but with a different naming convention:
</p>




<figure class='code'><figcaption><span>database.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">defaults</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">defaults</span>
</span><span class='line'>  <span class="ss">username</span><span class="p">:</span> <span class="n">root</span>
</span><span class='line'>  <span class="ss">password</span><span class="p">:</span> <span class="mi">1234567</span>
</span><span class='line'>  <span class="ss">adapter</span><span class="p">:</span> <span class="n">mysql2</span>
</span><span class='line'>  <span class="ss">encoding</span><span class="p">:</span> <span class="n">utf8</span>
</span><span class='line'>  <span class="ss">collation</span><span class="p">:</span> <span class="n">utf8_unicode_ci</span>
</span><span class='line'>
</span><span class='line'><span class="ss">db1</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">development</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db1_development</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db1_test</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">staging</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db1_staging</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">production</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db1_production</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'><span class="ss">db2</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">development</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db2_development</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db2_test</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">staging</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db2_staging</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">production</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">database</span><span class="p">:</span> <span class="n">db2_production</span>
</span><span class='line'>    <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>    <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">defaults</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  I configure two separate databases db1 & db2.
</p>




<p>
  Then I need to configure the app to load these now. I open <code>application.rb</code> or environment file(s):
</p>




<figure class='code'><figcaption><span>application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;ENV&#39;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">db_conf</span> <span class="o">=</span> <span class="ss">YAML</span><span class="p">:</span><span class="ss">:load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">APP_PATH</span><span class="p">,</span><span class="s1">&#39;config&#39;</span><span class="p">,</span><span class="s1">&#39;database.yml&#39;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="no">DB1_CONF</span> <span class="o">=</span> <span class="n">db_conf</span><span class="o">[</span><span class="s2">&quot;db1&quot;</span><span class="o">][</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;ENV&#39;</span><span class="o">]]</span>
</span><span class='line'><span class="no">DB2_CONF</span> <span class="o">=</span> <span class="n">db_conf</span><span class="o">[</span><span class="s2">&quot;db2&quot;</span><span class="o">][</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;ENV&#39;</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Take a look at what&#8217;s going on:<br/>
  - I set the database configuration to use. You can just use Rails.env here instead of ENV[&#8216;ENV&#8217;].<br/>
  - I load up the database.yml config and parse it with YAML.<br/>
  - I grab the configuration from the file for each db and the correct environment that I&#8217;m running in.<br/>
</p>




<p>
  <strong>Connecting Models</strong><br/>
  When I&#8217;m working with multiple databases, I like to explicitly setup the connections inside the models themselves instead of inheriting from ActiveRecord::Base and using subclasses.
</p>




<figure class='code'><figcaption><span>user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">establish_connection</span> <span class="no">DB1_CONF</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>product.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">establish_connection</span> <span class="no">DB2_CONF</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, All you really need to do is load the configurations, establish the database connections, and setup the migrations to load from a specific directory for each database.
</p>




<p>
  So far so good, See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ChicagoBoss Installation]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/28/chicagoboss-installation/"/>
    <updated>2015-01-28T22:52:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/28/chicagoboss-installation</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_chicagoboss.svg" alt="ChicagoBoss Installation" />
</p>




<p>
  <h3>Overview</h3>
</p>




<p>
  In software development, using a framework is almost a rule for fast, clean, easy readable and standardized coding. Chicago Boss (<a href="http://www.chicagoboss.org/" target="_blank">http://www.chicagoboss.org</a>)is a framework that is heavily inspired by Rails. Set up and use Chicago Boss is easy as falling off a log. Chicago Boss allows you to code with the aforementioned standards in Erlang. Plus, offers conveniences of modern web development, including WebSocket and Comet. Basic features of Chicago Boss listed below:<br/>
  - 100% asynchronous I/O<br/>
  - Support for Erlang and Elixir code<br/>
  - BossDB: Database connection layer with an advanced ORM which with built-in support for Mnesia, MongoDB, MySQL, PostgreSQL, Riak and Tokyo Tyrant<br/>
  - BossCache: Database caching layer<br/>
  - BossMQ: Cluster–wide, channel–based message queue<br/>
  - BossRouter: URL router<br/>
  - BossSession: Session storage layer<br/>
  - BossNews: Event listener, model event system<br/>
  - BossMail: Built-in email server<br/>
  - Django and Jade template support<br/>
  - Very clean controllers as result of pattern matching<br/>
  - Auto document generation for models<br/>
  - An useful admin interface<br/>
  - Automatic code reloading
</p>




<p>
  <img src="http://geekhmer.github.io/images/hand_chicagoboss.png" alt="ChicagoBoss Installation" width="200" />
</p>




<p>
  <h3>Installation</h3>
</p>




<p>
  This short guide will help you get Chicago Boss installed and working on your system. Chicago Boss generally isn’t installed to global system path. Typically, Chicago Boss will be copied to a development directory in your path.
</p>




<p>
  <strong>Requirement</strong><br/>
  Chicago Boss is written in the Erlang programming language, so naturally you will need to install Erlang on your system. You may remember my previous article post about <a href="http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu/">Install Erlang Using Repository on Ubuntu</a>.
</p>




<p>
  <strong>Download a Chicago Boss</strong><br/>
  Download the Chicago Boss source code from here: <a href="http://www.chicagoboss.org/" target="_blank">http://www.chicagoboss.org</a>.
</p>




<p>
  <strong>Open the Archive</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tar</span> <span class="n">xzf</span> <span class="no">ChicagoBoss</span><span class="o">-*.</span><span class="n">*</span><span class="o">.</span><span class="n">*</span><span class="o">.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Compile the Code</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="no">ChicagoBoss</span><span class="o">-*.</span><span class="n">*</span><span class="o">.</span><span class="n">*</span>
</span><span class='line'><span class="n">make</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Create a New Project</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">make</span> <span class="n">app</span> <span class="no">PROJECT</span><span class="o">=</span><span class="n">project_name</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Enter the New Project Dir and Run the Development Server</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="o">.</span><span class="n">.</span><span class="o">/</span><span class="n">project_name</span>
</span><span class='line'><span class="o">.</span><span class="n">/init</span><span class="o">-</span><span class="n">dev</span><span class="o">.</span><span class="n">sh</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Enjoya</strong><br/>
  Point your browser to http://localhost:8001<br/>
  If all is well you will see a forbidding error message about the requested template — not to worry, the new project is empty so there is nothing to serve.
</p>




<p>
  So far so good, see you in the next articles. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Message Passing]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/27/erlang-message-passing/"/>
    <updated>2015-01-27T23:07:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/27/erlang-message-passing</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Message Passing" />
</p>




<p>
  The communication model (among processes) in Erlang is message passing. Erlang processes share no memory. The way that processes communicate is via (asynchronous) message passing. Every process (even the shell) holds a mailbox queue where incoming messages are placed until received by the process. Message passing is asynchronous because the sending process does not block on send. On the other hand, receiving a message in Erlang is a blocking operation.
</p>




<p>
  <h3>Characteristics</h3>
</p>




<p>
  In this subsection I will describe some of the characteristics of message passing in Erlang.
</p>




<p>
  <strong>Asynchronous</strong><br/>
  Message passing in Erlang is a non-blocking operation.
</p>




<p>
  <strong>Data Copy</strong><br/>
  The message’s data are copied from the sending process to the receiver’s message queue, so the receiver gets a fresh copy of the data.
</p>




<p>
  <strong>Ordering</strong><br/>
  Erlang runtime guarantees that if two messages are sent from node A to node B and both are delivered, then the ordering of these messages is kept (because ordering).
</p>




<p>
  <strong>Successful Send</strong><br/>
  The send operation always succeeds (even if the target is a non-existing process) and evaluates to the data sent. An exception is when trying to send data to a non-existing registered process.
</p>




<p>
  <h3>Sending Messages</h3>
</p>




<p>
  Erlang uses the exclamation mark (!) as the operator for sending a message.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">%</span><span class="nb">send</span> <span class="n">message</span> <span class="no">Message</span> <span class="n">to</span> <span class="n">the</span> <span class="n">process</span> <span class="n">with</span> <span class="n">pid</span> <span class="no">Pid</span>
</span><span class='line'><span class="no">Pid</span> <span class="o">!</span> <span class="no">Message</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Send multiple messages &#8220;at once&#8221;:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pid1</span> <span class="o">!</span> <span class="no">Message</span><span class="p">,</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="no">Message</span><span class="p">,</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="no">Message</span>
</span><span class='line'><span class="no">Pid1</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid2</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid3</span> <span class="o">!</span> <span class="no">Message</span><span class="p">))</span>
</span><span class='line'><span class="no">Pid1</span> <span class="o">!</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="no">Message</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<p>
  As I have mentioned before, the shell is nothing more than a process. As a process, it has a message queue. In order to print and empty the shell’s message queue we can use the flush/0 BIFs.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">erlang_term_can_be_sent</span><span class="o">.</span>
</span><span class='line'><span class="n">erlang_term_can_be_sent</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">erlang_term_can_be_sent</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="o">[</span><span class="n">this</span><span class="p">,</span> <span class="n">is</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">list</span><span class="p">,</span> <span class="s1">&#39;of&#39;</span><span class="p">,</span> <span class="n">atoms</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="n">this</span><span class="p">,</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">list</span><span class="p">,</span><span class="s1">&#39;of&#39;</span><span class="p">,</span><span class="n">atoms</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="p">{</span><span class="n">this</span><span class="p">,</span> <span class="o">[</span><span class="n">is</span><span class="p">,</span> <span class="n">a</span><span class="o">]</span><span class="p">,</span> <span class="n">tuple</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;!&#39;</span><span class="p">,</span> <span class="s1">&#39;!&#39;</span><span class="p">}}</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">this</span><span class="p">,</span><span class="o">[</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="o">]</span><span class="p">,</span><span class="n">tuple</span><span class="p">,{</span><span class="s1">&#39;!&#39;</span><span class="p">,</span><span class="s1">&#39;!&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="p">{</span><span class="nb">self</span><span class="p">(),</span> <span class="mi">123</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">35</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="mi">123</span><span class="p">}</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="o">[</span><span class="n">this</span><span class="p">,</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">list</span><span class="p">,</span><span class="s1">&#39;of&#39;</span><span class="p">,</span><span class="n">atoms</span><span class="o">]</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="p">{</span><span class="n">this</span><span class="p">,</span><span class="o">[</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="o">]</span><span class="p">,</span><span class="n">tuple</span><span class="p">,{</span><span class="s1">&#39;!&#39;</span><span class="p">,</span><span class="s1">&#39;!&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="p">{</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">35</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="mi">123</span><span class="p">}</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">=</span> <span class="nb">self</span><span class="p">(),</span> <span class="no">Pid2</span> <span class="o">=</span> <span class="nb">self</span><span class="p">(),</span> <span class="no">Pid3</span> <span class="o">=</span> <span class="nb">self</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">35</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">8</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">!</span> <span class="n">msg</span><span class="p">,</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="n">msg</span><span class="p">,</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="n">msg</span><span class="o">.</span>
</span><span class='line'><span class="n">msg</span>
</span><span class='line'><span class="mi">9</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">10</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid2</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid3</span> <span class="o">!</span> <span class="n">msg</span><span class="p">))</span><span class="o">.</span>
</span><span class='line'><span class="n">msg</span>
</span><span class='line'><span class="mi">11</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">12</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">!</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="n">msg</span><span class="o">.</span>
</span><span class='line'><span class="n">msg</span>
</span><span class='line'><span class="mi">13</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Receiving Messages</h3>
</p>




<p>
  Erlang uses pattern matching for receiving messages (same as in function clause selection and the case statement). The receive statement is used to deliver messages from the message queue.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">receive</span>
</span><span class='line'>  <span class="no">Pattern1</span> <span class="k">when</span> <span class="no">Guard1</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo1</span><span class="p">;</span>
</span><span class='line'>  <span class="no">Pattern2</span> <span class="k">when</span> <span class="no">Guard2</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_Other</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">Catch_all</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Receiving Order</strong><br/>
  The message processing is done in a FIFS (First In – First Served) order. Every incoming message is placed in the tail of the process’ message queue. When a receive statement is meet the following processing happens:<br/>
  1. The first message (head of the message queue) is pattern matched against the first receive clause. If match, execute the clause’s body, else go to the next step.<br/>
  2. The same message is pattern matched against the second (if any) receive clause. If match, execute the clause’s body, else go to the next step.<br/>
  3. &#8230;
  4. The same message is pattern matched against the last clause. If match, execute the clause’s body, else go to the next step.
  5. The same iterative process starts again from step 1, but now with the next message from the message queue.<br/><br/>
  The message (if any) that is delivered through receive is removed from the message queue.
</p>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>pingpong.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">pingpong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">play</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">play</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">is_integer</span><span class="p">(</span><span class="n">N</span><span class="p">),</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong</span> <span class="o">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span> <span class="n">pong</span><span class="o">/</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ping</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="no">Pong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="no">Pong</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong</span> <span class="o">!</span> <span class="nb">exit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="no">Pong</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong</span> <span class="o">!</span> <span class="p">{</span><span class="nb">self</span><span class="p">(),</span> <span class="n">ping</span><span class="p">},</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">pong</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;~w : pong [~w]~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="nb">self</span><span class="p">(),</span> <span class="n">N</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ping</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="no">Pong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">pong</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="p">{</span><span class="no">From</span><span class="p">,</span> <span class="n">ping</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;~w : ping~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="nb">self</span><span class="p">()</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>      <span class="no">From</span> <span class="o">!</span> <span class="n">pong</span><span class="p">,</span>
</span><span class='line'>      <span class="n">pong</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">ok</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example running:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">pingpong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">pingpong</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">pingpong</span><span class="p">:</span><span class="n">play</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Timeout</strong><br/>
  Receive is a blocking statement; it blocks until a message that matches one of the clauses is placed in the incoming message queue. Erlang allows the programmer to explicitly unblock the receive statement using a timeout (if a matching message is not delivered until the timeout expires). The complete format of receive statement, including the after construct.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">receive</span>
</span><span class='line'>  <span class="no">Pattern1</span> <span class="k">when</span> <span class="no">Guard1</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo1</span><span class="p">;</span>
</span><span class='line'>  <span class="no">Pattern2</span> <span class="k">when</span> <span class="no">Guard2</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_Other</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">Catch_all</span>
</span><span class='line'><span class="n">after</span> <span class="no">Millisecs</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">ToDo_timeout</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>timeout.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="nb">sleep</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span> <span class="n">timeout</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">timeout</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">cancel</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;Timeout canceled~n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">after</span> <span class="mi">2000</span> <span class="o">-&gt;</span> <span class="sx">% 2 </span><span class="n">seconds</span>
</span><span class='line'>    <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;Timeout triggered~n&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">a</span> <span class="nb">sleep</span> <span class="n">function</span>
</span><span class='line'><span class="nb">sleep</span><span class="p">(</span><span class="no">Ms</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;Sleeping for ~w ms~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="no">Ms</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>  <span class="n">after</span> <span class="no">Ms</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">done</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example running:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">timeout</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">P</span> <span class="o">=</span> <span class="ss">timeout</span><span class="p">:</span><span class="n">start</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">42</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">Timeout</span> <span class="n">triggered</span>
</span><span class='line'><span class="no">Timeout</span> <span class="n">triggered</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">P</span> <span class="o">!</span> <span class="n">cancel</span><span class="o">.</span>
</span><span class='line'><span class="no">Timeout</span> <span class="n">canceled</span>
</span><span class='line'><span class="n">cancel</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">timeout</span><span class="p">:</span><span class="nb">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">Sleeping</span> <span class="k">for</span> <span class="mi">1000</span> <span class="n">ms</span>
</span><span class='line'><span class="n">done</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="ss">timeout</span><span class="p">:</span><span class="nb">sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">Sleeping</span> <span class="k">for</span> <span class="mi">3000</span> <span class="n">ms</span>
</span><span class='line'><span class="n">done</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Concurrency]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/26/erlang-concurrency/"/>
    <updated>2015-01-26T18:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/26/erlang-concurrency</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Concurrency" />
</p>




<p>
  Concurrency is defined as “the temporal property of two things happening at the same time”. In Computer Science, the definition is “concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. The computations may be executing on multiple cores in the same chip, preemptively time-shared threads on the same processor, or executed on physically separated processors.”
</p>




<p>
  Erlang was built with concurrency and fault-tolerance in mind.
</p>




<p>
  <h3>Processes</h3>
</p>




<p>
  The granularity of concurrency in Erlang is a process. A process is an activity/task that runs concurrently with and independently from the other processes (though processes can interact with each other using messages, links, etc.). Processes in Erlang are different than the processes and threads most people are familiar with. Erlang processes are lightweight, operate in (memory) isolation from other processes, and are scheduled by the Erlang’s Virtual Machine (VM). The creation time of process is very low, the memory footprint of a just spawned process is very small, and a single Erlang VM can have millions of processes running.
</p>




<p>
  <h3>Messaging Passing</h3>
</p>




<p>
  The communication model (among processes) in Erlang is message passing. Erlang processes share no memory. The way that processes communicate is via message passing (asynchronous). Every process (even the shell) holds a mailbox queue where incoming messages are placed until received by the process. Message passing is asynchronous because the sending process does not block on send. Sending a message in Erlang is a non-blocking operation that always succeed (more in the next post).
</p>




<p>
  <h3>Why Message Passing?</h3>
</p>




<p>
  We are so used to the shared memory model, why changing it? Here are some characteristics that are part of Erlang mostly because of the message passing memory model.
</p>




<p>
  <strong>Crash Independency</strong><br/>
  Message passing allows for easier distributed programming. Imagine if you want to distribute an application that uses shared memory. To do this, one should either use a message passing solution (such as MPI) or a Distributed Shared Memory system (DSM), that also uses message passing to operate. Why not using message passing in the first place? Especially in Erlang, message passing allows for location transparency (when sending a message there is no difference to the programmer if the receiver resides in the local or a remote node).
</p>




<p>
  <h3>Creating Processes</h3>
</p>




<p>
  Erlang provides Built-In Functions that are used to spawn new processes. The simplest one is spawn/1|3 (the 1|3 denotes that both spawn/1 and spawn/3 functions exist).
</p>




<p>
  <strong>Pid Datatype</strong><br/>
  Pid stands for Process identifier and is the datatype used for the unique process, identifiers that are assigned to every process.
</p>




<p>
  <strong>spawn/1|3</strong><br/>
  Creates a new process and returns its pid. The new process is placed in the system scheduler queue, so it will be run some time later.
</p>




<p>
  <strong>spawn/1</strong><br/>
  Called as spawn(Fun). The new process will run function Fun with an empty list ([]) as input.
</p>




<p>
  <strong>spawn/3</strong><br/>
  Called as spawn(Module, Function, Args). The new process will run function Module:Function with the elements of the list Args as input.
</p>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>process.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">process</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">say_something</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">say_something</span><span class="p">(</span><span class="n">_What</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'><span class="n">say_something</span><span class="p">(</span><span class="no">What</span><span class="p">,</span> <span class="no">Times</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;~p~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="no">What</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">say_something</span><span class="p">(</span><span class="no">What</span><span class="p">,</span> <span class="no">Times</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">process</span><span class="p">,</span> <span class="n">say_something</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">process</span><span class="p">,</span> <span class="n">say_something</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;bonjour&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>process1.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">process1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">ping</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">pong</span><span class="o">/</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong_Pid</span> <span class="o">!</span> <span class="n">finished</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;ping finished~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">);</span>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong_Pid</span> <span class="o">!</span> <span class="p">{</span><span class="n">ping</span><span class="p">,</span> <span class="nb">self</span><span class="p">()},</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">pong</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;ping received pong~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ping</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">pong</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">finished</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;pong finished~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">);</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ping</span><span class="p">,</span> <span class="no">Ping_Pid</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;pong received ping~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">),</span>
</span><span class='line'>      <span class="no">Ping_Pid</span> <span class="o">!</span> <span class="n">pong</span><span class="p">,</span>
</span><span class='line'>      <span class="n">pong</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong_Pid</span> <span class="o">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">pong</span><span class="p">,</span> <span class="o">[]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">ping</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Creating Linked Processes</h3>
</p>




<p>
  A very useful feature is to create a new process that is linked to the “parent” one. The link between them guarantees that if one of the two fails (finishes abnormally), the other one also stops executing. This feature is very helpful because it reduces the need for “cleaning up” in case of a failure. Instead of explicitely handling an error, the “let it fail and let someone else handle it” philosophy can be used. The BIF(s) providing this functionality are the spawn_link/1|3.
</p>




<p>
  <strong>link/1</strong><br/>
  Creates a bidirectional link between the calling process and another process (or port), if there is not such a link already. If a process attempts to create a link to itself, nothing is done. Returns true.
</p>




<p>
  <strong>spawn_link/1|3</strong><br/>
  Provides the same functionality as spawn/1|3 with the addition that a link is atomically created between the caller and the newly spawned process.
</p>




<p>
  <strong>spawn_link/1</strong><br/>
  Same call convention as spawn/1.
</p>




<p>
  <strong>spawn_link/3</strong><br/>
  Same call convention as spawn/3.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spawnLink</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span> <span class="n">spawnLink_</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">spawnLink_</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn_link</span><span class="p">(?</span><span class="no">MODULE</span><span class="p">,</span> <span class="n">sayExit</span><span class="p">,</span> <span class="o">[]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">justLoop</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">justLoop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">justLoop</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">sayExit</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="ss">timer</span><span class="p">:</span><span class="nb">sleep</span><span class="p">(</span><span class="mi">4000</span><span class="p">),</span>
</span><span class='line'>  <span class="ss">erlang</span><span class="p">:</span><span class="n">kill</span><span class="p">(</span><span class="n">not_catched</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">spawning</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">spawning</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Pid</span> <span class="o">=</span> <span class="ss">spawning</span><span class="p">:</span><span class="n">spawnLink</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">42</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">=</span><span class="no">ERROR</span> <span class="no">REPORT</span><span class="o">====</span> <span class="mi">7</span><span class="o">-</span><span class="no">May</span><span class="o">-</span><span class="mi">2011</span><span class="o">::</span><span class="mi">12</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span> <span class="o">===</span>
</span><span class='line'><span class="no">Error</span> <span class="k">in</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">43</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">with</span> <span class="nb">exit</span> <span class="ss">value</span><span class="p">:</span> <span class="p">{</span><span class="k">undef</span><span class="p">,</span><span class="o">[</span><span class="p">{</span><span class="n">erlang</span><span class="p">,</span><span class="n">kill</span><span class="p">,</span><span class="o">[</span><span class="n">not_</span>
</span><span class='line'><span class="kp">false</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Other Processes’-related Built-In Functions</h3>
</p>




<p>
  There are several other BIFs related to processes. The following are some commonly used.
</p>




<p>
  <strong>is_pid/1</strong><br/>
  Returns true if the argument is a pid, else false.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Pid</span> <span class="o">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="nb">format</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;Hello~n&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">Hello</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">37</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">is_pid</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>is_process_alive/1</strong><br/>
  Called as is_process_alive(Pid). Pid must refer to a process at the local node. Returns true if the process exists and is alive, that is not exiting and has not exited. Otherwise, returns false.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">is_process_alive</span><span class="p">(</span><span class="nb">self</span><span class="p">())</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>list_to_pid/1</strong><br/>
  Transforms the input string to a pid. This BIF is intended to be used for debugging and not in the application development.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Pid</span> <span class="o">==</span> <span class="n">list_to_pid</span><span class="p">(</span><span class="s2">&quot;&lt;0.39.0&gt;&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>pid_to_list/1</strong><br/>
  Returns the textual representation of a pid. This BIF is intended to be used for debugging only.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">StringPid</span> <span class="o">=</span> <span class="n">pid_to_list</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="s2">&quot;&lt;0.37.0&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>register/2</strong><br/>
  Registers a process (or a port) with a name. This name can be later used to refer to the process.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">ShellPid</span> <span class="o">=</span> <span class="nb">self</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">99</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">register</span><span class="p">(</span><span class="n">shell</span><span class="p">,</span> <span class="no">ShellPid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>registered/0</strong><br/>
  Returns a list with the names of all registered processes.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">registered</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">init</span><span class="p">,</span><span class="n">shell</span><span class="p">,</span><span class="n">error_logger</span><span class="p">,</span><span class="n">rex</span><span class="p">,</span><span class="n">kernel_sup</span><span class="p">,</span><span class="n">inet_db</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_name_server</span><span class="p">,</span><span class="n">file_server_2</span><span class="p">,</span><span class="n">code_server</span><span class="p">,</span>
</span><span class='line'> <span class="n">erl_prim_loader</span><span class="p">,</span><span class="n">user_drv</span><span class="p">,</span><span class="n">standard_error_sup</span><span class="p">,</span>
</span><span class='line'> <span class="n">application_controller</span><span class="p">,</span><span class="n">standard_error</span><span class="p">,</span><span class="n">kernel_safe_sup</span><span class="p">,</span><span class="n">user</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_group</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>self/0</strong><br/>
  One of the most commonly used BIF, returns the pid of the calling processes. As you will see in the next post (about messaging), self is used in almost every message send.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">ShellPid</span> <span class="o">=</span> <span class="nb">self</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">44</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>erlang:send/2|3</strong><br/>
  Sends a message to a process. You will see message sending in detail in the next post.
</p>




<p>
  <strong>erlang:send_after/3</strong><br/>
  Sends a message after a given amount of time.
</p>




<p>
  <strong>unlink/1</strong><br/>
  Removes the link between two processes. Returns true even if there is no exist link.
</p>




<p>
  <strong>unregister/1</strong><br/>
  Called as unregister(Name). Removes the association between the Name and the process which it is associated with.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">unregister</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">registered</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">init</span><span class="p">,</span><span class="n">error_logger</span><span class="p">,</span><span class="n">rex</span><span class="p">,</span><span class="n">kernel_sup</span><span class="p">,</span><span class="n">inet_db</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_name_server</span><span class="p">,</span><span class="n">file_server_2</span><span class="p">,</span><span class="n">code_server</span><span class="p">,</span>
</span><span class='line'> <span class="n">erl_prim_loader</span><span class="p">,</span><span class="n">user_drv</span><span class="p">,</span><span class="n">standard_error_sup</span><span class="p">,</span>
</span><span class='line'> <span class="n">application_controller</span><span class="p">,</span><span class="n">standard_error</span><span class="p">,</span><span class="n">kernel_safe_sup</span><span class="p">,</span><span class="n">user</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_group</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>whereis/1</strong><br/>
  Called as whereis(Name). Returns the pid of the process that is register with the name Name.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">whereis</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">44</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
