<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-04-15T16:13:09+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Respond with JSON in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/15/respond-with-json-in-ruby-on-rails-application/"/>
    <updated>2015-04-15T15:06:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/15/respond-with-json-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Translate Your Ruby on Rails Application" />
</p>




<p>
  When building a RESTful API in Rails application, there are many different options and gems you can use to format your JSON responses. This isn&#8217;t a post about how to build an API, but rather about some of the different popular options on how to define and structure JSON.
</p>




<p>
  <strong>RABL</strong><br/>
  <a href="http://www.leighhalliday.com/responding-with-json-in-rails" target="_blank">RABL</a> is a DSL for generating both JSON and XML. In my mind it has a similar feel to Jbuilder, which I&#8217;ll discuss below. It&#8217;s works by creating a view with the extension .rabl, and defining which attributes, nodes, and relations you wish to include in the JSON response.
</p>




<p>
  Here&#8217;s an example:
</p>




<figure class='code'><figcaption><span>app/views/posts/index.rabl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">collection</span> <span class="vi">@posts</span>
</span><span class='line'><span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:subject</span>
</span><span class='line'><span class="n">child</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">attributes</span> <span class="ss">:full_name</span> <span class="p">}</span>
</span><span class='line'><span class="n">node</span><span class="p">(</span><span class="ss">:read</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">read_by?</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Active Model Serializer</strong><br/>
  <a href="https://github.com/rails-api/active_model_serializers" target="_blank">Active Model Serializer</a> is a great way to build JSON responses using an object oriented approach. The objects have a very similar feel to how your ActiveModel object is set up in terms of attributes and relationships. It also allows you to choose your adapter-to decide what type of JSON structure is produced-or to build your own. Popular supported formats are JSON-API and JSON-HAL.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="n">url</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Jbuilder</strong><br/>
  <a href="https://github.com/rails/jbuilder" target="_blank">jbuilder</a> provides a very similar DSL to RABL. Jbuilder is included with Rails, so it is used quite a bit. Rails Casts has a free episode which goes into greater detail about Jbuilder. It&#8217;s very easy to use and provides a lot of flexibility in defining exactly what attributes are included in and how the response is formatted and nested.
</p>




<figure class='code'><figcaption><span>app/views/message/show.json.jbuilder </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">json</span><span class="o">.</span><span class="n">content</span> <span class="n">format_content</span><span class="p">(</span><span class="vi">@message</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'><span class="n">json</span><span class="o">.</span><span class="p">(</span><span class="vi">@message</span><span class="p">,</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="ss">:updated_at</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">json</span><span class="o">.</span><span class="n">author</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">name</span> <span class="vi">@message</span><span class="o">.</span><span class="n">creator</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">familiar</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">email_address</span> <span class="vi">@message</span><span class="o">.</span><span class="n">creator</span><span class="o">.</span><span class="n">email_address_with_name</span>
</span><span class='line'>  <span class="n">json</span><span class="o">.</span><span class="n">url</span> <span class="n">url_for</span><span class="p">(</span><span class="vi">@message</span><span class="o">.</span><span class="n">creator</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Grape Entity</strong><br/>
  <a href="https://github.com/intridea/grape-entity" target="_blank">Grape Entity</a> was extracted from Grape, which is a popular gem used for building RESTful APIs. Similarly to RABL and Jbuilder, it provides a DSL for defining entities which are the structure of your JSON response.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">API</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Entities</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Status</span> <span class="o">&lt;</span> <span class="ss">Grape</span><span class="p">:</span><span class="ss">:Entity</span>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:user_name</span>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:text</span><span class="p">,</span> <span class="ss">documentation</span><span class="p">:</span> <span class="p">{</span> <span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;String&quot;</span><span class="p">,</span> <span class="ss">desc</span><span class="p">:</span> <span class="s2">&quot;Status update text.&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:ip</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="p">{</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:full</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:user_type</span><span class="p">,</span> <span class="ss">:user_id</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">status</span><span class="p">,</span> <span class="n">options</span><span class="o">|</span> <span class="n">status</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">public?</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">expose</span> <span class="ss">:contact_info</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expose</span> <span class="ss">:phone</span>
</span><span class='line'>        <span class="n">expose</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">using</span><span class="p">:</span> <span class="ss">API</span><span class="p">:</span><span class="ss">:Address</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>ROAR</strong><br/>
  <a href="https://github.com/apotonick/roar" target="_blank">ROAR</a> allows you to build presenter classes to represent your data. It comes with support for JSON, JSON-HAL, JSON-API, and XML.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;roar/json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">SongRepresenter</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Roar</span><span class="p">:</span><span class="ss">:JSON</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:title</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>ActiveModel or Hash</strong><br/>
  This may seem like a strange thing to point out, but for very simple cases, you can simply call the to_json method on either an ActiveModel object or a native Ruby Hash.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Using an @organization model</span>
</span><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@organization</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Using a plain Ruby Hash</span>
</span><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">email</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>    <span class="p">}</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create QR Codes in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/15/create-qr-codes-in-ruby-on-rails-application/"/>
    <updated>2015-04-15T11:34:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/15/create-qr-codes-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Create QR Codes in Ruby on Rails Application" />
</p>




<p>
  <a href="https://rubygems.org/gems/barby" target="_blank">Barby</a> is a great gem for generating a barcode or QR code. You can choose to output it as any number of barcode types or as a QR code. This example will use a QR code but I have successfully used the Code128 barcode which is fairly common in the retail space.
</p>




<p>
  Add Barby to your gem file:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;barby&#39;</span><span class="p">,</span>  <span class="s1">&#39;~&gt; 0.6.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rqrcode&#39;</span><span class="p">,</span><span class="s1">&#39;~&gt; 0.4.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Here is an example helper for generating the QR code as base64 encoded png data:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">generate_qr</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;barby&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;barby/barcode&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;barby/barcode/qr_code&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;barby/outputter/png_outputter&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">barcode</span> <span class="o">=</span> <span class="ss">Barby</span><span class="p">:</span><span class="ss">:QrCode</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="ss">level</span><span class="p">:</span> <span class="ss">:q</span><span class="p">,</span> <span class="ss">size</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="n">base64_output</span> <span class="o">=</span> <span class="no">Base64</span><span class="o">.</span><span class="n">encode64</span><span class="p">(</span><span class="n">barcode</span><span class="o">.</span><span class="n">to_png</span><span class="p">({</span> <span class="ss">xdim</span><span class="p">:</span> <span class="mi">5</span> <span class="p">}))</span>
</span><span class='line'>  <span class="s2">&quot;data:image/png;base64,</span><span class="si">#{</span><span class="n">base64_output</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And an example call from your view:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">%</span><span class="n">img</span><span class="p">{</span><span class="ss">src</span><span class="p">:</span> <span class="n">generate_qr</span><span class="p">(</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span><span class="p">),</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;qr-code&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Translate Your Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/15/translate-your-ruby-on-rails-application/"/>
    <updated>2015-04-15T08:58:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/15/translate-your-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Translate Your Ruby on Rails Application" />
</p>




<p>
  If you&#8217;re planning to take over the world, you&#8217;ll need to convince everyone to speak your language, or better yet, why don&#8217;t you offer them a website that speaks their language. The goal is to have a website available in multiple languages, and for the visitors to be able to toggle over to the language they are most comfortable with.
</p>




<p>
  <strong>Routing</strong><br/>
  I like to nest all of my routes inside of a :locale scope. I also limit the locale options to a set that I have predefined in an initializer. You could also choose to deal with locale validity later on in the flow (before_action method), but it is up to you.
</p>




<figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="s2">&quot;(:locale)&quot;</span><span class="p">,</span> <span class="ss">locale</span><span class="p">:</span> <span class="sr">/</span><span class="si">#{</span><span class="ss">MySite</span><span class="p">:</span><span class="ss">:ROUTE_LOCALES</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span><span class="si">}</span><span class="sr">/</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s1">&#39;home#index&#39;</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:pages</span>
</span><span class='line'>  <span class="c1"># etc...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>onfig/initializers/my_site.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MySite</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">MySite</span><span class="p">:</span><span class="ss">:LOCALES</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">en</span><span class="p">:</span>    <span class="s2">&quot;English&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">kh</span><span class="p">:</span>    <span class="s2">&quot;Khmer&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">fr</span><span class="p">:</span>    <span class="s2">&quot;French&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">en_us</span><span class="p">:</span> <span class="s2">&quot;US English&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="n">en_uk</span><span class="p">:</span> <span class="s2">&quot;UK English&quot;</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="ss">MySite</span><span class="p">:</span><span class="ss">:ROUTE_LOCALES</span> <span class="o">=</span> <span class="ss">MySite</span><span class="p">:</span><span class="ss">:LOCALES</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">locale</span><span class="p">,</span> <span class="n">hsh</span><span class="o">|</span>
</span><span class='line'>  <span class="n">hsh</span><span class="o">[</span><span class="n">locale</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">tr</span><span class="p">(</span><span class="s2">&quot;_&quot;</span><span class="p">,</span><span class="s2">&quot;-&quot;</span><span class="p">)</span><span class="o">]</span> <span class="o">=</span> <span class="n">locale</span> <span class="k">if</span> <span class="n">locale</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This line of code will make sure all of your routes have the current locale in them.
</p>




<figure class='code'><figcaption><span>app/controllers/application_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">default_url_options</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="p">{</span> <span class="ss">locale</span><span class="p">:</span> <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="p">}</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Determining Locale</strong><br/>
  I usually have a before_action filter which does its best to determine the URL of the application. You might have other things in here too if you keep track of the preferred locale in a cookie, or if it is attached to the user&#8217;s session data or account. You may also want to use the HTTP_ACCEPT_LANGUAGE to determine if there is a match.
</p>




<figure class='code'><figcaption><span>app/controllers/application_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:determine_locale</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">determine_locale</span>
</span><span class='line'>    <span class="n">locale</span> <span class="o">=</span> <span class="k">if</span> <span class="n">params</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:new_locale</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="ss">MySite</span><span class="p">:</span><span class="ss">:ROUTE_LOCALES</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:new_locale</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">params</span><span class="o">[</span><span class="ss">:new_locale</span><span class="o">]</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">params</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="ss">:locale</span><span class="p">)</span>
</span><span class='line'>      <span class="n">params</span><span class="o">[</span><span class="ss">:locale</span><span class="o">]</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">locale_from_url</span><span class="p">(</span><span class="n">request</span><span class="o">.</span><span class="n">host</span><span class="p">)</span> <span class="o">||</span> <span class="no">I18n</span><span class="o">.</span><span class="n">default_locale</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">set_locale</span><span class="p">(</span><span class="n">locale</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">locale_from_url</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># ... determine locale from host if you have different domains</span>
</span><span class='line'>    <span class="c1"># for different locales</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_locale</span><span class="p">(</span><span class="n">locale</span><span class="p">)</span>
</span><span class='line'>    <span class="no">I18n</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="n">locale</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="s2">&quot;_&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to_sym</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Static Text</strong><br/>
  The developers should be entering their keys into the yml files located in the locales folder if your rails application. I normally only have one for English, and then use other I18n backends (Redis for example) serve up the other translations. If the translations are in Redis, you will obviously need code that puts them there. I am working on an engine for this called <a href="https://github.com/leighhalliday/idioma" target="_blank">Idioma</a> which persists the translations using ActiveRecord and also to Redis at the same time.
</p>




<p>
  <strong>Dynamic Content</strong><br/>
  Because I18n comes built in to Rails, you won&#8217;t need to install many gems. But for dynamic content I recommend <a href="https://github.com/globalize/globalize" target="_blank">Globalize</a>. Along with this one is a handy gem called <a href="https://rubygems.org/gems/globalize-accessors" target="_blank">Globalize Accessors</a> which will help you when creating forms to enter this data in.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Page</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">translates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="n">fallbacks_for_empty_translations</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">globalize_accessors</span> <span class="ss">locales</span><span class="p">:</span> <span class="ss">MySite</span><span class="p">:</span><span class="ss">:LOCALES</span><span class="o">.</span><span class="n">keys</span><span class="p">,</span> <span class="ss">attributes</span><span class="p">:</span> <span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Dynamic Content</strong><br/>
  One thing I set up are fallbacks&#8230; this is so you can translate English once, and only when there is a locale that differs from the default do you need to specifically translate it for that locale. Example, in the US colour is spelled like color.
</p>




<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">default_locale</span> <span class="o">=</span> <span class="ss">:en_ca</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">i18n</span><span class="o">.</span><span class="n">fallbacks</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">en_us</span><span class="p">:</span> <span class="ss">:en</span><span class="p">,</span>
</span><span class='line'>  <span class="n">kh</span>   <span class="p">:</span> <span class="ss">:kh</span><span class="p">,</span>
</span><span class='line'>  <span class="n">en_uk</span><span class="p">:</span> <span class="ss">:en</span><span class="p">,</span>
</span><span class='line'>  <span class="n">fr_lu</span><span class="p">:</span> <span class="ss">:fr</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Having Your Website Translated</strong><br/>
  Because the translation team probably isn&#8217;t the same as the dev team, and they probably don&#8217;t have access to your code repository nor know how to edit yml files, you will want to have another way of giving them access to the translations. There is an established tool called <a href="https://github.com/tolk/tolk" target="_blank">Tolk</a>.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Model Generator Useful Shortcuts]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-model-generator-useful-shortcuts/"/>
    <updated>2015-04-13T13:11:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-model-generator-useful-shortcuts</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Renaming a Database Column" />
</p>




<p>
  <code>rails generate</code> command provides a lot of useful functionality, however some of it may not be immediately known to you as a developer. In this article we will explore a number of useful shortcuts available in the rails model generator.
</p>




<h3>Basics</h3>




<p>
  Let&#8217;s start with the basic command line usage.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">User</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>rails g</code> is the same thing as rails generate. Both commands do the same thing. We will use this shortcut throughout this article.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Product</span> <span class="nb">name</span> <span class="ss">quantity</span><span class="p">:</span><span class="n">integer</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This command generates a model named product with 2 fields, name, which is a string, and quantity, which is an integer. By not specifying the type for name, rails defaults to using string. Below is a complete list of types that you can use with the modal generator.
</p>




<p>
  <strong>Field Type Lists</strong><br/>
  - integer<br/>
  - primary_key<br/>
  - decimal<br/>
  - float<br/>
  - boolean<br/>
  - binary<br/>
  - string<br/>
  - text<br/>
  - date<br/>
  - time<br/>
  - datetime<br/>
  - timestamp
</p>




<p>
  You can also specify the size of a field as seen below.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Client</span> <span class="nb">name</span><span class="ss">:string</span><span class="p">{</span> <span class="mi">100</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will create a name field with a limit of 100 characters. For the decimal type, you can specify a precision and scale value as well.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Product</span> <span class="nb">name</span> <span class="ss">price</span><span class="p">:</span><span class="n">decimal</span><span class="p">{</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Namespaced Models</strong><br/>
  You can create namespaced models as well. This is useful for example, in creating a special set of administrative users that are separate from your regular users. Running the command below will place the user model in the Admin namespace, which will have a prefixed table name of admin_ in the database.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="n">admin</span><span class="o">/</span><span class="n">user</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As you can see from the code listed below, the user belongs to the admin namespace like mentioned earlier.
</p>




<figure class='code'><figcaption><span>app/models/admin/user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Adding an Index</strong><br/>
  You can also add a database index right from the command line.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Site</span> <span class="nb">name</span><span class="ss">:string:index</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In addition, you can make the index unique.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Client</span> <span class="nb">name</span><span class="ss">:string:uniq</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Model Relationships</h3>




<p>
  You can specify a basic relationship between models.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">User</span> <span class="ss">client</span><span class="p">:</span><span class="n">references</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will create a user with a column named client_id, add an index, and automatically add a belongs_to relationship to the User model.
</p>




<p>
  You can also make the relationship polymorphic.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="n">picture</span> <span class="ss">imageable</span><span class="p">:</span><span class="n">references</span><span class="p">{</span> <span class="n">polymorphic</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will set up a polymorphic relationship for pictures. Polymorphic relationships allow you to &#8216;share&#8217; a table between many different models. For instance, Products and People can both have pictures.
</p>




<p>
  The rails model generator exposes a lot of useful functionality that can save time if used properly. Thanks for reading!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Renaming a Database Column]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-renaming-a-database-column/"/>
    <updated>2015-04-13T13:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-renaming-a-database-column</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Renaming a Database Column" />
</p>




<p>
  To rename a database column, first you need to create a migration:
</p>




<p>
  Terminal commands line:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">migration</span> <span class="no">RenameColumnXinTableYtoZ</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next you need to edit the migration and add the following line:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rename_column</span> <span class="ss">:table</span><span class="p">,</span> <span class="ss">:old_column</span><span class="p">,</span> <span class="ss">:new_column</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Finally, please run a <code>rake db:migrate</code> and you are all set.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to uninstall RVM?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/12/how-to-uninstall-rvm/"/>
    <updated>2015-04-12T15:05:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/12/how-to-uninstall-rvm</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="How to uninstall RVM?" />
</p>




<p>
  There are times when you may need to completely remove RVM. For example, lets say that your installation is corrupt, or you don&#8217;t wish to use RVM anymore. Luckily this is easy to do. The first thing we need to do is to tell RVM to remove itself. This can be accomplished with the rvm impode command. Simply type:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rvm</span> <span class="n">implode</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Once you do that, RVM should remove itself. The next thing you need to do is uninstall the &#8216;rvm&#8217; gem. Simply type:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">uninstall</span> <span class="n">rvm</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will uninstall the RVM gem.
</p>




<p>
  The next thing you need to do is check to make sure that RVM is removed from your path. You need to check files like .bashrc, .bash_profile, and .profile to make sure all traces of the path are removed.
</p>




<p>
  The final thing you need to do is make sure both the .rvm and .rvmrc files have been removed. simply type:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ls</span> <span class="o">-</span><span class="n">a</span> <span class="o">~</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will list all of the files in your home directory. Type the following lines to remove the .rvm and .rvmrc files if they exist:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">.</span><span class="n">rvm</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">.</span><span class="n">rvmrc</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, if you no longer have a Ruby installation on your system you may also want to remove the .gem folder if it exists. Once you are finished, make sure to log out/back into your system for all changes to take effect. That&#8217;s it!!! See ya!!!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Better Errors Gem]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/01/ruby-on-rails-better-errors-gem/"/>
    <updated>2015-04-01T23:55:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/01/ruby-on-rails-better-errors-gem</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Better Errors Gem" />
</p>




<p>
  <a href="https://github.com/charliesome/better_errors" target="_blank">Better Errors</a> replaces the standard Rails error page with a much better and more useful error page. It is also usable outside of Rails in any Rack app as Rack middleware.
</p>




<p>
  Instead of a plain default error page, Better Errors will display a full interactive stack trace with source code inspection.
</p>




<p>
  If you also include the companion binding_of_caller2 gem into your application Better Errors will be able to also let you inspect local and instance variables and even embed a full REPL into every stack frame of your error page backtrace. Of course you should only ever do that in a development environment.
</p>




<p>
  To use it simply add the following to your Gemfile:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;better_errors&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;binding_of_caller&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 5 timestamps will be changed]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/31/rails-5-timestamps-will-be-changed/"/>
    <updated>2015-03-31T19:52:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/31/rails-5-timestamps-will-be-changed</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Rails 5 timestamps will be changed" />
</p>




<p>
  If you are running Rails 4.2, you will notice the generated migration add a default option to timestamps:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateFoods</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:products</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Without the <code>null: false</code> it will emit a warning:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;#timestamp&#39;</span> <span class="n">was</span> <span class="n">called</span> <span class="n">without</span> <span class="n">specifying</span> <span class="n">an</span> <span class="n">option</span> <span class="k">for</span> <span class="sb">`null`</span><span class="o">.</span> <span class="no">In</span> <span class="no">Rails</span> <span class="mi">5</span><span class="p">,</span> <span class="n">this</span> <span class="n">behavior</span> <span class="n">will</span>
</span><span class='line'> <span class="n">change</span> <span class="n">to</span> <span class="sb">`null: false`</span><span class="o">.</span> <span class="no">You</span> <span class="n">should</span> <span class="n">manually</span> <span class="n">specify</span> <span class="s1">&#39;null: true&#39;</span> <span class="n">to</span> <span class="n">prevent</span> <span class="n">the</span> <span class="n">behavior</span> <span class="n">of</span>
</span><span class='line'> <span class="n">your</span> <span class="n">existing</span> <span class="n">migrations</span> <span class="n">from</span> <span class="n">changing</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This null option is:
</p>




<p>
  :null - allows or disallows NULL values in the column. This option could have been named :null_allowed.
</p>




<p>
  <code>null: false</code> means you cannot give NULL values for created_at and updated_at on Rails 5.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where Should I Put My Code in Ruby on Rails Application?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/29/where-should-i-put-my-code-in-ruby-on-rails-application/"/>
    <updated>2015-03-29T09:44:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/29/where-should-i-put-my-code-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Nested Form Fields" />
</p>




<p>
  Sometimes you’re sure that’s not the right place for that piece of code, but where does it go? &#8220;Refactor&#8221; is only a good answer if you know how to fix it.
</p>




<p>
  In a Rails application, and what kind of code goes where?
</p>




<p>
  <strong>Models</strong><br/>
  For code about your database or domain objects, the model is your first step in Rails. Models are powerful, easy to test, reusable across applications and more like non-Rails code than most of Rails — familiar, even if you don’t know Rails yet.<br/>
</p>




<p>
  If there’s a good way to put the code in your model, that’s usually a safe bet and a good idea.
</p>




<p>
  Write tests too, of course!
</p>




<p>
  <strong>Controllers</strong><br/>
  It’s easy to put lots of code in your controllers, but it’s almost always a mistake. Business logic for your app should get out of the controller and into the model as quickly as possible. Logic about how things are shown to the user should go into the view. In general, the controller should be a tiny, thin glue layer putting together your other components.
</p>




<p>
  <strong>Views</strong><br/>
  Having lots of logic in your views is a huge anti-pattern. Don’t do it. It’s hard to test, it’s hard to find, it’s hard to write sandwiched in between the HTML… Just don’t.
</p>




<p>
  Instead, your views should contain HTML, variables that turn into HTML, and calls to helper methods that generate HTML — or whatever your final output format is. There should be no logic in there to test. No conditionals, no loops, no non-display methods. If you add an output format, there should be no code to repeat because all the interesting data transforms already happened, and no other output format cares about your HTML-only helpers. Right?
</p>




<p>
  <strong>Helpers</strong><br/>
  Rails &#8220;helpers&#8221; are very specifically view helpers. They’re automatically included in views, but not in controllers or models. That’s on purpose.
</p>




<p>
  Code in the application helper is included in all the views in your application. Code in other helpers is included in the corresponding view. If you find yourself writing big loops, method calls or other logic in the view but it’s clearly display logic, move it into a method in the helper.
</p>




<p>
  <strong>Lib Directory</strong><br/>
  Every Rails app starts with a /lib directory, but not much explanation of it.
</p>




<p>
  Remember that helpers are specifically view helpers? What if you wanted a controller helper? Or a model helper? Sometimes you can use a parent controller or parent model, but that’s not always the best choice.
</p>




<p>
  If you want to write a helper module for non-view logic, the /lib directory is usually the best place to put it. For example, logging code or some kinds of error handling may be a cross-cutting concern like that.
</p>




<p>
  Also, if you’re putting everything in the ApplicationController or ApplicationHelper, those can get big. Consider factoring some of that code out into helpers, or into /lib.
</p>




<p>
  Stuff in /lib isn’t always automagically included for you like controllers and models. So you may need to explicitly require the file, not just use the name of the class. (<a href="http://geekhmer.github.io/blog/2014/04/24/autoload-all-files-in-lib-directory-ruby-on-rails/">Autoload All Files in Lib Directory Ruby on Rails</a>)
</p>




<p>
  <strong>Gems</strong><br/>
  Sometimes you have reusable pieces in your application. A controller or model might be needed by multiple different Rails apps. A particular piece of logic for logging or display might be useful to a lot of different folks. You might even find a different way of doing things that most Rails apps would benefit from.
</p>




<p>
  These are all cases where you want to create a new gem and have your applications use it instead of sharing a directory of code.
</p>




<p>
  These days it’s really easy to create a new gem, so don’t be intimidated. If you haven’t worked through the first free chapter of Rebuilding Rails, this may be a good time to do it — it’ll show you how to quickly, easily create and use a new gem.
</p>




<p>
  <strong>Assets</strong><br/>
  In a few cases, you’re not even writing Ruby code. Instead, it may be Sass, Scss, JavaScript or CoffeeScript. In this case, it generally belongs under app/assets.
</p>




<p>
  <strong>Concerns and Exceptions</strong><br/>
  Rails has a very specific, very unusual setup. I think it’s a good idea for small apps, but only use Rails until it hurts. If your application gets too big or complicated, the Rails code organization may hurt more than it helps you.
</p>




<p>
  There are several &#8220;grow out of Rails&#8221; approaches to apply alternate architectures to the framework. From Hexagonal Rails to Objects on Rails to the more general Clean Ruby DCI approach. I won’t tell you which to use, but I’ll tell you that you’re better off starting with plain, simple Rails and growing out of it.
</p>




<p>
  Most Rails apps, and even more Rails controllers, don’t need to get all that big. They often don’t need to change much. Why go complicated when simple is working great?
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Nested Form Fields]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/23/ruby-on-rails-nested-form-fields/"/>
    <updated>2015-03-23T23:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/23/ruby-on-rails-nested-form-fields</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Nested Form Fields" />
</p>




<p>
  It’s super common to want to edit records along with their has_many associations on a single page.
</p>




<p>
  This Rails gem helps creating forms for models with nested has_many associations and relies on jQuery to dynamically add and remove nested form fields without a page reload.<br/>
  - Works for arbitrarily deeply nested associations (tested up to 4 levels).<br/>
  - Works with form builders like simple_form.<br/>
  - Requires at least Ruby 1.9 and the Rails asset pipeline.
</p>




<p>
  To install, add nested_form_fields to your application’s Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nested_form_fields&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Run bundle intall to install the gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In application.js file add:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">nested_form_fields</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  assuming that you have a User model with nested videos:
</p>




<figure class='code'><figcaption><span>user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:videos</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:videos</span><span class="p">,</span> <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Use the nested_fields_for helper inside your user form to add the video fields:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">nested_fields_for</span> <span class="ss">:videos</span> <span class="k">do</span> <span class="o">|</span><span class="n">ff</span><span class="o">|</span>
</span><span class='line'>    <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:video_title</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Links to add and remove fields can be added using the add_nested_fields_link and remove_nested_fields_link helpers:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">nested_fields_for</span> <span class="ss">:videos</span> <span class="k">do</span> <span class="o">|</span><span class="n">ff</span><span class="o">|</span>
</span><span class='line'>    <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">remove_nested_fields_link</span>
</span><span class='line'>    <span class="o">=</span> <span class="n">ff</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:video_title</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">add_nested_fields_link</span> <span class="ss">:videos</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Note that remove_nested_fields_link needs to be called within the nested_fields_for call and add_nested_fields_link outside of it via the parent builder.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Hooks for Metaprogramming]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/22/ruby-hooks-for-metaprogramming/"/>
    <updated>2015-03-22T10:45:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/22/ruby-hooks-for-metaprogramming</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Ruby Hooks for Metaprogramming" />
</p>




<h3>
  Overview
</h3>




<p>
  <strong>What is a Hook?</strong><br/>
   In programming, a hook is a place and usually an interface provided in packaged code that allows a programmer to insert customized programming. For example, a programmer might want to provide code that analyzed how often a particular logic path was taken within a program.
</p>




<h3>
  Ruby Hooks
</h3>




<p>
  Ruby lets you hook in and change a lot of behavior of the core language. Methods, constants, classes, variables… etc. Ruby lets you query them all, and change a lot about them.
</p>




<p>
  Here’s summaries and links for all the hooks I could find:
</p>




<p>
  <strong>Methods</strong><br/>
  - <code>respond_to_missing?</code> - A way to make sure your dynamic methods defined with method_missing also handle respond_to?<br/>
  - <code>method_missing</code> - Called when a method cannot be found, potentially to allow dynamically defining one instead.<br/>
  - <code>method_added</code> - Called whenever a method is added which can be used to modify the method.<br/>
  - <code>method_removed</code> - Called whenever a method is removed.<br/>
  - <code>singleton_method_added</code> - Method added to the singleton class of the object, to be callable just on this one instance.<br/>
  - <code>singleton_method_removed</code> - Method removed from singleton class.<br/>
  - <code>method_undefined</code> - A method has been undefined, with undef_method. Undef_method is different from remove_method because remove_method may still allow superclasses to define the method – undef_method means it’s gone entirely.<br/>
  - <code>singleton_method_undefined</code> - Called when a singleton method is undefined entirely.<br/>
  - <code>initialize_copy</code> - An optional callback when cloning any Object.
</p>




<p>
  <strong>Classes</strong><br/>
  - <code>inherited</code> - A Ruby class is subclassed.
</p>




<p>
  <strong>Modules</strong><br/>
  - <code>append_features</code> - A Module is included, and its constants, methods and variables used.<br/>
  - <code>included</code> - A Module is included, which usually obsoletes &#8220;append_features&#8221;.<br/>
  - <code>extend_object</code> - A Module extends an Object.<br/>
  - <code>extended</code> - An Object is extended by a module, which mostly obsoletes extend_object.<br/>
  - <code>const_missing</code> - A constant isn’t already present.
</p>




<p>
  <strong>Marshalling</strong><br/>
  - <code>marshal_dump</code> - Called on an object to have it dump itself in Ruby Marshal format.<br/>
  - <code>marshal_load</code> - Called on an object to have it load itself in Ruby Mashal format.
</p>




<p>
  <strong>Coercion</strong><br/>
  - <code>coerce</code> - Called by the first type in a two-argument operator on the second argument, to make it turn into something the first argument can recognize.<br/>
  - <code>induced_from</code> - Deprecated, please don’t use.<br/>
  - <code>to_i</code>, <code>to_f</code>, <code>to_s</code>, <code>to_a</code>, <code>to_hash</code>, <code>to_proc</code> and others - Conversions, indicating that the object is being used as a type and should try to convert itself to that type.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Callback Classes]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-callback-classes/"/>
    <updated>2015-03-21T14:51:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-callback-classes</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Callback Classes" />
</p>




<p>
  If you want to reuse callback code for more than one object that Rails provides a way to write callback classes. All you have to do is pass a given callback queue an object that responds to the name of the callback and takes the model object as a parameter.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MarkDeleted</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">before_destroy</span><span class="p">(</span><span class="n">model</span><span class="p">)</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:deleted_at</span><span class="p">,</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The behavior of MarkDeleted is stateless, so I added the callback as a class method.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_destroy</span> <span class="no">MarkDeleted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Invoice</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_destroy</span> <span class="no">MarkDeleted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Currency Formatting]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-currency-formatting/"/>
    <updated>2015-03-21T00:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-currency-formatting</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Currency Formatting" />
</p>




<p>
  Well, Ruby on Rails framework provide some various ways for formatting currency. Formatting a number as currency is pretty easy thanks to the <code>number_to_currency</code> helper. This helper will take a valid number and format it as currency. It accept a number of different options that allow complete customization of the displayed value:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">number_to_currency</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure>


<table>
<thead>
<tr>
<th>Options </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>:locale </td>
<td> The locale option allows you to specify the locale you wish to use. Defaults to the current locale.</td>
</tr>
<tr>
<td>:precision </td>
<td> Sets the level of precision. Defaults to 2. Precision is the number of decimal places after the decimal.</td>
</tr>
<tr>
<td>:unit </td>
<td> Sets the denomination of the currency. example: $ for the United States.</td>
</tr>
<tr>
<td>:separator </td>
<td> Specifies the separator to use between the units. example the &ldquo;.&rdquo; separates dollars and cents in the US.</td>
</tr>
<tr>
<td>:delimiter </td>
<td> Specifies the separator to use for the thousands delimiter. example: 123,456.</td>
</tr>
<tr>
<td>for </td>
<td> For loop.</td>
</tr>
<tr>
<td>:format </td>
<td> Sets the format for non-negative numbers. The current default is &ldquo;%u%n&rdquo;. The %u specifies the currency (&ldquo;$&rdquo;) and the %n specifies the number (&ldquo;123,456&rdquo;)</td>
</tr>
<tr>
<td>:negative_format </td>
<td> Same as format, but applies to negative numbers.</td>
</tr>
<tr>
<td>:raise </td>
<td> If raise is set to true, an exception will be raised if the number isn&rsquo;t a valid number.</td>
</tr>
</tbody>
</table>


<p>
  <br/>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">50</span>                        <span class="c1"># =&gt; $123,456.50</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">506</span>                       <span class="c1"># =&gt; $123,456.51</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">506</span><span class="p">,</span> <span class="ss">precision</span><span class="p">:</span> <span class="mi">3</span>         <span class="c1"># =&gt; $123,456.506</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="s2">&quot;123a456&quot;</span>                        <span class="c1"># =&gt; $123a456</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="s2">&quot;123a456&quot;</span><span class="p">,</span> <span class="k">raise</span><span class="p">:</span> <span class="kp">true</span>           <span class="c1"># =&gt; ActionView::Helpers::NumberHelper::InvalidNumberError error</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="o">-</span><span class="mi">123456</span><span class="o">.</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:negative_format</span> <span class="o">=&gt;</span> <span class="s2">&quot;(%u%n)&quot;</span>                               <span class="c1"># =&gt; ($123,456.50)</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">50</span><span class="p">,</span> <span class="ss">unit</span><span class="p">:</span> <span class="s2">&quot;£&quot;</span><span class="p">,</span> <span class="ss">seperator</span><span class="p">:</span> <span class="s2">&quot;,&quot;</span><span class="p">,</span> <span class="ss">delimiter</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>                    <span class="c1"># =&gt; £123456.50</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">50</span><span class="p">,</span> <span class="ss">unit</span><span class="p">:</span> <span class="s2">&quot;£&quot;</span><span class="p">,</span> <span class="ss">separator</span><span class="p">:</span> <span class="s2">&quot;,&quot;</span><span class="p">,</span> <span class="ss">delimiter</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="s2">&quot;%n %u&quot;</span>   <span class="c1"># =&gt; 123456,50 £</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Inversion Principle in Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/18/dependency-inversion-principle-in-ruby/"/>
    <updated>2015-03-18T23:54:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/18/dependency-inversion-principle-in-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Dependency Inversion Principle in Ruby" />
</p>




<p>
  Simply Dependency Inversion Principle states that: Abstractions should not depend upon details. Details should depend upon abstractions.
</p>




<p>
  Let&#8217;s go back to the first example on the Open/Closed Principle and change it a bit:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span>
</span><span class='line'>    <span class="n">generate_reporty_stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print</span>
</span><span class='line'>    <span class="no">JSONFormatter</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">JSONFormatter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now there is a formatter class, but I&#8217;ve hardcoded it on the Report class, thus creating a dependency from the Report to the JSONFormatter. Since the Report is a more abstract (high-level) concept than the JSONFormatter, we&#8217;re effectively breaking the DIP.
</p>




<p>
  We can solve it the exact same way with solved it on the Open/Closed Principle problem, with dependency injection:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span>
</span><span class='line'>    <span class="n">generate_reporty_stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="ss">formatter</span><span class="p">:</span> <span class="no">JSONFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="n">formatter</span><span class="o">.</span><span class="n">format</span> <span class="n">body</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, this way the Report does not depend on the JSONFormatter and can use any type of formatter that has a method called format (this is known as duck typing). That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interface Segregation Principle in Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/18/interface-segregation-principle-in-ruby/"/>
    <updated>2015-03-18T23:41:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/18/interface-segregation-principle-in-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Interface Segregation Principle" />
</p>




<p>
  Simply Interface Segregation Principle states that: When a client depends upon a class that contains interfaces that the client does not use, but that other clients do use, then that client will be affected by the changes that those other clients force upon the class.
</p>




<p>
  If you have a class that has two clients (objects using it):
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Driver</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">drive</span>
</span><span class='line'>    <span class="vi">@car</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'>    <span class="vi">@car</span><span class="o">.</span><span class="n">start_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mechanic</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_stuff</span>
</span><span class='line'>    <span class="vi">@car</span><span class="o">.</span><span class="n">change_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As you can see, our Car class has an interface that&#8217;s used partially by both the Driver and the Mechanic. We can improve our interface like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">start_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CarInternals</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Driver</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">drive</span>
</span><span class='line'>    <span class="vi">@car</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'>    <span class="vi">@car</span><span class="o">.</span><span class="n">start_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mechanic</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">do_stuff</span>
</span><span class='line'>    <span class="vi">@car_internals</span><span class="o">.</span><span class="n">change_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, splitting the interface into two, we can comply to the Interface Segregation Principle. That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Liskov Substitution Principle in Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/18/liskov-substitution-principle-in-ruby/"/>
    <updated>2015-03-18T23:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/18/liskov-substitution-principle-in-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Liskov Substitution Principle in Ruby" />
</p>




<p>
  Assume that we already had the code:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>     <span class="n">do_some_walkin</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Cat</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">run_like_a_cat</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This principle applies only to inheritance. In order to comply with the Liskov Substitution Principle, Subtypes must be substitutable for their base types.
</p>




<p>
  Well, so they must have the same interface. Since ruby does not have abstract methods, we can do it like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">walk</span>
</span><span class='line'>    <span class="n">do_some_walkin</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NotImplementedError</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Cat</span> <span class="o">&lt;</span> <span class="no">Animal</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">run</span>
</span><span class='line'>    <span class="n">run_like_a_cat</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open/Closed Principle in Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/17/open-slash-closed-principle-in-ruby/"/>
    <updated>2015-03-17T22:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/17/open-slash-closed-principle-in-ruby</id>
    <content type="html"><![CDATA[<p><img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Open/Closed Principle in Ruby" /></p>

<p>
  Assume that we already had the code:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span>
</span><span class='line'>    <span class="n">generate_reporty_stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print</span>
</span><span class='line'>    <span class="n">body</span><span class="o">.</span><span class="n">to_json</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The code above violates Open/Closed Principle as if we want to change the format the report gets printed, we need to change the code of the class. Let make it be better then:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span>
</span><span class='line'>    <span class="n">generate_reporty_stuff</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="ss">formatter</span><span class="p">:</span> <span class="no">JSONFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span><span class='line'>    <span class="n">formatter</span><span class="o">.</span><span class="n">format</span> <span class="n">body</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This way changing the formatter is as easy as:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">report</span> <span class="o">=</span> <span class="no">Report</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">report</span><span class="o">.</span><span class="n">print</span><span class="p">(</span><span class="ss">formatter</span><span class="p">:</span> <span class="no">XMLFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, I have extended the functionality without modifying the code. In this example, I have used a technique called &#8220;Dependency Injection&#8221;. That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single Responsibility Principle in Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/17/single-responsibility-principle-in-ruby/"/>
    <updated>2015-03-17T20:55:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/17/single-responsibility-principle-in-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Single Responsibility Principle in Ruby" />
</p>




<p>
  Assume that we already had the code:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AuthenticatesUser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">matches?</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>     <span class="n">do_some_authentication</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NotAllowedError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">matches?</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">find_from_db</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">==</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The AuthenticatesUser class is responsible for authenticating the user as well as knowing if the email and password match the ones in the database. It has two responsibilities, and according to the principle it should only have one, let&#8217;s extract one.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AuthenticatesUser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">MatchesPasswords</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span><span class="o">.</span><span class="n">matches?</span>
</span><span class='line'>     <span class="n">do_some_authentication</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NotAllowedError</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MatchesPasswords</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>     <span class="vi">@email</span> <span class="o">=</span> <span class="n">email</span>
</span><span class='line'>     <span class="vi">@password</span> <span class="o">=</span> <span class="n">password</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">matches?</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">find_from_db</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="vi">@email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span><span class="o">.</span><span class="n">encrypted_password</span> <span class="o">==</span> <span class="n">encrypt</span><span class="p">(</span><span class="vi">@password</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  I&#8217;ve used a refactoring technique called &#8220;Extract Class&#8221; and then use it on the class I already had, this is called sharing behaviour through &#8220;Composition&#8221;.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Push to Multiple Git Repositories]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/16/push-to-multiple-git-repositories/"/>
    <updated>2015-03-16T20:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/16/push-to-multiple-git-repositories</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Push to Multiple Git Repositories" />
</p>




<p>
  Here&#8217;s a cool little trick I&#8217;ve found out about the other day. Even though Git is a distributed revision control system, there are times when you need to push to two systems at once. In my case those systems are Github and Heroku. Here is a simple way to do it by modifying your .git/config file.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">core</span><span class="o">]</span>
</span><span class='line'>  <span class="n">repositoryformatversion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">filemode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">bare</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">logallrefupdates</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;heroku&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@heroku</span><span class="o">.</span><span class="n">com</span><span class="ss">:pgsearch</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/*</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">heroku</span><span class="o">/*</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;github&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:Bunlong</span><span class="o">/</span><span class="n">rvm</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/*</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">github</span><span class="o">/*</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="s2">&quot;origin&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@heroku</span><span class="o">.</span><span class="n">com</span><span class="ss">:pgsearch</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@github</span><span class="o">.</span><span class="n">com</span><span class="ss">:Bunlong</span><span class="o">/</span><span class="n">rvm</span><span class="o">.</span><span class="n">git</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The &#8220;heroku&#8221; and &#8220;github&#8221; remotes are generated by git and are created in the setup instructional steps of each service respectively. I went ahead and manually added the remote &#8220;origin&#8221; and just copied the url variable from the other remotes. You&#8217;ll now be able to push to both by calling &#8220;git push origin&#8221; and then you can fetch from each one as individually needed.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Choose Ruby on Rails Framework?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/16/why-choose-ruby-on-rails-framework/"/>
    <updated>2015-03-16T20:03:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/16/why-choose-ruby-on-rails-framework</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Why Choose Ruby on Rails Framework?" />
</p>




<p>
  Ruby on rails is one of the popular development frameworks for regular websites as well as kind of tools, web and mobile apps or combinations of all. Some of the following reasons which makes it popular among others:
</p>




<p>
  <strong>Higher Flexibility</strong> - In Ruby on Rails, it is easy to mold the platform to suit different business needs more efficiently than other frameworks. We can quickly mock up a working prototype, and then see how things work and then build on the idea. Faster Development Speed - In Rails, there are lots of in-built components(called gems) available which we can re-use to build the application rather than building everything from scratch.
</p>




<p>
  <strong>Agile Development at its best</strong> - Ruby on Rails is developed using the MVC design pattern along with the agile methodology which is well suited for web application development with fast changing requirements.
</p>




<p>
  <strong>Integrated testing tools</strong> - Rails features a convenient testing tool as it automatically starts producing the skeleton test code in background at the time of development. Rails tests can also simulate browser requests and thus you can test your application&#8217;s response without having to test it over browser.
</p>




<p>
  <strong>Compatibility</strong> - Rails development is compatible with a wide range of web servers and databases; which ultimately makes the web deployment easier.Cost-effective Web solutions - As it is an open source framework this helps in developing cost-effective web applications without sacrificing performance, speed and quality.
</p>

]]></content>
  </entry>
  
</feed>
