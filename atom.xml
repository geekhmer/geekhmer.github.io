<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2014-11-09T22:53:13+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Most Gem That I Use for Developing Ruby on Rails Project]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/07/the-most-gem-that-i-use-for-developing-ruby-on-rails-project/"/>
    <updated>2014-11-07T20:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/07/the-most-gem-that-i-use-for-developing-ruby-on-rails-project</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/the_most_gem_i_use.jpg" alt="The most gem that I use for developing ruby on rails project" />
</p>




<h3>activerecord</h3>




<p>
  <strong>1. kaminari</strong><br/>
  Description: A Scope & Engine based, clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs.<br/>
  Source: <a href="https://github.com/amatsuda/kaminari" target="_blank">https://github.com/amatsuda/kaminari</a>
</p>




<p>
  <strong>2. i18n-active_record</strong><br/>
  Description: Use to lookup translations in the database.<br/>
  Source: <a href="https://github.com/svenfuchs/i18n-active_record" target="_blank">https://github.com/svenfuchs/i18n-active_record</a>
</p>




<p>
  <strong>3. paperclip</strong><br/>
  Description: Paperclip is intended as an easy file attachment library for Active Record.<br/>
  Source: <a href="https://github.com/thoughtbot/paperclip" target="_blank">https://github.com/thoughtbot/paperclip</a>
</p>




<p>
  <strong>4. paperclip-meta</strong><br/>
  Description: Use for adding width, height, and size to paperclip images.<br/>
  Source: <a href="https://github.com/teeparham/paperclip-meta" target="_blank">https://github.com/teeparham/paperclip-meta</a>
</p>




<p>
  <strong>5. swf_file</strong><br/>
  Description: SWF File is lightweight gem to read swf file headers from within a Ruby application.<br/>
  Source: <a href="https://github.com/DBA/swf_file" target="_blank">https://github.com/DBA/swf_file</a>
</p>




<h3>delayed_job</h3>




<p>
  <strong>1. delayed_job_active_record</strong><br/>
  Description: delayed_job_active_record encapsulates the common pattern of asynchronously executing longer tasks in the background.<br/>
  Source: <a href="https://github.com/collectiveidea/delayed_job" target="_blank">https://github.com/collectiveidea/delayed_job</a>
</p>




<p>
  <strong>2. delayed_job_web</strong><br/>
  Description: Resque like web interface for delayed job.<br/>
  Source: <a href="https://github.com/ejschmitt/delayed_job_web" target="_blank">https://github.com/ejschmitt/delayed_job_web</a>
</p>




<h3>mongoid</h3>




<p>
  <strong>1. mongoid</strong><br/>
  Description: Mongoid is an ODM (Object-Document-Mapper) framework for MongoDB in Ruby.<br/>
  Source: <a href="https://github.com/mongoid/mongoid" target="_blank">https://github.com/mongoid/mongoid</a>
</p>




<p>
  <strong>2. mongoid-rails-instrumentation</strong><br/>
  Description: Add additional information to rails logs about total time for MongoDB queries in action processing.<br/>
  Source: <a href="https://github.com/fredjean/mongoid-rails-instrumentation" target="_blank">https://github.com/fredjean/mongoid-rails-instrumentation</a>
</p>




<h3>solr</h3>




<p>
  <strong>1. rsolr</strong><br/>
  Description: A simple, extensible Ruby client for Apache Solr.<br/>
  Source: <a href="https://github.com/rsolr/rsolr" target="_blank">https://github.com/rsolr/rsolr</a>
</p>




<h3>views</h3>




<p>
  <strong>1. haml-rails</strong><br/>
  Description: Haml-rails provides Haml generators for rails 3.<br/>
  Source: <a href="https://github.com/indirect/haml-rails" target="_blank">https://github.com/indirect/haml-rails</a>
</p>




<p>
  <strong>2. simple_form</strong><br/>
  Description: simple_form aims to be as flexible as possible while helping you with powerful components to create your form.<br/>
  Source: <a href="https://github.com/plataformatec/simple_form" target="_blank">https://github.com/plataformatec/simple_form</a>
</p>




<p>
  <strong>3. unicode</strong><br/>
  Description: Unicode string manipulation library for Ruby.<br/>
  Source: <a href="https://github.com/blackwinter/unicode" target="_blank">https://github.com/blackwinter/unicode</a>
</p>




<p>
  <strong>4. wicked_pdf</strong><br/>
  Description: Wicked PDF uses the shell utility wkhtmltopdf to serve a PDF file to a user from HTML.<br/>
  Source: <a href="https://github.com/mileszs/wicked_pdf" target="_blank">https://github.com/mileszs/wicked_pdf</a>
</p>




<p>
  <strong>5. wkhtmltopdf-binary</strong><br/>
  Description: Provides binaries for WKHTMLTOPDF project in an easily accessible package.<br/>
  Source: <a href="https://rubygems.org/gems/wkhtmltopdf-binary" target="_blank">https://rubygems.org/gems/wkhtmltopdf-binary</a>
</p>




<p>
  <strong>6. best_in_place</strong><br/>
  Description: Best in Place is a jQuery based AJAX Inplace-Editor that takes profit of RESTful server-side controllers to allow users to edit stuff with no need of forms.<br/>
  Source: <a href="https://github.com/bernat/best_in_place" target="_blank">https://github.com/bernat/best_in_place</a>
</p>




<p>
  <strong>7. mustache</strong><br/>
  Description: Mustache is a framework-agnostic way to render logic-free views.<br/>
  Source: <a href="https://github.com/mustache/mustache" target="_blank">https://github.com/mustache/mustache</a>
</p>




<p>
  <strong>8. olive</strong><br/>
  Description: is the rails helper​ gem that enables to use content_for in controllers.<br/>
  Source: <a href="https://github.com/Bunlong/olive" target="_blank">https://github.com/Bunlong/olive</a>
</p>




<p>
  <strong>9. activenavbar</strong><br/>
  Description: is the gem that use to set the active navbar link, a link becomes active when you click on it.<br/>
  Source: <a href="https://github.com/Bunlong/activenavbar" target="_blank">https://github.com/Bunlong/activenavbar</a>
</p>




<h3>utils</h3>




<p>
  <strong>1. uuidtools</strong><br/>
  Description: uuidtools was designed to be a simple library for generating any of the various types of uuids.<br/>
  Source: <a href="https://github.com/sporkmonger/uuidtools/tree/" target="_blank">https://github.com/sporkmonger/uuidtools/tree</a>
</p>




<p>
  <strong>2. geoip</strong><br/>
  Description: The Ruby gem for querying Maxmind.com&#8217;s GeoIP database, which returns the geographic location of a server given its IP address.<br/>
  Source: <a href="https://github.com/cjheath/geoip" target="_blank">https://github.com/cjheath/geoip</a>
</p>




<p>
  <strong>3. fakie</strong><br/>
  Description: Libphonenumber Ruby wrapper.<br/>
  Source: <a href="https://github.com/seesawco/fakie" target="_blank">https://github.com/seesawco/fakie</a>
</p>




<h3>auth</h3>




<p>
  <strong>1. devise</strong><br/>
  Description: devise is a flexible authentication solution for Rails.<br/>
  Source: <a href="https://github.com/plataformatec/devise" target="_blank">https://github.com/plataformatec/devise</a>
</p>




<p>
  <strong>2. devise-encryptable</strong><br/>
  Description: Devise encryptable behavior.<br/>
  Source: <a href="https://github.com/plataformatec/devise-encryptable" target="_blank">https://github.com/plataformatec/devise-encryptable</a>
</p>




<p>
  <strong>3. CanCan</strong><br/>
  Description: CanCan is an authorization library for Ruby on Rails.<br/>
  Source: <a href="https://github.com/ryanb/cancan" target="_blank">https://github.com/ryanb/cancan</a>
</p>




<p>
  <strong>4. rolify</strong><br/>
  Description: Role management library with resource scoping.<br/>
  Source: <a href="https://github.com/RolifyCommunity/rolify" target="_blank">https://github.com/RolifyCommunity/rolify</a>
</p>




<h3>aws</h3>




<p>
  <strong>1. aws-sdk</strong><br/>
  Description: The official AWS SDK for Ruby.<br/>
  Source: <a href="https://github.com/aws/aws-sdk-ruby" target="_blank">https://github.com/aws/aws-sdk-ruby</a>
</p>




<h3>misc</h3>




<p>
  <strong>1. passenger</strong><br/>
  Description: Phusion Passenger™ is a web server and application server, designed to be fast, robust and lightweight.<br/>
  Source: <a href="https://github.com/phusion/passenger" target="_blank">https://github.com/phusion/passenger</a>
</p>




<p>
  <strong>2. whenever</strong><br/>
  Description: Whenever is a Ruby gem that provides a clear syntax for writing and deploying cron jobs.<br/>
  Source: <a href="https://github.com/javan/whenever" target="_blank">https://github.com/javan/whenever</a>
</p>




<p>
  <strong>3. ruby-graphviz</strong><br/>
  Description: Ruby interface to the GraphViz graphing tool.<br/>
  Source: <a href="https://github.com/glejeune/Ruby-Graphviz/" target="_blank">https://github.com/glejeune/Ruby-Graphviz/</a>
</p>




<h3>rake</h3>




<p>
  <strong>1. sitemap_generator</strong><br/>
  Description: SitemapGenerator is the easiest way to generate Sitemaps in Ruby.<br/>
  Source: <a href="https://github.com/kjvarga/sitemap_generator" target="_blank">https://github.com/kjvarga/sitemap_generator</a>
</p>




<p>
  <strong>2. fog</strong><br/>
  Description: fog is the Ruby cloud services library.<br/>
  Source: <a href="https://github.com/fog/fog" target="_blank">https://github.com/fog/fog</a>
</p>




<p>
  <strong>3. progressbar</strong><br/>
  Description: Ruby/ProgressBar is a text progress bar library for Ruby.<br/>
  Source: <a href="https://github.com/peleteiro/progressbar" target="_blank">https://github.com/peleteiro/progressbar</a>
</p>




<p>
  <strong>4. parallel</strong><br/>
  Description: Ruby parallel processing made simple and fast.<br/>
  Source: <a href="https://github.com/grosser/parallel" target="_blank">https://github.com/grosser/parallel</a>
</p>




<p>
  <strong>5. terminal-table</strong><br/>
  Description: Ruby ASCII Table Generator, simple and feature rich.<br/>
  Source: <a href="https://github.com/tj/terminal-table" target="_blank">https://github.com/tj/terminal-table</a>
</p>




<h3>production</h3>




<p>
  <strong>1. dalli</strong><br/>
  Description: Dalli is a high performance pure Ruby client for accessing memcached servers.<br/>
  Source: <a href="https://github.com/mperham/dalli" target="_blank">https://github.com/mperham/dalli</a>
</p>




<p>
  <strong>2. exception_notification</strong><br/>
  Description: The Exception Notification gem provides a set of notifiers for sending notifications when errors occur in a Rack/Rails application. The built-in notifiers can deliver notifications by email, campfire rooms or via webhooks.<br/>
  Source: <a href="https://github.com/smartinez87/exception_notification" target="_blank">https://github.com/smartinez87/exception_notification</a>
</p>




<p>
  <strong>3. newrelic_rpm</strong><br/>
  Description: New Relic is a performance management system, developed by New Relic, Inc. It provides you with deep information about the performance of your Rails or Ruby application as it runs in production.<br/>
  Source: <a href="https://github.com/newrelic/rpm" target="_blank">https://github.com/newrelic/rpm</a>
</p>




<h3>development & test</h3>




<p>
  <strong>1. brakeman</strong><br/>
  Description: Brakeman is a static analysis tool which checks Ruby on Rails applications for security vulnerabilities.<br/>
  Source: <a href="https://github.com/presidentbeef/brakeman" target="_blank">https://github.com/presidentbeef/brakeman</a>
</p>




<p>
  <strong>2. ffaker</strong><br/>
  Description: A library for generating fake data such as names, addresses, and phone numbers.<br/>
  Source: <a href="https://github.com/EmmanuelOga/ffaker" target="_blank">https://github.com/EmmanuelOga/ffaker</a>
</p>




<p>
  <strong>3. binding_of_caller</strong><br/>
  Description: Retrieve the binding of a method&#8217;s caller.<br/>
  Source: <a href="https://github.com/banister/binding_of_caller" target="_blank">https://github.com/banister/binding_of_caller</a>
</p>




<h4>guard</h4>




<p>
  <strong>4. rb-inotify</strong><br/>
  Description: This is a simple wrapper over the inotify Linux kernel subsystem for monitoring changes to files and directories.<br/>
  Source: <a href="https://github.com/nex3/rb-inotify" target="_blank">https://github.com/nex3/rb-inotify</a>
</p>




<p>
  <strong>5. guard-rspec</strong><br/>
  Description: Guard::RSpec allows to automatically & intelligently launch specs when files are modified.<br/>
  Source: <a href="https://github.com/guard/guard-rspec" target="_blank">https://github.com/guard/guard-rspec</a>
</p>




<p>
  <strong>6. guard-jasmine</strong><br/>
  Description: Guard::Jasmine automatically tests your Jasmine specs when files are modified.<br/>
  Source: <a href="https://github.com/guard/guard-jasmine" target="_blank">https://github.com/guard/guard-jasmine</a>
</p>




<p>
  <strong>7. guard-jasmine</strong><br/>
  Description: Zeus preloads your Rails app so that your normal development tasks such as console, server, generate, and specs/tests take less than one second.<br/>
  Source: <a href="https://github.com/burke/zeus" target="_blank">https://github.com/burke/zeus</a>
</p>




<h4>javascript</h4>




<p>
  <strong>8. jasminerice</strong><br/>
  Description: Pain free coffeescript testing.<br/>
  Source: <a href="https://github.com/bradphelan/jasminerice" target="_blank">https://github.com/bradphelan/jasminerice</a>
</p>




<h4>console</h4>




<p>
  <strong>9. pry</strong><br/>
  Description: An IRB alternative and runtime developer console.<br/>
  Source: <a href="https://github.com/pry/pry" target="_blank">https://github.com/pry/pry</a>
</p>




<p>
  <strong>10. pry-debugger</strong><br/>
  Description: Fast execution control in Pry.<br/>
  Source: <a href="https://github.com/nixme/pry-debugger" target="_blank">https://github.com/nixme/pry-debugger</a>
</p>




<p>
  <strong>11 pry-rails</strong><br/>
  Description: Avoid repeating yourself, use pry-rails instead of copying the initializer to every rails project. This is a small gem which causes rails console to open pry.<br/>
  Source: <a href="https://github.com/rweng/pry-rails" target="_blank">https://github.com/rweng/pry-rails</a>
</p>




<h4>web server</h4>




<p>
  <strong>12. thin</strong><br/>
  Description: A very fast & simple Ruby web server.<br/>
  Source: <a href="https://github.com/macournoyer/thin/" target="_blank">https://github.com/macournoyer/thin/</a>
</p>




<h4>rspec, capybara and shoulda</h4>




<p>
  <strong>13. rspec-rails</strong><br/>
  Description: rspec-rails is a testing framework for Rails.<br/>
  Source: <a href="https://github.com/rspec/rspec-rails" target="_blank">https://github.com/rspec/rspec-rails</a>
</p>




<p>
  <strong>14. headless</strong><br/>
  Description: Ruby wrapper for Xvfb, the virtual framebuffer.<br/>
  Source: <a href="https://github.com/leonid-shevtsov/headless" target="_blank">https://github.com/leonid-shevtsov/headless</a>
</p>




<p>
  <strong>15. factory_girl_rails</strong><br/>
  Description: factory_girl_rails provides Rails integration for factory_girl.<br/>
  Source: <a href="https://github.com/thoughtbot/factory_girl_rails" target="_blank">https://github.com/thoughtbot/factory_girl_rails</a>
</p>




<p>
  <strong>16. capybara</strong><br/>
  Description: Capybara helps you test web applications by simulating how a real user would interact with your app.<br/>
  Source: <a href="https://github.com/jnicklas/capybara" target="_blank">https://github.com/jnicklas/capybara</a>
</p>




<p>
  <strong>17. shoulda-matchers</strong><br/>
  Description: shoulda-matchers provides Test::Unit- and RSpec-compatible one-liners that test common Rails functionality.<br/>
  Source: <a href="https://github.com/thoughtbot/shoulda-matchers" target="_blank">https://github.com/thoughtbot/shoulda-matchers</a>
</p>




<h3>development</h3>




<p>
  <strong>1. rails-erd</strong><br/>
  Description: Generate Entity-Relationship Diagrams for Rails applications.<br/>
  Source: <a href="https://github.com/voormedia/rails-erd" target="_blank">https://github.com/voormedia/rails-erd</a>
</p>




<p>
  <strong>2. better_errors</strong><br/>
  Description: Better Errors replaces the standard Rails error page with a much better and more useful error page.<br/>
  Source: <a href="https://github.com/charliesome/better_errors" target="_blank">https://github.com/charliesome/better_errors</a>
</p>




<p>
  <strong>3. foreman</strong><br/>
  Description: Manage Procfile-based applications.<br/>
  Source: <a href="https://github.com/ddollar/foreman" target="_blank">https://github.com/ddollar/foreman</a>
</p>




<h3>test</h3>




<p>
  <strong>1. simplecov</strong><br/>
  Description: SimpleCov is a code coverage analysis tool for Ruby.<br/>
  Source: <a href="https://github.com/colszowka/simplecov" target="_blank">https://github.com/colszowka/simplecov</a>
</p>




<p>
  <strong>2. json_spec</strong><br/>
  Description: Easily handle JSON in RSpec and Cucumber.<br/>
  Source: <a href="https://github.com/collectiveidea/json_spec" target="_blank">https://github.com/collectiveidea/json_spec</a>
</p>




<p>
  <strong>3. database_cleaner</strong><br/>
  Description: Strategies for cleaning databases in Ruby. Can be used to ensure a clean state for testing.<br/>
  Source: <a href="https://github.com/DatabaseCleaner/database_cleaner" target="_blank">https://github.com/DatabaseCleaner/database_cleaner</a>
</p>




<h3>assets</h3>




<p>
  <strong>1. asset_sync</strong><br/>
  Description: Asset Sync is built to run with the new Rails Asset Pipeline feature introduced in Rails 3.1. After you run bundle exec rake assets:precompile your assets will be synchronised to your S3 bucket, optionally deleting unused files and only uploading the files it needs to.<br/>
  Source: <a href="https://github.com/rumblelabs/asset_sync" target="_blank">https://github.com/rumblelabs/asset_sync</a>
</p>




<p>
  <strong>2. sass-rails</strong><br/>
  Description: This gem provides official integration for Ruby on Rails projects with the Sass stylesheet language.<br/>
  Source: <a href="https://github.com/rails/sass-rails" target="_blank">https://github.com/rails/sass-rails</a>
</p>




<p>
  <strong>3. bootstrap-sass</strong><br/>
  Description: Official Sass port of Bootstrap.<br/>
  Source: <a href="https://github.com/twbs/bootstrap-sass" target="_blank">https://github.com/twbs/bootstrap-sass</a>
</p>




<p>
  <strong>4. jquery-fileupload-rails</strong><br/>
  Description: jQuery File Upload integrated for Rails Asset Pipeline.<br/>
  Source: <a href="https://github.com/tors/jquery-fileupload-rails" target="_blank">https://github.com/tors/jquery-fileupload-rails</a>
</p>




<p>
  <strong>5. bootstrap-wysihtml5-rails</strong><br/>
  Description: WYSIWYG editor for Bootstrap, integrated in Rails assets pipeline.<br/>
  Source: <a href="https://github.com/Nerian/bootstrap-wysihtml5-rails" target="_blank">https://github.com/Nerian/bootstrap-wysihtml5-rails</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9 things to be a professional programmer]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer/"/>
    <updated>2014-10-16T14:23:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/professional_programmer.jpg" width="550" alt="Professional Programmer" />
</p>




<p>
  I&#8217;ve been reading a lot of code, design pattern, leading and project management book for last few years and I&#8217;ve noted many good points how to be a Professional Programmer. Let enjoy reading and become &#8220;Go-to guy&#8221; together.
</p>




<p>
  <strong>1. Knows the domain of their project</strong><br/>
  As a professional programmer, your job is more than just reading requirement specifications and code the software. You should also know where and how the project is being used by the its users in the real world.
</p>




<p>
  This means that if you are working on an accounting software, you should at least have some basic knowledge about accounting. It is not necessary to become an expert in the subject, but a little knowledge helps a big way when solving problems and coming up with solutions.
</p>




<p>
   <strong>2. Is a team player</strong><br/>
   As a professional programmer, you should of course be polite and helpful towards other people. When other people ask for help, you should treat them in the same manner as you wish someone would treat you, if you were stuck. You should always offer help and welcome help from others.
</p>




<p>
  Also, you should not build a wall around yourself or your code. It is important to remember that you don’t own the code, but rather the team does. So instead of dismissing anyone from working in, or even seeing, the code, it should be encouraged. This will help you grow as a programmer, since it opens up for feedback, but it also greatly benefits the group and the project itself.
</p>




<p>
  Over time, teams slowly grows better and better as well, resulting in team members will eventually know each others strengths and weaknesses. When this happens the team becomes very efficient on solving issues as a group. Since it takes time to build up a solid team, when a project ends, it is smarter to give the team a new project, rather than disbanding the whole group.
</p>




<p>
  <strong>3. Takes responsibility</strong><br/>
  As a professional programmer, you take responsibility for your code. It is your job to know what your code does and know that all of the code works. When coding you should always aim to cause no harm in your project, by always aiming to get the error rate as close to zero as possible.
</p>




<p>
  This is done by simple writing tests. Tested code gives you more confident about your work, knowing the fact that what deliver is at top class and checked against errors. The QA department should never find bugs. An entire project with tested code also gives the programmer more confident to actually do something about smelly code.
</p>




<p>
  Unit and acceptance tests should be done automatically (due to it is significantly cheaper than manually testing) by using a continuous integration system. These tests should be running all the time, every time a programmer commits code to the project. If a test breaks, it should be fixed as soon as possible.
</p>




<p>
  As a professional programmer is also strongly for Test Driven Development. The TDD discipline forces the programmer to think about good design and structuring up their code to make it test-friendly, it is actually unprofessional not to use TDD.
</p>




<p>
  <strong>4. Knows patterns and disciplines</strong><br/>
  As a professional programmer, it is your responsibility to write high-quality, tested, clean code. This includes knowing design patterns, principles, methods, disciplines and artifacts.
</p>




<p>
  Since the software development industry is changing constantly with new ideas and tools around the next corner, it is also equally important that you keep yourself up to date on new disciples and techniques.
</p>




<p>
  <strong>5. Remains calm during hectic situations</strong><br/>
  As a professional developer, you should always remain calm during hectic and stressful situations. Instead, try and think out the best solution to resolve your situation and the inform your superiors about the situation and ask for their feedback and suggestions.
</p>




<p>
  Acting on panic will most likely just result in making more errors. In emergencies, you could try and pair program with a colleague. Not only will this probably decrease the number of new errors, but pair programming is also a great source of sharing knowledge between team members.
</p>




<p>
  <strong>6. Keeps practicing profession</strong><br/>
  As a professional programmer, you should spend time caring for your profession. Just like in any other profession, practice gives performance, skill and experience.
</p>




<p>
  It is your own responsibility to keep training yourself by reading, practicing and learning - actually anything that helps you grow as a software developer and helps you get on board with the constant industry changes.
</p>




<p>
  An important note is this should be done on your own time, not on your employer&#8217;s. It is not their responsibility to train you, but your own. However, do not mistake this with you should be doing your job during this time. This time should be dedicated for you and your own enjoyment only. You should do anything that interests you. If you work 40 hours a week ,you should spend around 20 additional hours enhancing your own profession.
</p>




<p>
  <strong>7. Rests</strong><br/>
  As a professional programmer, you should know that being a software developer is a very intellectual and exhausting job. It is important that you don’t overwork yourself, but rather find a balance in life with your job. Being a well rested developer makes you more focused and makes you perform better.
</p>




<p>
  <strong>8. Knows the value of time</strong><br/>
  As a professional programmer, you should know the value of time. Your time is expensive and should not be wasted, meaning you should use your time wisely and know things like the the high cost of meetings. Politely decline meetings that do not benefit you, or if your present doesn’t benefit anyone.
</p>




<p>
  Meetings should also have a clear agenda and a goal. If you notice that a meeting is getting boring and does not benefit you anymore, or if the agenda gets abandoned or if the meeting simple gets high-jacked, either request a new topic or politely leave the meeting. You probably have better things to do then remain seated.
</p>




<p>
  <strong>9. Is never afraid to say no</strong><br/>
  As a professional programmer should not be afraid to say no. If you know something is unrealistic (such as an estimation, a deadline, a requirement, etc) it is expected from you to speak up. Not most of the time - but all the time.
</p>




<p>
  You shouldn’t even say you can try, as that will give a false impression to everyone that the task is doable, and maybe even worse, it turns you into a liar which can hurt your reputation among your superiors and colleagues. Instead, try and rephrase yourself and explain your concerns. Be clear and specific about the problems and dates and times.
</p>




<p>
  The definition of an estimate is interpreted by different people. For business people, estimations are commitments. For software developers, estimations are guesses, measured in probability.
</p>




<p>
  You should only do commitments, when you are certain it can be done. When professional commits to something, the provide with a hard number and makes certain the job before the deadline.
</p>




<p>
  So far so good, the more you read the more you know the more you know the more places you&#8217;ll go. See you!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EngineX/Nginx Installation and Basic Usage]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage/"/>
    <updated>2014-10-07T21:52:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_installation.png" width="500" alt="Nginx plus" />
</p>




<p>
  Nginx is available in most Linux distributions. In this article, I use Ubuntu 14.10.
</p>




<p>
  <strong>Installation</strong><br/>
  Open your terminal and run the following command as root user:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now Nginx is installed, you can use the startup script to start, stop or restart the Web server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">stop</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Most configuration changes do not require to restart, in which case you can use the reload command. It is generally a good idea to test the Nginx configuration file for errors before reloading:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nginx</span> <span class="o">-</span><span class="n">t</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Let&#8217;s go ahead and start the server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Nginx now should be running on your machine. If you open http://127.0.0.1/ or http://localhost in your browser, you should see a page with “Welcome to nginx!”.
</p>




<p>
  <strong>Main Configuration File (/etc/nginx/nginx.conf)</strong><br/>
  Now Nginx is installed, let&#8217;s take a look at its config file that located at /etc/nginx/nginx.conf. This file contains the server-wide settings for Nginx, and it should look similar to this:
</p>




<figure class='code'><figcaption><span>/etc/nginx/nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="n">www</span><span class="o">-</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="n">worker_processes</span>  <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">error_log</span>  <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="n">pid</span>  <span class="sr">/var/</span><span class="n">run</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">events</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">worker_connections</span>  <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">http</span> <span class="p">{</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">mime</span><span class="o">.</span><span class="n">types</span><span class="p">;</span>
</span><span class='line'>  <span class="n">default_type</span> <span class="n">application</span><span class="o">/</span><span class="n">octet</span><span class="o">-</span><span class="n">stream</span><span class="p">;</span>
</span><span class='line'>  <span class="n">access_log</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">access</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sendfile</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">keepalive_timeout</span> <span class="mi">65</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp_nodelay</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/*</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We are not going to change any of these settings, but let&#8217;s talk about some of them to help us understand how Nginx works:
</p>




<p>
  worker_processes setting tells Nginx how many child processes to start. If your server has more than one processor or is performing large amounts of disk IO, you might want to try increasing this number to see if you get better performance.
</p>




<p>
  worker_connections setting limits the number of concurrent connections per worker process. To determine the maximum number of concurrent requests, you simply multiply worker_processes by worker_connections.
</p>




<p>
  error_log and access_log settings indicate the default logging locations. You also can configure these settings on a per-site basis, as you will see later in the next article. Like Apache, Nginx is configured to run as the www-data user, but you easily can change this with the user setting. The startup script for Nginx needs to know the process ID for the master process, which is stored in /var/run/nginx.pid, as indicated by the pid setting.
</p>




<p>
  sendfile setting allows Nginx to use a special Linux system call to send a file over the network in a very efficient manner. The gzip option instructs Nginx to compress each response, which uses more CPU but saves bandwidth and decreases response time. Additionally, Nginx provides another compression module called gzip precompression (available as of version 0.6.24). This module looks for a compressed copy of the file with a .gz extension in the same location and serves it to gzip-enabled clients. This prevents having to compress the file each time it&#8217;s requested.
</p>




<p>
  The last setting we are concerned with is the include directive for the sites-enabled directory. Inside /etc/nginx, you&#8217;ll see two other directories, /etc/nginx/sites-available and /etc/nginx/sites-enabled. For each Web site you want to host with Nginx, you should create a config file in /etc/nginx/sites-available, then create a symlink in /etc/nginx/sites-enabled that points to the config file you created. The main Nginx config file includes all the files in /etc/nginx/sites-enabled. This helps organize your configuration files and makes it very easy to enable and disable specific Web sites.
</p>




<p>
  So far so good, next article I will show you how to work with Nginx. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EngineX/Nginx the High-Performance Web Server and Reverse Proxy]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/06/enginex-slash-nginx-the-high-performance-web-server-and-reverse-proxy/"/>
    <updated>2014-10-06T22:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/06/enginex-slash-nginx-the-high-performance-web-server-and-reverse-proxy</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx-plus.png" width="500" alt="Nginx plus" />
</p>




<p>
  Apache is the most popular Web server and one of the most successful open-source projects of all time. Apache has served more Web sites than any other Web server. Many of the world&#8217;s largest Web sites, including YouTube, Facebook, Wikipedia , use Apache to serve billions of page views per month. Over the years, Apache has proven itself to be a very stable, secure and configurable Web server.
</p>




<p>
  Although Apache is an excellent Web server, what if there were an alternative with the same functionality, a simpler configuration and better performance?<br/>
  A Web server exists with better performance, and it&#8217;s called Engine X or Nginx.
</p>




<p>
  Nginx is a high-performance Web server and reverse proxy. Nginx is used by some of the largest Web sites in the US, including WordPress etc, and it&#8217;s currently serving about 500 million requests per day. Nginx is the fourth-most-popular Web server, and it is currently serving more than two million Web sites. 
</p>




<p>
  <strong>Why Nginx?</strong><br/>
  Like Apache, Nginx has all the features you would expect from a leading Web server:<br/>
  1. Static file serving<br/>
  2. SSL/TLS support<br/>
  3. Virtual hosts<br/>
  4. Reverse proxying<br/>
  5. Load balancing<br/>
  6. Compression<br/>
  7. Access controls<br/>
  8. URL rewriting<br/>
  9. Custom logging<br/>
  10. Server-side includes<br/>
  11. Caching
</p>




<p>
   The main advantages of Nginx over Apache are performance and efficiency. Nginx is able to serve more requests per second with less resources because of its architecture. It consists of a master process, which delegates work to one or more worker processes. Each worker handles multiple requests in an event-driven or asynchronous manner using special functionality from the Linux kernel. This allows Nginx to handle a large number of concurrent requests quickly with very little overhead. Apache can be configured to use either a process per request (pre-fork) or a thread for each request (worker). Although Apache&#8217;s threaded mode performs much better than its pre-fork mode, it still uses more memory and CPU than Nginx&#8217;s event-driven architecture.
</p>




<p>
  So far so good, next article I will show you how to install & use it. See you!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Readable Booleans]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/30/ruby-readable-booleans/"/>
    <updated>2014-08-30T09:58:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/30/ruby-readable-booleans</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" />
</p>




<p>
  There&#8217;s a great little trick you can do to improve the readability of your code. A common problem is dealing with methods that have a boolean flag arguments. Here&#8217;s an example I ran into just today in a Rails application:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rating_stars</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="n">clickable</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The problem with this is that you typically see calls like this scattered around the application:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">rating_stars</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="kp">true</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Would you know what true did there if I hadn&#8217;t shown you the name of the variable first? I didn&#8217;t. I had to go hunting for that method definition.
</p>




<p>
  Ironically the opposite problem, a magical dangling false, is much more rare in my experience. That&#8217;s typically the default for these kind of arguments and it just makes more sense and reads better to leave it out.
</p>




<p>
  Anyway, the point is that we can typically improve the ease of understanding the common case. Remember that one of the new features of Ruby 2.0 is keyword arguments. keyword arguments make it easier create readable method. For example, after looking up the method and understanding what was needed: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rating_stars</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="ss">clickable</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">rating_stars</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="ss">clickable</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, my hope is that might save a future maintainer a trip to the method definition to understand the call.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workshop - Learn Ruby On Rails in a Weekend]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/29/workshop-learn-ruby-on-rails-in-a-weekend/"/>
    <updated>2014-08-29T14:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/29/workshop-learn-ruby-on-rails-in-a-weekend</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" />
</p>




<h3>Let&#8217;s Start</h3>




<p>
  Have you always wanted to learn Ruby on Rails but never found the time to do so?<br/>
  Have you been reading articles and watching videos on Ruby on Rails but wish that someone could be by your side to answer your burning questions?
</p>




<p>
  This weekend workshop is designed to make you feel confident about what Ruby on Rails can do for you, and you&#8217;ll graduate from the class with knowledge on building web applications for fun or profit.
</p>




<p>
  In the 2 days, you&#8217;ll be doing lots of coding, In the process, you&#8217;ll learn about web design, application design process, database usage, and most importantly, the web application framework that Groupon, and many others were built with - Ruby on Rails.
</p>




<h3>You Will Learn</h3>




<p>
  <strong>1. Development Environment Setup</strong><br/>
  Learn to set up a &#8216;development environment&#8217; on your machine, and be introduced to the various open source tools and online services.
</p>




<p>
  <strong>2. Application and Database Design</strong><br/>
  Learn to decompose everyday problems into conceptual models that can be coded into a web application.
</p>




<p>
  <strong>3. Web Design</strong><br/>
  Learn basic HTML, CSS using the Bootstrap library to create beautiful and functional web applications.
</p>




<p>
  <strong>4. Ruby on Rails</strong><br/>
  Learn fundamentals of Ruby on Rails and be wowed by its magic and simplicity.
</p>




<p>
  <strong>5. Your Own App</strong><br/>
  Learn to build your own social networking app using Ruby on Rails.
</p>




<p>
  <strong>6. Cloud Deployment</strong><br/>
  Learn to deploy your web application to the cloud so that your friends can use it too.
</p>




<h3>Who can join?</h3>




<p>
  - Beginners, with great attitude and a strong will for learning Ruby on Rails.<br/>
  - Experienced programmers, who are new to web development or Ruby on Rails.
</p>




<h3>What to prepare?</h3>




<p>
  - Completed exercises on tryruby.org.<br/>
  - Your laptop to be installed with Ruby 2.1 and Rails 4 (we&#8217;ll get this done on Saturday).
</p>




<h3>Schedule</h3>




<p>
  <strong>First day</strong><br/>
  We&#8217;ll get you setup with Ruby on Rails on your laptop in the first hour, and then we&#8217;ll go through open source tools and online services like Git, Bundler, GitHub, Heroku&#8230; etc.
</p>




<p>
  <strong>Second day</strong><br/>
  We&#8217;ll start the day with creating a brand new Ruby on Rails app and setting it up with a home page. Unlike most courses, we&#8217;ll not be using Rails scaffold, and you&#8217;ll learn how to build an app from scratch, with your bare hands.<br/>
  We&#8217;ll learn:<br/>
  - Simple Web Design with Bootstrap.<br/>
  - Application Design Process.<br/>
  - Setting up of Databases.<br/>
  - User Authentication.<br/>
  - Rails Models and Forms.<br/>
  - Model Validations.<br/>
  - Ajax Updates.<br/>
  - Deploy to Cloud.
</p>




<h3>What to bring?</h3>




<p>
  - Your laptop (and charger).<br/>
  - Your &#8216;never say die&#8217; spirit.
</p>




<h3>Terms and Conditions</h3>




<p>
  Please bring your own laptop and charger. Internet is provided.<br/>
  The instructor reserves the rights to cancel the workshop if it does not have a minimum of 6 participants. 
</p>




<p>
  See you!!!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide to Become An Expert Ruby/Rails Developer]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/26/guide-to-become-an-expert-ruby-slash-rails-developer/"/>
    <updated>2014-08-26T09:35:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/26/guide-to-become-an-expert-ruby-slash-rails-developer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/guide_ruby_rails_developer.png" width="170" />
</p>




<p>
  This guide is meant to help you acquire the fundamental skills you need to become a Ruby Developer. Using books, video courses, and projects, you’ll learn how to develop web applications using Ruby, HTML & CSS, jQuery, and Rails. Additionally, you will learn about best practices, design patterns and principles, and the fundamentals of visual design. The goal is to build a solid foundation that you can expand on to become an expert Ruby Developer.
</p>




<p>
  <strong>Required Reading and Courses</strong><br/>
  1. The Passionate Programmer by Chad Fowler.<br/>
  2. Online Ruby Course by Pragmatic Studios.<br/>
  3. HTML & CSS by Jon Duckett.<br/>
  4. Smashing CoffeeScript by Alex Hudson.<br/>
  5. Don’t Make Me Think by Steve Krug.<br/>
  6. Everyday Rails Testing with RSpec by Aaron Sumner.<br/>
  7. Online Ruby on Rails Course by Pragmatic Studios.<br/>
  8. Bootstrapping Design by Jarrod Drysdale.<br/>
  9. Practical Object-Oriented Design in Ruby by Sandi Metz.
</p>




<p>
  <strong>How To Use This Guide</strong><br/>
  The best way to use this guide is to start from the Ruby section and proceed towards the CoffeeScript and jQuery section. Each section has a Core Activity and an Assessment. The core activities are meant to teach you and the assessments are meant for you to practice solving problems on your own. There are additional readings for each section for the purposes of professional development. These readings can be done in-between study sessions or during your commute to work, but don’t skip them.  I encourage you to read the entire guide before you start doing anything. It’s a good idea to know where you will end up before you invest any time.
</p>




<p>
  <strong>Setup Development Environment</strong><br/>
  Follow these <a href="https://github.com/thoughtbot/laptop" target="_blank">instructions</a> to setup your development environment for either Mac OS X or Linux. Download & install <a href="http://www.sublimetext.com/3" target="_blank">Sublime Text 3</a>
</p>




<p>
  <strong>Create a GitHub Account</strong><br/>
  Make sure you create a <a href="https://github.com/" target="_blank">GitHub account</a> if you don’t have one already. You’ll need a GitHub account in order to store and share your code with the world.
</p>




<p>
  So far so good, Continuous Learning to stay marketable.<br/>
  Take your time, see you in next article. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's New in Rails4 View?]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/14/whats-new-in-rails4-view/"/>
    <updated>2014-08-14T08:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/14/whats-new-in-rails4-view</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/what_is_new_in_rails4.png" width="500" />
</p>




<p>
  Well, previouse article I had talked about <a href="http://geekhmer.github.io/blog/2014/08/09/whats-new-in-rails4-activemodel/">What&#8217;s New in Rails4 ActiveModel?</a>.
  Today We are looking at view:
</p>




<p>
  Assume we have an owner class which has many items and each items are usualy belongs to an owner:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Owner</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:items</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:owner</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Select box</strong><br/>
  - Rails3 & 4<br/>
  In Rails3 & 4 if we want to build a select box with owner we could do it with a single method called:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">collection_select</span><span class="p">(</span><span class="ss">:item</span><span class="p">,</span> <span class="ss">:owner_id</span><span class="p">,</span> <span class="no">Owner</span><span class="o">.</span><span class="n">all</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Radio button & checkbox</strong><br/>
  - Rails3<br/>
  In Rails3 we need do with the loops and builds each of the elements:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% @owners.each </span><span class="k">do</span> <span class="o">|</span><span class="n">owner</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= radio_button_tag :owner_id, owner.id %&gt;</span>
</span><span class='line'>  <span class="o">&lt;%=</span> <span class="n">owner</span><span class="o">.</span><span class="n">name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  HTML output: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;owner_id&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;owner_id&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="sr">/&gt; Slow-draw</span>
</span><span class='line'><span class="sr">&lt;input id=&quot;owner_id&quot; name=&quot;owner_id&quot; type=&quot;radio&quot; value=&quot;2&quot; /</span><span class="o">&gt;</span> <span class="no">Sheriff</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - Rails4<br/>
  Now in Rails4 we have <code>collection_radio_buttons & collection_check_boxes</code> method which builds all elements from a collection:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">collection_radio_buttons</span><span class="p">(</span><span class="ss">:item</span><span class="p">,</span> <span class="ss">:owner_id</span><span class="p">,</span> <span class="no">Owner</span><span class="o">.</span><span class="n">all</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="n">collection_check_boxes</span><span class="p">(</span><span class="ss">:item</span><span class="p">,</span> <span class="ss">:owner_id</span><span class="p">,</span> <span class="no">Owner</span><span class="o">.</span><span class="n">all</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Date field</strong><br/>
  - Rails3<br/>
  At some points we must use <code>date_select</code> form helper:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">date_select</span> <span class="ss">:return_date</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  HTML output:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date_1i&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;item[return_date(1i)]&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;2008&quot;</span><span class="o">&gt;</span><span class="mi">2008</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">  ...</span>
</span><span class='line'><span class="sr">&lt;/se</span><span class="n">lect</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date_2li&quot;</span> <span class="nb">name</span> <span class="o">=</span><span class="s2">&quot;item[return_date(2i)]&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">selected</span><span class="o">=</span><span class="s2">&quot;selected&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;</span><span class="no">January</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">  ...</span>
</span><span class='line'><span class="sr">&lt;/se</span><span class="n">lect</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date_3i&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;item[return_date(3i)]&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/select&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - Rails4<br/>
  Rails4 now there is a date_field:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">date_field</span> <span class="ss">:return_date</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  HTML output:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;item[return_date]&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;date&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Memoization to Speed Up Your Code in Ruby/Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/11/use-memoization-to-speed-up-your-code-in-ruby-slash-rails/"/>
    <updated>2014-08-11T00:28:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/11/use-memoization-to-speed-up-your-code-in-ruby-slash-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" />
</p>




<p>
  Have you ever heard Memoization? In this article you will get an introduction of Memoization. You will learn what it is, how you can use it to speed up your code.
</p>




<p>
  <strong>What is Memoization?</strong><br/>
  Memoization is the process of storing a computed value to avoid duplicated work by future calls.
</p>




<p>
  <strong>What are Memoization used for?</strong><br/>
  - Perform some work<br/>
  - Store the work result<br/>
  - Use stored results in future calls
</p>




<p>
  <strong>Using</strong><br/>
  In Ruby the most common pattern for using Memoization is the conditional assignment operator: <code>||=</code>.
</p>




<p>
  <strong>Example</strong><br/>
  In Rails if you&#8217;ve ever worked with a user login system, you really family with the pattern of loading the <code>current_user</code> in the <code>application_controller.rb</code>:
</p>




<figure class='code'><figcaption><span>application_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Within each request in a Rails application you will usually see multiple calls to <code>current_user</code> that means <code>User.find</code> method is run multiple times.<br/>
</p>




<p>
  In this case, we know the problem is because there are multiple calls to <code>current_user</code> occurring. Let&#8217;s fix this code by introducing Memoization into the <code>current_user</code> method and storing the result of <code>User.find</code> method by using conditional assignment to an instance variable:
</p>




<figure class='code'><figcaption><span>application_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, there are no more calls to rebuild the <code>User</code> object each time <code>current_user</code> method is called.
</p>




<p>
  <strong>When should you memoize?</strong><br/>
  - When you&#8217;ve got duplicated database<br/>
  - When you&#8217;ve got expensive calculations<br/>
  - When you&#8217;ve got repeated calculations that don&#8217;t change<br/>
</p>




<p>
  <strong>When shouldn&#8217;t you memoize</strong><br/>
  - Memoization shouldn&#8217;t be used with methods that take parameters:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#incorrect</span>
</span><span class='line'><span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>  <span class="vi">@full_name</span> <span class="o">||=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">full_name</span><span class="p">(</span><span class="s1">&#39;Bunlong&#39;</span><span class="p">,</span> <span class="s1">&#39;Van&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;Bunlong Van&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">full_name</span><span class="p">(</span><span class="s1">&#39;Ryan&#39;</span><span class="p">,</span> <span class="s1">&#39;Van&#39;</span><span class="p">)</span> <span class="c1">#=&gt; &quot;Bunlong Van&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - Memoization shouldn&#8217;t be used with methods that use instance variables:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#incorrect</span>
</span><span class='line'><span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>  <span class="vi">@full_name</span> <span class="o">||=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@first_name</span> <span class="o">=</span> <span class="s1">&#39;Bunlong&#39;</span>
</span><span class='line'><span class="vi">@last_name</span> <span class="o">=</span> <span class="s1">&#39;Van&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">full_name</span> <span class="c1">#=&gt; &quot;Bunlong Van&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@first_name</span> <span class="o">=</span> <span class="s1">&#39;Ryan&#39;</span>
</span><span class='line'><span class="vi">@last_name</span> <span class="o">=</span> <span class="s1">&#39;Van&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">full_name</span> <span class="c1">#=&gt; &quot;Bunlong Van&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Memoization conditional assignment have problem when return nil or false in Ruby</strong><br/>
  If you are not clear in using conditional assignment it can bite you, let try code below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">print</span>
</span><span class='line'>  <span class="vi">@print</span> <span class="o">||</span> <span class="o">=</span> <span class="k">begin</span>
</span><span class='line'>                <span class="nb">puts</span> <span class="s2">&quot;printing&quot;</span>
</span><span class='line'>                <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>                <span class="kp">false</span>
</span><span class='line'>              <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span> <span class="c1">#=&gt; &quot;printing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span> <span class="c1">#=&gt; &quot;printing&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Suprised that &#8220;printing&#8221; was printed twice? Conditional assignment is always going to run if the instance variable <code>@print</code> is false or nil.<br/>
</p>




<p>
  Well, we can solve the problem by using <code>defined?</code>:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">print</span>
</span><span class='line'>  <span class="k">return</span> <span class="vi">@print</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="vi">@print</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;printing&quot;</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>  <span class="vi">@print</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span> <span class="c1">#=&gt; &quot;printing&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Memoization conditional assignment have problem when return nil or false in Rails</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What&#8217;s happen if <code>User.find</code> return nil? Conditional assignment is always going to run and current_user method is always going to call if the instance variable <code>@print</code> is false or nil.
</p>




<p>
  Well, we can fix the problem by using the Memoizable API in Rails:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># somewhere inside the class</span>
</span><span class='line'><span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Memoizable</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">memoize</span> <span class="ss">:current_user</span>
</span></code></pre></td></tr></table></div></figure>




<p><p>
  Or we can use <a href="https://github.com/dkubb/memoizable" target="_blank">Memoizable</a> to fix this problem
<p></p>

<p><p>
  So far so good, I hope this article comes in handy for some of you who haven’t heard of memoization yet or who just didn’t really understand what’s going on there. :)
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's New in Rails4 ActiveModel?]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/09/whats-new-in-rails4-activemodel/"/>
    <updated>2014-08-09T00:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/09/whats-new-in-rails4-activemodel</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/what_is_new_in_rails4.png" width="500" />
</p>




<p>
  Well, previouse article I had talked about <a href="http://geekhmer.github.io/blog/2014/08/05/good-rails3-activerecord-finder-vs-very-good-rails4-activerecord-finder/">What&#8217;s New in Rails4 ActiveRecord Finder?</a>.
  Today please keep going to take a look &#8220;What&#8217;s New in Rails4 ActiveModel?&#8221;:
</p>




<p>
  <strong>SCOPES</strong><br/>
</p>


<p>
  <strong>eager-evaluated scopes are deprecated</strong><br/>
  - Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">:sold</span><span class="p">,</span> <span class="n">where</span><span class="p">(</span><span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;sold&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">default_scope</span> <span class="n">where</span><span class="p">(</span><span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;available&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Warning:<br/>
  - Useing #scope without passing a callable object is deprecated.<br/>
  - Calling #default_scope without a block is deprecated.
</p>




<p>
  - Rails4:<br/>
   Scopes should take a proc object:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">:sold</span><span class="p">,</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;sold&#39;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Defaults scopes should take proc object or a block:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default_scope</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;available&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="n">default_schop</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="ss">state</span><span class="p">:</span> <span class="s1">&#39;available&#39;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>RELATION#NONE</strong><br/>
</p>




<p>
  - Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">visible_posts</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">role</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Country Manager&#39;</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">country</span><span class="p">:</span> <span class="n">country</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Reviewer&#39;</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Bad User&#39;</span>
</span><span class='line'>      <span class="o">[]</span> <span class="c1">#represents empty collection</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="vi">@posts</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">visible_posts</span>
</span><span class='line'>  <span class="vi">@posts</span><span class="o">.</span><span class="n">recent</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  @posts.recent error when &#8216;Bad User&#8217; because NoMethodError: undefined method &#8216;recent&#8217; for []:Array.<br/>
  One way we can fix this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@posts</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">visible_posts</span>
</span><span class='line'><span class="k">if</span> <span class="vi">@posts</span><span class="o">.</span><span class="n">any?</span> <span class="c1"># must check for presence</span>
</span><span class='line'>  <span class="vi">@posts</span><span class="o">.</span><span class="n">recent</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="o">[]</span> <span class="c1"># must return empty collection to caller</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">visible_posts</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">role</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Country Manager&#39;</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">country</span><span class="p">:</span> <span class="n">country</span><span class="p">)</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Reviewer&#39;</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'>    <span class="k">when</span> <span class="s1">&#39;Bad User&#39;</span>
</span><span class='line'>      <span class="no">Post</span><span class="o">.</span><span class="n">none</span> <span class="c1"># returns ActiveRecord:Relation and never hits the database</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@posts</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">visible_posts</span>
</span><span class='line'><span class="vi">@posts</span><span class="o">.</span><span class="n">recent</span> <span class="c1"># no need to check for presence</span>
</span></code></pre></td></tr></table></div></figure>




<p>
Post.none returns ActiveRecord:Relation and never hits the database and @posts.recent no need to check for presence.
</p>




<p>
  <strong>RELATION#NOT</strong>
</p>




<p>
  Rails3: 
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;author != ?&#39;</span><span class="p">,</span> <span class="n">author</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  When author is nil it&#8217;s going to generate incorrect SQL syntax: <code>SELECT "posts".* FROM "posts" WHERE (author != NULL)</code><br/>
  One way we can fix this:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">author</span>
</span><span class='line'>  <span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;author != ?&#39;</span><span class="p">,</span> <span class="n">author</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s1">&#39;author IS NOT NULL&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Rails4: 
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="o">.</span><span class="n">not</span><span class="p">(</span><span class="ss">author</span><span class="p">:</span> <span class="n">author</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  When author is nill it&#8217;s goint to generate correct SQL syntax: <code>SELECT "posts".* FROM "posts" WHERE (author IS NOT NULL)</code>
</p>




<p>
  <strong>RELATION#ORDER</strong>
</p>




<p>
  <strong>case1</strong>
</p>




<p>
  Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">default_scope</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It&#8217;s going to generate SQL: <code>SELECT * FROM users ORDER BY name asc, created_at desc</code>, new calls to order are appended.
</p>




<p>
  Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">default_scope</span> <span class="o">-&gt;</span><span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It&#8217;s going to generate SQL: <code>SELECT * FROM users ORDER BY created_at desc</code>, name asc New calls to order are prepend.
</p>




<p>
  <strong>case2</strong>
</p>




<p>
  Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="s1">&#39;created_at DESC&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="n">created_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
It&#8217;s going to generate SQL: <code>SELECT * FROM users ORDER BY name asc, created_at desc</code>
</p>




<p>
  Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s1">&#39;created_at DESC&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="n">created_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
It&#8217;s going to generate SQL: <code>SELECT * FROM users ORDER BY created_at desc</code>
</p>




<p>
  So far so good, ActiveModel in Rails4 is better. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Models With RSpec in Ruby on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/07/test-models-with-rspec-in-ruby-on-rails/"/>
    <updated>2014-08-07T09:40:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/07/test-models-with-rspec-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" />
</p>




<p>
  Testing is a good pratice. You should be doing it. It will make you a better programmer and save you a great deal of headache as your web app grows up. It is especially important when working alongside other programmers. Testing is not perfect though so don&#8217;t try to be perfect. Just get started, and you will improve as time goes on.
</p>




<p>
  <strong>How should I be testing?</strong><br/>
  - Using RSpec & factorygirl.<br/>
  - Testing the Model.
</p>




<p>
  <strong>Installation</strong><br/>
  Add rspec-rails and factorygirl to both the :development and :test groups in the Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.2.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Download and install by running command:<br>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Initialize the spec/ directory (where specs will reside) with:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">rspec</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This adds the following files which are used for configuration:<br/>
  - .rspec<br/>
  - spec/spec_helper.rb<br/>
  - spec/rails_helper.rb
</p>




<p>
  <strong>Generators</strong><br/>
  Once installed, RSpec and factorygirl will generate spec files instead of Test::Unit test files when run commands like: <code>rails generate model</code> and <code>rails generate controller</code> are used.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="n">model</span> <span class="no">Post</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  After you run the command above this adds the following directory and file:<br/>
  - spec/models/posts.rb<br/>
  - spec/factories/posts.rb
</p>




<p>
  <strong>Let&#8217;s get started the Model testing</strong>
</p>




<p>
  Assume we have three Models such as post.rb, category.rb, categorization.rb:
</p>




<figure class='code'><figcaption><span>post.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">200</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">20</span> <span class="p">},</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:category_id</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:categorizations</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:categories</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:categorizations</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:search_by_title</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">title</span><span class="p">)</span> <span class="p">{</span> <span class="n">where</span><span class="p">(</span><span class="s2">&quot;(title like ?) OR title in (?)&quot;</span><span class="p">,</span> <span class="s2">&quot;%</span><span class="si">#{</span><span class="n">title</span><span class="si">}</span><span class="s2">%&quot;</span><span class="p">,</span> <span class="n">title</span><span class="o">.</span><span class="n">split</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>category.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Category</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">},</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:short_name</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">},</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:description</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">200</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:categorizations</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:categorizations</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>categorization.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Categorization</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:category_id</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">validates</span> <span class="ss">:post_id</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:category</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, we define default factorygirl object for each Models in spec/factories/:
</p>




<figure class='code'><figcaption><span>posts.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:post</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">title</span> <span class="s1">&#39;Ruby on Rails&#39;</span>
</span><span class='line'>    <span class="n">body</span> <span class="s1">&#39;Ruby on Rails is good&#39;</span>
</span><span class='line'>    <span class="n">status</span> <span class="s1">&#39;open&#39;</span>
</span><span class='line'>    <span class="n">category_id</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>categories.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:category</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">id</span> <span class="mi">1</span>
</span><span class='line'>    <span class="nb">name</span> <span class="s1">&#39;programming&#39;</span>
</span><span class='line'>    <span class="n">short_name</span> <span class="s1">&#39;programming&#39;</span>
</span><span class='line'>    <span class="n">description</span> <span class="s1">&#39;computer programming&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>categorizations.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:categorization</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">category_id</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>    <span class="n">post_id</span> <span class="s1">&#39;1&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Here, how we test each Models in spec/models/:
</p>




<figure class='code'><figcaption><span>post.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span><span class="p">,</span> <span class="s1">&#39;validation&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_least</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_most</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_uniqueness_of</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_least</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_most</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_least</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_most</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:category_id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span><span class="p">,</span> <span class="s1">&#39;association&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_many</span><span class="p">(</span><span class="ss">:categorizations</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_many</span><span class="p">(</span><span class="ss">:categories</span><span class="p">)</span><span class="o">.</span><span class="n">through</span><span class="p">(</span><span class="ss">:categorizations</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span><span class="p">,</span> <span class="s1">&#39;column_specification&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">100</span> <span class="p">},</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:body</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:text</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">200</span> <span class="p">})</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span> <span class="p">})</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:category_id</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:integer</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_index</span><span class="p">(</span><span class="ss">:title</span><span class="p">)</span><span class="o">.</span><span class="n">unique</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Post</span><span class="p">,</span> <span class="s1">&#39;.search_by_name&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Ruby on Rails&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;returns post that match with title&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Post</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s1">&#39;Ruby on Rails&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;returns post that like title&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Post</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s1">&#39;ruby on rails&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;returns post when title is blank&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Post</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;returns empty when title is not match&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Post</span><span class="o">.</span><span class="n">search_by_title</span><span class="p">(</span><span class="s1">&#39;not match&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span><span class="o">.</span><span class="n">should</span> <span class="n">eql</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>category.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Category</span><span class="p">,</span> <span class="s1">&#39;validation&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_least</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_most</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_uniqueness_of</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:short_name</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_least</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">ensure_length_of</span><span class="p">(</span><span class="ss">:short_name</span><span class="p">)</span><span class="o">.</span><span class="n">is_at_most</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:short_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_uniqueness_of</span><span class="p">(</span><span class="ss">:short_name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Category</span><span class="p">,</span> <span class="s1">&#39;association&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_many</span><span class="p">(</span><span class="ss">:categorizations</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_many</span><span class="p">(</span><span class="ss">:posts</span><span class="p">)</span><span class="o">.</span><span class="n">through</span><span class="p">(</span><span class="ss">:categorizations</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Category</span><span class="p">,</span> <span class="s1">&#39;column_specification&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">},</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:short_name</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:string</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">minimum</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">},</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:description</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:text</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">200</span> <span class="p">})</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>categorization.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Categorization</span><span class="p">,</span> <span class="s1">&#39;validation&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:category_id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">validate_presence_of</span><span class="p">(</span><span class="ss">:post_id</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Categorization</span><span class="p">,</span> <span class="s1">&#39;association&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">belong_to</span><span class="p">(</span><span class="ss">:category</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">belong_to</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Categorization</span><span class="p">,</span> <span class="s1">&#39;column_specification&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:category_id</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:integer</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_db_column</span><span class="p">(</span><span class="ss">:post_id</span><span class="p">)</span><span class="o">.</span><span class="n">of_type</span><span class="p">(</span><span class="ss">:integer</span><span class="p">)</span><span class="o">.</span><span class="n">with_options</span><span class="p">(</span><span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  To run Models specs use the following command:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rspec</span> <span class="n">spec</span><span class="o">/</span><span class="n">models</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You should get back the response something like:
</p>




<p>
  <img src="http://geekhmer.github.io/images/model_testing.png" width="600"/>
</p>




<p>
  For more detail about <a href="https://github.com/rspec/rspec-rails" target="_blank">RSpec</a>, <a href="https://github.com/thoughtbot/factory_girl" target="_blank">FactoryGirl</a>.<br/>
  So far so good, We&#8217;ve already created 40 models specs to test model. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Rails3 ActiveRecord Finder Vs Very Good Rails4 ActiveRecord Finder]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/05/good-rails3-activerecord-finder-vs-very-good-rails4-activerecord-finder/"/>
    <updated>2014-08-05T23:39:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/05/good-rails3-activerecord-finder-vs-very-good-rails4-activerecord-finder</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/what_is_new_in_rails4.png" width="500" />
</p>




<p>
  Well, previouse article I had talked about <a href="http://geekhmer.github.io/blog/2014/08/02/keyword-arguments-feature-in-ruby-2-dot-0/">Keyword Arguments Feature in Ruby 2.0</a>. now we can apply keyword arguments in Rails4.
</p>




<p>
  <strong>FINDERS</strong>
</p>




<p>  
  <strong>old-style finders are deprecated</strong><br/>
  - Rails3: 
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:all</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="p">{</span> <span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Warning: Calling #find(:all) is deprecated. Please call #all directly instead. You have also used finder options. Please build s scope instead of using finder options.
</p>




<p>
  - Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Dynamic finder that return collections are deprecated</strong><br/>
  - Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_all_by_title</span><span class="p">(</span><span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_last_by_author</span><span class="p">(</span><span class="s1">&#39;admin&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Warning: This dynamic method is deprecated. Please use e.g Post.where(&#8230;).all instead.
</p>




<p>
  - Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>FIND_BY</strong>
</p>




<p>
- Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span> <span class="c1"># Dynamic find_by finders that take a single argument are not deprecated.</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_by_title</span><span class="p">(</span><span class="s1">&#39;Rails 4&#39;</span><span class="p">,</span> <span class="ss">conditions</span><span class="p">:</span> <span class="p">{</span> <span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span> <span class="p">})</span> <span class="c1"># Dynamic find_by finders with conditions are deprecated.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rails 4&#39;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>FIND_BY WITH HASH</strong>
</p>




<p>
  <strong>allows dynamic input more easily</strong><br/>
  - Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">post_params</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rails 4&#39;</span><span class="p">,</span> <span class="ss">author</span><span class="p">:</span> <span class="s1">&#39;admin&#39;</span> <span class="p">}</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="s2">&quot;published_on &lt; ?&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">.</span><span class="n">weeks</span><span class="o">.</span><span class="n">ago</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>FIND_OR_*</strong>
</p>




<p>
  <strong>dynamic finders that create new objects are deprecated</strong><br/>
  - Rails3:
</p>




<figure class='code'><figcaption><span>Rails3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_or_initialize_by_title</span><span class="p">(</span><span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_or_create_by_title</span><span class="p">(</span><span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Warning: This dinamic method is deprecated. Please use e.g Post.find_or_initialize_by(name: &#8216;foo&#8217;) instead.<br/>
  Warning: This dinamic method is deprecated. Please use e.g Post.find_or_create_by(name: &#8216;foo&#8217;) instead.
</p>




<p>
  - Rails4:
</p>




<figure class='code'><figcaption><span>Rails4 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_or_initialize_by</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Post</span><span class="o">.</span><span class="n">find_or_create_by</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s1">&#39;Rails 4&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, let upgrade to Rails4 then refactor ActiveRecord Finder together. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What We Should Test with RSpec in Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/04/what-we-should-test-with-rspec-in-rails/"/>
    <updated>2014-08-04T22:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/04/what-we-should-test-with-rspec-in-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" />
</p>




<p>
  Well, what is takes to begin testing Rails applications. The hardest part of being a beginner is that you often don&#8217;t know what you should test with RSpec in Rails.
</p>




<p>
  Here is the most important thing is that you are testing: Feature specs, Model specs, Controller specs, View specs, Route specs.
</p>




<p>
  <strong>Feature specs</strong><br/>
  Feature specs is a kind of acceptance test, the tests that walk through your entire application ensuring that each of the components work together.<br/>
  They are written from the perspective of a user clicking around the application and filling in forms on the page.<br/>
  While Feature specs are great for testing high level functionality, keep in mind that feature specs is slow to run.
</p>




<p>
  <strong>Model specs</strong><br/>
  Model specs are similar to unit tests in that they are used to test smaller parts of the system, such as classes or methods, and they interact with the database too.
</p>




<p>
  <strong>Controller specs</strong><br/>
  When testing multiple paths through a controller is necessary, we favor using controller specs over feature specs, as they are faster to run and often easier to write.
</p>




<p>
  <strong>View specs</strong><br/>
  View specs is great for testing the conditional display of information in the templates. Most developers forget about these tests and use feature specs instead.<br/>
  While you can cover each view conditional with a feature specs, I prefer to user view specs.
</p>




<p>
  <strong>Route specs</strong><br/>
  Most Ruby on Rails developers don’t test their routes, If you ever need to test an abstract base controller independently from any subclass, you will like need to add route specs for your testing.
</p>




<p>
  So far so good, this was just an overview of what we should get started testing Rails. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyword Arguments Feature in Ruby 2.0]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/02/keyword-arguments-feature-in-ruby-2-dot-0/"/>
    <updated>2014-08-02T09:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/02/keyword-arguments-feature-in-ruby-2-dot-0</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" />
</p>




<p>
  One of the new features of Ruby 2.0 is keyword arguments. keyword arguments make it easier create method that take optional named arguments.
</p>




<p>
  keyword arguments in the method definition must be symbols given in the new-style hash syntax.<br/>
  Assume we have a method:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;Hello&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">message</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span> <span class="c1">#=&gt; Hello</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;Hi&#39;</span><span class="p">)</span> <span class="c1">#=&gt; Hi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">({</span> <span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;Hi&#39;</span> <span class="p">})</span> <span class="c1">#=&gt; Hi</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Ruby 2.0 blocks can also be defined with keyword arguments:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">define_method</span><span class="p">(</span><span class="ss">:print</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;Hello&#39;</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">message</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span> <span class="c1">#=&gt; Hello</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">(</span><span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;Hi&#39;</span><span class="p">)</span> <span class="c1">#=&gt; Hi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">print</span><span class="p">({</span> <span class="ss">message</span><span class="p">:</span> <span class="s1">&#39;Hi&#39;</span> <span class="p">})</span> <span class="c1">#=&gt; Hi</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Keyword arguments vs Positional arguments</strong><br/>
  Assume we have a method with positional arguments:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">total</span><span class="p">(</span><span class="n">subtotal</span><span class="p">,</span> <span class="n">tax</span><span class="p">,</span> <span class="n">discount</span><span class="p">)</span>
</span><span class='line'>  <span class="n">subtotal</span> <span class="o">+</span> <span class="n">tax</span> <span class="o">-</span> <span class="n">discount</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">total</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># =&gt; 105</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This method does its job, but as a reader of the code using the total method, I have no idea what those arguments mean without looking up the implementation of the method.
</p>




<p>
  By using keyword arguments, we know what the arguments mean without looking up the implementation of the called method:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">obvious_total</span><span class="p">(</span><span class="ss">subtotal</span><span class="p">:,</span> <span class="ss">tax</span><span class="p">:,</span> <span class="ss">discount</span><span class="p">:)</span>
</span><span class='line'>  <span class="n">subtotal</span> <span class="o">+</span> <span class="n">tax</span> <span class="o">-</span> <span class="n">discount</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obvious_total</span><span class="p">(</span><span class="ss">subtotal</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">tax</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">discount</span><span class="p">:</span> <span class="mi">5</span><span class="p">)</span> <span class="c1"># =&gt; 105</span>
</span><span class='line'>
</span><span class='line'><span class="n">obvious_total</span><span class="p">({</span> <span class="ss">subtotal</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">tax</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="ss">discount</span><span class="p">:</span> <span class="mi">5</span> <span class="p">})</span> <span class="c1"># =&gt; 105</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Keyword arguments allow us to switch the order of the arguments, without affecting the behavior of the method:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">obvious_total</span><span class="p">(</span><span class="ss">subtotal</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">discount</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">tax</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span> <span class="c1"># =&gt; 105</span>
</span><span class='line'>
</span><span class='line'><span class="n">obvious_total</span><span class="p">({</span> <span class="ss">subtotal</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">discount</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="ss">tax</span><span class="p">:</span> <span class="mi">10</span> <span class="p">})</span> <span class="c1"># =&gt; 105</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 'unless' Goes Mainstream]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/31/ruby-unless-goes-mainstream/"/>
    <updated>2014-07-31T23:44:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/31/ruby-unless-goes-mainstream</id>
    <content type="html"><![CDATA[<p>
  I don&#8217;t like or not a fan of Ruby&#8217;s &#8216;unless&#8217; keyword. I mean its nice but it take time to get used to.
</p>




<p>
  Sample &#8216;unless&#8217; statements like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">product</span><span class="o">.</span><span class="n">name</span> <span class="k">unless</span> <span class="n">product</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">nil?</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The code statement above is nice and easy. I&#8217;d say that in english &#8220;Print the product&#8217;s name unless the product doesn&#8217;t have a name&#8221;.
</p>




<p>
  Why do we need unless? Let replace it with something else:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">not_nil?</span>
</span><span class='line'>    <span class="o">!</span><span class="kp">nil</span><span class="p">?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then we can code:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="n">product</span><span class="o">.</span><span class="n">name</span> <span class="k">if</span> <span class="n">product</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">not_nil?</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, that&#8217;s much better, &#8216;unless&#8217; never made it into mainstream language.<br/>
  OO scripting languages like Ruby can make new keyword. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Routes with RSpec in Ruby on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/30/test-routes-with-rspec-in-ruby-on-rails/"/>
    <updated>2014-07-30T22:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/30/test-routes-with-rspec-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  Most Ruby on Rails developers don’t test their routes, they focus on Model testing, Controller testing, Features or View testing, Helper testing, and try to catch every possible scenarios.<br/>I would like to show how to test route separately. 
</p>




<p>
  Sample routes.rb:
</p>




<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:products</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Here is routes lists thats have been created:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="n">root</span>        <span class="o">/</span>                            <span class="n">products</span><span class="c1">#index</span>
</span><span class='line'>    <span class="n">posts</span> <span class="no">GET</span>    <span class="sr">/products(.:format)          products#index</span>
</span><span class='line'><span class="sr">          POST   /</span><span class="n">products</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>          <span class="n">products</span><span class="c1">#create</span>
</span><span class='line'> <span class="n">new_post</span> <span class="no">GET</span>    <span class="sr">/products/ne</span><span class="n">w</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">products</span><span class="c1">#new</span>
</span><span class='line'><span class="n">edit_post</span> <span class="no">GET</span>    <span class="sr">/products/</span><span class="ss">:id</span><span class="o">/</span><span class="n">edit</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span> <span class="n">products</span><span class="c1">#edit</span>
</span><span class='line'>     <span class="n">post</span> <span class="no">GET</span>    <span class="sr">/products/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">products</span><span class="c1">#show</span>
</span><span class='line'>          <span class="no">PUT</span>    <span class="sr">/products/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">products</span><span class="c1">#update</span>
</span><span class='line'>          <span class="no">DELETE</span> <span class="sr">/products/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>      <span class="n">products</span><span class="c1">#destroy</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Testing for each routes in routing/products_routing_spec.rb:
</p>




<figure class='code'><figcaption><span>products_routing_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="s2">&quot;routing to products&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;routes /products to products#index&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">get</span><span class="p">:</span> <span class="s2">&quot;/products&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">route_to</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;index&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;routes /products/1 to products#show&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">get</span><span class="p">:</span> <span class="s2">&quot;/products/1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">route_to</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;show&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;routes /products/new to products#new&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">get</span><span class="p">:</span> <span class="s2">&quot;/products/new&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">route_to</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;routes /products to products#create&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">post</span><span class="p">:</span> <span class="s2">&quot;/products&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">route_to</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;create&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;routes /products/1/edit to products#edit&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">get</span><span class="p">:</span> <span class="s2">&quot;/products/1/edit&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">route_to</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;edit&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;routes /products/1 to products#update&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">put</span><span class="p">:</span> <span class="s2">&quot;/products/1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">route_to</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;update&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;routes /products/1 to products#destroy&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="ss">delete</span><span class="p">:</span> <span class="s2">&quot;/products/1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">route_to</span><span class="p">(</span>
</span><span class='line'>      <span class="ss">controller</span><span class="p">:</span> <span class="s2">&quot;products&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;destroy&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">id</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Testing unroutable:
</p>




<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">resources</span> <span class="ss">:products</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="o">[</span><span class="ss">:show</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>products_routing_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">it</span> <span class="s2">&quot;does not routes /products/1 to products#show&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">expect</span><span class="p">(</span><span class="ss">:get</span> <span class="o">=&gt;</span> <span class="s2">&quot;posts/1&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">not_to</span> <span class="n">be_routable</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, Let enjoy the routes testing in your Ruby on Rails application. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsPanel]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/30/railspanel/"/>
    <updated>2014-07-30T08:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/30/railspanel</id>
    <content type="html"><![CDATA[<p>
  RailsPanel is a Chrome extension for Rails development that will end your tailing of development.log. Have all information about your Rails app requests in the browser - in the Developer Tools panel. Provides insight to db/rendering/total times, parameter list, rendered views and more.
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/rails_panel.png"><img src="http://geekhmer.github.io/images/rails_panel.png" width="680" /></a>
</p>




<p>
  <strong>Installation</strong><br/>
  To use this extension you need to add meta_request gem to your app&#8217;s Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;meta_request&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Install <a href="https://chrome.google.com/webstore/detail/railspanel/gjpfobpafnhjhbajcjgccbbdofdckggg" target="_blank">RailsPanel extension</a> from the Chrome WebStore. This is recommended way of installing extension, since it will auto-update on every new version. Note that you still need to update meta_request gem yourself.
</p>




<p>
  So far so good, Let play around with RailsPanel and enjoy your productivity. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Implement Decorator Design Pattern in Rails with Draper to Cleanup Views]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/26/implement-decorator-design-pattern-in-rails-with-draper-to-cleanup-views/"/>
    <updated>2014-07-26T21:29:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/26/implement-decorator-design-pattern-in-rails-with-draper-to-cleanup-views</id>
    <content type="html"><![CDATA[<p>
  Ruby on Rails is an awesome framework to build web application. Rails relies on the MVC pattern, and lots of conventions, code becomes complex to maintain, productivity start to decrease, etc.
</p>




<p>
  We can find a lot of reasons to this(too much logic in controllers, fat models, lack of services layers, etc.), but I will just name one: logic in view, logic in view is bug prone, difficult to test, and can be a pain for front-end developers.
</p>




<p>
  Sample problem
</p>




<figure class='code'><figcaption><span>articles_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@article</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>show.html.haml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span> <span class="k">if</span> <span class="n">can?</span> <span class="ss">:update</span><span class="p">,</span> <span class="vi">@article</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit&quot;</span><span class="p">,</span> <span class="n">edit_article_path</span><span class="p">(</span><span class="vi">@article</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, you got it, logic in view. And since rails don&#8217;t have view inheritance, this code will have to be copy-pasted over and over, I would rather have something like: <code>= @article.link_to_edit</code>
</p>




<p>
  So, how can we remove logic from the view?
</p>




<p>
  <strong>Decorator Design Pattern save the views</strong><br/>
  As usual, we can find a solution with a pattern. the decorator design pattern will help us remove logic from views in our Rails applications.<br/>
  The idea is to insert an object between the model and the view, well there is a good ruby gem is <a href="https://github.com/drapergem/draper" target="_blank">Draper</a> that work well.
</p>




<p>
  Let create a decorator for the Article class
</p>




<figure class='code'><figcaption><span>article_decorator.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticleDecorator</span> <span class="o">&lt;</span> <span class="ss">Draper</span><span class="p">:</span><span class="ss">:Decorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">link_to_edit</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">h</span><span class="o">.</span><span class="n">can?</span> <span class="ss">:update</span><span class="p">,</span> <span class="n">object</span>
</span><span class='line'>      <span class="n">h</span><span class="o">.</span><span class="n">link_to</span> <span class="s2">&quot;Edit&quot;</span><span class="p">,</span> <span class="n">h</span><span class="o">.</span><span class="n">edit_article_path</span><span class="p">(</span><span class="n">object</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>articles_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ArticlesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@article</span> <span class="o">=</span> <span class="no">ArticleDecorator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Article</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>show.html.haml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="vi">@article</span><span class="o">.</span><span class="n">link_to_edit</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  A few things to notice here. From the controller, we call the decorate method on a instance of article, this will return a decorated version of the article object.
</p>




<p>
  In the ArticleDecorator class, we have access to the decorated object with the object method and to all view helpers through the h object.<br/>
  We can now call the link_to_edit method on the article object from our view, and the decorator will take care of the logic, and return a formatted link if the user has the right edit this resource, and nothing if he does not.
</p>




<p>
  The code is easier to test, we just instantiate a new instance of the ArticleDecorator, and check the output of the link_to_edit method. No need to test whole renderd view, searching through the DOM object tree.
</p>




<p>
  So far so good, we gain code readablility, code reuse, better testing, and in addition, we even lost a few lines of duplicated code. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim - The Best Programming Editor for UNIX]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/24/vim-the-best-programming-editor-for-unix/"/>
    <updated>2014-07-24T12:20:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/24/vim-the-best-programming-editor-for-unix</id>
    <content type="html"><![CDATA[<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/vim.png"><img src="http://geekhmer.github.io/images/vim.png" width="680" /></a>
</p>




<p>
  Vim is an advanced text editor that provide the power of Unix editor &#8216;Vi&#8217;, with a more complete feature set.
</p>




<p>
  Vim is a highly configurable text editor built to enable efficient text editing. It is an improved version of the vi editor distributed with most UNIX systems.
</p>




<p>
  Vim is often called a &#8220;programmer&#8217;s editor,&#8221; and so useful for programming that many consider it an entire IDE. It&#8217;s not just for programmers, Vim is perfect for all kinds of text editing, from composing email to editing configuration files.
</p>




<p>
  <strong>Features</strong><br/>
  - highly configurable.<br/>
  - syntax highlightning.<br/>
  - windows split (both vertically as well as horrizontally).<br/>
  - tabbing.<br/>
  - folding.<br/>
  - unicode support.<br/>
  - flexible indenting.<br/>
  - &#8230;
</p>




<p>
  <strong>The Good</strong><br/>
  Vim is a professional text editor targeting mainly programmers, but it can be also used by any other type of user.<br/>
  It received the best text editor award from readers of the Linux Journal magazine in 2001, 2002, 2003 , 2004 and 2005, which I think tells a lot about its efficiency.
</p>




<p>
  <strong>The Bad</strong><br/>
  The bad and ugly part about Vim would be for most users the fact that they must do the learning first in order to be able to use it.
</p>




<p>
  <strong>The Truth</strong><br/>
  Vim is a multi-platform text editor, Vim provides all the functionality of a regular text editor, such as spell checking, Unicode support, possibility of undo/redo the most recent actions, integrated help but it has also some features of its own which make it a powerful and reliable tool.
</p>




<p>
  So far so good, To get a better idea on what Vim is, you can also check <a href="http://www.vim.org/" target="_blank">www.vim.org</a> :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decorator Design Pattern]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/22/decorator-design-pattern/"/>
    <updated>2014-07-22T20:10:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/22/decorator-design-pattern</id>
    <content type="html"><![CDATA[<p>
  In the object-oriented world, simple applications usually require small classes with static behaviors. Adding, modifying, and sharing those behaviors can be achieved by mixing in modules or inheriting from other classes at compile time.
</p>




<p>
  However, more complex applications might require a particular instance of a class to gain additional functionality at runtime. To modify the behavior of an object dynamically, we can utilize the decorator design pattern.
</p>




<p>
  <strong>When to Decorate</strong><br/>
  Decoration can be used to add behavior to any individual object without affecting the behavior of other objects of the same class. Essentially the existing object is being wrapped with additional functionality. 
</p>




<p>
  <strong>Some practical problems that can be solved by decoration are</strong><br/>
  - applying one or more UI elements to a specific UI widget at runtime.<br/>
  - saving an ActiveRecord model in various ways based on conditionals in a Rails controller.<br/>
  - adding additional information to data streams by pre/appending with additional stream data.
</p>




<p>
  <strong>Implementations of Decorators in Ruby</strong><br/>
  There are several ways to implement the decorator pattern in Ruby, but I cover my 4 favorite ways:<br/>
  - Class + Method Missing decorator<br/>
  - Module + Extend + Super decorator<br/>
  - Plain Old Ruby Object decorator<br/>
  - SimpleDelegator + Super + Getobj decorator
</p>




<p>
  <strong>Class + Method Missing Decorator</strong><br/>
  The benefits of this implementation are:<br/>
  - can be wrapped infinitely using Ruby instantiation.<br/>
  - delegates through all decorators.<br/>
  - can use the same decorator more than once on the same component.<br/>
  - transparently uses component&#8217;s original interface.
</p>




<p>
  The drawbacks of this implementation are:<br/>
  - uses method_missing.<br/>
  - the class of the decorated object is the decorator.
</p>




<p>
  Sample example
</p>




<figure class='code'><figcaption><span>sample.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Decorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">decorated</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@decorated</span> <span class="o">=</span> <span class="n">decorated</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="n">meth</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@decorated</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="n">meth</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@decorated</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">meth</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">super</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">respond_to?</span><span class="p">(</span><span class="n">meth</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@decorated</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="n">meth</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Coffee</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Milk</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Decorator</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="vi">@decorated</span><span class="o">.</span><span class="n">cost</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Whip</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Decorator</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="vi">@decorated</span><span class="o">.</span><span class="n">cost</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sprinkles</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Decorator</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="vi">@decorated</span><span class="o">.</span><span class="n">cost</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Whip</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Coffee</span><span class="o">.</span><span class="n">new</span><span class="p">)</span><span class="o">.</span><span class="n">cost</span> <span class="c1">#=&gt; 2.2</span>
</span><span class='line'><span class="no">Sprinkles</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Whip</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Milk</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Coffee</span><span class="o">.</span><span class="n">new</span><span class="p">)))</span><span class="o">.</span><span class="n">cost</span> <span class="c1">#=&gt; 2.9</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Factory class</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CoffeeFactory</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">cappuccino</span>
</span><span class='line'>    <span class="no">Sprinkles</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Cream</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Milk</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Coffee</span><span class="o">.</span><span class="n">new</span><span class="p">)))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">CoffeeFactory</span><span class="o">.</span><span class="n">cappucino</span><span class="o">.</span><span class="n">kind_of?</span> <span class="no">Coffee</span> <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Module + Extend + Super Decorator</strong><br/>
  The benefits of this implementation are:<br/>
  - it delegates through all decorators.<br/>
  - has all of the original interface because it is the original object.
</p>




<p>
  The drawbacks of this implementation are:<br/>
  - can not use the same decorator more than once on the same object.<br/>
  - difficult to tell which decorator added the functionality.
</p>




<p>
  Sample example
</p>




<figure class='code'><figcaption><span>sample.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Coffee</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Milk</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Sugar</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">coffee</span> <span class="o">=</span> <span class="no">Coffee</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">coffee</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Milk</span><span class="p">)</span>
</span><span class='line'><span class="n">coffee</span><span class="o">.</span><span class="n">cost</span>   <span class="c1">#=&gt; 2.4</span>
</span><span class='line'><span class="n">coffee</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="no">Sugar</span><span class="p">)</span>
</span><span class='line'><span class="n">coffee</span><span class="o">.</span><span class="n">cost</span>   <span class="c1">#=&gt; 2.6</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Plain Old Ruby Object Decorator</strong><br/>
  The benefits of this implementation are:<br/>
  - can be wrapped infinitely using Ruby instantiation.<br/>
  - delegates through all decorators.<br/>
  - can use same decorator more than once on component.
</p>




<p>
  The drawbacks of this implementation are:<br/>
  - cannot transparently use component&#8217;s original interface.
</p>




<p>
  Sample example
</p>




<figure class='code'><figcaption><span>sample.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Coffee</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">origin</span>
</span><span class='line'>    <span class="s2">&quot;Cambodia&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Sugar</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">component</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@component</span> <span class="o">=</span> <span class="n">component</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="vi">@component</span><span class="o">.</span><span class="n">cost</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Milk</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">component</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@component</span> <span class="o">=</span> <span class="n">component</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="vi">@component</span><span class="o">.</span><span class="n">cost</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">coffee</span> <span class="o">=</span> <span class="no">Coffee</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="no">Sugar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Milk</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">coffee</span><span class="p">))</span><span class="o">.</span><span class="n">cost</span>  <span class="c1">#=&gt; 2.6</span>
</span><span class='line'><span class="no">Sugar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Sugar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">coffee</span><span class="p">))</span><span class="o">.</span><span class="n">cost</span> <span class="c1">#=&gt; 2.4</span>
</span><span class='line'><span class="no">Sugar</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Milk</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">coffee</span><span class="p">))</span><span class="o">.</span><span class="n">class</span> <span class="c1">#=&gt; Sugar</span>
</span><span class='line'><span class="no">Milk</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">coffee</span><span class="p">)</span><span class="o">.</span><span class="n">origin</span>           <span class="c1">#=&gt; NoMethodError</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>SimpleDelegator + Super + Getobj</strong><br/>
  The benefits of this implementation are:<br/>
  - can be wrapped infinitely using Ruby instantiation.<br/>
  - delegates through all decorators.<br/>
  - can use same decorator more than once on component.<br/>
  - transparently uses component&#8217;s original interface.<br/>
  - class if the component.
</p>




<p>
  The drawbacks of this implementation are:<br/>
  - it redefines class.
</p>




<p>
  Sample example
</p>




<figure class='code'><figcaption><span>sample.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Coffee</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">origin</span>
</span><span class='line'>    <span class="s1">&#39;Cambodia&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;delegate&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Decorator</span> <span class="o">&lt;</span> <span class="no">SimpleDelegator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">class</span>
</span><span class='line'>    <span class="n">__getobj__</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Milk</span> <span class="o">&lt;</span> <span class="no">Decorator</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">cost</span>
</span><span class='line'>    <span class="k">super</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">4</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, Let decorate your way with Decorator Design Pattern. :)
</p>

]]></content>
  </entry>
  
</feed>
