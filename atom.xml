<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2017-03-21T11:34:40+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generating Income on the Internet Using Social Media]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/21/generating-income-on-the-internet-using-social-media/"/>
    <updated>2017-03-21T10:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/21/generating-income-on-the-internet-using-social-media</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/internet_marketing.png" width="600" alt="Generating Income on the Internet Using Social Media" />
</p>




<p>
  Once it comes to generating income on the Internet using social media, there are a few principles which you need to understand.
</p>




<p>
  <strong>1. INTRODUCE YOURSELF</strong><br/>
  The first thing you need to know is how to introduce yourself, whether video or article platform.
</p>




<p>
  People are busy, you need to think of how you can introduce yourself in under 15 seconds. Get to the right point.
</p>




<p>
  Take sometime to come up with a way to do it, and remember the words you used because you’ll need to do it the same way every time you introduce yourself on the same platform.
</p>




<p>
  As well, keep in mind that among the people who log into your scope, some might not have heard of you before, so you need to not just introduce yourself quickly, but you need to be able to capture and hold their attention/interest.
</p>




<p>
  Within that 15 seconds of your introduction, you need to be able to make people understand who you are and what you do.
</p>




<p>
  <strong>2. HAVE A PRODUCT TO PROMOTE</strong><br/>
  The second thing that you will need to have is a product to promote.
</p>




<p>
  There are two ways for you to do this:<br/>
  - Promote your own product for 100% of the profit<br/>
  - Promote someone else’s product for a commission
</p>




<p>
  You decide – you could sell a product on Amazon, Alibabaor or sell a product yourself on your own website or mobile platform.<br/>
</p>




<p>
  You must have a product!
</p>




<p>
  <strong>3. HAVE A CALL TO ACTION</strong><br/>
  The third thing you need is a call to action – What is &#8220;A call to action&#8221;? It mean that you must tell people what to do next.
</p>




<p>
  If you don’t have a call to action, then no action will be taken.
</p>




<p>
  At the end of the scope tell people that:
</p>




<p>
  &#8220;If you like what you have just known, head over or go through to my website.&#8221;
</p>




<p>
  Or you could tell them: &#8220;If you liked this scope, please follow me on twitter, facebook page&#8230; and join me for the next one.&#8221;
</p>




<p>
  Every time you present, you must always have a call to action.
</p>




<p>
  So these are the three things that you want to have to really master and get thousands of people to your social media. So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy to Clipboard without Flash with Clipboard.js]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/19/copy-to-clipboard-without-flash-with-clipboard-dot-js/"/>
    <updated>2017-03-19T23:34:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/19/copy-to-clipboard-without-flash-with-clipboard-dot-js</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/clipboardjs.png" width="400" alt="Copy to Clipboard without Flash with Clipboard.js" />
</p>




<p>
  Well, in this article I gonna show you how to easily implement the ability to copy data to the <a href="https://clipboardjs.com/" target="_blank">clipboard</a>. In order to implement it I will clipboard.js javascript library, let get started with me:
</p>




<h3>Installation</h3>




<p>
  The first thing I need to do is include the clipboard.js library file in head tag of the application: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;https://cdn.jsdelivr.net/clipboard.js/1.5.12/clipboard.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you don&#8217;t wish to use a CDN, you can download the clipboard in other ways:<br/>
  - Using npm, by running <code>npm install clipboard --save</code><br/>
  - Using bower, by running <code>bower install clipboard --save</code><br/>
  - By downloading a zip file from the <a href="https://github.com/zenorocha/clipboard.js/archive/master.zip" target="_blank">clipboard.js github page</a> and referencing it in your HTML.
</p>




<h3>Usage</h3>




<p>
  <strong>Copy text from another element:</strong> A pretty common use case is to copy content from another element. You can do that by adding a <code>data-clipboard-target</code> attribute in your trigger element. The value you include on this attribute needs to match another&#8217;s element selector.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="no">Target</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;https://github.com/zenorocha/clipboard.js.git&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="no">Trigger</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">button</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">clipboard</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="s2">&quot;#foo&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;assets/clippy.svg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s2">&quot;Copy to clipboard&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Cut text from another element:</strong> Additionally, you can define a <code>data-clipboard-action</code> attribute to specify if you want to either <code>copy</code> or <code>cut</code> content. If you omit this attribute, <code>copy</code> will be used by default.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="no">Target</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">textarea</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span><span class="o">&gt;</span><span class="no">Mussum</span> <span class="n">ipsum</span> <span class="n">cacilds</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/textarea&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;!-- Trigger --&gt;</span>
</span><span class='line'><span class="sr">&lt;button class=&quot;btn&quot; data-clipboard-action=&quot;cut&quot; data-clipboard-target=&quot;#bar&quot;&gt;</span>
</span><span class='line'><span class="sr">    Cut to clipboard</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">button</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As you may expect, the cut action only works on input or textarea elements.
</p>




<p>
  <strong>Copy text from attribute:</strong> Truth is, you don&#8217;t even need another element to copy its content from. You can just include a <code>data-clipboard-text</code> attribute in your trigger element.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="no">Trigger</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">button</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">clipboard</span><span class="o">-</span><span class="n">text</span><span class="o">=</span><span class="s2">&quot;Just because you can doesn&#39;t mean you should — clipboard.js&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="no">Copy</span> <span class="n">to</span> <span class="n">clipboard</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Events</h3>




<p>
  There are cases where you&#8217;d like to show some user feedback or capture what has been selected after a copy/cut operation.
</p>


<p></p>

<p>
  That&#8217;s why we fire custom events such as success and error for you to listen and implement your custom logic.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">clipboard</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">Clipboard</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">clipboard</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;success&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Action:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">action</span><span class="p">);</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Text:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">text</span><span class="p">);</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Trigger:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">trigger</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="n">clearSelection</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">clipboard</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">&#39;Action:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">action</span><span class="p">);</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">&#39;Trigger:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">trigger</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Status Code and Symbols]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/16/http-status-code-and-symbols/"/>
    <updated>2017-03-16T21:36:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/16/http-status-code-and-symbols</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/list_http.jpg" width="600" alt="HTTP Status Code and Symbols" />
</p>




<p>
  Thanks to Cody Fauser for this list of HTTP responce codes and their Ruby on Rails or other Framework symbol mappings. Let go through the status code symbol below:
</p>




<p>
  <strong>1xx Informational</strong><br/>
  100 :continue<br/>
  101 :switching_protocols<br/>
  102 :processing
</p>




<p>
  <strong>2xx Success</strong><br/>
  200 :ok<br/>
  201 :created<br/>
  202 :accepted<br/>
  203 :non_authoritative_information<br/>
  204 :no_content<br/>
  205 :reset_content<br/>
  206 :partial_content<br/>
  207 :multi_status<br/>
  226 :im_used
</p>




<p>
  <strong>3xx Redirection</strong><br/>
  300 :multiple_choices<br/>
  301 :moved_permanently<br/>
  302 :found<br/>
  303 :see_other<br/>
  304 :not_modified<br/>
  305 :use_proxy<br/>
  307 :temporary_redirect
</p>




<p>
  <strong>4xx Client Error</strong><br/>
  400 :bad_request<br/>
  401 :unauthorized<br/>
  402 :payment_required<br/>
  403 :forbidden<br/>
  404 :not_found<br/>
  405 :method_not_allowed<br/>
  406 :not_acceptable<br/>
  407 :proxy_authentication_required<br/>
  408 :request_timeout<br/>
  409 :conflict<br/>
  410 :gone<br/>
  411 :length_required<br/>
  412 :precondition_failed<br/>
  413 :request_entity_too_large<br/>
  414 :request_uri_too_long<br/>
  415 :unsupported_media_type<br/>
  416 :requested_range_not_satisfiable<br/>
  417 :expectation_failed<br/>
  422 :unprocessable_entity<br/>
  423 :locked<br/>
  424 :failed_dependency<br/>
  426 :upgrade_required
</p>




<p>
  <strong>5xx Server Error</strong><br/>
  500 :internal_server_error<br/>
  501 :not_implemented<br/>
  502 :bad_gateway<br/>
  503 :service_unavailable<br/>
  504 :gateway_timeout<br/>
  505 :http_version_not_supported<br/>
  507 :insufficient_storage<br/>
  510 :not_extended
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I do combining apache and nginx together?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/13/why-i-do-combining-apache-and-nginx-together/"/>
    <updated>2017-03-13T10:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/13/why-i-do-combining-apache-and-nginx-together</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_apache.jpg" width="600" alt="Why I do combining apache and nginx together?" />
</p>




<p>
  Nginx and apache are powerful and effective servers by nowadays. Apache currently reigns as the number 1 server for websites and since its public release in 2006. And nginx has taken the world by storm and is now the number 2 server for active sites. 
</p>




<h3>The Reason Why I Use Nginx and Apache Together is</h3>




<p>
  <strong>Nginx</strong><br/>
  - nginx serves static files (images, css, html etc.) really fast and efficient and passes php and .htaccess requests to apache for processing.<br/>
  - nginx needs the help of php-fpm or similar modules for dynamic content.
</p>




<p>
  <strong>Apache</strong><br/>
  - apache is hard on server memory.<br/>
  - apache serves php and .htaccess (most cms site like wordpress needs it for rewrite) and if you throw in a php opcode cache like zend opcache or xcache it should serve php even faster.
</p>




<p>
  <strong>nginx + apache with php opcache = performance and server resource efficiency</strong>
</p>




<p>
  So far so good, in the next article I will show you the configurations. That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create content with multiple features with CKEditor Gem]]></title>
    <link href="http://geekhmer.github.io/blog/2017/01/05/create-content-with-multiple-features-with-ckeditor-gem/"/>
    <updated>2017-01-05T23:13:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/01/05/create-content-with-multiple-features-with-ckeditor-gem</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ckeditor.png" width="600" alt="Create content with multiple features with CKEditor Gem" />
</p>




<p>
  <strong>Setup & Usage</strong><br/>
  First, we need to add the CKEditor gem to our Gemfile. Open up your Gemfile and add the line listed below:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;ckeditor&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, open up the terminal and run a bundle install to install the gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now lets create a sample model and accompanying controller that will be used to store our data. Open up and run the command below to create the Magazine model and migrate the database:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">resource</span> <span class="no">Magazine</span> <span class="n">title</span> <span class="ss">body</span><span class="p">:</span><span class="n">text</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, open your routes file and add the following line to your routes:
</p>




<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;magazines#index&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, lets add the CKEditor javascript include to our application.js. Modify your application.js file so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="no">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">manifest</span> <span class="n">file</span> <span class="n">that</span><span class="s1">&#39;ll be compiled into application.js, which will include all the files</span>
</span><span class='line'><span class="s1">// listed below.</span>
</span><span class='line'><span class="s1">//</span>
</span><span class='line'><span class="s1">// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,</span>
</span><span class='line'><span class="s1">// or any plugin&#39;</span><span class="n">s</span> <span class="n">vendor</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">javascripts</span> <span class="n">directory</span> <span class="n">can</span> <span class="n">be</span> <span class="n">referenced</span> <span class="n">here</span> <span class="n">using</span> <span class="n">a</span> <span class="n">relative</span> <span class="n">path</span><span class="o">.</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span> <span class="no">It</span><span class="s1">&#39;s not advisable to add code directly here, but if you do, it&#39;</span><span class="n">ll</span> <span class="n">appear</span> <span class="n">at</span> <span class="n">the</span> <span class="n">bottom</span> <span class="n">of</span> <span class="n">the</span>
</span><span class='line'><span class="sr">//</span> <span class="n">compiled</span> <span class="n">file</span><span class="o">.</span> <span class="no">JavaScript</span> <span class="n">code</span> <span class="k">in</span> <span class="n">this</span> <span class="n">file</span> <span class="n">should</span> <span class="n">be</span> <span class="n">added</span> <span class="n">after</span> <span class="n">the</span> <span class="n">last</span> <span class="n">require_</span><span class="o">*</span> <span class="n">statement</span><span class="o">.</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span> <span class="no">Read</span> <span class="no">Sprockets</span> <span class="no">README</span> <span class="p">(</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">rails</span><span class="o">/</span><span class="n">sprockets</span><span class="c1">#sprockets-directives) for details</span>
</span><span class='line'><span class="sr">//</span> <span class="n">about</span> <span class="n">supported</span> <span class="n">directives</span><span class="o">.</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">jquery</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">jquery_ujs</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">ckeditor</span><span class="o">/</span><span class="n">init</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">turbolinks</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="n">require_tree</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now we need to add some code to the magazines controller. Add the following code to the magazines controller:
</p>




<figure class='code'><figcaption><span>magazines_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MagazinesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@magazines</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">magazine_params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@magazine</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">magazines_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;The magazines has been successfully created.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@magazine</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">magazine_params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">magazines_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;The magazine has been successfully updated.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;edit&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">magazine_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:magazine</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This code enables the ability to read, write, and update the magazines in our example. Now for the views, first lets create the index view:
</p>




<figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= link_to &quot;New Magazine&quot;, new_magazine_path %&gt;</span>
</span><span class='line'><span class="sx">&lt;% @magazines.each do |magazine| %&gt;</span>
</span><span class='line'><span class="sx">  &lt;h3&gt;&lt;%=</span> <span class="n">magazine</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">html_safe</span> <span class="sx">%&gt;&lt;/h3&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&lt;</span><span class="sx">%= magazine.body.html_safe %&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit Magazine&quot;</span><span class="p">,</span> <span class="n">edit_magazine_path</span><span class="p">(</span><span class="n">magazine</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% if magazine != @magazines.last %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">hr</span> <span class="sr">/&gt;</span>
</span><span class='line'><span class="sr">  &lt;% end %&gt;</span>
</span><span class='line'><span class="sr">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, lets create a partial to store the form. Create a file called app/views/_form.html.erb and add the code listed below:
</p>




<figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="vi">@magazine</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;ul&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= @magazine.errors.full_messages.each do |message| %&gt;</span>
</span><span class='line'><span class="sx">        &lt;li&gt;&lt;%=</span> <span class="n">message</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/ul&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;%= form_for @magazine do |f| %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :title %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">  &lt;div&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:title</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :body %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">  &lt;div&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">cktext_area</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">rows</span><span class="p">:</span> <span class="mi">10</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, lets create the new view. Create the app/views/magazines/new.html.erb file and add the code listed below:
</p>




<figure class='code'><figcaption><span>new.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span> <span class="no">New</span> <span class="no">Magazine</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">&lt;%= render &quot;form&quot; %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, if you visit the new magazines page on your development server you will see that CKEditor appears.
</p>




<p>
  Next lets create the edit view. Create the app/views/magazines/edit.html.erb file and add the code listed below:
</p>




<figure class='code'><figcaption><span>edit.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= &quot;Editing </span><span class="si">#{</span><span class="vi">@magazine</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="sx">&quot; %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">render</span> <span class="s2">&quot;form&quot;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now when you click &#8216;edit magazine&#8217; on any magazine, it will show the CKEditor for editing.
</p>




<p>
  <strong>Images Using Paperclip</strong><br/>
  In order to integrate images via paperclip, a few more steps are required. Note that you must have ImageMagick installed for this to work. First, lets include the paperclip gem:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;paperclip&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, we need to run a generator provided by ckeditor. This generator will create the necessary models that will be used to store image data. Run the command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">ckeditor</span><span class="p">:</span><span class="n">install</span> <span class="o">--</span><span class="n">orm</span><span class="o">=</span><span class="n">active_record</span> <span class="o">--</span><span class="n">backend</span><span class="o">=</span><span class="n">paperclip</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, if you restart your rails server and refresh the page, you will be able to click the images button, upload an image, and insert it into your articles.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Markdown]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/30/gulp-markdown/"/>
    <updated>2016-10-30T11:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/30/gulp-markdown</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Markdown" />
</p>




<p>
  Now for someting new. We are going to use Gulp with Handlebars to create our own CMS system.
</p>




<p>
  First of all, We want to be able to process markdown files and create html files with Gulp with plugin.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">markdown</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  For more information about <code>gulp-markdown</code> check out <a href="https://www.npmjs.org/package/gulp-markdown" target="_blank">https://www.npmjs.org/package/gulp-markdown</a>
</p>




<p>
  We will read all the markdown files in the <code>contents/pages</code> folder and generate html files.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">var</span> <span class="n">markdown</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-markdown&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;generate_pages&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s1">&#39;content/pages/**.md&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">markdown</span><span class="p">())</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s2">&quot;build/pages&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Lets create our first page.
</p>




<figure class='code'><figcaption><span>ontents/pages/first_page.md </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Yes</span><span class="p">,</span> <span class="n">it</span> <span class="n">makes</span> <span class="n">a</span> <span class="o">**</span><span class="n">bold</span><span class="o">**</span> <span class="n">statement</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  When We run our <code>gulp generate_pages</code> task, We will take the markdown and convert it into html and place the files in the <code>build/pages</code> directory.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">generate_pages</span>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/js/</span><span class="n">gulpwalkthru</span><span class="o">/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;generate_pages&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;generate_pages&#39;</span> <span class="n">after</span> <span class="mi">22</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If We look in our <code>build/pages</code> directory, We should see our new html file.
</p>




<figure class='code'><figcaption><span>build/pages/first_page.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span><span class="o">&gt;</span><span class="no">Yes</span><span class="p">,</span> <span class="n">it</span> <span class="n">makes</span> <span class="n">a</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">bold</span><span class="o">&lt;</span><span class="sr">/strong&gt; statement.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If We visit http://localhost:8000/pages/first_page.html we should see our generated webpage.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Live Reload]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-live-reload/"/>
    <updated>2016-10-12T16:24:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-live-reload</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Live Reload" />
</p>




<p>
  So far so good, lets link our css file in <code>index.html</code>.
</p>




<figure class='code'><figcaption><span>/contents/index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">Learning</span> <span class="no">Gulp</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/s</span><span class="n">tyles</span><span class="o">/</span><span class="n">main</span><span class="o">.</span><span class="n">min</span><span class="o">.</span><span class="n">css</span><span class="s2">&quot; /&gt;</span>
</span><span class='line'><span class="s2">  &lt;/head&gt;</span>
</span><span class='line'><span class="s2">  &lt;body&gt;</span>
</span><span class='line'><span class="s2">    &lt;h1&gt;Hello Gulp!&lt;/h1&gt;</span>
</span><span class='line'><span class="s2">  &lt;/body&gt;</span>
</span><span class='line'><span class="s2">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now let&#8217;s turn on live reload with our <code>gulp-webserver</code>.
</p>




<figure class='code'><figcaption><span>gulpefile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;webserver&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">webserver</span><span class="p">({</span> <span class="ss">livereload</span><span class="p">:</span> <span class="kp">true</span> <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If we run <code>gulp webserver</code> in one terminator and <code>gulp watch</code> in another, we will have our webserver running and live refreshing on each build.
</p>




<p>
  terminator1:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">webserver</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  terminator2:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">watch</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Update the css file to:
</p>




<figure class='code'><figcaption><span>/contents/styles/some_styles.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">color</span><span class="p">:</span> <span class="n">blue</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Go to <code>http://localhost:8000</code> to watch our webpage.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Web Server]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-web-server/"/>
    <updated>2016-10-12T16:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-web-server</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Web Server" />
</p>




<p>
  We can actually serve our webpages by using a gulp plugin.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">webserver</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  For more information about <code>gulp-webserver</code> check out <a href="https://www.npmjs.com/package/gulp-webserver" target="_blank">https://www.npmjs.com/package/gulp-webserver</a>
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">var</span> <span class="n">webserver</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-webserver&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;webserver&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">webserver</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now when we run our gulp task webserver we will have a local webserver to view our website.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">webserver</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;webserver&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Webserver</span> <span class="n">started</span> <span class="n">at</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">8000</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;webserver&#39;</span> <span class="n">after</span> <span class="mi">20</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you go to <code>http://localhost:8000</code> in your web browser you should see our index.html page saying Hello Gulp!.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Watch]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-watch/"/>
    <updated>2016-10-12T16:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-watch</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Watch" />
</p>




<p>
  Now for something super amazing. Instead of running the gulp task explicitly, lets have gulp run our tasks when the files change.
</p>




<p>
  First reorganize some of our tasks:<br/>
  - Rename default task to css.<br/>
  - Create a new default task to run css, &#8216;javascript&#8217;, and &#8216;homepage&#8217; tasks.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;clean&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Concat, move, and minify all the css files in styles folder&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/styles/**.css&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">concat</span><span class="p">(</span><span class="s1">&#39;main.min.css&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">cssmin</span><span class="p">())</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s1">&#39;build/styles&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;css&#39;</span><span class="p">,</span> <span class="s1">&#39;homepage&#39;</span><span class="p">,</span> <span class="s1">&#39;javascript&#39;</span><span class="o">]</span><span class="p">);</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next create our file watching task. Could you guess what?&#8230; there isn’t a plugin for this. It is just part of gulp.
</p>




<p>
  We will create a gulp watch task to watch our contents folder and run our default task on file change.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;watch&#39;</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">watch</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;contents/**&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;default&#39;</span><span class="o">]</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In the terminal type:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">watch</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;watch&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;watch&#39;</span> <span class="n">after</span> <span class="mi">11</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you update any of the css files in the styles folder, you should see gulp run the default task.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Starting</span> <span class="s1">&#39;clean&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Clean</span> <span class="n">all</span> <span class="n">files</span> <span class="k">in</span> <span class="n">build</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;clean&#39;</span> <span class="n">after</span> <span class="mi">21</span> <span class="n">ms</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;css&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Concat</span><span class="p">,</span> <span class="n">move</span><span class="p">,</span> <span class="ow">and</span> <span class="n">minify</span> <span class="n">all</span> <span class="n">the</span> <span class="n">css</span> <span class="n">files</span> <span class="k">in</span> <span class="n">styles</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;homepage&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;javascript&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Validate</span><span class="p">,</span> <span class="no">Concat</span><span class="p">,</span> <span class="no">Uglify</span><span class="p">,</span> <span class="ow">and</span> <span class="no">Move</span> <span class="n">all</span> <span class="n">the</span> <span class="n">javascript</span> <span class="n">files</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;homepage&#39;</span> <span class="n">after</span> <span class="mi">77</span> <span class="n">ms</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;javascript&#39;</span> <span class="n">after</span> <span class="mi">75</span> <span class="n">ms</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;css&#39;</span> <span class="n">after</span> <span class="mi">84</span> <span class="n">ms</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;default&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;default&#39;</span> <span class="n">after</span> <span class="mi">14</span> <span class="err">μ</span><span class="n">s</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Creating a Webpage]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-creating-a-webpage/"/>
    <updated>2016-10-12T09:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-creating-a-webpage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Creating a Webpage" />
</p>




<p>
  Moving CSS and JavaScript files is all well and good, but we do actually want webpages right?
</p>




<p>
  Let’s start our webpage generation by first moving the <code>index.html</code> file we created while learning more about streams.
</p>




<p>
  It should look like:
</p>




<figure class='code'><figcaption><span>/contents/index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">Learning</span> <span class="no">Gulp</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Hello</span> <span class="no">Gulp</span><span class="o">!&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We will then create a simple homepage task to move the index.html file to our build directory.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s2">&quot;homepage&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/index.html&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s2">&quot;build&quot;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now test the task.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">homepage</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;homepage&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;homepage&#39;</span> <span class="n">after</span> <span class="mi">15</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It would be nice to be able to preview our website as we generate the content. Let’s do that next.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Testing with Jasmine]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-testing-with-jasmine/"/>
    <updated>2016-10-12T09:07:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-testing-with-jasmine</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Testing with Jasmine" />
</p>




<p>
  You do test your JavaScript right? Well&#8230; you should and with gulp + Karma + Jasmine it is super easy.
</p>




<p>
  First if you have not installed Karma and Jasmine, then do so now.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">karma</span><span class="o">-</span><span class="n">jasmine</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next we will install the <code>gulp-jasmine</code> plugin for gulp.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">jasmine</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We can then create a test task to run all the specs found in a specs folder we will create.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">jasmine</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-jasmine&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;specs&#39;</span><span class="p">,</span> <span class="n">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s1">&#39;specs/**.js&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">jasmine</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Let’s create a basic (failing) test to see that it is working.
</p>




<figure class='code'><figcaption><span>/specs/our_test.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s1">&#39;OMG a JavaScript Test&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s1">&#39;should pass&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">toBe</span><span class="p">(</span><span class="kp">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">specs</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;specs&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">F</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Failures</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>  <span class="mi">1</span><span class="p">)</span> <span class="no">OMG</span> <span class="n">a</span> <span class="no">JavaScript</span> <span class="no">Test</span> <span class="n">should</span> <span class="n">pass</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span> <span class="no">Expected</span> <span class="kp">true</span> <span class="n">to</span> <span class="n">be</span> <span class="kp">false</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="n">spec</span><span class="p">,</span> <span class="mi">1</span> <span class="n">failure</span>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="mo">004</span> <span class="n">seconds</span>
</span><span class='line'><span class="s1">&#39;specs&#39;</span> <span class="n">errored</span> <span class="n">after</span> <span class="mi">39</span> <span class="n">ms</span> <span class="no">Tests</span> <span class="n">failed</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now it is time to refactor. We will make the extremely difficult change from false to true to make our test pass.
</p>




<figure class='code'><figcaption><span>/specs/our_test.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s1">&#39;OMG a JavaScript Test&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s1">&#39;should pass&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">expect</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span><span class="o">.</span><span class="n">toBe</span><span class="p">(</span><span class="kp">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And run our test suite again.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">specs</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;specs&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span> <span class="n">spec</span><span class="p">,</span> <span class="mi">0</span> <span class="n">failures</span>
</span><span class='line'><span class="no">Finished</span> <span class="k">in</span> <span class="mi">0</span> <span class="n">seconds</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;specs&#39;</span> <span class="n">after</span> <span class="mi">39</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next we will do is improve our testing task by adding a test-watch task to run as we edit our JavaScript files.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;spec-watch&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gulp</span><span class="o">.</span><span class="n">watch</span><span class="p">(</span><span class="o">[</span><span class="s1">&#39;specs/**.js&#39;</span><span class="p">,</span> <span class="s1">&#39;contents/javascripts/**.js&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;test&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Uglify]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/11/gulp-uglify/"/>
    <updated>2016-10-11T22:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/11/gulp-uglify</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Uglify" />
</p>




<p>
  For JavaScript files we also want to uglify them. Uglifying JavaScript involves changing variable and function names to reduce their size. So a variable named customer might be renamed to x. JavaScript engines don’t care about descriptive names, only developers. So how do we uglify JavaScript files with gulp?
</p>




<p>
  I know what you are going to say: &#8220;Blah, blah, blah&#8230; there is a plugin.&#8221; and you are correct.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">uglify</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  For more information on <code>gulp-uglify</code> check out <a href="https://www.npmjs.org/package/gulp-uglify" target="_blank">https://www.npmjs.org/package/gulp-uglify</a>.
</p>




<p>
  While we are uglifying the file, we will also concat all our JavaScript files together and move them to <code>build/javascripts</code>.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">var</span> <span class="n">uglify</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;javascript&#39;</span><span class="p">,</span> <span class="n">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Validate, Concat, Uglify, and Move all the javascript files&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/javascripts/**.js&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">jsValidate</span><span class="p">())</span>
</span><span class='line'>    <span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span> <span class="n">notify</span><span class="o">.</span><span class="n">onError</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">uglify</span><span class="p">())</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">concat</span><span class="p">(</span><span class="s1">&#39;main.js&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s1">&#39;build/javascripts&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  When you run our gulp javascript task now, we should see that our javascript files were uglified, concated, and moved to the build folder.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpFile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;javascript&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Validate</span><span class="p">,</span> <span class="no">Concat</span><span class="p">,</span> <span class="no">Uglify</span><span class="p">,</span> <span class="ow">and</span> <span class="no">Move</span> <span class="n">all</span> <span class="n">the</span> <span class="n">javascript</span> <span class="n">files</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;javascript&#39;</span> <span class="n">after</span> <span class="mi">55</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you have an error here, be sure to check that your JavaScript is valid. Remember we were testing that last section.
</p>




<p>
  The build script should create our <code>/build/javascripts/main.js</code> file.
</p>




<figure class='code'><figcaption><span>/build/javascripts/main.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">(){</span><span class="n">var</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">return</span> <span class="n">n</span><span class="o">+</span><span class="mi">10</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Notify Pop Up]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/11/gulp-notify-pop-up/"/>
    <updated>2016-10-11T21:11:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/11/gulp-notify-pop-up</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Notify Pop Up" />
</p>




<p>
  In the previous article, we used gulp to validate our JavaScript. The error message would appear in the console. While this is awesome, there is a chance we could miss it.
</p>




<p>
  Let’s use notifications to display a pop up window when we have a JavaScript error.
</p>




<p>
  There is a gulp plugin to send notifications.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">notify</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  For more information on <code>gulp-notify</code> check out <a href="https://www.npmjs.org/package/gulp-notify" target="_blank">https://www.npmjs.org/package/gulp-notify</a>
</p>




<p>
  Remember that gulp uses node’s streaming. It shouldn’t be a surprise that when <code>gulp-jsvalidate</code> finds an error, it emits an error event.
</p>




<p>
  All we need to do is handle the event and use <code>gulp-notify</code> to send a notification with the error message.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">var</span> <span class="n">notify</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-notify&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;javascript&#39;</span><span class="p">,</span> <span class="n">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Validate JavaScript&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/javascripts/**.js&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">jsValidate</span><span class="p">())</span>
</span><span class='line'>    <span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span> <span class="n">notify</span><span class="o">.</span><span class="n">onError</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Since our JavaScript is now valid, we need to make it invalid so we can see the error message.
</p>




<figure class='code'><figcaption><span>/contests/javascript/somejs.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now when we run gulp javascript we will get a notification window that an error was found.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpFile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;javascript&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Validate</span> <span class="no">JavaScript</span>
</span><span class='line'><span class="n">gulp</span><span class="o">-</span><span class="ss">notify</span><span class="p">:</span> <span class="o">[</span><span class="no">Error</span> <span class="n">running</span> <span class="no">Gulp</span><span class="o">]</span> <span class="no">Line</span> <span class="mi">3</span><span class="p">:</span> <span class="no">Unexpected</span> <span class="n">token</span> <span class="o">*</span>
</span><span class='line'><span class="s1">&#39;javascript&#39;</span> <span class="n">errored</span> <span class="n">after</span> <span class="mi">41</span> <span class="n">ms</span> <span class="no">Line</span> <span class="mi">3</span><span class="p">:</span> <span class="no">Unexpected</span> <span class="n">token</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Validate JavaScript]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/11/gulp-validate-javascript/"/>
    <updated>2016-10-11T11:42:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/11/gulp-validate-javascript</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Validate JavaScript" />
</p>




<p>
  The web runs on more than HTML and CSS, It runs on JavaScript. Let’s perform some common JavaScript build operations with gulp.
</p>




<p>
  We will first look into validating our JavaScript using gulp.
</p>




<p>
  And yes&#8230; there is a plugin for that.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">jsvalidate</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  For more information on <code>gulp-jsvalidate</code> check out <a href="https://github.com/sindresorhus/gulp-jsvalidate" target="_blank">https://github.com/sindresorhus/gulp-jsvalidate</a>.
</p>




<p>
  We will now create a new Javascript task in our <code>gulpfile.js</code>. At first, all we will do is validate our Javascript in a new <code>/contents/javascripts</code> folder.
</p>




<figure class='code'><figcaption><span>/gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">var</span> <span class="n">jsValidate</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-jsvalidate&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;javascript&#39;</span><span class="p">,</span> <span class="n">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Validate JavaScript&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/javascripts/**.js&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">jsValidate</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Time to test out our new task and plugin. Create a javascript file and make a syntax error.
</p>




<figure class='code'><figcaption><span>/contents/javascript/somejs.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="sr">//</span> <span class="n">this</span> <span class="n">is</span> <span class="ow">not</span> <span class="n">valid!</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now when we run our javascript task, we will get an error message in the terminator:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;javascript&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="s1">&#39;javascript&#39;</span> <span class="n">errored</span> <span class="n">after</span> <span class="mi">14</span> <span class="n">ms</span> <span class="no">Line</span> <span class="mi">3</span><span class="p">:</span> <span class="no">Unexpected</span> <span class="n">token</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  When we fix the error and then run our gulp task, we won’t get that error message:
</p>




<figure class='code'><figcaption><span>/contents/javascript/somejs.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;javascript&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Validate</span> <span class="no">JavaScript</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;javascript&#39;</span> <span class="n">after</span> <span class="mi">14</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Sweet codes! Gulp can now check if our JavaScript is valid. But the error message in the console is rather bland, lets find a better way to tell us that we messed up.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Handling Errors with Streams]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/10/gulp-handling-errors-with-streams/"/>
    <updated>2016-10-10T22:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/10/gulp-handling-errors-with-streams</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulpjs.jpg" width="600" alt="Gulp, Gulp – Handling Errors with Streams" />
</p>




<p>
  What if the file was named incorrectly? What happens?
</p>




<p>
  Change the string <code>index.html</code> to <code>OMG_WRONG_FILE.html</code> and rerun the script.
</p>




<figure class='code'><figcaption><span>/streams.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="n">createReadStream</span><span class="p">(</span><span class="n">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/contents/OMG_WRONG_FILE.html&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="sr">//</span> <span class="n">just</span> <span class="n">output</span> <span class="n">chunk</span> <span class="n">to</span> <span class="n">terminal</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">chunk</span><span class="o">.</span><span class="n">toString</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;END&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Running the script this time results in:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">node</span> <span class="n">streams</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="n">events</span><span class="o">.</span><span class="n">js</span><span class="p">:</span><span class="mi">72</span>
</span><span class='line'>        <span class="kp">throw</span> <span class="n">er</span><span class="p">;</span> <span class="sr">//</span> <span class="no">Unhandled</span> <span class="s1">&#39;error&#39;</span> <span class="n">event</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Error</span><span class="p">:</span> <span class="no">ENOENT</span><span class="p">,</span> <span class="nb">open</span> <span class="s1">&#39;~/YOUR_DIRECTORY/OMG_WRONG_FILE.html&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If we read the error message carefully, then we can see that there is an error event we can listen to. So lets listen for that event.
</p>




<figure class='code'><figcaption><span>/streams.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">stream</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">er</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span> <span class="n">er</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now we rerun the script and see:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">node</span> <span class="n">streams</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="n">error</span> <span class="p">{</span> <span class="o">[</span><span class="ss">Error</span><span class="p">:</span> <span class="no">ENOENT</span><span class="p">,</span> <span class="nb">open</span> <span class="s1">&#39;/Users/bunlong/js/gulp/contents/OMG_WRONG_FILE.html&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="ss">errno</span><span class="p">:</span> <span class="o">-</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">code</span><span class="p">:</span> <span class="s1">&#39;ENOENT&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">path</span><span class="p">:</span> <span class="s1">&#39;~/YOUR_DIRECTORY/contents/OMG_WRONG_FILE.html&#39;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And that is it for now. We will come back and use some of what we learned later.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Streams]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/04/gulp-streams/"/>
    <updated>2016-10-04T09:18:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/04/gulp-streams</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulpjs.jpg" width="600" alt="Gulp, Gulp – Minify Our CSS" />
</p>




<p>
  Before we continue, I think a brief detour to cover some basics of Node streams would be helpful.
</p>




<p>
  Lets create a simple Node script to read a <code>index.html</code> file we will create:
</p>




<figure class='code'><figcaption><span>/contents/index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">Learning</span> <span class="no">Gulp</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Hello</span> <span class="no">Gulp</span><span class="o">!&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  First we require the file system library <code>fs</code> and create a read stream.
</p>




<figure class='code'><figcaption><span>/streams.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="n">createReadStream</span><span class="p">(</span><span class="n">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/contents/index.html&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>_dirname</code> is a helper that returns the absolute path of the code file being run.
</p>




<p>
  Node reads files asynchronously. This is normally where we could dive into what &#8220;non-blocking I/O&#8221; means vs threads, etc. This is a guide about gulp though so I will keep this detour basic.
</p>




<p>
  For our purposes, this means that we have to listen to <strong>events</strong> from the stream to be able to read the file.
</p>




<p>
  The events we are going to listen to are <code>data</code> and <code>end</code>.
</p>




<p>
  <code>data</code> fires when a chunk of the file has been read and returned. <strong>This chunk is not always the entire file</strong>. In fact, you should assume it is not the entire file.
</p>




<figure class='code'><figcaption><span>/streams.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">stream</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="sr">//</span> <span class="n">just</span> <span class="n">output</span> <span class="n">chunk</span> <span class="n">to</span> <span class="n">terminal</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">chunk</span><span class="o">.</span><span class="n">toString</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>end</code> fires when the file has been completly read.
</p>




<figure class='code'><figcaption><span>/streams.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">stream</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="sr">//</span> <span class="n">just</span> <span class="n">output</span> <span class="n">chunk</span> <span class="n">to</span> <span class="n">terminal</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">chunk</span><span class="o">.</span><span class="n">toString</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now altogether, <code>streams.js</code> looks like:
</p>




<figure class='code'><figcaption><span>/streams.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">fs</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s2">&quot;fs&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">fs</span><span class="o">.</span><span class="n">createReadStream</span><span class="p">(</span><span class="n">__dirname</span> <span class="o">+</span> <span class="s2">&quot;/contents/index.html&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;data&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">chunk</span><span class="o">.</span><span class="n">toString</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">stream</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;END&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now if you run the node script in the terminal, you should see:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">node</span> <span class="n">streams</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">Learning</span> <span class="no">Gulp</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Hello</span> <span class="no">Gulp</span><span class="o">!&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/html&gt;</span>
</span><span class='line'><span class="sr">END</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Minify Our CSS]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/03/gulp-minify-our-css/"/>
    <updated>2016-10-03T16:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/03/gulp-minify-our-css</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulpjs.jpg" width="600" alt="Gulp, Gulp – Minify Our CSS" />
</p>




<p>
  Now since we have our css in a single file, we can continue to increase the performance of our site by minifying our css. 
</p>




<p>
  Minifying is the process of eliminating all the unnecessary formatting in a css file. Human’s need spaces and tabs (also known as white space) to more easily read the styles. A browser doesn’t care about white space so we can make the file smaller by removing them.
</p>




<p>
  You should start seeing a pattern when using gulp&#8230; because for this we need to use a plugin:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">minify</span><span class="o">-</span><span class="n">css</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  For more information on gulp-minify-css, check out <a href="https://www.npmjs.org/package/gulp-minify-css" target="_blank">https://www.npmjs.org/package/gulp-minify-css</a>.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">gulp</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">concat</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-concat&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">clean</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-rimraf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">cssmin</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s2">&quot;gulp-minify-css&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;clean&#39;</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Clean all files in build folder&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;build/*&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">read</span><span class="p">:</span> <span class="kp">false</span> <span class="p">})</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">clean</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;clean&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Concat, move, and minify all the css files in styles folder&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/styles/**.css&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">concat</span><span class="p">(</span><span class="s1">&#39;main.min.css&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">cssmin</span><span class="p">())</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s1">&#39;build/styles&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Open up your terminator to run gulp:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpFile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;clean&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Clean</span> <span class="n">all</span> <span class="n">files</span> <span class="k">in</span> <span class="n">build</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;clean&#39;</span> <span class="n">after</span> <span class="mi">18</span> <span class="n">ms</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;default&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Concat</span><span class="p">,</span> <span class="n">move</span><span class="p">,</span> <span class="ow">and</span> <span class="n">minify</span> <span class="n">all</span> <span class="n">the</span> <span class="n">css</span> <span class="n">files</span> <span class="k">in</span> <span class="n">styles</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;default&#39;</span> <span class="n">after</span> <span class="mi">40</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Our <code>build/styles/main.min.css</code> should now look like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span><span class="p">{</span><span class="n">font</span><span class="o">-</span><span class="ss">size</span><span class="p">:</span><span class="mi">30</span><span class="n">px</span><span class="p">}</span><span class="n">h1</span><span class="p">{</span><span class="ss">color</span><span class="p">:</span><span class="n">red</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Cleaning Our Build Folder]]></title>
    <link href="http://geekhmer.github.io/blog/2016/09/26/gulp-cleaning-our-build-folder/"/>
    <updated>2016-09-26T16:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/09/26/gulp-cleaning-our-build-folder</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulpjs.jpg" width="600" alt="Gulp, Gulp – Cleaning Our Build Folder" />
</p>




<p>
  A normal part of a build process is a cleaning task to remove all the old files in the build folder.
</p>




<p>
For us, this means getting rid of the leftover <code>more_styles.css</code> and <code>some_styles.css</code> files in our <code>build/styles</code> folder.
</p>




<p>
  To clean files, we will need another gulp plugin:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">rimraf</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
For more information on gulp-rimraf check out <a href="https://www.npmjs.com/package/gulp-rimraf" target="_blank"> https://www.npmjs.org/package/gulp-rimraf</a>.
</p>




<p>
  This task used to be handled by <code>gulp-clean</code> but has been replaced by <code>gulp-rimraf</code>.
</p>




<p>
Instead of adjusting our <code>default</code> task, lets create a new task to clean out the directory.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">gulp</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">concat</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-concat&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">clean</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-rimraf&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;clean&#39;</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Clean all files in build folder&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;build/*&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">read</span><span class="p">:</span> <span class="kp">false</span> <span class="p">})</span><span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">clean</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;clean&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Concating and moving all the css files in styles folder&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/styles/**.css&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">concat</span><span class="p">(</span><span class="s1">&#39;main.css&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s1">&#39;build/styles&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So like before, we need to require <code>gulp-rimraf</code>.
</p>




<p>
  This time though, we created a new task called <code>clean</code>. We tell this task to look at all the files in the <code>build</code> folder and then pipe them to our clean operation. This will delete the files.
</p>




<p>
  You might notice that in our options we pass in <code>{ read: false }</code>. This tells the task to not read the contents of the files it is deleting. It is an easy performance gain.
</p>




<p>
  To run our clean task from the command line, we just tell gulp which task to run:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">clean</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;clean&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Clean</span> <span class="n">all</span> <span class="n">files</span> <span class="k">in</span> <span class="n">build</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;clean&#39;</span> <span class="n">after</span> <span class="mi">8</span><span class="o">.</span><span class="mi">95</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What we would like is to run our <code>clean</code> task before we run our <code>default</code> task. That way our build folder will be nice and empty before we starting moving files there.
</p>




<p>
You might have been wondering what the empty array (<code>[]</code>) was before our <code>function</code>. This is where we specify dependency tasks.
</p>




<p>
  A <strong>dependency task</strong> is a task that needs to be completed before gulp can run the current task.
</p>




<p>
  So for our scenario, our <code>clean</code> task is a dependency for <code>default</code>.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;clean&#39;</span><span class="o">]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now when we run our <code>default</code> gulp task, we should see that it runs the <code>clean</code> task before <code>default</code>.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;clean&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Clean</span> <span class="n">all</span> <span class="n">files</span> <span class="k">in</span> <span class="n">build</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;clean&#39;</span> <span class="n">after</span> <span class="mi">9</span><span class="o">.</span><span class="mo">03</span> <span class="n">ms</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;default&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Concating</span> <span class="ow">and</span> <span class="n">moving</span> <span class="n">all</span> <span class="n">files</span> <span class="n">from</span> <span class="n">styles</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;default&#39;</span> <span class="n">after</span> <span class="mi">8</span><span class="o">.</span><span class="mi">42</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Concat: Combining multiple files into one]]></title>
    <link href="http://geekhmer.github.io/blog/2016/09/13/gulp-concat-combining-multiple-files-into-one/"/>
    <updated>2016-09-13T09:35:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/09/13/gulp-concat-combining-multiple-files-into-one</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulp.jpg" width="600" alt="Gulp, Gulp – Concat: Combining multiple files into one" />
</p>




<p>
  Printing Hello and moving files is rather boring. Let’s do something productive.
</p>




<p>
  When we create websites, we are always trying to deliver the best experience possible.
  This includes having our webpages displaying fast. Back in the day, this meant having
  all our styles in one css file.
</p>




<p>
  While this made our webpages load faster, it made maintaining the css file a night-mare!
</p>




<p>
  These days we can use multiple css files for better organization and then concat (meaning merge or combine) the files together into one large file.
</p>




<p>
  We left our project looking like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/build</span>
</span><span class='line'><span class="sr">  /s</span><span class="n">tyles</span>
</span><span class='line'>    <span class="n">some_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>    <span class="n">more_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'><span class="sr">/node_modules</span>
</span><span class='line'><span class="sr">/</span><span class="n">contents</span>
</span><span class='line'>  <span class="sr">/styles</span>
</span><span class='line'><span class="sr">    some_styles.css</span>
</span><span class='line'><span class="sr">    more_styles.css</span>
</span><span class='line'><span class="sr">gulpfile.js</span>
</span><span class='line'><span class="sr">package.json</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Right now, we have two separate css files in our build/styles folder. We are going to use a gulp plugin to concat all our css files in the styles folder.
</p>




<p>
  Gulp contains some basic tasks, but the power of gulp is the customization you can bring into your build process by using plugins.
</p>




<p>
  For a list of all the gulp plugins available, go to <a href="http://gulpjs.com/plugins/" target="_blank">http://gulpjs.com/plugins/</a>
</p>




<p>
  To concat the files together, we will need to install one of these plugins.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">concat</span> <span class="o">--</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We can then update our default gulp task to concat the files.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">gulp</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="n">var</span> <span class="n">concat</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-concat&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Concating and moving all the css files in styles folder&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/styles/**.css&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">concat</span><span class="p">(</span><span class="s1">&#39;main.css&#39;</span><span class="p">))</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s1">&#39;build/styles&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Couple of things have changed, can you spot them? First, we had to reference the gulp plugin with:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">concat</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp-concat&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We chose to label this <code>concat</code>. Obviously we could call it anything we want, but concat communicates what the plugin does to those reading our build script.
</p>




<p>
  Second, we added another step to our task. In between the <code>src</code> and the <code>pipe(gulp.dest...)</code> steps, we added <code>pipe(concat(...))</code>.
</p>




<p>
  Gulp works by streaming files from one process to another. This allows us to create complex build tasks out of small, simple steps. Composition == winning.
</p>




<p>
  Now run our gulp task:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;default&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Moving</span> <span class="n">all</span> <span class="n">the</span> <span class="n">css</span> <span class="n">files</span> <span class="k">in</span> <span class="n">styles</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;default&#39;</span> <span class="n">after</span> <span class="mi">6</span><span class="o">.</span><span class="mi">09</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Our task will read all the css files in the <code>styles</code> folder, combine them into one <code>main.css</code> file, and then place that file in the <code>build/styles</code> folder.
</p>




<p>
  Our project should now look like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/build</span>
</span><span class='line'><span class="sr">  /s</span><span class="n">tyles</span>
</span><span class='line'>    <span class="n">main</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>    <span class="n">more_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>    <span class="n">some_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'><span class="sr">/node_modules</span>
</span><span class='line'><span class="sr">/s</span><span class="n">tyles</span>
</span><span class='line'>  <span class="n">more_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>  <span class="n">some_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="n">package</span><span class="o">.</span><span class="n">json</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Notice the more_styles.css and some_styles.css files are still in our build folder. :(
</p>




<p>
  We don’t want those chumps there anymore. In the next chapter we will learn how to
  get rid of those files.
</p>




<p>
  So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Moving Files]]></title>
    <link href="http://geekhmer.github.io/blog/2016/08/28/gulp-moving-files/"/>
    <updated>2016-08-28T18:35:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/08/28/gulp-moving-files</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulp.jpg" width="600" alt="Gulp – Moving Files" />
</p>




<p>
  The first thing we will learn to do with gulp is to move files.
</p>




<p>
  Let’s create simple styles files some_styles.css and more_styles.css.
</p>




<figure class='code'><figcaption><span>/contents/styles/some_styles.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h1</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">color</span><span class="p">:</span> <span class="n">red</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>/contents/styles/more_styles.css </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">font</span><span class="o">-</span><span class="ss">size</span><span class="p">:</span> <span class="mi">30</span><span class="n">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Our project structure should now look like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/node_modules</span>
</span><span class='line'><span class="sr">/</span><span class="n">contents</span>
</span><span class='line'>  <span class="sr">/styles</span>
</span><span class='line'><span class="sr">    more_styles.css</span>
</span><span class='line'><span class="sr">    some_styles.css</span>
</span><span class='line'><span class="sr">gulpfile.js</span>
</span><span class='line'><span class="sr">package.json</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Update our <code>gulpfile.js</code> from the previous section and instruct gulp to move all the files found in the styles folder to our <code>build/styles</code> folder.
</p>




<figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">gulp</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="o">[]</span><span class="p">,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Moving all files in styles folder&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="s2">&quot;contents/styles/**.*&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">pipe</span><span class="p">(</span><span class="n">gulp</span><span class="o">.</span><span class="n">dest</span><span class="p">(</span><span class="s1">&#39;build/styles&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, What do we expect will happen when we run gulp? If you guessed the files will be copied and moved to the <code>build/styles</code> folder, then give yourself a cookie.
</p>




<p>
  When we run gulp , we should see:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span>
</span><span class='line'>
</span><span class='line'><span class="no">Using</span> <span class="n">gulpfile</span> <span class="o">~</span><span class="sr">/YOUR_DIRECTORY/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="s1">&#39;default&#39;</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Moving</span> <span class="n">all</span> <span class="n">files</span> <span class="k">in</span> <span class="n">styles</span> <span class="n">folder</span>
</span><span class='line'><span class="no">Finished</span> <span class="s1">&#39;default&#39;</span> <span class="n">after</span> <span class="mi">7</span><span class="o">.</span><span class="mi">27</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Our project should now look like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/build</span>
</span><span class='line'><span class="sr">  /s</span><span class="n">tyles</span>
</span><span class='line'>    <span class="n">some_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>    <span class="n">more_styles</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'><span class="sr">/node_modules</span>
</span><span class='line'><span class="sr">/</span><span class="n">contents</span>
</span><span class='line'>  <span class="sr">/styles</span>
</span><span class='line'><span class="sr">    some_styles.css</span>
</span><span class='line'><span class="sr">    more_styles.css</span>
</span><span class='line'><span class="sr">gulpfile.js</span>
</span><span class='line'><span class="sr">package.json</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That’s it!!! See ya!!! :)
</p>



]]></content>
  </entry>
  
</feed>
