<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2016-04-06T14:28:14+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Command Line]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/25/git-command-line/"/>
    <updated>2016-03-25T15:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/25/git-command-line</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Git Command Line" />
</p>




<p>
  <a href="http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu/" target="_blank">How to install GIT on Linux/Ubuntu</a> &#8211; Today, Source Version Control has gained popularity in the management of source code. Therefore, the software engineer needs to know how to use and manipulate GIT. The following common GIT command line will help you manipulate GIT:
</p>




<p>
  <strong>Set up Git Configuration</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="s2">&quot;your_email@domain_name.com&quot;</span> <span class="sr">/* Setup email is used to commit */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="s2">&quot;your user name&quot;</span> <span class="sr">/* Setup username is used to commit */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">core</span><span class="o">.</span><span class="n">editor</span> <span class="s2">&quot;vi&quot;</span> <span class="sr">/* Choose editor used by GIT */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">color</span><span class="o">.</span><span class="n">ui</span> <span class="kp">true</span> <span class="sr">/* Setup color ui for command line */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">list</span> <span class="sr">/* See Git configuration */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>To Initialise a Local Repository</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">init</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Add a File to the Repository</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">init</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Commit the Change to Git</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;message&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>See the Commits</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">log</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Basic Commands</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">status</span>  <span class="sr">/*  The command &#39;git status&#39; tells which files are not added or committed from Working to Staging to Repository */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;message&quot;</span> <span class="sr">/*  Commits and changes to all files that are in Staging into Repo  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">diff</span> <span class="sr">/*  Show changes between Working and Local Repo, no file supplied shows all files  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">diff</span> <span class="o">--</span><span class="n">staged</span> <span class="sr">/*  Shows changes between Staged and Local Repo  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">rm</span> <span class="n">file</span><span class="o">.</span><span class="n">txt</span> <span class="sr">/*  Will remove file from working then git commit -m &quot;&quot; to also remove from Repo */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">rm</span> <span class="o">--</span><span class="n">cached</span> <span class="n">file</span><span class="o">.</span><span class="n">txt</span> <span class="sr">/* Leaves copy of file in Working but removes from Staging and Repo */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">mv</span> <span class="sr">/* Rename or move files - then git commit -m &quot;&quot; to move to Repo */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">am</span> <span class="s2">&quot;text goes here&quot;</span> <span class="sr">/* Adds all files straight to Repo from Staging if they have changes - meaning they skip git add */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="o">--</span> <span class="n">file</span><span class="o">.</span><span class="n">txt</span> <span class="sr">/* Restore Repo file to Working Directory using current branch  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="no">HEAD</span><span class="o">^</span> <span class="sr">/* Restore repo file to staging */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="no">HEAD</span> <span class="n">file</span><span class="o">.</span><span class="n">txt</span> <span class="sr">/*  Move a Stage file out of Stage back to Working */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">--</span><span class="n">amend</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;message&quot;</span> <span class="n">file</span><span class="o">.</span><span class="n">txt</span> <span class="sr">/* Change last commit to Repo (only last one can change) */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Resetting & Reverting</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/* Reverting --soft --mixed --hard will go back to previous commits* /</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">log</span> <span class="sr">/* Gets the sha1s so you can see the coomits where you want revert  back to */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">soft</span> <span class="n">sha</span> <span class="sr">/* Changes Repo but not Staging or Working */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">mixed</span> <span class="n">sha</span> <span class="sr">/* Changes Repo and Staging but not Working */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="n">sha</span> <span class="sr">/* Changes all 3 Tiers */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">clean</span> <span class="o">-</span><span class="n">f</span> <span class="sr">/* Remove untracked files from Working  */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Ignore File</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">gitignore</span> <span class="sr">/* Ignores files to track in Working /</span> <span class="n">track</span> <span class="n">the</span> <span class="o">.</span><span class="n">gitignore</span> <span class="n">file</span> <span class="o">*/</span>
</span><span class='line'>
</span><span class='line'><span class="no">Global</span> <span class="no">Ignore</span> <span class="sr">/* Create in home folder  */</span>
</span><span class='line'><span class="o">.</span><span class="n">gitignore_global</span>
</span><span class='line'><span class="o">.</span><span class="n">DS_Store</span>
</span><span class='line'><span class="o">.</span><span class="n">Trashes</span>
</span><span class='line'><span class="o">.</span><span class="n">Spotlight_V100</span>
</span><span class='line'><span class="sr">/* Add in  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">--</span><span class="n">global</span> <span class="n">core</span><span class="o">.</span><span class="n">excludesfile</span> <span class="o">~</span><span class="sr">/.gitignore_global /</span><span class="o">*</span> <span class="no">Add</span> <span class="n">to</span> <span class="n">gitconfig</span> <span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Stop Tracking Changes</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">rm</span> <span class="o">--</span><span class="n">cached</span> <span class="n">file</span><span class="o">.</span><span class="n">txt</span> <span class="sr">/* Leaves copy in Repo and Working */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Commit Log</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">tree</span> <span class="no">HEAD</span>
</span><span class='line'><span class="n">git</span> <span class="n">ls</span><span class="o">-</span><span class="n">tree</span> <span class="n">master</span>
</span><span class='line'><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span>
</span><span class='line'><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">author</span><span class="o">=</span><span class="s2">&quot;Bunlong&quot;</span>
</span><span class='line'><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">grep</span><span class="o">=</span><span class="s2">&quot;temp&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Show Commit</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">show</span> <span class="n">dc094cb</span> <span class="sr">/*  show SHA1 */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Commands on Branch</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="sr">/* Show local branches * is the one we are on */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">r</span> <span class="sr">/* Shows remote branches */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">a</span> <span class="sr">/* Shows local and remote */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="n">newbranch</span> <span class="sr">/* Creates a new branch */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="n">newbranch</span> <span class="sr">/* Switch to new branch */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">oldbranch</span> <span class="sr">/* Creates and switches to new branch  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">newbranch</span> <span class="sr">/* Push new branch to remote */</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/* Diff in Branches */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">diff</span> <span class="n">master</span><span class="o">.</span><span class="n">.otherbranch</span> <span class="sr">/* Shows diff */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">diff</span> <span class="o">--</span><span class="n">color</span><span class="o">-</span><span class="n">words</span> <span class="n">master</span><span class="o">.</span><span class="n">.otherbranch</span> <span class="sr">/*  Shows diff in color */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">--</span><span class="n">merged</span> <span class="sr">/* Shows any merged branches */</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/* Rename Branch */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">m</span> <span class="n">oldname</span> <span class="n">newname</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/* Delete  Branch */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span> <span class="n">nameofbranch</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/* Merge Branch  */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">merge</span> <span class="n">branchname</span> <span class="sr">/* Be on the receiver branch to merge the other branch */</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/* Merge Conflicts between the same file on 2 branches are marked in HEAD and other branch */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">merge</span> <span class="o">--</span><span class="nb">abort</span> <span class="sr">/*  Abort basically cancels the merge */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Manually Fix Files and Commit - The Stash</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">save</span> <span class="s2">&quot;message&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">list</span> <span class="sr">/* Shows whats in stash */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">show</span> <span class="o">-</span><span class="nb">p</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="sr">/* Show the diff in the stash */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">pop</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="sr">/* Restores the stash deletes the tash */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="sr">/* Restores the stash and keeps the stash */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">clear</span> <span class="sr">/* Removes all stash */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">drop</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Remotes Commands</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">remote</span> <span class="n">add</span> <span class="n">origin</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">bunlong</span><span class="o">/</span><span class="nb">test</span><span class="o">.</span><span class="n">git</span> <span class="sr">/* Origin can be named whateve followed by the remote */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">remote</span> <span class="sr">/* To show all remotes */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">remote</span> <span class="n">show</span> <span class="n">origin</span> <span class="sr">/* To see remote URL*/</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">remote</span> <span class="n">remove</span> <span class="n">origin</span> <span class="sr">/* To remove remote */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">remote</span> <span class="n">rm</span> <span class="n">origin</span> <span class="sr">/* To remove remote */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Clone project. Push from local to Remote</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/* Cloning a GitHub Repo - create and get the URL of a new repository from GitHub, then clone that to your local repo, example below uses local repo named &#39;nameoffolder&#39; */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="nb">clone</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">bunlong</span><span class="o">/</span><span class="nb">test</span><span class="o">.</span><span class="n">git</span> <span class="n">nameoffolder</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="o">-</span><span class="n">u</span> <span class="n">origin</span> <span class="n">master</span> <span class="sr">/* Push to remote(origin) and branch(master) */</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/* Push to Remote from Local - more - since when we pushed the local to remote we used -u parameter then the remote branch is tracked to the local branch and we just need to use... */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">push</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">newbranch</span> <span class="sr">/* Push a branch to a remote */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Fetch Changes from a Cloned Repository</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">fetch</span> <span class="n">origin</span> <span class="sr">/* Pulls down latest committs from remote origin/m</span><span class="n">aster</span> <span class="ow">not</span> <span class="n">origin</span><span class="p">,</span> <span class="n">also</span> <span class="n">pull</span> <span class="n">down</span> <span class="n">any</span> <span class="n">branches</span> <span class="n">pushed</span> <span class="n">to</span> <span class="no">Repo</span> <span class="no">Fetch</span> <span class="n">before</span> <span class="n">you</span> <span class="n">work</span> <span class="no">Fetch</span> <span class="n">before</span> <span class="n">you</span> <span class="n">pull</span> <span class="no">Fetch</span> <span class="n">often</span> <span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Merge with origin/master</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">merge</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Fetch + Merge data ==> Pull</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">merge</span> <span class="n">origin</span><span class="o">/</span><span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Get Remote Branch</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="n">branch_name</span> <span class="n">origin</span><span class="o">/</span><span class="n">branch_name</span> <span class="sr">/* This will bring the remote branch to local and track with the remote */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Delete Branch</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">branch</span> <span class="o">-</span><span class="n">d</span> <span class="n">branch_name</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Checkout and Switch Branch and Track to Remote</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="o">-</span><span class="n">b</span> <span class="n">nontracking</span> <span class="n">origin</span><span class="o">/</span><span class="n">nontracking</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Remove Remote Branch</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="o">--</span><span class="n">delete</span> <span class="n">branch</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Undoing Changes</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="n">path</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">file</span> <span class="sr">/* Restores a file before it is staged */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="no">HEAD</span> <span class="n">path</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">file</span> <span class="sr">/* If it is staged - restores a file from last commit and then git checkout path-to-file */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="no">HEAD</span><span class="o">^</span> <span class="n">path</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">file</span> <span class="sr">/* If is staged and committed - restores from last commit */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">reset</span> <span class="o">--</span><span class="n">hard</span> <span class="no">HEAD</span><span class="o">^</span> <span class="sr">/* Restore prior commit */</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Tag</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">tag</span> <span class="o">-</span><span class="n">a</span> <span class="n">v1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span> <span class="o">-</span><span class="n">m</span> <span class="s2">&quot;message&quot;</span> <span class="sr">/* Tagging a commit with a version number*/</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="o">--</span><span class="n">tags</span> <span class="sr">/* Pushes tag info to master remote */</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/* You can checkout a commit and add a tag to that commit by checking out its SHA */</span>
</span><span class='line'>
</span><span class='line'><span class="n">git</span> <span class="n">checkout</span> <span class="n">f1f4a3d</span> <span class="sr">/* Checking out a commit - see the commit SHAS by git log */</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Freelancer]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/22/the-freelancer/"/>
    <updated>2016-03-22T16:45:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/22/the-freelancer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/the_freelancer.jpg" width="600" alt="The Freelancer" />
</p>




<p>
  Freelancer is a self-employed person who pursues a profession without a long-term commitment to any particular employer. Your curiosity in this opportunity was probably sparked by posts marked &#8220;Freelance&#8221; or &#8220;Work from anywhere&#8221; on the myriad of job boards around the Web. Freelancing is equal parts freedom and responsibility. While you have the freedom to choose when you work, where you work and what you work on, you are also responsible for everything: deadlines, finding work, the quality of your work, communication and so much more.
</p>




<p>
  So, your skill may be in Web development, Graphic design and your approach is to freelance, but it’s not that easy: freelancing is no walk in the park. It could become a living nightmare if you’re not able to use your time efficiently and remain focused and motivated until a project comes to a close. It could also become a nightmare if you market yourself poorly, are constantly desperate for work or surrender too much power to a client, putting you in the position of a monkey-worker responding to petty demands. The reasons I love being a freelancer:
</p>




<p>
  <strong>Be your own boss</strong><br/>
  Report to no one but yourself. You will work on boring tasks.
</p>




<p>
  <strong>Enjoy your freedom</strong><br/>
  You have the freedom to work when and where you please, the freedom to structure your day as you please.
</p>




<p>
  <strong>Choose what to work on</strong><br/>
  Want to spend 50% of your time on open-source projects? Interested in building your own Web app? You have the power to make that a reality. Want to work exclusively on projects in social media? Make it happen.
</p>




<p>
  <strong>Set your rates</strong><br/>
  Value is both a reflection of how you perceive yourself and how others perceive you. Are you capable of meeting deadlines, communicating well and delivering quality code?
</p>




<p>
  If you are just starting out, charging $80 per hour will be hard; you have to earn that rate over time and with experience.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Learning]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/21/continuous-learning/"/>
    <updated>2016-03-21T14:15:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/21/continuous-learning</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/continuous_learning.jpg" width="600" alt="Continuous Learning" />
</p>




<p>
  <strong>WE LIVE IN INTERESTING TIMES.</strong> As development gets distributed across the globe, you learn there are lots of people capable of doing your job. <strong> You need to keep learning to stay marketable.</strong> Otherwise you&#8217;ll become a dinosaur, stuck in the same job until, one day, you&#8217;ll no longer be needed or your job get out-sourced to some cheaper resource.
</p>




<p>
  So what do you do about it? Here&#8217;s a list of ways to keep you learning. Many of these can be found on the Internet for free:
</p>




<p>
  + Read books, magazines, blogs, Twitter feeds, and websites. If you want to go deeper into a subject, consider joining a mailing list or new group.
</p>




<p>
  + If you really want to get immersed in a technology, get hand on&#8211;write some code.
</p>




<p>
  + A good way to learn something is to teach or speak about it. When people are going to listen to you and ask you questions, you&#8217;ll be highly motivated to learn. Try a lunch learn at work, a user group, or a local conference.
</p>




<p>
  + Join or start a study group or a local user group for a languages, technology, or discipline you are interested in.
</p>




<p>
  + Go to conferences. And if you can&#8217;t go, many conferences put their talks on line for free.
</p>




<p>
  + Long commute? Listen to podcasts.
</p>




<p>
  + Follow the advice of the Pragmatic Programmers and learn a new language every year.
</p>




<p>
  + Not everything you learn has to be about technology. Learn the domain you&#8217;re working in so you can better understand the requirements and help solve the business problem. Learning how to be more productive&#8211;how to work better&#8211;is another good option.
</p>




<p>
  + Go back to school.
</p>




<p>
  You don&#8217;t have to spend every waking hour learning. A little time&#8211;say, each week&#8211;is better than nothing. There is (or should be) a life outside of work.
</p>




<p>
  <strong>Technology changes fast. Don&#8217;t get left behind.</strong>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Learn To Code Movement]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/14/the-learn-to-code-movement/"/>
    <updated>2016-03-14T15:49:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/14/the-learn-to-code-movement</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/the_learn_to_code_movement.jpg" width="600" alt="The Learn To Code Movement" />
</p>




<p>
  I’ve started to wonder if by focusing so much on learning code, we’re losing focus on how to support one of our most important assets in the technology industry.
</p>




<p>
  Technology and languages change constantly, so what was taught in a college coding class a few years ago is now outdated.
</p>




<p>
  This is a big problem, and one that will only become more severe over time. Just think about an iOS developer who in a few years might be coding entirely in Swift , Apple’s newly launched language. This type of rapid change is absent from almost all other industries, yet remains a serious concern for us.
</p>




<p>
  Here are just a few ideas that come to mind:
</p>




<p>
  <strong>1. Encourage pair programming</strong><br/>
  In case you’re not familiar, this is where two programmers work on the same computer at the same time so they can solve problems together. Every programmer has different strengths and weaknesses, so taking time to code together with different people in the company can be a great learning experience.
</p>




<p>
  <strong>2. Make learning free</strong><br/>
  A lot of technology companies offer some pretty awesome benefits, like catered lunches, healthy snacks and gym memberships. Education should be a part of that, too. Give employees budgets to buy educational books, or offer to pay for couple technical conferences a year that they may want to attend. The easier you make it for your team to continue learning, the more likely they are to take advantage of educational resources—and that ultimately helps both them and your company.
</p>




<p>
  <strong>3. Set learning time during work hours</strong><br/>
  Some companies set aside a few hours every week for everyone to stop working and spend time doing something that makes them better. This could be taking a typing class, playing an online programming course, refactoring some old code, or even coding a side project using a new language.
</p>




<p>
  <strong>Not one way to learning but many.</strong>
</p>




<p>
  learning is a personal process and different things work for different people. Some people like books, others prefer online videos, and some just like to dig in and experiment. The best way to tackle different learning styles is by having a good mix of tools—and ways for developers to get access to them—so they continue to grow in the way that’s best for them.
</p>




<p>
  <strong>Have you successfully implemented an education program for your development team?</strong>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Ways to Motivate People to Work Harder Faster and Smarter]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/09/3-ways-to-motivate-people-to-work-harder-faster-and-smarter/"/>
    <updated>2016-03-09T15:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/09/3-ways-to-motivate-people-to-work-harder-faster-and-smarter</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/3_ways_to_motivate_people_to_work_harder_faster_and_smarter.png" width="600" alt="3 Ways to Motivate People to Work Harder Faster and Smarter" />
</p>




<p>
  <strong>1. Threaten them.</strong>
</p>




<p>
  <strong>2. Pay them lots of money.</strong>
</p>




<p>
  <strong>3. Make their work/work space fun.</strong>
</p>




<p>
  In today&#8217;s workplace, threatening people has not been effective. Paying them lots of money (even if you can afford it) has only shown short-term success. Only number three, making their workplace enjoyable, has a track record of effecting real change. It is time managers learned how to create an atmosphere that is challenging, creative and fun for employees as well as for themselves.
</p>




<blockquote><p>FUN IS PRODUCTIVE</p></blockquote>




<p>
  Imagine a work world where people love their work environment, and they are calm, stress-free and happy all day long. People who are in good spirits are more likely to be productive. Their mental attitude produces increased oxygen, endorphins, and blood flow to the brain, which enables them to think more clearly and creatively. They are more relaxed, more accepting of others, and more likely to share their sense of humor.
</p>




<p>
  Laughter creates a bond that brings others together; people like to be with employees who are having fun. Creativity, intuition and flexibility are key to successful operation of organizations today. In stimulating environments, employees enjoy their time at work and they will also excel at work. A fun workplace is not only more productive, but it attracts people and profits.
</p>




<p>
  So far so good take it easy&#8230; let create a Fun Workplace&#8230; :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Executing Background Tasks with Scheduler in Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/04/executing-background-tasks-with-scheduler-in-rails/"/>
    <updated>2016-03-04T16:42:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/04/executing-background-tasks-with-scheduler-in-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Executing Background Tasks with Scheduler in Rails" />
</p>




<p>
  <a href="https://rubygems.org/gems/rufus-scheduler/versions/3.2.0" target="_blank">rufus-scheduler</a> is a handy gem that allows you to perform background jobs. In this article we will show you how to use rufus-scheduler in your Rails applications. Let&#8217;s get started:
</p>




<h3>Setup</h3>




<p>
  In order to use rufus-scheduler, we must first add the rufus-scheduler gem to our Gemfile. To do this, open up your Gemfile and add in the line listed below:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rufus-scheduler&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Run a bundle install to install the gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, we need to create an initializer that will contain the jobs we wish to schedule. Create a new initializer called scheduler.rb in the <code>config/initializers</code> directory and add in the code listed below:
</p>




<figure class='code'><figcaption><span>config/initializers/scheduler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rufus-scheduler&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">scheduler</span> <span class="o">=</span> <span class="ss">Rufus</span><span class="p">:</span><span class="ss">:Scheduler</span><span class="o">::</span><span class="n">singleton</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># jobs go below here.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now we are ready to schedule jobs.
</p>




<h3>Scheduling the Jobs</h3>




<p>
  rufus-scheduler provides a simple syntax for scheduling jobs. You can schedule both one time jobs and recurring jobs. One time jobs can be either scheduled at a specific time, or you can tell rufus to wait a specific amount of time before running the job (a delayed job). For recurring jobs and delayed jobs, you can either use a simple plain English (30m = 30 minutes, etc.) format or you can use the cron format for scheduling jobs. For this article we&#8217;ll focus on the English format:
</p>




<p>
  <strong>Recurring the Jobs</strong><br/>
  Scheduling recurring jobs is easy. Simply use the following format in your scheduler.rb file:
</p>




<figure class='code'><figcaption><span>config/initializers/scheduler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="n">every</span> <span class="s1">&#39;5s&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># do stuff</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The code above would perform your background task every 5 seconds. The list below will give you an idea of what time units are supported:
</p>




<p>
  <strong>s</strong> Example: 5s - seconds, specifies the number of seconds you wish to wait.<br/>
  <strong>m</strong> Example: 5m - the number of minutes you wish to wait.<br/>
  <strong>h</strong> Example: 5h - the number of hours you wish to wait.<br/>
  <strong>d</strong> Example: 5d - the number of days you wish to wait.<br/>
  <strong>w</strong> Example: 5w - the number of weeks you wish to wait.<br/>
  <strong>M</strong> Example: 5M - the number of months you wish to wait.<br/>
  <strong>y</strong> Example: 1y - the number of years you wish to wait.
</p>




<p>
  For example, the following code would tell rufus you wish to schedule a job for every 11 and a half hours:
</p>




<figure class='code'><figcaption><span>config/initializers/scheduler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="n">every</span> <span class="s1">&#39;11h30m&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># do stuff</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Scheduling a delayed job is easy. The syntax is similar to the recurring syntax listed above, but we use the <code>.in</code> method instead of <code>.every</code>. For example, the following code would run a task 4 hours after the server starts:
</p>




<figure class='code'><figcaption><span>config/initializers/scheduler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="n">in</span> <span class="s1">&#39;4h&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># do stuff</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Scheduling the Jobs for Specific Dates/Times</strong><br/>
  You can also schedule a job for a specific date and time. To do this we use the at method. For example, the following code would run at 12:01am on December 1st, 2017:
</p>




<figure class='code'><figcaption><span>config/initializers/scheduler.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="n">at</span> <span class="s1">&#39;2017/12/01 00:01:00&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># do stuff</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Important Caveats</h3>




<p>
  1. Because rufus-scheduler runs in process, the scheduler will reset if your Rails server gets restarted. This means that the timer for your jobs will get reset, so don&#8217;t count on any monthly or yearly jobs getting called. If you need to persist jobs across server resets, use a job backend. We will show you how to do this in another article.<br/>
  2. Rufus does not work with Active Job.<br/>
  3. Some additional setup is needed for production environments (see below).
</p>




<h3>Production Setup</h3>




<p>
  Production servers require a bit of additional setup. On most production web servers, idle Ruby processes are killed. In order for rufus to work, you&#8217;ll need to stop this from happening. For Passenger/Nginx you can copy the following code below to your <code>nginx.conf</code> config file for your website after the line that says <code>passenger_enabled on;</code>.
</p>




<figure class='code'><figcaption><span>nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">passenger_spawn_method</span> <span class="n">direct</span><span class="p">;</span>
</span><span class='line'><span class="n">passenger_min_instances</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">passenger_pool_idle_time</span> <span class="mi">0</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  rufus-scheduler is a simple, easy to use scheduler that provides great functionality. It can be used for stuff like sending emails, cleaning up temp files, and much more.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Startups Mark Zuckerberg Created Before Facebook]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/01/4-startups-mark-zuckerberg-created-before-facebook/"/>
    <updated>2016-03-01T14:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/01/4-startups-mark-zuckerberg-created-before-facebook</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/facebook.jpg" width="500" alt="4 Startups Mark Zuckerberg Created Before Facebook" />
</p>




<p>
  <strong>1. ZuckNet</strong><br/>
  Mark’s father – Edward Zuckerberg was a dental practitioner, who ran his clinic from the first floor of their home. This made communication between the family members a hassle, because everyone was always running up and down the stairs. To combat with this problem, 11 year old Zuckerberg came up with the idea of an intranet that allowed anyone to login from any computer in the house and send a message. This served as an instant chat system, that was exclusive just to the Zuckerberg family. Randi Zukerberg, Mark’s elder sister, later told People.com how his this was &#8220;the first example of when he started building things-and he never stopped.&#8221;
</p>




<p>
  Another interesting fact about ZuckNet is that it was quite similar to the very popular AOL instant that into existence, later the same year. To quote Randi again, Mark was &#8216;10 levels ahead&#8217; even at 11.
</p>




<p>
  <strong>2. Synapse Media Player</strong><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/synapse.jpg" width="500" alt="4 Startups Mark Zuckerberg Created Before Facebook" />
</p>




<p>
  In high school, Zuckerberg wrote a computer program that used machine learning to determine a user&#8217;s music listening habits and recommended more music based on the genre, artist, taste, which was pretty much like what Last.fm does today. This app was built in 2000, and was featured by SlashDot and PC magazine back then with an amazing review + a rating of 3 on 5.
</p>




<p>
  Both Microsoft and AOL approached Zuckerberg for buying Synapse + a job offer, but he turned them down and posted the app online for free. He also turned down a full-time employment opportunity at the two corporate giants and went on to enroll at Harvard.
</p>




<p>
  An excerpt from the review: &#8220;This is by far the most innovative media player I have see to date the only function I find it lacking is a more advanced tag editor and the ability to group by Album.&#8221;
</p>




<p>
  <strong>3. CourseMatch</strong><br/>
  By the time Zuckerberg started classes at Harvard, he was already known as the, &#8216;Programming prodigy&#8217;. As an early project in his sophomore year, he started CourseMatch, which helped the students at Harvard in picking the courses they want, at the start of every semester. Through CourseMatch, you could see the number of students enrolled in a particular course and a list of all the people who signed up for the same course, allowing you to find out all the courses your class-mates were taking, before making a choice.
</p>




<p>
  <strong>4. FaceMash</strong><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/facemash.jpg" width="500" alt="4 Startups Mark Zuckerberg Created Before Facebook" />
</p>




<p>
  FaceMash is by far the most talked about things that Zuckerberg created as it is said to have initiated the beginning of Facebook. FaceMash presented the user with two pictures of either male or female students at Harvard and asked them to choose the better looking one.
</p>




<p>
  Arie Hasit, Zuckerberg&#8217;s room-mate at Harvard explained that he had built the Website &#8216;just for fun&#8217;.
</p>




<p>
  The Website soon went viral after its launch over the weekend. The traffic was so overwhelming that it lead to the shutting down of one of the Harvard’s network switches making it impossible for a group of students to access the internet.
</p>




<p>
  The site was taken down by Harvard management four hours later, after multiple complaints from students stating that their pictures were used in FaceMash without prior permission.
</p>




<p>
  FaceMash also landed Zuckerberg into trouble.He was brought before the administrative board and was charged with  violation of internet privacy rules and reach of computer security. He was made to publicly apologize, while the student paper wrote articles about how &#8216;inappropriate the whole concept of FaceMash was&#8217;.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[52 Simple Things to Be Your Best Every Day]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/25/52-simple-things-to-be-your-best-every-day/"/>
    <updated>2016-02-25T14:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/25/52-simple-things-to-be-your-best-every-day</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/52_simple _things.png" width="500" alt="52 Simple Things to Be Your Best Every Day" />
</p>




<p>
  Millions of people go to work every day, but they don&#8217;t bring the best parts of themselves to the job&#8211;often because they don&#8217;t know how. They may be stuck in a rut, never quite able to feel they&#8217;re doing truly excellent work.
</p>




<p>
  If you like what you do and you want to take it to the next level, concentrate on these 52 simple things.
</p>




<p>
  <strong>1. Make people feel special:</strong> encourage and empower people at every chance.
</p>




<p>
  <strong>2. Find work you love and put your heart and soul into it:</strong> choose a job you love and you will never have to work another day in your life.
</p>




<p>
  <strong>3. Focus on the task at hand:</strong> do the best you can where you are with what you have.
</p>




<p>
  <strong>4. Treat every task as important:</strong> every job is a self-portrait of the person who does it.
</p>




<p>
  <strong>5. Always do the right thing, even when it&#8217;s hard:</strong> don&#8217;t let what you cannot do interfere with what you can.
</p>




<p>
  <strong>6. Delegate whenever you can:</strong> you get the best out of people when you believe in their talent.
</p>




<p>
  <strong>7. Take initiative:</strong> even if you&#8217;re already very good at your job, do whatever you can to push your limits.
</p>




<p>
  <strong>8. Be part of the solution:</strong> don&#8217;t be known as someone who is always complaining about something.
</p>




<p>
  <strong>9. Tell the truth:</strong> let people know they can count on you to be honest even when it creates difficulties.
</p>




<p>
  <strong>10. Help as many people as you can along the way:</strong> become someone people seek out for assistance.
</p>




<p>
  <strong>11. Avoid gossip always:</strong> it should go without saying, but turn a deaf ear to gossip and rumors.
</p>




<p>
  <strong>12. Maintain a positive attitude:</strong> a positive attitude is always contagious.
</p>




<p>
  <strong>13. Double your income by tripling your knowledge:</strong> don&#8217;t let your knowledge and skills become outdated.
</p>




<p>
  <strong>14. Mind your emotions:</strong> when you&#8217;re angry, count to 10; before you speak, count to 100.
</p>




<p>
  <strong>15. Make small daily improvements for stunning results:</strong> most of the time, success consists of a series of little daily efforts.
</p>




<p>
  <strong>16. Sharpen your skills and focus on mastering your talents:</strong> avoid boredom&#8211;and learn a new skill to keep you on top of your game.
</p>




<p>
  <strong>17. Be masterful at what you do despite the obstacles:</strong> no person fails who does their best.
</p>




<p>
  <strong>18. Don&#8217;t feed your fears:</strong> have faith that you will make it through.
</p>




<p>
  <strong>19. Always be prepared:</strong> success occurs when opportunity meets preparation.
</p>




<p>
  <strong>20. Ask for help when you need it:</strong> there is no such thing as a self-made person; you will reach your goals only with the help of others.
</p>




<p>
  <strong>21. Set goals and get results:</strong> it&#8217;s important to know where you are going, how you will get there, and what the outcome will be.
</p>




<p>
  <strong>22. Be all that you can be:</strong> don&#8217;t settle for less than your highest potential.
</p>




<p>
  <strong>23. Don&#8217;t worry about getting credit for getting things done:</strong> you can accomplish almost anything if you don&#8217;t worry about who gets the credit.
</p>




<p>
  <strong>24. Preserve your integrity:</strong> make daily choices that are consistent with your values.
</p>




<p>
  <strong>25. Be a good role model:</strong> live by your values and walk your talk.
</p>




<p>
  <strong>26. Don&#8217;t accept &#8220;good enough&#8221;:</strong> do everything with excellence.
</p>




<p>
  <strong>27. Persevere with persistence:</strong> success is largely a matter of hanging on long after others have let go.
</p>




<p>
  <strong>28. Consider leadership something that exists wherever you are:</strong> make the most of yourself in every situation.
</p>




<p>
  <strong>29. Say please and thank you:</strong> it really does matter.
</p>




<p>
  <strong>30. Show respect:</strong> the more you give, the more you receive.
</p>




<p>
  <strong>31. Accept responsibility:</strong> take full responsibility with full confidence to get the job done well.
</p>




<p>
  <strong>32. Be determined to be your best:</strong> the difference between the impossible and the possible lies in your determination.
</p>




<p>
  <strong>33. Remember you are what you think:</strong> it is important to accentuate the positive and eliminate the negative.
</p>




<p>
  <strong>34. Erase your limitations:</strong> when you can conquer your fears, it&#8217;s like lifting a hundred pounds of cement off your shoulders.
</p>




<p>
  <strong>35. Treat failure as a step toward success:</strong> failure is never fatal, but not trying is.
</p>




<p>
  <strong>36. Be trustworthy:</strong> make promises and keep your word.
</p>




<p>
  <strong>37. Become an expert:</strong> make the most of your knowledge.
</p>




<p>
  <strong>38. Respect people&#8217;s time:</strong> everyone is busy. when you have someone&#8217;s attention, be quick and succinct.
</p>




<p>
  <strong>39. Be an active listener:</strong> make sure you listen at least as much as you speak.
</p>




<p>
  <strong>40. Honor your commitments:</strong> when you make a promise, keep it.
</p>




<p>
  <strong>41. Be a great team player:</strong> maximize your contribution.
</p>




<p>
  <strong>42. Let go of restrictions:</strong> don&#8217;t be limited by the scope of your thinking. Think big and succeed big.
</p>




<p>
  <strong>43. Deliver results:</strong> when you are given a directive, get it done well and on time.
</p>




<p>
  <strong>44. Be transparent:</strong> the more transparent you are with information, the more people will understand why you do what you do.
</p>




<p>
  <strong>45. Be kind:</strong> be unfailingly kind, polite, and gracious with everyone you meet&#8211;no matter what his or her role, and no matter how you&#8217;re feeling.
</p>




<p>
  <strong>46. Manage your stress:</strong> take every action to minimize stress at work, because you don&#8217;t want it to get the best of you.
</p>




<p>
  <strong>47. Be dependable:</strong> be consistent in yourself and reliable in your performance.
</p>




<p>
  <strong>48. Communicate with heart:</strong> sincerity helps you avoid many blunders and misunderstandings.
</p>




<p>
  <strong>49. Work with purpose:</strong> bring meaning to everything you do.
</p>




<p>
  <strong>50. Be true to yourself:</strong> everything you do should represent who you are.
</p>




<p>
  <strong>51. Make every moment count:</strong> we do not count years until there is nothing else to count.
</p>




<p>
  <strong>52. Lead from within:</strong> everything you need for a successful life is within you now.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sessions Expiring]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/23/sessions-expiring/"/>
    <updated>2016-02-23T14:54:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/23/sessions-expiring</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Sessions Expiring" />
</p>




<p>
  To improve user security, we may wish to expire the user&#8217;s session after they are inactive for a given amount of time. In order to do this, we simply set the <code>expire_after</code> parameter when setting up our session store. For example:
</p>




<figure class='code'><figcaption><span>config/initializers/session_store.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">session_store</span> <span class="ss">:cookie_store</span><span class="p">,</span> <span class="ss">key</span><span class="p">:</span> <span class="s1">&#39;_example_session&#39;</span><span class="p">,</span> <span class="n">expire_after</span><span class="p">:</span> <span class="mi">15</span><span class="o">.</span><span class="n">minutes</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The line above would expire the session after 15 minutes of inactivity. This means that the user&#8217;s session variables would get wiped once time reaches 15 minutes since the user last accessed the Rails application. If the user refreshes the page, the timer gets refreshed.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming with Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/23/dynamic-programming-with-ruby/"/>
    <updated>2016-02-23T10:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/23/dynamic-programming-with-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Dynamic Programming with Ruby" />
</p>




<p>
  I had a task to analyse the value of a cookie set by a tool on the subdomain. The value of the cookie set looked something like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;18337|20120404|True#Q0A|18342|21-30|20120404|18344#Q1|18349|NO PARTNER|20120404|18351#Q2|18352|EMPLOYED|20120404|18353#Q4|18432|STRUGGLING|18539|WANT|20120404|18541#Q3|18358|EMPLOYED|20120404|18359#&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  My task was to try to decipher the values of set inside the cookie and how they changed depending on the progress through the application that set the values. I was told the answers to questions sat next to the ID of the question. For example, the answer to the &#8220;age&#8221; question (21-30) was related to the question 18342 and would always appear as |18342|21-30|. I started out with some tests and ended up with a method like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Answers</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:employment_status</span><span class="p">,</span> <span class="ss">:has_partner</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">cookie_contents</span><span class="p">)</span>
</span><span class='line'>    <span class="n">items</span> <span class="o">=</span> <span class="n">cookie_contents</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">items</span><span class="o">.</span><span class="n">each_index</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|</span>
</span><span class='line'>       <span class="n">current</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="n">current</span> <span class="o">==</span> <span class="s2">&quot;18342&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="vi">@age</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>       <span class="k">elsif</span> <span class="p">(</span><span class="n">current</span> <span class="o">==</span> <span class="s2">&quot;18352&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="vi">@employment_status</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>       <span class="k">elsif</span> <span class="p">(</span><span class="n">current</span> <span class="o">==</span> <span class="s2">&quot;18349&quot;</span><span class="p">)</span>
</span><span class='line'>         <span class="vi">@current_partner</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Of course, I wanted to avoid the growing if-else statement so found a way that I could do it dynamically and focus just on the mapping from an ID to an attribute. The resulting code looked like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Answers</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:age</span><span class="p">,</span> <span class="ss">:employment_status</span><span class="p">,</span> <span class="ss">:has_partner</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Mappings</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;18342&quot;</span> <span class="o">=&gt;</span> <span class="ss">:age</span><span class="o">=</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;18352&quot;</span> <span class="o">=&gt;</span> <span class="ss">:employment_status</span><span class="o">=</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;18349&quot;</span> <span class="o">=&gt;</span> <span class="ss">:has_partner</span><span class="o">=</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">cookie_contents</span><span class="p">)</span>
</span><span class='line'>    <span class="n">items</span> <span class="o">=</span> <span class="n">cookie_contents</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">items</span><span class="o">.</span><span class="n">each_index</span> <span class="k">do</span> <span class="o">|</span> <span class="n">i</span> <span class="o">|</span>
</span><span class='line'>       <span class="n">current</span> <span class="o">=</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>       <span class="k">if</span> <span class="p">(</span><span class="no">Mappings</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">current</span><span class="p">))</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="no">Mappings</span><span class="o">[</span><span class="n">current</span><span class="o">]</span><span class="p">,</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>       <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  By the end of the analysis, I discovered that multiple IDs mapped to the same properties and all I had to do was add another entry into the map defining which ID mapped to what property on the object.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Flash Messages Styles]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/10/rails-flash-messages-styles/"/>
    <updated>2016-02-10T10:57:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/10/rails-flash-messages-styles</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Rails Flash Messages Styles" />
</p>




<p>
  If you&#8217;re using Ruby on Rails with Twitter Bootstrap or other css framworks, then you may want to display flash messages with the alert styles. Here is a quick and easy way of doing so.
</p>




<p>
  You just need to quickly extend <code>application_helper.rb</code> with the following:
</p>




<figure class='code'><figcaption><span>application_helper.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">bootstrap_class_for</span><span class="p">(</span><span class="n">flash_type</span><span class="p">)</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">flash_type</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;success&quot;</span>
</span><span class='line'>        <span class="s2">&quot;alert-success&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;error&quot;</span>
</span><span class='line'>        <span class="s2">&quot;alert-danger&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;alert&quot;</span>
</span><span class='line'>        <span class="s2">&quot;alert-warning&quot;</span>
</span><span class='line'>      <span class="k">when</span> <span class="s2">&quot;notice&quot;</span>
</span><span class='line'>        <span class="s2">&quot;alert-info&quot;</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">flash_type</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now when you call a flash message, you can use the following in your view:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% flash.each </span><span class="k">do</span> <span class="o">|</span><span class="n">type</span><span class="p">,</span> <span class="n">message</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=&quot;alert &lt;%= bootstrap_class_for(type) %&gt;</span> <span class="n">alert</span><span class="o">-</span><span class="n">dismissible</span><span class="s2">&quot; role=&quot;</span><span class="n">alert</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;button type=&quot;</span><span class="n">button</span><span class="s2">&quot; class=&quot;</span><span class="n">close</span><span class="s2">&quot; data-dismiss=&quot;</span><span class="n">alert</span><span class="s2">&quot; aria-label=&quot;</span><span class="no">Close</span><span class="s2">&quot;&gt;&lt;span aria-hidden=&quot;</span><span class="kp">true</span><span class="s2">&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;</span>
</span><span class='line'><span class="s2">    &lt;%= message %&gt;</span>
</span><span class='line'><span class="s2">  &lt;/div&gt;</span>
</span><span class='line'><span class="s2">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And just use:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">flash</span><span class="o">[</span><span class="ss">:success</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Credit card type saved successfully!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As success message:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">flash</span><span class="o">[</span><span class="ss">:alert</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Alerting you to the monkey on your car!&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Do I Do This... Why Do I Blog? Why Do I Email Every Week?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/09/why-do-i-do-this-dot-dot-dot-why-do-i-blog-why-do-i-email-every-week/"/>
    <updated>2016-02-09T14:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/09/why-do-i-do-this-dot-dot-dot-why-do-i-blog-why-do-i-email-every-week</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/keep_doing_this.png" width="600" alt="Why Do I Do This... Why Do I Blog? Why Do I Email Every Week?" />
</p>




<p>
  With all the hate, all the times I’ve been called a spammer, scammer, deceptive, and just about every other negative thing you can imagine, it would be easy for me to quit. So what keeps me going?
</p>




<p>
  It’s true. I get a lot of very negative feedback on the things I do.
</p>




<p>
  It hurts. It sucks. It makes me want to quit. But I keep going anyways. Because every now and then, I get an email from guys in USA&#8230; an email that gives me fuel for the fire that I’ve started&#8230; an email that makes me believe that what I am doing is important – not for me, not because I have anything special or unique, but because my mundane and ordinary problems and solutions are the same mundane and ordinary problems that other people need to solve. And sometimes, the impact of my solutions are far beyond anything that I ever expected.
</p>




<p>
  <strong>That One Moment Of Impact</strong><br/>
  So why do I keep going? It’s that one positive note&#8230; that tweet from some random person&#8230; that person who takes the time to reply to an email and let me know that I’ve made an impact&#8230; this is why I do what I do.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Will They Say About You When You’re Gone?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/09/what-will-they-say-about-you-when-youre-gone/"/>
    <updated>2016-02-09T10:03:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/09/what-will-they-say-about-you-when-youre-gone</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="What Will They Say About You When You’re Gone?" />
</p>




<p>
  If you’ve ever written a line of Ruby, you’ve been impacted by the work of Jim Weirich: developer, teacher, mentor, speaker. By all accounts, he was a great person. Was… Sadly, Jim died recently.
</p>




<p>
  I didn’t know Jim, personally. In fact I only recently met him in person for the first time at Reddot ruby conf 2014 in Singapor. I had the pleasure of meeting him very briefly, introducing myself. It was great to finally say &#8220;hi&#8221; to him, though. I learned a lot from his talks and I still use his ideas of &#8220;protocols&#8221; instead of &#8220;interfaces&#8221; in dynamic languages like Ruby and JavaScript. But I’m not going to go in to some lengthy soliloquy about Jim’s life and impact on me.
</p>




<p>
  What really struck me about Jim’s passing was not the impact he had on me, personally, but the impact that he had on a very large number of developers around the world. For a few days after his death, I saw a countless number of tweets and retweets about how Jim had touched people’s lives. I saw stories of how he had changed people’s perspectives on code, on mentoring, and all other aspects of software development. One tweet in particular stuck out, talking about how Jim’s knowledge and wisdom had made this person realize their own inadequacies and how Jim was the only person they had ever met who had been gracious enough to apologize for that.
</p>




<p>
  All of these tweets, the thousands of comments posted on Jim’s last commit in Github, that software development companies around the world paid tribute to him via their public websites – the stories, the lives touched – all of this has me wondering: what will they say of me, when I’m gone? And what will they say about you? Will you have made an impact on the lives of other developers? Will you have shared your knowledge, sought opportunities to teach, entertain and enrich the lives of others?
</p>




<p>
  What impact have you had on the lives of others? What will they say about you, when you’re gone?
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Should Write Bad Code More Often]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/04/i-should-write-bad-code-more-often/"/>
    <updated>2016-02-04T16:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/04/i-should-write-bad-code-more-often</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/code_with_me.jpg" width="500" alt="I Should Write Bad Code More Often" />
</p>




<p>
  I’ve spent most of my career writing bad code – code that is ugly, hard to read, hard to understand, darn near impossible to update and fix problem. It’s bad code, not because it didn’t satisfy the original needs, but that it did so in a way that was not maintainable.
</p>




<p>
  Most people (myself included) look at the code they just wrote and think about how great it is; how it’s so easy to read and understand, and how they will be able to use this code to do so many things. The thing that we forget, is that we are always looking at the code we just wrote through the eyes of context and short term memory. Of course I understand how that function works – I just wrote it. But in a few months, weeks, days… sometimes hours? Well…
</p>




<p>
  For most of my career, though, I’ve had this lofty ideal of writing great code all the time. Worse yet, I’ve had this delusion that my code is somehow better than the code that I was reading from other people. But as I continue to grow and learn, in invariably look back at my old code and think about how bad it is. I’ve come to realize – albeit slowly, over many years – that this is ok for a couple of reasons.
</p>




<p>
  <strong>You’re Learning</strong><br/>
  Most of the bad code that I write is because I’m learning – learning a new language, a new framework, a new tool, a new API, a new … something. When we’re learning, we don’t know the answers yet. That’s why it’s learning – to find the answers.
</p>




<p>
  To find the answers, though, we have to solve the problem at least once – and there’s a good chance that the code we write will be bad, the first time we solve it. We can’t be concerned with good abstraction, clean code, elegance, simplicity or maintainability when we’re in learning mode. We have to focus on succinct, to the point, solve the immediate problem styles of coding with little to no regard for 10 minutes from now, let alone 10 days from now. This is the nature of learning.
</p>




<p>
  <strong>You’re Ready To Learn</strong><br/>
  If you know you’re writing bad code, then you’re already one step ahead of the game. Knowing that the code you’re writing is a sign that you know you can improve. It’s a sign that you want to improve. It’s also a sign that you are ready (or almost ready) to take the next steps to improve.
</p>




<p>
  Recognizing your own code as bad code is a sign of learning. That code you wrote 3 months ago, which you are now embarrassed to look at? That’s a good sign. It means you’ve learned since then. The code you’re writing for your current project, which keeps giving you bad feelings and making you nervous? At least that is recognition of the need to learn.
</p>




<p>
  Recognizing your own code as bad is one of the best things you can do for yourself, you projects and your career because it means you want to learn and improve.
</p>




<p>
  <strong>The Learning Experience</strong><br/>
  The real problem with bad code isn’t the code itself. The real problem stems from confusing the learning experience with solving problems for production systems. Far too often, we allow code that we know is bad to become production code. Sometimes this can’t be helped. Sometimes it isn’t a bad thing, either. But most of the time, the bad code that we wrote while learning shouldn’t be put in production.
</p>




<p>
  Learning should be done in throw away projects, samples and demos. Rather than trying to learn how to use that library in your production code, build a demo app that mimics your production needs (to a minimum). Instead of deciding to use a new framework for the first time when starting a new project, take some time to play with it first. Dig in a little deeper than you think you need to, and try to understand how it works and why.
</p>




<p>
  Separating the learning process from the production code process is important. Taking the time to learn how to solve a problem will produce better code and better understanding of the problem when you get back to your production system. You’ll be better equipped to deal with edge cases, additional requirements and other issues that don’t show up the first time you solve sometime.
</p>




<p>
  <strong>Write Bad Code</strong><br/>
  You may not always have control over timelines. You might not have time to write a sample project for every idea., and sometimes you don’t have a choice but to release bad code. This is the reality in which we live. But I encourage you to to try, whenever possible, to write bad code knowing that you will be throwing it away once you start working on the production-ready solution.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5D Co-working Lab]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/04/5d-co-working-lab/"/>
    <updated>2016-02-04T15:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/04/5d-co-working-lab</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/5d_lab.png" width="700" alt="5D Co-working Lab" />
</p>




<p>
  <a href="http://www.development-innovations.org/" target="_blank">5D Co-working Lab</a> @ Development Innovations is a co-working space focused on connecting civil society organizations with local service providers, freelancers, and consultants. The Lab also hosts the Development Innovations advisory service, which provides resources and training for organizations that want assistance to develop their technology-enabled ideas or projects.
</p>




<p>
  <img src="http://geekhmer.github.io/images/5d_lab.png_1.jpg" width="700" alt="5D Co-working Lab" />
</p>




<p>
  Address: #296, St. 271, Sangkat Toul Tompong 2, Khan Chamkarmorn, Phnom Penh, Cambodia<br/>
  Hours: Mon-Fri (8:00am - 5:30pm)<br/>
  Parking: Street and Parking Lot<br/>
  Phone: +855 23 266 271
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emerald HUB]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/04/emerald-hub/"/>
    <updated>2016-02-04T14:25:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/04/emerald-hub</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/emerald_hub.jpg" width="500" alt="Emerald HUB" />
</p>




<p>
  <a href="http://emeraldplus.biz/" target="_blank">Emerald HUB</a> is a Cambodia Co-Working space, located in Phnom Penh city. Emerald HUB offers young startup, entrepreneurs, small and growing businesses, service providers and investors the opportunity to work in an innovative, energetic and collaborative work space. Emerald HUB members can work at shared and dedicated “desks”, dedicated offices or private rooms, complimented with high speed Wi-Fi Internet and relevant amenities.
</p>




<p>
  <img src="http://geekhmer.github.io/images/emerald_hub_1.png" width="500" alt="Emerald HUB" />
</p>




<p>
  <img src="http://geekhmer.github.io/images/emerald_hub_2.jpg" width="500" alt="Emerald HUB" />
</p>




<p>
  <img src="http://geekhmer.github.io/images/emerald_hub_3.jpg" width="500" alt="Emerald HUB" />
</p>




<p>
  <img src="http://geekhmer.github.io/images/emerald_hub_4.jpg" width="500" alt="Emerald HUB" />
</p>




<p>
  Address: St. 169, Phnom Penh, Cambodia 12253<br/>
  Hours: Mon-Sun (8:00am - 9:00pm)<br/>
  Parking: Street and Parking Lot<br/>
  Phone: +855 97 492 7777
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Thing Cambodian Startups Need to Learn English]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/04/one-thing-cambodian-startups-need-to-learn-english/"/>
    <updated>2016-02-04T11:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/04/one-thing-cambodian-startups-need-to-learn-english</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/about_us.jpg" width="500" alt="One Thing Cambodian Startups Need to Learn English" />
</p>




<p>
  Being a startup in Cambodia is a particularly existential experience. You have to constantly evaluate what your place is in the society, consider whether or not your idea works, evaluate yourself as a leader, and fight for your own reason to exist. On top of that, you have to look at where you need to improve. I’m always meeting young startups who are asking me &#8220;What should I learn? Where should I go? What problems can I solve?&#8221;
</p>




<blockquote><p>English is really important.</p></blockquote>




<p>
  <h3>
    5 Reasons Why English is Vital to Your Startup
  </h3>
  The key with English for Cambodian startups is access. If you cannot understand, read, and converse with foreigners, you will not get the full benefit of the interaction. Here’s five nuanced examples of why English is so important for startups to win in the next ten years.
</p>




<p>
  <strong>1. English at Events in Cambodia</strong><br/>
   Although there was simultaneous audio translation with headphones, there is just no way that you can catch all the nuances and understand in the translation. Some of my colleagues at the event only understood 70 percent of what translator said because there weren’t enough headphones. Even with headphones, people could only understand so much. translator spoke so fast and with idioms that the professional translators could scarcely catch up to. Now 70 percent, you may think, sounds like they understood a lot. But that has exponential consequences. If you only understand 70 percent, and you go up to talk to the speaker after the event, and you ask him a question he already answered, he might think you weren’t listening. He might be unimpressed. But if you could understand 100 percent, you could take the conversation to the next level. That will impress the speaker, and impressing the speaker will bring enormous benefits in the long run. If you understand only 70 percent, what happened to that 30 percent? In that 30 percent could have been a piece of advice that would have deeply helped your startup.
</p>




<p>
  In Phnom Penh, a large influx of foreign interest and foreigners come to Cambodia. Some are successful entrepreneurs, some are startups, some are just good possible links into global ecosystems. If your English sucks, how are you going to talk to them?
</p>




<p>
  <strong>2. English at Events Outside Cambodia</strong><br/>
  If you’re thinking about going global or getting your name out there, you’re bound to go to an event outside of Cambodia. At that time, if you’re a founder, and you can’t communicate with foreigners, you’ve wasted money on a plane ticket. At a recent event I went to outside of Cambodia, one of the Cambodian founders I was hanging out with couldn’t understand a simple question from a Singaporean investor. I had to help translate the question for him into Khmer and then back into English. What would happen if I wasn’t there? These situations are lost opportunities. Rubbing elbows with other people in English is a skill you cannot underestimate. It could lead you down the path to better networks, and possibly even investment. Bad english makes you look like an idiot. Don’t look like an idiot.
</p>




<p>
  <strong>3. Getting Knowledge Online</strong><br/>
  The plethora of information about technology and startups online is vast. For the techies, StackOverflow is the place to be. For people looking to understand the personal and intimate mechanics of certain tech companies and startups, Quora is the place to be. I haven’t even begun to mention the pulse of news that you can find on TechCrunch, PandoDaily, Tech In Asia, e27, Cnet, GigaOm, and more. All the best up-to-date information out there is in English. Also, all the best advice on technology and startups is laid out across personal and company blogs across the internet, in English. If you don’t know English, you might be building a project on top of technology that is outdated, or employing techniques and trends that just don’t work anymore. If you want to stay ahead of the game, English is the way.
</p>




<p>
  <strong>4. Interacting with Foreigners Online</strong><br/>
  And it’s not just knowledge and news that’s online. People are also online. If you can’t write an email that sounds like you are a professional, passionate, and eloquent person, why would anyone reply to you? This is also true on Twitter, Facebook, and any other platform that involves interacting with other people on a professional and casual level.
</p>




<p>
  <strong>5. Pitching Your Product</strong><br/>
  Probably the most important and last point in this mix is pitching your product. It is not easy to set up your startup or product in one minute. Brevity is a skill of great communicators. Tell me what your product is, in English, in 30 seconds. Now elaborate on it for the next hour, while I ask you penetrating questions about how the business works. Can you do it? For your sake, I hope so.
</p>




<p>
  At the end of the day, if you’re playing to win – and you should be if you’re doing a startup – you should know English. It doesn’t matter if you are competing on a global or domestic level. Either way, you have to be top class. And top class people know English. Besides the benefits above, being bilingual gives you mental dexterity and diversity. People who know multiple languages are generally more open to new ideas and have more reflection on their own culture. These are essential advantages for a young startup in the battlefield that is Cambodia.
</p>




<p>
  It is true that all the above applies for startups across the Asian startup ecosystem. But it is presently a huge obstacle that Cambodian startups need to pay special attention to, since many view Cambodia as a blackbox, a startup world that is hard to understand and wrap one’s head around. Especially if Cambodia wants to be known outside of Cambodia.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Model View Controller]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/01/rails-model-view-controller/"/>
    <updated>2016-02-01T15:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/01/rails-model-view-controller</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rails_mvc.png" width="500" alt="Rails Model View Controller" />
</p>




<p>
  The <strong>browser</strong> makes a request, such as http://geekhmer.com/video/show/15
</p>




<p>
  The <strong>web server</strong> (mongrel, WEBrick, etc.) receives the request. It uses routes to find out which controller to use: the default route pattern is <code>/controller/action/id</code> as defined in <code>config/routes.rb</code>. In our case, it’s the &#8220;video&#8221; controller, method &#8220;show&#8221;, id &#8220;15&#8221;. The web server then uses the dispatcher to create a new controller, call the action and pass the parameters.
</p>




<p>
  <strong>Controllers</strong> do the work of parsing user requests, data submissions, cookies, sessions and the &#8220;browser stuff&#8221;. They’re the pointy-haired manager that orders employees around. The best controller is Dilbert-esque: It gives orders without knowing (or caring) how it gets done. In our case, the show method in the video controller knows it needs to lookup a video. It asks the model to get video 15, and will eventually display it to the user.
</p>


<p></p>

<p>
  <strong>Models</strong> are Ruby classes. They talk to the database, store and validate data, perform the business logic and otherwise do the heavy lifting. They’re the chubby guy in the back room crunching the numbers. In this case, the model retrieves video 15 from the database.
</p>




<p>
  <strong>Views</strong> are what the user sees: HTML, CSS, XML, Javascript, JSON. They’re the sales rep putting up flyers and collecting surveys, at the manager’s direction. Views are merely puppets reading what the controller gives them. They don’t know what happens in the back room. In our example, the controller gives video 15 to the &#8220;show&#8221; view. The show view generates the HTML: divs, tables, text, descriptions, footers, etc.
</p>




<p>
  The controller returns the response body (HTML, XML, etc.) & metadata (caching headers, redirects) to the server. The server combines the raw data into a proper HTTP response and sends it to the user.
</p>




<p>
  It’s more fun to imagine a story with &#8220;fat model, skinny controller&#8221; instead of a sterile &#8220;3-tiered architecture&#8221;. Models do the grunt work, views are the happy face, and controllers are the masterminds behind it all.
</p>




<p>
  Many MVC discussions ignore the role of the web server. However, it’s important to mention how the controller magically gets created and passed user information. The web server is the invisible gateway, shuttling data back and forth: users never interact with the controller directly.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make Project Success on GitHub?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/01/29/how-to-make-project-success-on-github/"/>
    <updated>2016-01-29T16:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/01/29/how-to-make-project-success-on-github</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/how_to_make_project_success_on_github.png" width="400" alt="How to Make Project Success on GitHub?" />
</p>




<p>
  Community-driven software development is becoming the new path to brand and project success. You would be advised to pay attention to this surging trend: With more than 27 million projects currently on <a href="https://github.com/" blank="_target">GitHub</a>, the ever-increasing popularity of community-driven development is evident.
</p>




<p>
  I&#8217;ve come up with five concrete ways you too make your project successful on GitHub. It&#8217;s all about engaging the community.
</p>




<p>
  <strong>1. Prioritize Your Community</strong><br/>
  Open source is more than a license and software development model; it&#8217;s also largely about the people. Encourage both users and maintainers to collaborate to promote a surge in new ideas. You&#8217;ll find that most prominent projects incorporate a community of contributors with a mailing list, GitHub project.
</p>




<p>
  <strong>2. Welcome New Contributors</strong><br/>
  Contributors often feel intimidated and self-conscious when starting a new project. Help them break out of their shell by offering a set of contribution guidelines and using an issue tracker to highlight troubleshooting that can be easily handled by new contributors. Laying out the proper groundwork is vital to the success of your project.
</p>




<p>
  <strong>3. Appreciate Contributors&#8217; Work</strong><br/>
  All those who contribute are co-creators and have ownership over their work on each project. we recognize each contributor&#8217;s input in a variety of ways. Easy things to do that go a long way are shout-outs, a kind note, or sending some swag, like a T-shirt.
</p>




<p>
  <strong>4. Use Art to Visualize Your Ideas</strong><br/>
  Art has a powerful capability to communicate ideas, just like software. Take advantage of graphic design to brand your projects. Consider creating a friendly mascot (like the GitHub Octocat) to help distinguish your project for your community. In addition, use art to illustrate and teach complex ideas and instructions. By incorporating art into your project, you may also encourage artistic contributions from your new contributors.
</p>




<p>
  <strong>5. Implement Documentation to Prevent Problems</strong><br/>
  Fastidious recording of your project process can avert potential issues and confusion. Good documentation includes a FAQ section, a set of instructions for common patterns, and a set of examples. You can even make your documentation open source by asking for contributions from those working on your projects.
</p>




<p>
  So far so good, Accelerate engaging a community of volunteer software developers by making them feel welcome, giving them clear tasks, and establishing tangible ways for them to be completed. Most importantly, thank contributors when they help you. Your project will flourish because of it. See ya!!!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make Session Data Available to Models in Ruby on Rails?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/01/27/how-to-make-session-data-available-to-models-in-ruby-on-rails/"/>
    <updated>2016-01-27T11:11:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/01/27/how-to-make-session-data-available-to-models-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="How to Make Session Data Available to Models in Ruby on Rails?" />
</p>




<p>
  Ruby on Rails is implemented as the Model View Controller (MVC) pattern. This pattern separates the context of the Web Application (in the Controller and the View) from the core Model of the application. The Model contains the Domain objects which encapsulate business logic, data retrieval, etc. The View displays information to the user and allows them to provide input to the application. The Controller handles the interactions between the View and the Model.
</p>




<p>
  This separation is a very good design principle that generally helps prevent <a href="https://en.wikipedia.org/wiki/Spaghetti_code" target="_blank">spaghetti code</a>. Sometimes though the separation might break down.
</p>




<p>
  Rails provides the Active Record Callbacks which allows you to write code that will respond to the lifecycle events of the Model objects. For example you could log information every time a specific kind of Model object is saved. For example you could record some information every time an Account changed using the following:
</p>




<figure class='code'><figcaption><span>account.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_update</span> <span class="ss">:log_audit_change</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">log_audit_change</span>
</span><span class='line'>    <span class="no">Audit</span><span class="o">.</span><span class="n">audit_change</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">new_balance</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You might have noticed a limitation with the previous API though. You didn&#8217;t notice? The only information passed to the model is the Object that is being changed. What if you want more context than this? For example, what if you want to audit not only the values that changed them, but the user who made the change?
</p>




<figure class='code'><figcaption><span>account.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">after_update</span> <span class="ss">:log_audit_change</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">log_audit_change</span>
</span><span class='line'>    <span class="no">Audit</span><span class="o">.</span><span class="n">audit_change</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">new_balance</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  How do you get the <code>current_user</code> value? Well, you have to plan ahead a little bit. The User in this application is stored in the HTTP Session when the user is authenticated. The session isn&#8217;t directly available to the Model level so you have to figure out a way around this. One way to accomplish this is by using a named <a href="http://ruby-doc.org/core-2.3.0/Thread.html#M000484" target="_blank">Thread local variable</a>. Each HTTP request is served by its own thread. That means that a variable stored as thread local will be available for the entire processing of a request.
</p>




<p>
  The UserInfo module encapsulates reading and writing the User object from/to the Thread local. This module can then be mixed in with other objects for easy access.
</p>




<figure class='code'><figcaption><span>user_info.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">UserInfo</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>    <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">current_user</span><span class="o">=</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Thread</span><span class="o">.</span><span class="n">current</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  A <code>before_filter</code> set in the ApplicationController will be called before any action is called in any controller. You can take advantage of this to copy a value out of the HTTP session and set it in the Thread local:
</p>




<figure class='code'><figcaption><span>user_info.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_filter</span> <span class="ss">:set_user</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">authenticate</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="ss">:controller</span> <span class="o">=&gt;</span> <span class="s2">&quot;login&quot;</span>
</span><span class='line'>      <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Sets the current user into a named Thread location so that it can be accessed by models and observers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">set_user</span>
</span><span class='line'>    <span class="no">UserInfo</span><span class="o">.</span><span class="n">current_user</span> <span class="o">=</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  At any point in a Model class that you need to have access to those values you can just mixin the helper module and then use its methods to access the data. In this final example we mixin the UserInfo module to our model and it will now have access to the <code>current_user</code> method:
</p>




<figure class='code'><figcaption><span>account.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UserInfo</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after_update</span> <span class="ss">:log_audit_change</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">log_audit_change</span>
</span><span class='line'>    <span class="no">Audit</span><span class="o">.</span><span class="n">audit_change</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">new_balance</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You generally shouldn&#8217;t need this kind of trick outside of a model. In most cases the Controller should pass all of the information needed by a Model object to it through its methods. That will allow the Model objects to interact and the Controller to do the orchestration needed. But in a few special cases, this trick might be handy.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
