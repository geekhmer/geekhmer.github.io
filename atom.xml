<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2017-11-07T21:57:34+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Most Popular ReactJs Data Table]]></title>
    <link href="http://geekhmer.github.io/blog/2017/11/07/the-most-popular-reactjs-data-table/"/>
    <updated>2017-11-07T21:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/11/07/the-most-popular-reactjs-data-table</id>
    <content type="html"><![CDATA[<p>
  I&#8217;ve been researching this for many days so I can help you at least find the ones out there. I don&#8217;t have experience with most of these but the one I do have experience with is one I don&#8217;t recommend as it seems unmaintained. Though I did find it well documented and easy to use. My requirements aren&#8217;t particularly complicated for a data-grid component, I basically look at filtering, sorting and row selection. If you need anything more complicated you&#8217;ll have to dig further into the documentations.
</p>




<p>
  <strong>React-Data-Grid</strong><br/>
  Excel-liked grid component built with React, with editors, keyboard navigation, copy & paste, and the like <a href="http://adazzle.github.io/react-data-grid/" target="_blank">http://adazzle.github.io/react-data-grid</a>.
</p>




<p>
  <img src="http://geekhmer.github.io/images/react-data-grid.png" width="600" alt="React-Data-Grid" />
</p>




<p>
  <strong>React-Bootstrap-Table</strong><br/>
  It&#8217;s a ReactJs table for bootstrap, named react-bootstrap-table. It&#8217;s a configurable, functional table component and make you build a Bootstrap Table more efficiency and easy in your ReactJs application like <a href="https://allenfang.github.io/react-bootstrap-table/" target="_blank">https://allenfang.github.io/react-bootstrap-table</a>.
</p>




<p>
  <img src="http://geekhmer.github.io/images/react-bootstrap-table.png" width="600" alt="React-Bootstrap-Table" />
</p>




<p>
  <strong>Griddle</strong><br/>
  It&#8217;s an ultra customizable data-grid component for ReactJs like <a href="http://griddlegriddle.github.io/Griddle/" target="_blank">http://griddlegriddle.github.io/Griddle</a>.
</p>




<p>
  <img src="http://geekhmer.github.io/images/griddle.png" width="600" alt="Griddle" />
</p>




<p>
  <strong>React-Table</strong><br/>
  React-Table is a lightweight, fast and extendable data-grid built for ReactJs like <a href="https://react-table.js.org/" target="_blank">https://react-table.js.org</a>.
</p>




<p>
  <img src="http://geekhmer.github.io/images/react-table.png" width="600" alt="React-Table" />
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create-React-App Vs NextJs]]></title>
    <link href="http://geekhmer.github.io/blog/2017/11/04/create-react-app-vs-nextjs/"/>
    <updated>2017-11-04T22:13:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/11/04/create-react-app-vs-nextjs</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/cra_vs_next.png" width="600" alt="Create-React-App Vs NextJs" />
</p>




<p>
  <a href="https://github.com/zeit/next.js/" target="_blank">NextJs</a> is a new project with a lot to offer.
</p>




<p>
  The comparison between NextJs and Create-React-App is an apt one. What NextJs brings is great defaults. Like Create-React-App, NextJs is opinionated. It makes choices for you about what an ideal React setup should look like.
</p>




<p>
  One of the biggest pain points in starting a new javascript App is the tooling. Webpack, babel, and the like can be a pain to setup, especially with the aggressive release cycle of open source javascript projects. As of this writing you&#8217;re probably already using Webpack syntax that&#8217;s been deprecated.

</p>




<p>
  Here are the biggest differences between Create-React-App and NextJs.
</p>




<p>
  <strong>Create-React-App Is Ejectable, NextJs Is Extensible</strong><br/>
</p>




<p>
  Create-React-App uses babel, webpack, and eslint but &#8220;hides&#8221; this tooling and bundles it together in react-scripts. But Create-React-App doesn&#8217;t lock you in; when you&#8217;re ready to depart from training wheels you can unmask these dependencies and then configure them.
</p>




<p>
  NextJs, on the other hand, provides great defaults with the option to configure tooling if you want to. For example, you can override (or extend) NextJs&#8217;s webpack configuration by adding a webpack.config.js file. Or you can add an express server if you don&#8217;t want to use NextJs&#8217; server.
</p>




<p>
  <strong>NextJs is Out Of The Box</strong>
</p>




<p>
  The biggest point of NextJs is server-side rendering.
</p>




<p>
  People will tell you that Google crawls javascript and that it&#8217;s sufficient to serve up an almost-empty html document with <code>root</code> class along with a massive bundle.js.
</p>




<p>
  It&#8217;s true that Google crawls javascript. But this just isn&#8217;t a good approach for apps that are content-focused and need to expose their content to search. 
</p>




<p>
  <strong>Styling is A Pain With NextJs</strong>
</p>




<p>
  NextJs can be a pain with styling. Out of the box, NextJs uses styled-jsx, which is OK. But what if you want to use SASS or styled-components? You&#8217;re in for a few hours of frustration.
</p>




<p>
  <strong>You Can&#8217;t make API Calls In Components With NextJs</strong>
</p>




<p>
  Initializing a new NextJs project creates two directores ./pages and ./components.
</p>




<p>
  Pages are like container React components. But they have more significance than simply wrapping other components. Page components are literally rendered into pages with a little help from react-router. That is, http://localhost:3000/about points to ./pages/about.js. This approach has strengthes and limitations. One of the limitations is that you can only make a client-side fetch request in top-level page components.
</p>




<p>
  <strong>Create-React-App Vs NextJs: Comparison Table</strong>
</p>




<table>
  <thead>
    <tr>
      <th></th>
      <th>Create React App</th>
      <th>NextJs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dependencies</td>
      <td>One (react-scripts)</td>
      <td>One (next)</td>
    </tr>
    <tr>
      <td>Ejectable</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Extensible</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Isomorphic/Universal</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Zero-configuration</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Service workers</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Hot-reloading</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Code-splitting</td>
      <td>Can be configured</td>
      <td>Out of the box</td>
    </tr>
  </tbody>
</table>




<br/>




<p>
  <strong>Conclusion</strong>
</p>




<p>
  NextJs is a good start if you need SSR first, SEO friendly with lots of public content. But if you build a highly dynamic statically deployed Single Page Application client, CRA (Create React App) is better suited for that.
</p>




<p>
  So for blog, news, with lots of public content and shareability, I&#8217;ll go with NextJs. For dashboard, admin, apps, I&#8217;ll go with CRA (Create React App)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Migrations]]></title>
    <link href="http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-migrations/"/>
    <updated>2017-08-06T09:59:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-migrations</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x Migrations" />
</p>




<p>
  Laravel migrations provide mechanisms for creating and modifying database tables. Migrations are database agnostic, this means you don&#8217;t have to worry about the specific SQL syntax for the database engine that you are creating tables for.
</p>




<p>
  Well, in this articles I will cover the following sections: Requirements for running migrations, Artisan migration command, Migration structure, How to create a table using a migration, Laravel migration rollback, Laravel migration how-tos, Database seeding.
</p>




<h3>Requirements for Running Migrations</h3>




<p>
  1. Create the database for Laravel project<br/>
  2. Set the database connection parameters for Laravel project<br/>
  3. Set the database connection parameters for artisan command line
</p>




<p>
  <strong>1. Create the Database for Laravel Project</strong><br/>
  Open up terminator or what ever MySQL database management tool that you are using and run the command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">CREATE</span> <span class="nx">DATABASE</span> <span class="nx">foodie</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>CREATE DATABASE foodie;</code> creates a database called foodie in MySQL.
</p>




<p>
  <strong>2. Set the Database Connection Parameters for Laravel Project</strong><br/>
  Open up <code>/config/database.php</code> file and modify to the following:
</p>




<figure class='code'><figcaption><span>database.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;mysql&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>  <span class="s1">&#39;driver&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;host&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;DB_HOST&#39;</span><span class="p">,</span> <span class="s1">&#39;127.0.0.1&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;port&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;DB_PORT&#39;</span><span class="p">,</span> <span class="s1">&#39;3306&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;database&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;DB_DATABASE&#39;</span><span class="p">,</span> <span class="s1">&#39;foodie&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;DB_USERNAME&#39;</span><span class="p">,</span> <span class="s1">&#39;root&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;DB_PASSWORD&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;unix_socket&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;DB_SOCKET&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;charset&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf8mb4&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;collation&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf8mb4_unicode_ci&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;prefix&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;strict&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;engine&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>3. Set the Database Connection Parameters for Artisan Command Line</strong><br/>
  One of the challenges that most developers face when working with migrations in Laravel 5.x.x from the artisan command line is the following message:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Access</span> <span class="nx">denied</span> <span class="k">for</span> <span class="nx">user</span> <span class="s1">&#39;homestead&#39;</span><span class="o">@</span><span class="s1">&#39; localhost&#39;</span> <span class="p">(</span><span class="nx">using</span> <span class="nx">password</span><span class="o">:</span> <span class="nx">YES</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You will get the above message even you have set the correct parameters in <code>/config/database.php</code> file, because the artisan command line uses the database connection parameters specified in <code>.env</code> file.
</p>




<p>
  The solutions is go to the project open up <code>/.env</code> file and modify to the following:
</p>




<figure class='code'><figcaption><span>.env </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">APP_NAME</span><span class="o">=</span><span class="nx">Laravel</span>
</span><span class='line'><span class="nx">APP_ENV</span><span class="o">=</span><span class="nx">local</span>
</span><span class='line'><span class="nx">APP_KEY</span><span class="o">=</span><span class="nx">base64</span><span class="o">:</span><span class="nx">n8KivGzDCuNX1SljFb8xxQxBOPquewnAQIBa0H81nR8</span><span class="o">=</span>
</span><span class='line'><span class="nx">APP_DEBUG</span><span class="o">=</span><span class="k">true</span>
</span><span class='line'><span class="nx">APP_LOG_LEVEL</span><span class="o">=</span><span class="nx">debug</span>
</span><span class='line'><span class="nx">APP_URL</span><span class="o">=</span><span class="nx">http</span><span class="o">://</span><span class="nx">localhost</span>
</span><span class='line'>
</span><span class='line'><span class="nx">DB_CONNECTION</span><span class="o">=</span><span class="nx">mysql</span>
</span><span class='line'><span class="nx">DB_HOST</span><span class="o">=</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span>
</span><span class='line'><span class="nx">DB_PORT</span><span class="o">=</span><span class="mi">3306</span>
</span><span class='line'><span class="nx">DB_DATABASE</span><span class="o">=</span><span class="nx">foodie</span>
</span><span class='line'><span class="nx">DB_USERNAME</span><span class="o">=</span><span class="nx">root</span>
</span><span class='line'><span class="nx">DB_PASSWORD</span><span class="o">=</span>
</span><span class='line'>
</span><span class='line'><span class="nx">BROADCAST_DRIVER</span><span class="o">=</span><span class="nx">log</span>
</span><span class='line'><span class="nx">CACHE_DRIVER</span><span class="o">=</span><span class="nb">file</span>
</span><span class='line'><span class="nx">SESSION_DRIVER</span><span class="o">=</span><span class="nb">file</span>
</span><span class='line'><span class="nx">QUEUE_DRIVER</span><span class="o">=</span><span class="nx">sync</span>
</span><span class='line'>
</span><span class='line'><span class="nx">REDIS_HOST</span><span class="o">=</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span>
</span><span class='line'><span class="nx">REDIS_PASSWORD</span><span class="o">=</span><span class="k">null</span>
</span><span class='line'><span class="nx">REDIS_PORT</span><span class="o">=</span><span class="mi">6379</span>
</span><span class='line'>
</span><span class='line'><span class="nx">MAIL_DRIVER</span><span class="o">=</span><span class="nx">smtp</span>
</span><span class='line'><span class="nx">MAIL_HOST</span><span class="o">=</span><span class="nx">smtp</span><span class="o">.</span><span class="nx">mailtrap</span><span class="o">.</span><span class="nx">io</span>
</span><span class='line'><span class="nx">MAIL_PORT</span><span class="o">=</span><span class="mi">2525</span>
</span><span class='line'><span class="nx">MAIL_USERNAME</span><span class="o">=</span><span class="k">null</span>
</span><span class='line'><span class="nx">MAIL_PASSWORD</span><span class="o">=</span><span class="k">null</span>
</span><span class='line'><span class="nx">MAIL_ENCRYPTION</span><span class="o">=</span><span class="k">null</span>
</span><span class='line'>
</span><span class='line'><span class="nx">PUSHER_APP_ID</span><span class="o">=</span>
</span><span class='line'><span class="nx">PUSHER_APP_KEY</span><span class="o">=</span>
</span><span class='line'><span class="nx">PUSHER_APP_SECRET</span><span class="o">=</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The database, username and password must match the ones on your system.
</p>




<h3>Artisan Migration Command</h3>




<p>
  We will create:<br/>
  1. The migration table in our database.<br/>
  2. A migration file that we will use to create a table for hard drinks.
</p>




<p>
  When you create a migration file, Laravel will stores it in <code>/database/migrations</code> folder. You can specify a different path if you would like to but we won’t cover that in this articles. We will work with the default path.
</p>




<p>
  <strong>Create Migration Table</strong><br/>
  Open up the terminator and run the following artisan command to create a migration table:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">migration</span> <span class="nx">create_drinks_table</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>php artisan make:migration</code> executes the make migration method via the artisan command.<br/>
  <code>create_drinks_table</code> specifies the name of the migration file that will be created.
</p>




<p>
  You will get the following results:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Created</span> <span class="nx">Migration</span><span class="o">:</span> <span class="mi">2017</span><span class="nx">_08_08_072434_create_drinks_table</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Migration Structure</h3>




<p>
  You will get the following file with the contents below:
</p>




<figure class='code'><figcaption><span>20170808072434createdrinkstable.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateDrinksTable</span> <span class="k">extends</span> <span class="nx">Migration</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>class CreateDrinksTable extends Migration</code> defines the CreateDrinksTable class that extends Migration class.
  - <code>public function up()</code> defines the function that is executed when the migration is run.<br/>
  - <code>public function down()</code> defines the function that is executed when you run migration rollback.
</p>




<h3>How to Create a Table Using a Migration</h3>




<p>
  Now that we have successfully created a migration file, we will add the table definition fields in the migration modify the contents of <code>/database/migrations/20170808072434createdrinkstable.php file.</code>
</p>




<figure class='code'><figcaption><span>20170808072434createdrinkstable.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CreateDrinksTable</span> <span class="k">extends</span> <span class="nx">Migration</span> <span class="p">{</span>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * Run the migrations.</span>
</span><span class='line'><span class="sd">  *</span>
</span><span class='line'><span class="sd">  * @return void</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;drinks&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="mi">75</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">unique</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">text</span><span class="p">(</span><span class="s1">&#39;comments&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">nullable</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">integer</span><span class="p">(</span><span class="s1">&#39;rating&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">date</span><span class="p">(</span><span class="s1">&#39;brew_date&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamps</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">  * Reverse the migrations.</span>
</span><span class='line'><span class="sd">  *</span>
</span><span class='line'><span class="sd">  * @return void</span>
</span><span class='line'><span class="sd">  */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">drop</span><span class="p">(</span><span class="s1">&#39;drinks&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>Schema::create('drinks', function (Blueprint $table) {...}</code> calls the create function of the Schema class. The create function is responsible for creating the database table.<br/>
  - <code>(Blueprint $table)</code> is a closure function with a $table parameter.<br/>
  - <code>$table</code> parameter is used to define the structure of the database.<br/>
  - <code>$table->increments('id');</code> increments is used to define an auto increment field.<br/>
  - <code>$table->string('name', 75)->unique();</code> string is used to define varchar fields. The second parameter is the length of the field. <code>->unique()</code> is used to mark the column as unique.<br/>
  - <code>$table->text('comments')->nullable();</code> is used to define text fields. <code>->nullable()</code> is used to allow the column to accept null values.<br/>
  - <code>$table->integer('rating');</code> integer is used to define int fields.<br/>
  - <code>$table->date('brew_date');</code> is used to define date fields.<br/>
  - <code>$table->timestamps();</code>  is used to automatically create two time stamp fields namely created_at and updated_at.
</p>




<p>
  Go back to the terminator and run the command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then you will get many tables drinks and users, password_resets which Laravel has migrated those two tables by defaults.
</p>




<h3>Laravel Migration Rollback</h3>




<p>
  One of the advantages of migrations is that it allow you to roll back to the previous state before you run the migrations. In this section, we will roll back the creation of the tables.
</p>




<p>
  Go back to the terminator and run the command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">migrate</span><span class="o">:</span><span class="nx">rollback</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then you will get the following output:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Rolled</span> <span class="nx">back</span><span class="o">:</span> <span class="mi">2017</span><span class="nx">_08_08_000000_create_users_table</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'><span class="nx">Rolled</span> <span class="nx">back</span><span class="o">:</span> <span class="mi">2017</span><span class="nx">_08_08_100000_create_password_resets_table</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'><span class="nx">Rolled</span> <span class="nx">back</span><span class="o">:</span> <span class="mi">2017</span><span class="nx">_08_08_090421_create_drinks_table</span><span class="o">.</span><span class="nx">php</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Laravel Migration How-tos</h3>




<p>
  This section I will show how to perform various Laravel migration tasks.
</p>




<p>
  <strong>Laravel Migration Insert Data</strong><br/>
  This &#8220;how-to&#8221; shows you how to create a migration file that inserts data into the newly created table. We will create an employees table and add 33 seed records using Faker Library.
</p>




<p>
  Open up the terminator and run the command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">migration</span> <span class="nx">employees</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Open up <code>/database/migrations/xxxxxxxxx_employees.php</code> file and add the following codes:
</p>




<figure class='code'><figcaption><span>xxxxxxxxx_employees.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employees</span> <span class="k">extends</span> <span class="nx">Migration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Run the migrations.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">unique</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;contact_number&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">-&gt;</span><span class="na">timestamps</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$faker</span> <span class="o">=</span> <span class="nx">Faker\Factory</span><span class="o">::</span><span class="na">create</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$limit</span> <span class="o">=</span> <span class="mi">33</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$limit</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">insert</span><span class="p">([</span> <span class="c1">//,</span>
</span><span class='line'>        <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">unique</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">email</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;contact_number&#39;</span> <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="na">phoneNumber</span><span class="p">,</span>
</span><span class='line'>      <span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Reverse the migrations.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">drop</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p><p>
  <code>$faker = Faker\Factory::create();</code> creates an instance of Faker factory.<br/>
  <code>$limit = 33;</code> sets the number of records that we want to add to the database.<br/>
  <code>for($i = 0; $i &lt; $limit; $i++) { DB::table(&lsquo;employees&rsquo;)&ndash;>insert(&hellip;); }</code> uses a for loop to add records to the database 33 times. <code>$faker->name</code> generates a faker name. <code>$faker->unique()&ndash;>email</code> generates a fake unique email address. <code>$faker->phoneNumber</code> generates a fake phone number.
</p></p>

<p><p>
  Open up the terminator and run the following command to run the migration:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">migration</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>Laravel Migration Add Column/Drop Colum</strong><br/>
  We will add a new gender column to employees table.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">migration</span> <span class="nx">add_gender_to_employees</span> <span class="o">&mdash;</span><span class="nx">table</span><span class="o">=</span><span class="nx">employees</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <code>&mdash;table=employees</code> tells Laravel we want to work with an existing table called employees.
</p></p>

<p><p>
  Open up <code>/database/migration/xxxxxxx_add_gender_to_employees.php</code> and modify to the following:
</p></p>

<p><figure class='code'><figcaption><span>xxxxxxx_add_gender_to_employees.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AddGenderToEmployees</span> <span class="k">extends</span> <span class="nx">Migration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="sd">/<strong></span>
</span><span class='line'><span class="sd">   * Run the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">after</span><span class="p">(</span><span class="s1">&#39;contact_number&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/</strong></span>
</span><span class='line'><span class="sd">   * Reverse the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">dropColumn</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <code>public function up() {&hellip;}</code> uses <code>Schema::table(&lsquo;employees&rsquo; &hellip;)</code> to add a new column gender.<br/>
  <code>public function down() {&hellip;}</code> drops the new column from the table when we reverse the command. <code>$table->dropColumn(&lsquo;gender&rsquo;);</code> is the command that drops the table.
</p></p>

<p><p>
  <strong>Laravel Migration Change Column Type</strong><br/>
</p></p>

<p><p>
  We have created the gender column with the default size of 255. We want to change it to 5 as the maximum size.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">migration</span> <span class="nx">modify_gender_in_employees</span> <span class="o">&mdash;</span><span class="nx">table</span><span class="o">=</span><span class="nx">employees</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  Open up <code>/database/migrations/xxxxxxx_modify_gender_in_employees.php</code> file and modify to the following:
</p></p>

<p><figure class='code'><figcaption><span>xxxxxxx_modify_gender_in_employees.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ModifyGenderInEmployees</span> <span class="k">extends</span> <span class="nx">Migration</span> <span class="p">{</span>
</span><span class='line'>  <span class="sd">/<strong></span>
</span><span class='line'><span class="sd">   * Run the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">change</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/</strong></span>
</span><span class='line'><span class="sd">   * Reverse the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">change</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <code>$table->string(&lsquo;gender&rsquo;, 5)&ndash;>change();</code> maintains the varchar data type and sets the character limit to 5. If we wanted to change the data type too, we would have specified a different data type.<br/>
  <code>$table->string(&lsquo;gender&rsquo;, 255)&ndash;>change();</code> rollback the migration to the previous state.
</p></p>

<p><p>
  Open up the terminator and run the following command to run the migration:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">migrate</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>Laravel Migration Nullable</strong><br/>
  By default, Laravel assumes all columns are required unless you tell it so let’s assume the gender field is optional.
</p></p>

<p><p>
  Open up the terminator and run the following command to create a migration file:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">migration</span> <span class="nx">make_gender_null_in_employees</span> <span class="err">–</span><span class="nx">table</span><span class="o">&ndash;</span><span class="nx">employees</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  Open up <code>/database/migrations/xxxxxxx_make_gender_null_in_employees.php</code> file and modify to the following:
</p></p>

<p><figure class='code'><figcaption><span>xxxxxxx_make_gender_null_in_employees.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MakeGenderNullInEmployees</span> <span class="k">extends</span> <span class="nx">Migration</span> <span class="p">{</span>
</span><span class='line'>  <span class="sd">/<strong></span>
</span><span class='line'><span class="sd">   * Run the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">nullable</span><span class="p">()</span><span class="o">&ndash;&gt;</span><span class="na">change</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/</strong></span>
</span><span class='line'><span class="sd">   * Reverse the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">change</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>Laravel Migration Foreign Key</strong><br/>
  Let’s say we want to group our employees by their departments, we can add a foreign key for the dept_id.
</p></p>

<p><p>
  Open up the terminator and run the following command to create a migration file for depts table:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">migration</span> <span class="nx">depts</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  Open up <code>/database/migrations/xxxxxxxxx_depts.php</code> file and add the following codes:
</p></p>

<p><figure class='code'><figcaption><span>xxxxxxxxx_depts.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Depts</span> <span class="k">extends</span> <span class="nx">Migration</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="sd">/<strong></span>
</span><span class='line'><span class="sd">   * Run the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">create</span><span class="p">(</span><span class="s1">&#39;depts&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">increments</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">string</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">timestamps</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/</strong></span>
</span><span class='line'><span class="sd">   * Reverse the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">drop</span><span class="p">(</span><span class="s1">&#39;depts&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  Open up the terminator and run the following command to create the depts table:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">migrate</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  The primary and foreign key relationship requires both tables to have the same data type and length. We used Schema’s increments to define the primary key for depts id. Schema’s increments creates an unsigned integer INT(10), Schema’s integer creates signed integer INT(11).
</p></p>

<p><p>
  We need to use Schema’s unsignedInteger when creating dept_id so that both the primary and foreign keys will be INT(10).
</p></p>

<p><p>
  Open up the terminator and run the following command to create the migration for adding the dept_id to the employees table:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">migration</span> <span class="nx">add_dept_id_in_employees</span> <span class="o">&mdash;</span><span class="nx">table</span><span class="o">=</span><span class="nx">employees</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  Open up <code>/database/migrations/xxxxxxxxx_add_dept_id_in_employees.php</code> file and add the following codes:
</p></p>

<p><figure class='code'><figcaption><span>xxxxxxxxx_add_dept_id_in_employees.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Schema\Blueprint</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Migrations\Migration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AddDeptIdInEmployees</span> <span class="k">extends</span> <span class="nx">Migration</span> <span class="p">{</span>
</span><span class='line'>  <span class="sd">/<strong></span>
</span><span class='line'><span class="sd">   * Run the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">up</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span> <span class="na">unsignedInteger</span> <span class="p">(</span><span class="s1">&#39;dept_id&#39;</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">after</span><span class="p">(</span><span class="s1">&#39;gender&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">foreign</span><span class="p">(</span><span class="s1">&#39;dept_id&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="o">&ndash;&gt;</span><span class="na">references</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">on</span><span class="p">(</span><span class="s1">&#39;depts&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="o">&ndash;&gt;</span><span class="na">onDelete</span><span class="p">(</span><span class="s1">&#39;cascade&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/</strong></span>
</span><span class='line'><span class="sd">   * Reverse the migrations.</span>
</span><span class='line'><span class="sd">   <em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">down</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">Schema</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;employees&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$table</span><span class="o">&ndash;&gt;</span><span class="na">dropColumn</span><span class="p">(</span><span class="s1">&#39;dept_id&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  Open up the terminator and run the following command to execute the migration:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">migrate</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><h3>Database Seeding</h3></p>

<p><p>
  In this section, we will add dummy data to our database. Seeding is a term that is used to describe the process of adding data to the database.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">seeder</span> <span class="nx">DrinksTableSeeder</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  Open up <code>/database/seeds/DrinksTableSeeder.php</code> file and add the following codes:
</p></p>

<p><figure class='code'><figcaption><span>DrinksTableSeeder.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Database\Seeder</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DrinksTableSeeder</span> <span class="k">extends</span> <span class="nx">Seeder</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/<em><em></span>
</span><span class='line'><span class="sd">   * Run the database seeds.</span>
</span><span class='line'><span class="sd">   </em></span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   </em>/</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">DB</span><span class="o">::</span><span class="na">table</span><span class="p">(</span><span class="s1">&#39;drinks&#39;</span><span class="p">)</span><span class="o">&ndash;&gt;</span><span class="na">insert</span><span class="p">([</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Vodka&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;comments&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Blood of creativity&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;rating&#39;</span> <span class="o">=&gt;</span> <span class="mi">9</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;brew_date&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1973-09-03&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <code>class DrinksTableSeeder extends Seeder</code> defines the table DrinksTableSeeder that extends the Seeder class.<br/>
  <code>public function run()</code> defines the function that is executed when you run the seed command from artisan.
</p></p>

<p><p>
  The above table uses an array that matches database field name to values and inserts the record into the specified table drinks. Now let&rsquo;s run the seed and add our dummy record to the database.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">db</span><span class="o">:</span><span class="nx">seed</span> <span class="o">&mdash;</span><span class="nx">class</span><span class="o">=</span><span class="nx">DrinksTableSeeder</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Template]]></title>
    <link href="http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-template/"/>
    <updated>2017-08-06T00:40:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-template</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x Template" />
</p>




<p>
  Blade is a powerful easy to use template that comes with Laravel. Blade templates can be mixed with plain php code.
</p>




<p>
  Well, in this articles I will cover the following sections: Template inheritance, Master layout, Extending the master layout, Displaying variables, Blade conditional statements, Blade Loops and Executing PHP functions in blade template.
</p>




<p>
  <strong>Template Inheritance</strong><br/>
  In a nutshell, template inheritance allows us to define a master layout with elements that are common to all web pages. The individual pages extend the master layout. This saves us time of repeating the same elements in the individual pages.
</p>




<p>
  <strong>Master Layout</strong><br/>
  All blade templates must be saved with the .blade extension. In this section, we are going to create a master template that all pages will extend. The following is the syntax for defining a master layout.<br/>
</p>




<p>
  Create a new file named <code>master.blade.php</code> in <code>/resources/views/layouts</code> folder with the following code below:
</p>




<figure class='code'><figcaption><span>master.blade.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;@</span><span class="nx">yield</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">)</span><span class="o">&lt;/</span><span class="nx">title</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">Here</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">master</span> <span class="nx">sidebar</span><span class="o">.</span>
</span><span class='line'>    <span class="o">@</span><span class="nx">show</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">@</span><span class="nx">yield</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>@yield('title')</code> is used to display the value of the title.<br/>
  - <code>@section('sidebar')</code> is used to define a section named sidebar.<br/>
  - <code>@show</code> is used to display the contents of a section.<br/>
  - <code>@yield('content')</code> is used to display the contents of content.
</p>




<p>
  <strong>Extending the Master Layout</strong><br/>
  Now we will create a page that extends the master layout. Create a new page named <code>page.blade.php</code> in <code>/resources/views</code> folder with the following code below:
</p>




<figure class='code'><figcaption><span>page.blade.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">@</span><span class="k">extends</span><span class="p">(</span><span class="s1">&#39;layouts.master&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;Page Title&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">appended</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">master</span> <span class="nx">sidebar</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">my</span> <span class="nx">body</span> <span class="nx">content</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>@extends('layouts.master')</code> is used to extends the master layout.<br/>
  - <code>@section('title', 'Page Title')</code> is used to sets the value of the title section.<br/>
  - <code>@section('sidebar')</code> is used to defines a sidebar section in the child page of master layout.<br/>
  - <code>@endsection</code> is used to ends the sidebar section.<br/>
  - <code>@section('content')</code> is used to defines the content section.<br/>
</p>




<p>
  And now we will add a route to tests our blade template. Open up <code>/routes/web.php</code> file and add the following route below:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;blade&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">view</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Load the <code>http:://localhost:8000/blade</code> URL in your web browser and you will see the paragraph.
</p>




<p>
  <strong>Displaying Variables in a Blade Template</strong><br/>
  Now we will define a variable and pass it to our blade template view. Open up <code>/routes/web.php</code> file and add the route below:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;blade&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">view</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;The Foodie&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then update <code>pages.blade.php</code> file to display the variable. Open up <code>page.blade.php</code> file and update the contents to the following:
</p>




<figure class='code'><figcaption><span>page.blade.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">@</span><span class="k">extends</span><span class="p">(</span><span class="s1">&#39;layouts.master&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;Page Title&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">appended</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">master</span> <span class="nx">sidebar</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">my</span> <span class="nx">body</span> <span class="nx">content</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>{{$name}}</code> double opening curly braces and double closing curly braces are used to display the value of $name variable.
</p>




<p>
  <strong>Blade Condition Statements</strong><br/>
  Blade also supports conditional statements. Conditional statements are used to determine what to display in the browser. We will pass a variable that will determine what to display in the browser.
</p>




<p>
  Open up <code>/routes/web.php</code> file and modify route as follow:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;blade&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">view</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;The Foodie&#39;</span><span class="p">,</span> <span class="s1">&#39;day&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Sunday&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We added another variable <code>day</code> with a value of Sunday.
</p>




<p>
  And then open up <code>/resources/views/page.blade.php</code> file and modify the codes to the following:
</p>




<figure class='code'><figcaption><span>page.blade.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">@</span><span class="k">extends</span><span class="p">(</span><span class="s1">&#39;layouts.master&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;Page Title&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">appended</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">master</span> <span class="nx">sidebar</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">my</span> <span class="nx">body</span> <span class="nx">content</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="k">If</span> <span class="nx">Statement</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">if</span> <span class="p">(</span><span class="nv">$day</span> <span class="o">==</span> <span class="s1">&#39;Sunday&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">to</span> <span class="nx">party</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">else</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">to</span> <span class="nx">make</span> <span class="nx">money</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">endif</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>@if ($day == 'Sunday')</code> starts the if statement and evaluates the condition $day == &#8216;Sunday&#8217;.<br/>
  - <code>@else</code> is the else part of the if statement.<br/>
  - <code>@endif</code> ends the if statement.
</p>




<p>
  <strong>Blade Loop</strong><br/>
  Blade template supports all of the loops that PHP supports. We will look at how we can use the foreach loop in blade to loop through an array of items.
</p>




<p>
  Open up <code>/routes/web.php</code> file and modify the codes for the blade route to the following:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;blade&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$drinks</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Vodka&#39;</span><span class="p">,</span> <span class="s1">&#39;Gin&#39;</span><span class="p">,</span> <span class="s1">&#39;Brandy&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">view</span><span class="p">(</span><span class="s1">&#39;page&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;The Foodie&#39;</span><span class="p">,</span><span class="s1">&#39;day&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Sunday&#39;</span><span class="p">,</span> <span class="s1">&#39;drinks&#39;</span> <span class="o">=&gt;</span> <span class="nv">$drinks</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>$drinks = array('Vodka', 'Gin', 'Brandy');</code> defines an array variable that we are passing to the blade template.
</p>




<p>
  And then open up <code>/resources/views/page.blade.php</code> file and modify the contents to the following:
</p>




<figure class='code'><figcaption><span>page.blade.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">@</span><span class="k">extends</span><span class="p">(</span><span class="s1">&#39;layouts.master&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;Page Title&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">appended</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">master</span> <span class="nx">sidebar</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">my</span> <span class="nx">body</span> <span class="nx">content</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="k">If</span> <span class="nx">Statement</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">if</span> <span class="p">(</span><span class="nv">$day</span> <span class="o">==</span> <span class="s1">&#39;Sunday&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">to</span> <span class="nx">party</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">else</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">to</span> <span class="nx">make</span> <span class="nx">money</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">endif</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="k">Foreach</span> <span class="nx">Loop</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$drinks</span> <span class="k">as</span> <span class="nv">$drink</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">endforeach</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Executing php functions in Blade</strong><br/>
  We will call the php date function in the blade template. Open up <code>/resources/views/page.blade.php</code> file and modify the contents to the following:
</p>




<figure class='code'><figcaption><span>page.blade.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">@</span><span class="k">extends</span><span class="p">(</span><span class="s1">&#39;layouts.master&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;Page Title&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;sidebar&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">appended</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">master</span> <span class="nx">sidebar</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span><span class='line'>
</span><span class='line'><span class="o">@</span><span class="nx">section</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Here</span> <span class="nx">is</span> <span class="nx">my</span> <span class="nx">body</span> <span class="nx">content</span><span class="o">.&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="k">If</span> <span class="nx">Statement</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">if</span> <span class="p">(</span><span class="nv">$day</span> <span class="o">==</span> <span class="s1">&#39;Sunday&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">to</span> <span class="nx">party</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">else</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Time</span> <span class="nx">to</span> <span class="nx">make</span> <span class="nx">money</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">endif</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="k">Foreach</span> <span class="nx">Loop</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$drinks</span> <span class="k">as</span> <span class="nv">$drink</span><span class="p">)</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">@</span><span class="k">endforeach</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Execute</span> <span class="nx">PHP</span> <span class="nx">Function</span><span class="o">&lt;/</span><span class="nx">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">The</span> <span class="nb">date</span> <span class="nx">is</span> <span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">@</span><span class="nx">endsection</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>{{date(' D M, Y')}}</code> double opening and closing curly braces are used to execute the php date function.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x - 4 Steps to Prevent Browser's Back Button After User Logout]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/10/laravel-5-dot-x-x-4-steps-to-prevent-browsers-back-button-after-user-logout/"/>
    <updated>2017-07-10T23:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/10/laravel-5-dot-x-x-4-steps-to-prevent-browsers-back-button-after-user-logout</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x 4 Steps to Prevent Browser's Back Button After User Logout" />
</p>




<p>
  Well, have you found out an issue with user logout? If you observe deeply then you can found out this issue that you can logout properly after you click logout link otherwise than if you click on browser&#8217;s back button you still able to see the content of the page which actually should not be seen with respect to auth middleware process.
</p>




<p>
  We can prevent this issue by using Laravel middleware. We will create one middleware and prevent back button history. So we have to create new middleware and use that middleware in the route.
</p>




<p>
  Like so, I am going to do from scratch so:
</p>




<p>
  <strong>1. Create New Middleware</strong><br/>
  Create a new middleware using following command:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">middleware</span> <span class="nx">PreventBackHistory</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>2. Middleware Configuration</strong><br/>
  Open up <code>PreventBackHistory.php</code> file in <code>app/Http/Middleware</code> folder and replace codes with the following codes below:
</p>




<figure class='code'><figcaption><span>PreventBackHistory.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Http\Middleware</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Closure</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PreventBackHistory</span> <span class="p">{</span>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Handle an incoming request.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @param  \Illuminate\Http\Request  $request</span>
</span><span class='line'><span class="sd">   * @param  \Closure  $next</span>
</span><span class='line'><span class="sd">   * @return mixed</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">handle</span><span class="p">(</span><span class="nv">$request</span><span class="p">,</span> <span class="nx">Closure</span> <span class="nv">$next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$next</span><span class="p">(</span><span class="nv">$request</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$response</span><span class="o">-&gt;</span><span class="na">header</span><span class="p">(</span><span class="s1">&#39;Cache-Control&#39;</span><span class="p">,</span><span class="s1">&#39;nocache, no-store, max-age=0, must-revalidate&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">header</span><span class="p">(</span><span class="s1">&#39;Pragma&#39;</span><span class="p">,</span><span class="s1">&#39;no-cache&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="o">-&gt;</span><span class="na">header</span><span class="p">(</span><span class="s1">&#39;Expires&#39;</span><span class="p">,</span><span class="s1">&#39;Sun, 02 Jan 1990 00:00:00 GMT&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>3. Register Middleware</strong><br/>
  Open <code>Kernel.php</code> in <code>app/Http</code> folder and add a new middleware in $routeMiddleware variable array as below:
</p>




<figure class='code'><figcaption><span>Kernel.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Http</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Foundation\Http\Kernel</span> <span class="k">as</span> <span class="nx">HttpKernel</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Kernel</span> <span class="k">extends</span> <span class="nx">HttpKernel</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">.....</span>
</span><span class='line'>  <span class="o">.....</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * The application&#39;s route middleware.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * These middleware may be assigned to groups or used individually.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @var array</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">protected</span> <span class="nv">$routeMiddleware</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'>
</span><span class='line'>    <span class="s1">&#39;prevent-back-history&#39;</span> <span class="o">=&gt;</span> <span class="nx">\App\Http\Middleware\PreventBackHistory</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>4. Use Middleware in Route</strong><br/>
  Now we are ready to use &#8220;prevent-back-history&#8221; middleware in route file as below:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">group</span><span class="p">([</span><span class="s1">&#39;middleware&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;prevent-back-history&#39;</span><span class="p">],</span><span class="k">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">Auth</span><span class="o">::</span><span class="na">routes</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/home&#39;</span><span class="p">,</span> <span class="s1">&#39;HomeController@index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Route &amp; SEO]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/09/laravel-5-dot-x-x-route-and-seo/"/>
    <updated>2017-07-09T10:49:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/09/laravel-5-dot-x-x-route-and-seo</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x Route and SEO" />
</p>




<p>
  SEO stands for &#8220;search engine optimization&#8221;. URLs is an important thing in getting found on the web. In this article I will implement routes and SEO friendly URLs for Laravel project.
</p>




<p>
  <strong>Things that Affect SEO</strong><br/>
  The following are some of the things that search engines such as Google Search consider when evaluating web sites:<br/>
  1. Website speed<br/>
  - No one waiting to visit a websites that take forever to load. We all love fast websites. The goal should be to keep the load time under 2 seconds. If you can get it under a second that is even much better. You need to test your web application for speed and optimize if necessary.<br/>
  2. Responsive designs<br/>
  - Mobile devices have a market share of internet usage. Since user experience matters to search engines, you need to ensure that the web site displays properly in mobile devices, tablets and desktops as well.<br/>
  3. Keywords<br/>
  - Search engines look at keywords when querying billions of indexed websites. As a developer you have to ensure that you provide title tags, meta description and HTML H2 heading that the content writers can use to place keywords.<br/>
  4. Social media statistics<br/>
  - If you read something cool on the web, you naturally share it on social media. This is a stamp of approval to search engines. Your have to include tools on the web site that will make it easy for the visitors to share the contents.<br/>
  5. Website URLs<br/>
  - The URLs should be keyword rich and words should be separated by dashes and not underscores.
</p>




<p>
  <strong>How to Implement SEO Friendly URLS in Laravel</strong><br/>
  Now we have to cover the basics SEO and we will map routes to controllers and create a single controller for all routes. The following table shows the URLs that will be implemented:
</p>




<table>
  <thead>
    <tr>
      <th>#</th>
      <th>URLs</th>
      <th>Method</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>/</td>
      <td>index</td>
      <td>Home page</td>
    </tr>
    <tr>
      <td>2</td>
      <td>/products</td>
      <td>products</td>
      <td>Products page</td>
    </tr>
    <tr>
      <td>3</td>
      <td>/products/details/{id}</td>
      <td>product_details(id)</td>
      <td>Product detailed based on product id</td>
    </tr>
    <tr>
      <td>4</td>
      <td>/products/category</td>
      <td>product_categories</td>
      <td>Product categories</td>
    </tr>
    <tr>
      <td>5</td>
      <td>/products/brands</td>
      <td>product_brands</td>
      <td>Product brands</td>
    </tr>
    <tr>
      <td>6</td>
      <td>/blog</td>
      <td>blog</td>
      <td>Blog postings list</td>
    </tr>
    <tr>
      <td>7</td>
      <td>/blog/post/{id}</td>
      <td>blog_post{id}</td>
      <td>Blog post content</td>
    </tr>
    <tr>
      <td>8</td>
      <td>/contact-us</td>
      <td>contact_us</td>
      <td>Contact us page</td>
    </tr>
    <tr>
      <td>9</td>
      <td>/login</td>
      <td>login</td>
      <td>Login user</td>
    </tr>
    <tr>
      <td>10</td>
      <td>/logout</td>
      <td>logout</td>
      <td>Logout user</td>
    </tr>
    <tr>
      <td>11</td>
      <td>/cart</td>
      <td>cart</td>
      <td>Cart contents</td>
    </tr>
    <tr>
      <td>12</td>
      <td>/checkout</td>
      <td>checkout</td>
      <td>Checkout shopper</td>
    </tr>
    <tr>
      <td>13</td>
      <td>/search/{query}</td>
      <td>search</td>
      <td>Search results</td>
    </tr>
  </tbody>
</table>




<br/>




<p>
  For this section assumes you have created the tutorial project. If you haven’t done so yet then read this <a href="http://geekhmer.github.io/blog/2017/06/30/hello-laravel-5-dot-x-x/">Laravel Hello World</a>. We use the artisan command line tool to generate the codes for ShopController.php controller.
</p>




<p>
  Then open up your terminator and run the following command to browse to the project. Assumed that you are using Laravel plugin web server. 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">serve</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then run the following command to generate the Shop controller:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">controller</span> <span class="nx">ShopController</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Open up /app/Http/Controllers/ShopController.php and replace the generated codes with the following codes below:
</p>




<figure class='code'><figcaption><span>ShopController.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Http\Controllers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Http\Request</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Http\Controllers\Controller</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ShopController</span> <span class="k">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;index page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">products</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;products page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">product_details</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;product details page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">product_categories</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;product categories page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">product_brands</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;product brands page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">blog</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;blog page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">blog_post</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;blog post page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">contact_us</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;contact us page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">login</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;login page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;logout page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">cart</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;cart page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">checkout</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s1">&#39;checkout page&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">search</span><span class="p">(</span><span class="nv">$query</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;</span><span class="si">$query</span><span class="s2"> search page&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The above code defines functions that will responds to the routes.
</p>




<p>
  And then we will add routes that will call the methods in the controllers.
</p>




<p>
  Open up <code>web.php</code> in /routes folder and replace the code with the following:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">|--------------------------------------------------------------------------</span>
</span><span class='line'><span class="cm">| Web Routes</span>
</span><span class='line'><span class="cm">|--------------------------------------------------------------------------</span>
</span><span class='line'><span class="cm">|</span>
</span><span class='line'><span class="cm">| Here is where you can register web routes for your application. These</span>
</span><span class='line'><span class="cm">| routes are loaded by the RouteServiceProvider within a group which</span>
</span><span class='line'><span class="cm">| contains the &quot;web&quot; middleware group. Now create something great!</span>
</span><span class='line'><span class="cm">|</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@index&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/products&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@products&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/products/details/{id}&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@product_details&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/products/categories&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@product_categories&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/products/brands&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@product_brands&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/blog&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@blog&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/blog/post/{id}&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@blog_post&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/contact-us&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@contact_us&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/login&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@login&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/logout&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@logout&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/cart&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@cart&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/checkout&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@checkout&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/search/{query}&#39;</span><span class="p">,</span><span class="s1">&#39;ShopController@search&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Create Custom Helper]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/02/laravel-5-dot-x-x-create-custom-helper/"/>
    <updated>2017-07-02T20:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/02/laravel-5-dot-x-x-create-custom-helper</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_5.jpg" width="600" alt="Laravel 5.x.x Create Custom Helper" />
</p>




<p>
  In this article I will show you how to create your own custom helpers in Laravel framework.
</p>




<p>
  <strong>Create Project</strong><br/>
  Run the following composer command to create a new Laravel project:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">composer</span> <span class="nx">create</span><span class="o">-</span><span class="nx">project</span> <span class="nx">laravel</span><span class="o">/</span><span class="nx">laravel</span> <span class="nx">laravel_helper</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Customer Helpers’ Dir</strong><br/>
  Customer helpers files will be located in the <code>app</code> dir.
</p>




<p>
  Create a new directory Helpers in <code>app/Helpers</code>
</p>




<p>
  <strong>Define Helper Class</strong><br/>
  Let’s create a simple helper function that will return the user&#8217;s full name format.
</p>




<p>
  Create a new file <code>UserHelper.php</code> in <code>app/Helpers</code> and add the following codes:
</p>




<figure class='code'><figcaption><span>UserHelper.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Helpers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserHelper</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">full_name</span><span class="p">(</span><span class="nv">$first_name</span><span class="p">,</span> <span class="nv">$last_name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$first_name</span> <span class="o">.</span> <span class="s1">&#39;, &#39;</span><span class="o">.</span> <span class="nv">$last_name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>namespace App\Helpers;</code>: defines the Helpers namespace.<br/>
  - <code>public static function full_name($first_name, $last_name) {...}</code>: defines a static function which return the user&#8217;s full name.
</p>




<p>
  <strong>Helpers Service Provider Class</strong><br/>
  Service providers are used to auto load classes in Laravel framework. 
</p>




<p>
  We will need to define a service provider that will load all of our helpers classes in <code>app/Helpers</code> directory.
</p>




<p>
  Run the following artisan command to create <code>HelperServiceProvider.php</code> in <code>app/Providers</code> directory:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">provider</span> <span class="nx">HelperServiceProvider</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then add the following code below in <code>HelperServiceProvider.php</code> file:
</p>




<figure class='code'><figcaption><span>HelperServiceProvider.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Providers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Support\ServiceProvider</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelperServiceProvider</span> <span class="k">extends</span> <span class="nx">ServiceProvider</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Bootstrap the application services.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">boot</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Register the application services.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @return void</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">register</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nb">glob</span><span class="p">(</span><span class="nx">app_path</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;/Helpers/*.php&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$filename</span><span class="p">){</span>
</span><span class='line'>      <span class="k">require_once</span><span class="p">(</span><span class="nv">$filename</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>namespace App\Providers;</code>: defines the namespace provider.<br/>
  - <code>use Illuminate\Support\ServiceProvider;</code>: imports the ServiceProvider class namespace.<br/>
  - <code>class HelperServiceProvider extends ServiceProvider {...}</code>: defines a HelperServiceProvider class that extends/inherite the ServiceProvider class.
  - <code>public function register() {...}</code> is the function that is used to loads the helpers.<br/>
  - <code>foreach (glob(app_path().'/Helpers/*.php') as $filename) {...}</code>: loops through all the files in <code>app/Helpers</code> directory and loads them.
</p>




<p>
  <strong>Configure Helper Service Provider and Class Alias</strong><br/>
  We need to register the HelperServiceProvider and create an alias for the helpers.
</p>




<p>
  Open up <code>config/app.php</code> file and add the following line in providers array variable.
</p>




<figure class='code'><figcaption><span>app.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">App\Providers\HelperServiceProvider</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>




<p>
 And then add the following line in aliases array variable.
</p>




<figure class='code'><figcaption><span>app.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;UserHelper&#39;</span> <span class="o">=&gt;</span> <span class="nx">App\Helpers\UserHelper</span><span class="o">::</span><span class="na">class</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Using the Custom Helper</strong><br/>
  Let create a route that will the custom helper function. Open up <code>routes/web.php</code> and add the following codes:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/users&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">UserHelper</span><span class="o">::</span><span class="na">full_name</span><span class="p">(</span><span class="s2">&quot;Bunlong&quot;</span><span class="p">,</span> <span class="s2">&quot;Van&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>return UserHelper::full_name("Bunlong", "Van");</code> calls the static function full_name in UserHelper class.
</p>




<p>
  Open up your browser and type the uri <code>http://localhost:8000/users</code> you will see &#8220;Bunlong, Van&#8221; text.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Laravel 5.x.x]]></title>
    <link href="http://geekhmer.github.io/blog/2017/06/30/hello-laravel-5-dot-x-x/"/>
    <updated>2017-06-30T21:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/06/30/hello-laravel-5-dot-x-x</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_5.jpg" width="600" alt="Hello Laravel 5.x.x" />
</p>




<p>
  In the previous article, We installed and configured a Laravel application. And in this article We will build on the same project to create a simple Hello Laravel application and look at the key components of Laravel framework.
</p>




<p>
  <strong>Artisan Command Line</strong><br/>
  Artisan is the command line that automates common tasks in Laravel framework. The artisan command line can be used to perform the following tasks and much more:
</p>




<p>
  - Generate boilerplate code – it easily create controllers, models&#8230; etc.<br/>
  - Database migrations – migrations is used to manipulate database objects and can be used to create and drop tables etc.<br/>
  - Seeding – seeding is a term used to add dummy records to the database.<br/>
  - Routing<br/>
  - Run unit tests.
</p>




<p>
  <strong>The Way to Use the Artisan Command</strong><br/>
  Open the terminator and run the following command to view the list of available commands:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="k">list</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Artisan Command To Generate Codes for a Controller</strong><br/>
  Open the terminator and run the following command to generate codes for Hello Laravel controller:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">make</span><span class="o">:</span><span class="nx">controller</span> <span class="nx">HelloLaravelController</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>php artisan</code> is used to run the artisan command line.<br/>
  - <code>make:controller HelloLaravelController</code> specifies the command that the should run. This command will create codes for a controller HelloLaravelController in /app/Http/Controllers/HelloLaravelController.php.
</p>




<p>
  And then open up the file <code>HelloLaravelController.php</code> in folder <code>/app/Http/Controllers</code>.
</p>




<p>
  And you will get the following code:
</p>




<figure class='code'><figcaption><span>HelloLaravelController.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">App\Http\Controllers</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Illuminate\Http\Request</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Http\Requests</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">App\Http\Controllers\Controller</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloLaravelController</span> <span class="k">extends</span> <span class="nx">Controller</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Display a listing of the resource.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @return Response</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Show the form for creating a new resource.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @return Response</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">create</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Store a newly created resource in storage.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @param  Request  $request</span>
</span><span class='line'><span class="sd">   * @return Response</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">store</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Display the specified resource.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @param  int  $id</span>
</span><span class='line'><span class="sd">   * @return Response</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">show</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Show the form for editing the specified resource.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @param  int  $id</span>
</span><span class='line'><span class="sd">   * @return Response</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">edit</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Update the specified resource in storage.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @param  Request  $request</span>
</span><span class='line'><span class="sd">   * @param  int  $id</span>
</span><span class='line'><span class="sd">   * @return Response</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">update</span><span class="p">(</span><span class="nx">Request</span> <span class="nv">$request</span><span class="p">,</span> <span class="nv">$id</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Remove the specified resource from storage.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @param  int  $id</span>
</span><span class='line'><span class="sd">   * @return Response</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">destroy</span><span class="p">(</span><span class="nv">$id</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  - <code>namespace App\Http\Controllers;</code>: defines the namespace for the controller.<br/>
  - <code>use Illuminate\Http\Request;</code>: imports namespaces with the required classes to use in the controller.<br/>
  - <code>class HelloLaravelController extends Controller</code>: defines the HelloLaravelController class which extends/inherit the base controller.<br/>
  - <code>public function index(){}</code>: defines the default function for the controller.<br/>
  - <code>public function create(){}</code>: defines the function that is used to render the create form view.<br/>
  - <code>public function store(Request $request)</code>: defines the function that is used to store/save a newly recode into the table/database.<br/>
  - <code>public function show($id)</code>: defines the function that is used to retrieves a single recode/resource based on the id.<br/>
  - <code>public function edit($id)</code>: defines the function that is used to render the edit form based on the id.<br/>
  - <code>public function update(Request $request, $id)</code> defines a function that is used to update a record in the table/database base on the id.<br/>
  - <code>public function destroy($id)</code>: defines the function that is used to remove a recode based on the id.
</p>




<p>
  <strong>Routing</strong><br/>
  We will create a new route that will render Hello Laravel in the browser.
</p>




<p>
  Open up file <code>web.php</code> in folder <code>routes</code> and add the following codes below:
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;/hello_laravel&#39;</span><span class="p">,</span><span class="k">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;Hello Laravel!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>Route::get('/hello',function(){...});</code>: responds to the GET method of the URI hello. function() defines an anonymous function that does the actual work for the requested URI.<br/>
  <code>return 'Hello Laravel!';</code>: returns and render Hello Laravel! to the requested browser.
</p>




<p>
  And then go to ther browser and type the uri <code>http://localhost:8000/hello</code> you will get the output &#8220;Hellow Laravel!&#8221;.
</p>




<p>
  <strong>Route To Controller</strong><br/>
  Add the following codes in <code>routes/web.php</code>.
</p>




<figure class='code'><figcaption><span>web.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;HelloLaravelController@index&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then open up <code>app/Http/Controllers/HelloLaravelController.php</code> file and add the following codes below:
</p>




<figure class='code'><figcaption><span>HelloLaravelController.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;Hello Laravel!&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then go to ther browser and type the uri <code>http://localhost:8000/hello</code> you will get the output &#8220;Hello Laravel!&#8221;.
</p>




<p>
  <strong>Loading the View from the Controller</strong><br/>
  Open up <code>app/Http/Controllers/HelloLaravelController.php</code> file and edit the following codes below:
</p>




<figure class='code'><figcaption><span>HelloLaravelController.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">view</span><span class="p">(</span><span class="s1">&#39;home&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <code>return view('home');</code>: loads a view named hello.blade.php.
</p>




<p>
  And then create a new file <code>home.blade.php</code> in folder <code>/resources/views</code> and add the following codes below:
</p>




<figure class='code'><figcaption><span>home.blade.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Hello</span> <span class="nx">Laravel</span><span class="o">!</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then go to ther browser and type the uri <code>http://localhost:8000/hello</code> you will get the output &#8220;Hello Laravel!&#8221;.
</p>


<p></p>

<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Full Stack Developer?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/06/25/what-is-full-stack-developer/"/>
    <updated>2017-06-25T00:26:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/06/25/what-is-full-stack-developer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/full_lstack_developer.jpg" width="600" alt="What is Full Stack Developer?" />
</p>




<p>
  We live in the world of start-ups and freelancers. If you want to make it in such a world, you need to be equipped with the necessary skills.
</p>




<p>
  Big organizations can afford to have developer, designer, tester etc&#8230; and roles assigned to different people. 
</p>




<p>
  As the start-up or small organization, such roles assigned to different people may be too costly. It is far much more preferable to have a single person who can work comfortably in all of the above roles.
</p>




<p>
  Gone the days, one needed to know only one language/technology and get with. But these days, you will need to know more than one language/technology. This is where the full-stack developer comes in. A full-stack developer is comfortable working in both the back-end and front-end environments.
</p>




<h3>BACK-END DEVELOPER</h3>




<p>
  Back-end developers are much more focused on what happens on the server-side. This includes writing the code that responds to front-end user requests, interacting with the database and infrastructure for web server as well. One will need to know more than one of the following.
</p>




<p>
  <strong>PROGRAMMING LANGUAGES</strong>
</p>




<p>
  The following are some of the languages that you should know.
</p>




<p>
  <strong>PHP/Laravel</strong><br/>
   PHP is a scripting server-side language. You can use PHP to interact with the database, develop APIs and do a hell lot of things. PHP is open source and almost supported by all hosting environments.
</p>




<p>
  As a full-stack developer, having knowledge of PHP is almost a must. It is a massive advantage but you will need to prove yourself to your employers or clients.
</p>




<p>
  <strong>Ruby/Rails</strong><br/>
  Ruby on rails is another popular MVC framework built on ruby. Just like PHP, Ruby on rails is open source. You can use ruby to create web applications and APIs.
</p>




<p>
  <strong>ASP.Net</strong><br/>
  ASP is the acronym for active server pages. It is a web development language developed by Microsoft and runs on the .Net framework.
</p>




<p>
  <strong>JSP</strong><br/>
  JSP is the acronym for Java Server Pages. It is powered by Java and used to create web applications.
</p>




<p>
  <strong>DATABASE ENGINES</strong>
</p>




<p>
  In today’s world, almost all applications must store data in the database. Data is literally the blood line of all modern businesses. Knowing about databases will help you to go a long way
</p>




<p>
  <strong>MySQL</strong><br/>
  MySQL is a client-server relational database management system. It runs on all operating systems and is mostly used with PHP. It supports tables, views, triggers and stored procedures etc. You can also use it with other programming languages such as Ruby, Java, C# etc.
</p>




<p>
  <strong>Microsoft SQL Server</strong><br/>
  SQL Server is a commercial relational database management systems developed by Microsoft. It is most commonly used with ASP.Net but you can also use it with other languages i.e. Java, PHP etc.
</p>




<p>
  <strong>Sqlite</strong><br/>
  SQLite is an embedded relational SQL database. It is commonly used on mobile devices i.e. smart phones. You can also use it when working with web applications.
</p>




<p>
  <strong>Oracle</strong><br/>
  Oracle is another popular relational database management system developed by Oracle. It is most used by big corporations.
</p>




<p>
  <strong>PostgreSQL</strong><br/>
  PostgreSQL (pronounced &#8220;post-gress-Q-L&#8221;) is an open source relational database management system ( DBMS ) developed by a worldwide team of volunteers. PostgreSQL is not controlled by any corporation or other private entity and the source code is available free of charge.
</p>




<p>
  <strong>DEVELOPMENT METHODOLOGIES</strong>
</p>




<p>
  In addition to possessing the technical skills, you will also need to know about project management and development methodologies.
</p>




<p>
  <strong>Agile Development Methodologies</strong><br/>
  Agile development is a term that is used to refer to development methodologies that incremental development practices. Some of the most popular methodologies include <a href="http://scrummethodology.com/" target="_blank">Scrum</a> and Extreme Programming (XP).
</p>




<p>
  <strong>Development Tools / Techniques</strong><br/>
  One only needed to know a single programing language, develop something functional and get away with it. Things have changed these days. In additional to knowing at least more than one language. Your skill set should also including: Version Control, Test Driven Development (TDD).
</p>




<h3>FRONT-END DEVELOPER</h3>




<p>
  The major role of a front-end developer is to create the user interface that the user interacts with. This generally requires knowing HTML, CSS, and JavaScript intimately. Let’s briefly look at some of the skills that you will need to know.
</p>




<p>
  <strong>Hyper Text Markup Language (HTML)</strong><br/> 
  As of this writing, the latest version of HTML is 5. It comes with a lot of cool features that you must know. Web pages are literally build using HTML.
</p>




<p>
  <strong>Cascading Style Sheets (CSS)</strong><br/>
  Another component of building web pages. CSS provides you with the styling that makes the web beautiful.
</p>




<p>
  <strong>JavaScript (JS)</strong><br/>
  JavaScript is a client-side scripting language that is used to make web pages interactive and provide a lot of functionality. You can use JavaScript to provide client-side validation, performing Ajax calls etc. apart from doing client-side activities, JavaScript can now be used on the server side as well i.e. Node.JS.
</p>




<p>
  <strong>JavaScript Frameworks / Libraries</strong><br/>
  Pure JavaScript is great for simple tasks but things can and usually tend to get more complex. Frameworks and libraries allow you to focus on the user needs while they take care of the technical needs. Libraries such as jQuery allow you to do more with less. jQuery comes with functionality for things like validation, animations, Ajax calls etc. You will also need to know JavaScript frameworks i.e. ReactJS, AngularJS etc. to create killer interactive interfaces.
</p>




<p>
  <strong>Front-End Frameworks</strong><br/>
  Time is money you don’t want to spent a lot of time on a project focusing on technical details. You can take advantage of front-end frameworks such as twitter bootstrap to make your life sweet. Twitter bootstrap comes with CSS and JavaScript functionality out of the box. Once you have the design mock-ups, you can focus on applying CSS classes to your HTML elements and watch the magic happen instead of writing the CSS code that will translate your mock-ups to cool HTML pages.
</p>




<p>
  <strong>CSS Pre-Processors </strong><br/>
  These enable you to speed up your CSS development. CSS pre-processors such as SASS and LESS process your CSS code before publishing to make the code cross-browser friendly and well formatted.
</p>




<p>
  <strong>Template Engines</strong><br/>
   Let’s assume that you are using PHP on the back-end, before template engines, the front-end developers would create the HTML, handle it over to the developers and then they would embed pure PHP code into the HTML. This is no longer acceptable. You need to learn a template engine and they are super easy actually. Laravel uses blade template.
</p>




<p>
  <strong>Responsive and Mobile Designs</strong><br/>
  Your interfaces need to be able to respond to the size of the design and mobile devices.
</p>




<p>
  So far so good, as you can see from the above list, the back-end and front-end developers needs to know a lot of things. A full-stack developer needs to know all things.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Installation and Configuration]]></title>
    <link href="http://geekhmer.github.io/blog/2017/06/24/laravel-5-dot-x-x-installation-and-configuration/"/>
    <updated>2017-06-24T14:42:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/06/24/laravel-5-dot-x-x-installation-and-configuration</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_5.jpg" width="600" alt="Laravel 5" />
</p>




<p>
  Laravel is a great PHP framework. Currently, it is the most PHP framework which a lot of companies and people all over the world use it to build amazing applications. In this tutorial, I&#8217;ll show you how easy it is to build a web application with Laravel and add authentication to it.
</p>




<p>
  Laravel is a free, open-source PHP framework designed for building web applications with an expressive and elegant syntax. Laravel saves your time and effort because it come with a lot of features. 
</p>




<p>
  Well, in this article We are going to take a look on installing, configuration Laravel and explore the Laravel directories structures. And pretty sure We will work with a Ubuntu (Linux) machine.
</p>




<p>
  <strong>Pre-requisites for Installing Laravel</strong><br/>
  Before installing Laravel, ensure that you have installed: Web Server, PHP, MySQL, Composer.
</p>




<p>
  <strong>Web Server, PHP & MySQL</strong><br/>
  For this article, We will use Laravel built-in web server. or if you prefer other kind of web server i.e. XAMPP comes with Apache, MySQL and PHP. The good news is XAMPP come cross platform. If you do not have XAMPP, you can download it from this <a href="https://www.apachefriends.org/index.html" target="_blank">link</a>.
</p>




<p>
  <strong>Composer</strong><br/>
  Composer is a dependency manager for PHP. You can read more about composer from their <a href="https://getcomposer.org/" target="_blank">official website</a>. We will not cover how to install composer in this article.
</p>




<p>
  <strong>Create a New Laravel Project Using Composer</strong><br/>
  Laravel use Composer to manage its dependencies. So, before using Laravel, ensure you have Composer installed on your machine.
</p>




<p>
  We can install Laravel by issuing the Composer <code>create-project</code> command in the terminal like so:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">composer</span> <span class="nx">create</span><span class="o">-</span><span class="nx">project</span> <span class="o">--</span><span class="nx">prefer</span><span class="o">-</span><span class="nx">dist</span> <span class="nx">laravel</span><span class="o">/</span><span class="nx">laravel</span> <span class="nx">blog</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Wait for the installation to complete then cd into the project and run the command below for running the Laravel built-in web server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">php</span> <span class="nx">artisan</span> <span class="nx">serve</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Browser to the following URL <code>http://localhost:300</code> in your web browser.
</p>




<p>
  <strong>Explore Directory Structure</strong><br/>
  Laravel follow the <code>Model-View-Controller</code> design pattern.
</p>




<p>
  <img src="http://geekhmer.github.io/images/mvc-diagram.png" width="600" alt="MVC" />
</p>




<p>
  - Models: query the database and returns the data.<br/>
  - Views: displays the model data, and sends user actions (e.g. button clicks) to the controller.<br/>
  - Controllers: handle user requests from the view, retrieve data from the Models and pass them back into the views.
</p>




<p>
  The following table briefly explains the key Laravel directories that you must know about:
</p>




<table>
  <thead>
    <tr>
      <th>Directories</th>
      <th>Descriptioin</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>app</td>
      <td>contains all of your application code.</td>
    </tr>
    <tr>
      <td>app/Console</td>
      <td>contains all of your artisan commands.</td>
    </tr>
    <tr>
      <td>app/Events</td>
      <td>contains event classes.</td>
    </tr>
    <tr>
      <td>app/Exceptions</td>
      <td>contains exception handling classes.</td>
    </tr>
    <tr>
      <td>app/Http</td>
      <td>contains controllers, filters, and requests.</td>
    </tr>
    <tr>
      <td>app/Jobs</td>
      <td>contains jobs that can be queued.</td>
    </tr>
    <tr>
      <td>app/Listeners</td>
      <td>contains handler classes for events.</td>
    </tr>
    <tr>
      <td>bootstrap</td>
      <td>contains files required by the bootstrap framework.</td>
    </tr>
    <tr>
      <td>config</td>
      <td>contains the application configuration files.</td>
    </tr>
    <tr>
      <td>database</td>
      <td>contains database migrations and seeds. It is also used to store the database for SQLite.</td>
    </tr>
    <tr>
      <td>public</td>
      <td>contains the front controllers and assets such as images, CSS, JavaScript etc.</td>
    </tr>
    <tr>
      <td>storage</td>
      <td>contains compiled blade templates, filed based sessions, etc.</td>
    </tr>
    <tr>
      <td>tests</td>
      <td>contains automated unit tests.</td>
    </tr>
    <tr>
      <td>vendor</td>
      <td>contains composer dependencies.</td>
    </tr>
  </tbody>
</table>




<p>
  <br/>
  <strong>Application Configuration</strong><br/>
  The application configuration information is located in <code>config/app.php</code>. In this section, we are going to: 
</p>




<p>
  1. Set the debugging mode – the debugging mode is used to determine how much information should be displayed when an error occurs.
</p>




<p>
  Open the file <code>config/app.php</code> and upate the following code:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;debug&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;APP_DEBUG&#39;</span><span class="p">,</span> <span class="k">false</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  To:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;debug&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;APP_DEBUG&#39;</span><span class="p">,</span> <span class="k">true</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  2. Set the time zone – this setting is used for PHP date and date-time functions. 
</p>




<p>
  Sets the time zone to UTC. This is the default value If you would like to have a different time zone, you can replace UTC with a value of your preferred time zone.
</p>




<p>
  Locate the following code:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;timezone&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;UTC&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  3. Application key – this value is used for encryption purposes.
</p>




<p>
  Update following code:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;APP_KEY&#39;</span><span class="p">,</span> <span class="s1">&#39;SomeRandomString&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  To:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="nx">env</span><span class="p">(</span><span class="s1">&#39;APP_KEY&#39;</span><span class="p">,</span> <span class="s1">&#39;inesindinemwanawabambuyabakoiwe&#39;</span><span class="p">),</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Authentication Configuration</strong><br/>
  The authentication configuration file is located in /config/auth.php. We will leave the default values as they are. If you want you can change them to meet your requirements.
</p>




<p>
  <strong>Database Configuration</strong><br/>
  The database configuration file is located in <code>config/database.php</code>. By default, MySQL will be used as the database engine. You can set it to a different database management system if you want.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Way to Develop React App with Create React App (No Build Configuration)]]></title>
    <link href="http://geekhmer.github.io/blog/2017/05/22/new-way-to-develop-react-app-with-create-react-app-no-build-configuration/"/>
    <updated>2017-05-22T00:10:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/05/22/new-way-to-develop-react-app-with-create-react-app-no-build-configuration</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/create_react_app.png" width="600" alt="New Way to Develop React App with Create React App (No Build Configuration)" />
</p>




<p>
  Setting up Gulp, Webpack, Browserify, Babel, JSX, ES6, ES6 modules, hot reloading, &#8230; etc. manually - forget about it and no more fuss with it. 
</p>




<p>
  Inspired by the cohesive developer experience provided by Ember.js Facebook wanted to provide an easy way to develop React apps, they created <a href="https://github.com/facebookincubator/create-react-app" target="_blank">create-react-app</a> with the targets zero configuration.
</p>




<p>
  <strong>Installation</strong><br/>
  You may need <a href="https://nodejs.org/en/download/" target="_blank">NPM</a> installed and you can use <a href="https://github.com/creationix/nvm#usage" target="_blank">NVM</a> to easily switch Node versions between different projects.
</p>




<p>
  The Node installation is only required for Create React App itself.
</p>




<p>
  To install create-react-app module, run:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">install</span> <span class="o">-</span><span class="n">g</span> <span class="n">create</span><span class="o">-</span><span class="n">react</span><span class="o">-</span><span class="n">app</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Creating an App</strong><br/>
  To create a new app, run:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create</span><span class="o">-</span><span class="n">react</span><span class="o">-</span><span class="n">app</span> <span class="n">geekhmer</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It will create a directory called geekhmer inside the current folder. And inside that directory, it will generate the initial project structure and install the transitive dependencies:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">geekhmer</span><span class="o">/</span>
</span><span class='line'>  <span class="no">README</span><span class="o">.</span><span class="n">md</span>
</span><span class='line'>  <span class="n">node_modules</span><span class="o">/</span>
</span><span class='line'>  <span class="n">package</span><span class="o">.</span><span class="n">json</span>
</span><span class='line'>  <span class="o">.</span><span class="n">gitignore</span>
</span><span class='line'>  <span class="kp">public</span><span class="o">/</span>
</span><span class='line'>    <span class="n">favicon</span><span class="o">.</span><span class="n">ico</span>
</span><span class='line'>    <span class="n">index</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>  <span class="n">src</span><span class="o">/</span>
</span><span class='line'>    <span class="no">App</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>    <span class="no">App</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>    <span class="no">App</span><span class="o">.</span><span class="n">test</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>    <span class="n">index</span><span class="o">.</span><span class="n">css</span>
</span><span class='line'>    <span class="n">index</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>    <span class="n">logo</span><span class="o">.</span><span class="n">svg</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  No configuration or complicated folder structures, just the files you need to build your app.
</p>




<p>
  <strong>Run the App</strong><br/>
  Runs the app in development mode:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Open http://localhost:3000 to view it in the browser.
</p>




<p>
  <strong>Run the Test</strong><br/>
  Runs the test watcher in an interactive mode:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="nb">test</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#running-tests" target="_blank">Read more about testing.</a>
</p>




<p>
  <strong>Builds the App for Production</strong><br/>
  Builds the app for production to the build folder. It correctly bundles React in production mode and optimizes the build for the best performance.
</p>




<p>
  The build is minified and the filenames include the hashes. By default, it also <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#making-a-progressive-web-app" target="_blank">includes a service worker</a> so that your app loads from local cache on future visits.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">npm</span> <span class="n">run</span> <span class="n">build</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Your app is ready to be deployed. So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation and Configuration Nginx as Reverse Proxy for Apache on Ubuntu Server]]></title>
    <link href="http://geekhmer.github.io/blog/2017/04/26/installation-and-configuration-nginx-as-reverse-proxy-for-apache-on-ubuntu-server/"/>
    <updated>2017-04-26T16:11:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/04/26/installation-and-configuration-nginx-as-reverse-proxy-for-apache-on-ubuntu-server</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_apache.jpg" width="600" alt="Installation and Configuration Nginx as Reverse Proxy for Apache on Ubuntu Server" />
</p>




<p>
  In this article, I will show you how to install and configure Nginx as a caching reverse proxy for an Apache web server on Ubuntu, Nginx is used as the front-end and Apache as the back-end. 
</p>




<p>
  Nginx will run on port 80 to respond to requests from user/browser, the request will be forwarded to the Apache server that is running on port 7070.
</p>




<p>
  <h3>Apache</h3>
</p>




<p>
  <strong>Install Apache & PHP</strong><br/>
  Log into your ubuntu server with SSH and switch to root user by running:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">su</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then install apache with the apt-get command:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">apache2</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Once apache is installed, we must install PHP as apache module for this tutorial:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">php5</span> <span class="n">php5</span><span class="o">-</span><span class="n">mysql</span> <span class="n">libapache2</span><span class="o">-</span><span class="n">mod</span><span class="o">-</span><span class="n">php5</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Configure Apache and PHP</strong><br/>
  By default, apache listens on port 80. We have to configure apache to run on port 7070 for our proxy setup as port 80 will be used by nginx later.
</p>




<p>
  If you want to change the port for apache web server, you must edit the apache configuration file <code>/etc/apache2/ports.conf</code>, and then proceed with the virtual host configuration in the <code>/etc/apache2/sites-available/</code> directory.
</p>




<p>
  First change the Apache port to 7070 by editing the file <code>ports.conf</code> with the vim editor:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="sr">/etc/</span><span class="n">apache2</span><span class="o">/</span><span class="n">ports</span><span class="o">.</span><span class="n">conf</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then change port 80 to 7070:
</p>




<figure class='code'><figcaption><span>ports.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Listen</span> <span class="mi">7070</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then save and exit.
</p>




<p>
  And now go to the virtualhost directory and edit the file <code>000-default.conf</code>:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="sr">/etc/</span><span class="n">apache2</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="mo">000</span><span class="o">-</span><span class="n">default</span><span class="o">.</span><span class="n">conf</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then make sure your configuration is same as below:
</p>




<figure class='code'><figcaption><span>000-default.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="no">VirtualHost</span> <span class="o">*</span><span class="p">:</span><span class="mi">7070</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">ServerName</span> <span class="n">www</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'>  <span class="no">ServerAlias</span> <span class="n">reverse</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">ServerAdmin</span> <span class="n">webmaster</span><span class="vi">@localhost</span>
</span><span class='line'>  <span class="no">DocumentRoot</span> <span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">html</span><span class="o">/</span><span class="n">geekhmer</span><span class="o">-</span><span class="n">dev</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="no">Directory</span> <span class="s2">&quot;/var/www/html/geekhmer-dev&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="no">RewriteEngine</span> <span class="no">On</span>
</span><span class='line'>    <span class="no">RewriteBase</span> <span class="o">/</span>
</span><span class='line'>    <span class="no">RewriteRule</span> <span class="o">^</span><span class="n">index</span><span class="p">\</span><span class="o">.</span><span class="n">php</span><span class="err">$</span> <span class="o">-</span> <span class="o">[</span><span class="n">L</span><span class="o">]</span>
</span><span class='line'>    <span class="no">RewriteCond</span> <span class="sx">%{REQUEST_FILENAME}</span> <span class="o">!-</span><span class="n">f</span>
</span><span class='line'>    <span class="no">RewriteCond</span> <span class="sx">%{REQUEST_FILENAME}</span> <span class="o">!-</span><span class="n">d</span>
</span><span class='line'>    <span class="no">RewriteRule</span> <span class="o">.</span> <span class="sr">/index.php [L]</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="no">Directory</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">ErrorLog</span> <span class="err">$</span><span class="p">{</span><span class="no">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">geekhmer</span><span class="o">-</span><span class="n">dev_error</span><span class="o">.</span><span class="n">log</span>
</span><span class='line'>  <span class="no">CustomLog</span> <span class="err">$</span><span class="p">{</span><span class="no">APACHE_LOG_DIR</span><span class="p">}</span><span class="o">/</span><span class="n">geekhmer</span><span class="o">-</span><span class="n">dev_access</span><span class="o">.</span><span class="n">log</span> <span class="n">combined</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then save and exit.
</p>




<p>
  Next test the configuration and restart apache:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apachectl</span> <span class="n">configtest</span>
</span><span class='line'>
</span><span class='line'><span class="n">systemctl</span> <span class="n">restart</span> <span class="n">apache2</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Then we verify that the apache and php is working by creating a new file with the name <code>info.php</code> in the directory <code>/var/www/html/</code>.

</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">echo</span> <span class="s2">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span> <span class="o">&gt;</span> <span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">html</span><span class="o">/</span><span class="n">info</span><span class="o">.</span><span class="n">php</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Visit your site www.reverse.com:7070/info.php.
</p>




<p>
  <h3>Nginx</h3>
</p>




<p>
  <strong>Install Nginx</strong><br/>
  Let install Nginx with the following apt-get command:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Configure Nginx</strong><br/>
  Once Nginx is installed, configure Nginx to act as reverse proxy for the apache web server that running on port 7070.
</p>




<p>
  Go to the nginx configuration directory and edit the file <code>nginx.conf</code>:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">conf</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then enable Gzip compression for Nginx by uncomment the gzip lines below:
</p>




<figure class='code'><figcaption><span>nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1"># Gzip Settings</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'><span class="n">gzip_disable</span> <span class="s2">&quot;msie6&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gzip_vary</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'><span class="n">gzip_proxied</span> <span class="n">any</span><span class="p">;</span>
</span><span class='line'><span class="n">gzip_comp_level</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'><span class="n">gzip_buffers</span> <span class="mi">16</span> <span class="mi">8</span><span class="n">k</span><span class="p">;</span>
</span><span class='line'><span class="n">gzip_http_version</span> <span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">gzip_types</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span> <span class="n">text</span><span class="o">/</span><span class="n">css</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span> <span class="n">application</span><span class="o">/</span><span class="n">javascript</span> <span class="n">text</span><span class="o">/</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">xml</span><span class="o">+</span><span class="n">rss</span> <span class="n">text</span><span class="o">/</span>    <span class="n">javascript</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The most important is:<br/>
  - gzip on : to turn gzip compression.<br/>
  - gzip_types : is list of MIME-types which you want to turn the compression.<br/>
  - gzip_proxied any : is enable compression for proxied request.
</p>




<p>
  Under gzip settings, add these proxy cache settings:
</p>




<figure class='code'><figcaption><span>nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1"># Proxy Cache Settings</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="n">proxy_cache_path</span> <span class="sr">/var/</span><span class="n">cache</span> <span class="n">levels</span><span class="o">=</span><span class="mi">1</span><span class="p">:</span><span class="mi">2</span> <span class="n">keys_zone</span><span class="o">=</span><span class="n">reverse_cache</span><span class="p">:</span><span class="mi">60</span><span class="n">m</span> <span class="n">inactive</span><span class="o">=</span><span class="mi">90</span><span class="n">m</span> <span class="n">max_size</span><span class="o">=</span><span class="mi">1000</span><span class="n">m</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The important is:<br/>
  - The directory for the proxy cache is /var/cache.<br/>
  - levels : is a directive that tells Nginx how the cache is saved in file system.
<br/>
  - key_zone : is just a name of the cache zone, you can choose it freely, but don&#8217;t add special chars or whitespace in the name. I will use the name &#8220;reverse_cache&#8221; here.
</p>




<p>
  And then save and exit.
</p>




<p>
  And then we will configure proxy params in <code>/etc/nginx/proxy_params</code> file for using in virtualhost later.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">proxy_params</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Paste the configuration below:
</p>




<figure class='code'><figcaption><span>proxy_params </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span> <span class="vg">$remote_addr</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$http_host</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">Proto</span> <span class="vg">$scheme</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">Host</span> <span class="vg">$host</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1"># Cache configuration</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="n">proxy_cache</span> <span class="n">reverse_cache</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_cache_valid</span> <span class="mi">3</span><span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_no_cache</span> <span class="vg">$cookie_PHPSESSID</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_cache_bypass</span> <span class="vg">$cookie_PHPSESSID</span><span class="p">;</span>
</span><span class='line'><span class="n">proxy_cache_key</span> <span class="s2">&quot;$scheme$host$request_uri&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">add_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Cache</span> <span class="vg">$upstream_cache_status</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then save and exit.
</p>




<p>
  Now we will configure a virtualhost in the directory <code>/etc/nginx/sites-available</code>.  And I will create a new virtualhost configuration file named <code>reverse.conf</code>. Just got to the directory and create new file with vim:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">reverse</span><span class="o">.</span><span class="n">conf</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Paste the configuration below:
</p>




<figure class='code'><figcaption><span>reverse.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Site Directory same in the apache virtualhost configuration</span>
</span><span class='line'>  <span class="n">root</span> <span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">html</span><span class="o">/</span><span class="n">geekhmer_dev</span><span class="p">;</span>
</span><span class='line'>  <span class="n">index</span> <span class="n">index</span><span class="o">.</span><span class="n">php</span> <span class="n">index</span><span class="o">.</span><span class="n">html</span> <span class="n">index</span><span class="o">.</span><span class="n">htm</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Domain</span>
</span><span class='line'>  <span class="n">server_name</span> <span class="n">www</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">com</span> <span class="n">reverse</span><span class="o">.</span><span class="n">com</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try_files</span> <span class="vg">$uri</span> <span class="vi">@proxy</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="vi">@proxy</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_pass</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">7070</span><span class="p">;</span>
</span><span class='line'>    <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">proxy_params</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">~*</span> <span class="p">\</span><span class="o">.</span><span class="n">php</span><span class="err">$</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_pass</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="p">:</span><span class="mi">7070</span><span class="p">;</span>
</span><span class='line'>    <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">proxy_params</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable Cache the file 30 days</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">~*</span> <span class="o">.</span><span class="p">(</span><span class="n">jpg</span><span class="o">|</span><span class="n">png</span><span class="o">|</span><span class="n">gif</span><span class="o">|</span><span class="n">jpeg</span><span class="o">|</span><span class="n">css</span><span class="o">|</span><span class="n">mp3</span><span class="o">|</span><span class="n">wav</span><span class="o">|</span><span class="n">swf</span><span class="o">|</span><span class="n">mov</span><span class="o">|</span><span class="n">doc</span><span class="o">|</span><span class="n">pdf</span><span class="o">|</span><span class="n">xls</span><span class="o">|</span><span class="n">ppt</span><span class="o">|</span><span class="n">docx</span><span class="o">|</span><span class="n">pptx</span><span class="o">|</span><span class="n">xlsx</span><span class="o">|</span><span class="n">css</span><span class="o">|</span><span class="n">js</span><span class="p">)</span><span class="err">$</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_cache_valid</span> <span class="mi">200</span> <span class="mi">120</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># expires max;</span>
</span><span class='line'>    <span class="n">expires</span> <span class="mi">30</span><span class="n">d</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_cache</span> <span class="n">reverse_cache</span><span class="p">;</span>
</span><span class='line'>    <span class="n">access_log</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Disable Cache for the file type html, json</span>
</span><span class='line'>  <span class="n">location</span> <span class="o">~*</span> <span class="o">.</span><span class="p">(?</span><span class="ss">:manifest</span><span class="o">|</span><span class="n">appcache</span><span class="o">|</span><span class="n">html?</span><span class="o">|</span><span class="n">xml</span><span class="o">|</span><span class="n">json</span><span class="p">)</span><span class="err">$</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">expires</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">~</span> <span class="sr">/\.ht {</span>
</span><span class='line'><span class="sr">    deny all;</span>
</span><span class='line'><span class="sr">  }</span>
</span><span class='line'><span class="sr">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then save and exit.
</p>




<p>
  And then activate the new virtualhost configuration:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">reverse</span><span class="o">.</span><span class="n">conf</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then we will test the nginx configuration and restart nginx:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nginx</span> <span class="o">-</span><span class="n">t</span>
</span><span class='line'>
</span><span class='line'><span class="n">systemctl</span> <span class="n">restart</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Nginx is configured as reverse proxy now. You can test it with curl:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">I</span> <span class="n">www</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">com</span>
</span><span class='line'>
</span><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">I</span> <span class="n">www</span><span class="o">.</span><span class="n">reverse</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">info</span><span class="o">.</span><span class="n">php</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Configure Logging</h3>
</p>




<p>
  I will configure apache to log the real ip of the visitor instead of the local IP.
</p>




<p>
  Let go to install the apache module <code>libapache2-mod-rpaf</code> and edit the module configuration file:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">libapache2</span><span class="o">-</span><span class="n">mod</span><span class="o">-</span><span class="n">rpaf</span>
</span><span class='line'>
</span><span class='line'><span class="n">vim</span> <span class="sr">/etc/</span><span class="n">apache2</span><span class="o">/</span><span class="n">mods</span><span class="o">-</span><span class="n">available</span><span class="o">/</span><span class="n">rpaf</span><span class="o">.</span><span class="n">conf</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Add the server IP to the line 10. My server IP is: 192.168.1.117.
</p>




<figure class='code'><figcaption><span>rpaf.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RPAFproxy_ips</span> <span class="mi">127</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">117</span> <span class="o">::</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then save and exit.
</p>




<p>
  And then restart apache:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">systemctl</span> <span class="n">restart</span> <span class="n">apache2</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Test rpaf by viewing the apache access log with the tail command:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tail</span> <span class="o">-</span><span class="n">f</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">apache2</span><span class="o">/</span><span class="n">geekhmer</span><span class="o">-</span><span class="n">dev_access</span><span class="o">.</span><span class="n">log</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Nginx is installed as reverse proxy in front of the Apache web server. If a visitor requests a php file, the request will be passed to apache on port 7070, and you can see the real IP visitor on the apache log file.
</p>




<p>
  <h3>Conclusion</h3>
</p>




<p>
  Nginx is fast and popular web server with low memory usage that can act as web server and reverse proxy for HTTP and HTTPS protocol. Nginx reverse proxy for apache is a setup that uses Nginx as front-end, and apache as back-end. Nginx handles the incoming request from the browser and passes it to the apache back-end. In this article, we have setup a configuration for nginx as http cache that caches PHP file requests and images.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Sales Framework for "Sell me this pen"]]></title>
    <link href="http://geekhmer.github.io/blog/2017/04/03/sell-me-this-pen/"/>
    <updated>2017-04-03T22:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/04/03/sell-me-this-pen</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/sell_me_this_pen.png" width="600" alt="Sell me this pen" />
</p>




<p>
  I personally never thought anyone would say, &#8220;Sell me this pen&#8221; in a sales interview. I was wrong. It will happen to you. And you should know exactly what to say back.
</p>




<p>
  I will give you the right sales framework to respond perfectly every time. One day it will happen to you and I want you prepare the script as below:
</p>




<p>
  Here we go:
</p>




<p>
  <strong>Interviewer: Do me a favor, sell me this pen. (reaches across to hand me the pen)</strong>
</p>




<p>
  Me: (I slowly roll the pen between my index and thumb fingers.) When was the last time you used a pen?
</p>




<p>
  <strong>Interviewer: This morning.</strong>
</p>




<p>
  Me: Do you remember what kind of pen that was?
</p>




<p>
  <strong>Interviewer: No.</strong>
</p>




<p>
  Me: Do you remember why you were using it to write?
</p>




<p>
  <strong>Interviewer: Yes. Signing a few new customer contracts.</strong>
</p>




<p>
  Me: Well I&#8217;d say that&#8217;s the best use for a pen.
</p>




<p>
  Would not you say signing those new customer contracts is an important event for the business? Then you shouldn&#8217;t treate like this. What I mean is, here you are signing new customer contracts, an important and memorable event with a very unmemorable pen.
</p>




<p>
  This is the pen for more important events. This is the tool you use to get deals done. Think of it as a symbol for taking your company to the next level. Because when you begin using the right tool, you are in a more productive state of mind, and you begin to sign more new customer contracts.
</p>




<p>
  Actually. You know? Just this week I shipped ten new boxes of these pens to many office in Phnom Penh.
</p>




<p>
  Unfortunately, this is my last pen today. So, I suggest you get this one. Try it out. If you are not happy with it, I will personally come back next week to pick it up. And it won&#8217;t cost you a dime. What do you say?
</p>




<p>
  <strong>Interviewer: Yes.</strong>
</p>




<p>
  See how simple that was. The Interviewer/Customer loved it. Why?
</p>




<p>
  <strong>Here&#8217;s the Simple Sales Framework for &#8220;Sell me this pen&#8221;</strong><br/>
  1. <code>Gather info</code> - Find out how they last used a pen<br/>
  2. <code>Respond to info</code> - Emphasize the importance of the activity they last used a pen<br/>
  3. <code>Delivery info</code> - Sell something bigger than a pen, like a state of mind<br/>
  4. <code>Closing</code> - Ask for the buy
</p>




<p>
  So far so good, remember it&#8217;s not about actually selling a pen. It&#8217;s about showing how well you can sell a product. Take 15 minutes today to practice the script above. I promise you will benefit. Share this with person in sales. It could save their career lolzzZ. See ya!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Is Website Maintenance Important?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/27/why-is-website-maintenance-important/"/>
    <updated>2017-03-27T00:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/27/why-is-website-maintenance-important</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/website_maintenance_important.png" width="600" alt="Why Is Website Maintenance Important?" />
</p>




<p>
  I saw it many times a company has a website delivered, with no changes, no additions, no fresh content and most important of all is no security updates. The website stays as it was delivered, sometimes for many years.
</p>




<p>
  You truly ask yourself: &#8220;If I like the design and the website just works, why would I need to be maintained?&#8221;. Please go through with me and read on to learn why maintenance is very important:
</p>




<p>
  <strong>SECURITY</strong><br/>
  Probably the most important thing is: keep your site safe! Website software (Content Management Systems, plug-ins and other add-ons to the website’s functionality) are constantly updated. Partly to improve how it works or to add something new and handy, but often also to patch security holes.
</p>




<p>
  Hackers are constantly looking for outdated websites or software (and known security holes). If you don’t keep up with the latest version of the software, your website could be at risk.
</p>




<p>
  <strong>ATTRACTIVENESS</strong><br/>
  A website that is regularly updated with fresh content (blog posts, news articles, promotions, new products, etc.) attracts more visitors. And isn’t that what you want to achieve with your website: attracting visitors? Visitors get a bad impression if there is old data on your website.
</p>




<p>
  Regularly create the new content, text, or images that relate to your business to attract both new and returning visits.
</p>




<p>
  <strong>GOOGLE RANKING</strong><br/>
  Google loves websites that are regularly updated. Keeping your products and services up-to-date shows search engines that your site is fresh. A site with copyright on the bottom and the &#8220;Latest News&#8221; article years out of date will not be as attractive to Google in terms of quality or usefulness. When new content is added on a regular basis, Google values this and takes that into account with the overall ranking of your website.
</p>




<p>
  Google itself provides a useful tool called &#8220;Webmaster Tools&#8221; which essentially checks the &#8216;health&#8217; of your website.
</p>




<p>
  <strong>YOUR CORPORATE IMAGE</strong><br/>
  Your website is an interface into your business and it can have a big impact on how visitors value your products or services. Your website should be kept relevant by regularly refreshing content. Also regularly check that contact forms work, addresses and phone numbers are updated and products, services and price lists are current and correct. This means visitors find what they are looking for quickly and easily, and are more likely to become customers.
</p>




<p>
  <strong>Can you do maintenance yourself?</strong><br/>
  Of course you can. The websites with Content Management Systems (like WordPress) that make it very easy to add or update content yourself. However, ask yourself: will you really do that? Will you really dedicate time every week or month to update your website’s content? And maintain those regular updates year after year? Or do you rather concentrate on your business instead of maintaining your website?
</p>




<p>
  Additionally there is one thing that&#8217;s not easy for non-technical people to do software updates. An update to your website’s software can easily break your website. Because (part of) a software is not compatible with another application.
</p>




<p>
  So far so good, let technical people do website maintenance for your business to professionals.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online Payment Gateway in Cambodia]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/24/online-payment-gateway-in-cambodia/"/>
    <updated>2017-03-24T17:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/24/online-payment-gateway-in-cambodia</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/payment_gateway.png" width="600" alt="Online Payment Gateway in Cambodia" />
</p>




<p>
  The amount of shops in Cambodia wanna sell product and service online is growing. But you truly don&#8217;t know which Online Payment Gateway you consider to choose for implement and do integration right? 
</p>




<p>
  The good news is here, take it easy I will do a presentaion for you, let go through with me:
</p>




<p>
  <strong>PayPal</strong><br/>
  <a href="https://www.paypal.com" target="_blank">PayPal</a> is by far the easiest method to receive online payments made by credit card or via PayPal itself. However, the company has <a href="https://www.paypal.com/kh/cgi-bin/webscr?cmd=_display-xborder-fees-outside&countries=" target="_blank">no relations with any bank in Cambodia.</a>
</p>




<p>
  So it&#8217;s not possible right? Well, the only possibility is to have a bank account in another country linked to your PayPal account.
</p>




<p>
  <strong>Cathay United Bank</strong><br/>
  <a href="http://www.cathaybk.com.kh/index.php?view=bzspgwy" target="_blank">Cathay United Bank (formerly SBC Bank)</a> in Cambodia offers an online payment gateway, which is rather easy to implement.
</p>




<p>
  Of course, you need an account with the bank and Cathay United charges a percentage fee for this service. It only can handle credit cards of MasterCard, JCB and VISA, which is a bit limited.
</p>




<p>
  <strong>ACLEDA Bank</strong><br/>
  As a well respected bank, ACLEDA is a bit late to the party, only announcing recently their <a href="http://www.acledabank.com.kh/kh/eng/ps_ebecommerce_migs" target="_blank">E-Commerce Payment Gateway</a>.
</p>




<p>
  ACLEDA uses the same MasterCard Internet Gateway Service (MiGS) as Cathay United Bank, so this is just as easy to set up on your website.
</p>




<p>
  <strong>WING</strong><br/>
  WING is primarily a phone-to-phone payment service and very popular among Cambodians. They can send and receive money nationwide, the company has a large network of agents and also offers a solution for <a href="https://www.wingmoney.com/online-payment/" target="_blank">online payments</a>. The only thing you have to do is open a free business account. Once that’s done you’ll get instructions on how to implement it on your website to receive online payments in your Wing account. This service is only available for customers within Cambodia.
</p>




<p>
  <strong>PayGo</strong><br/>
  <a href="https://www.paygo24.com/" target="_blank">PayGo</a> is a service provided by ABA Bank. To use the service, customers first have to sign up using a mobile phone number. This only works for Cambodian phone numbers, so not suitable for international customers. Although it is convenient for customers in Cambodia, we have some doubts about the security of this system. Only using a phone number as a check seems not very secure.
</p>




<p>
  My suggestion for you is that:<br/>
</p>




<p>
  Due PayPal not yet entered in Cambodian market, the services offered by Cathay United Bank and ACLEDA Bank seem the most robust, secure and comparatively easy to implement.
</p>




<p>
  And if you only or primarily target customers within Cambodia, WING and PayGo can be an alternative.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Income on the Internet Using Social Media]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/21/generating-income-on-the-internet-using-social-media/"/>
    <updated>2017-03-21T10:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/21/generating-income-on-the-internet-using-social-media</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/internet_marketing.png" width="600" alt="Generating Income on the Internet Using Social Media" />
</p>




<p>
  Once it comes to generating income on the Internet using social media, there are a few principles which you need to understand.
</p>




<p>
  <strong>1. INTRODUCE YOURSELF</strong><br/>
  The first thing you need to know is how to introduce yourself, whether video or article platform.
</p>




<p>
  People are busy, you need to think of how you can introduce yourself in under 15 seconds. Get to the right point.
</p>




<p>
  Take sometime to come up with a way to do it, and remember the words you used because you’ll need to do it the same way every time you introduce yourself on the same platform.
</p>




<p>
  As well, keep in mind that among the people who log into your scope, some might not have heard of you before, so you need to not just introduce yourself quickly, but you need to be able to capture and hold their attention/interest.
</p>




<p>
  Within that 15 seconds of your introduction, you need to be able to make people understand who you are and what you do.
</p>




<p>
  <strong>2. HAVE A PRODUCT TO PROMOTE</strong><br/>
  The second thing that you will need to have is a product to promote.
</p>




<p>
  There are two ways for you to do this:<br/>
  - Promote your own product for 100% of the profit<br/>
  - Promote someone else’s product for a commission
</p>




<p>
  You decide – you could sell a product on Amazon, Alibabaor or sell a product yourself on your own website or mobile platform.<br/>
</p>




<p>
  You must have a product!
</p>




<p>
  <strong>3. HAVE A CALL TO ACTION</strong><br/>
  The third thing you need is a call to action – What is &#8220;A call to action&#8221;? It mean that you must tell people what to do next.
</p>




<p>
  If you don’t have a call to action, then no action will be taken.
</p>




<p>
  At the end of the scope tell people that:
</p>




<p>
  &#8220;If you like what you have just known, head over or go through to my website.&#8221;
</p>




<p>
  Or you could tell them: &#8220;If you liked this scope, please follow me on twitter, facebook page&#8230; and join me for the next one.&#8221;
</p>




<p>
  Every time you present, you must always have a call to action.
</p>




<p>
  So these are the three things that you want to have to really master and get thousands of people to your social media. So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy to Clipboard without Flash with Clipboard.js]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/19/copy-to-clipboard-without-flash-with-clipboard-dot-js/"/>
    <updated>2017-03-19T23:34:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/19/copy-to-clipboard-without-flash-with-clipboard-dot-js</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/clipboardjs.png" width="400" alt="Copy to Clipboard without Flash with Clipboard.js" />
</p>




<p>
  Well, in this article I gonna show you how to easily implement the ability to copy data to the <a href="https://clipboardjs.com/" target="_blank">clipboard</a>. In order to implement it I will clipboard.js javascript library, let get started with me:
</p>




<h3>Installation</h3>




<p>
  The first thing I need to do is include the clipboard.js library file in head tag of the application: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;https://cdn.jsdelivr.net/clipboard.js/1.5.12/clipboard.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you don&#8217;t wish to use a CDN, you can download the clipboard in other ways:<br/>
  - Using npm, by running <code>npm install clipboard --save</code><br/>
  - Using bower, by running <code>bower install clipboard --save</code><br/>
  - By downloading a zip file from the <a href="https://github.com/zenorocha/clipboard.js/archive/master.zip" target="_blank">clipboard.js github page</a> and referencing it in your HTML.
</p>




<h3>Usage</h3>




<p>
  <strong>Copy text from another element:</strong> A pretty common use case is to copy content from another element. You can do that by adding a <code>data-clipboard-target</code> attribute in your trigger element. The value you include on this attribute needs to match another&#8217;s element selector.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="no">Target</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;https://github.com/zenorocha/clipboard.js.git&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;!--</span> <span class="no">Trigger</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">button</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">clipboard</span><span class="o">-</span><span class="n">target</span><span class="o">=</span><span class="s2">&quot;#foo&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;assets/clippy.svg&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s2">&quot;Copy to clipboard&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Cut text from another element:</strong> Additionally, you can define a <code>data-clipboard-action</code> attribute to specify if you want to either <code>copy</code> or <code>cut</code> content. If you omit this attribute, <code>copy</code> will be used by default.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="no">Target</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">textarea</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span><span class="o">&gt;</span><span class="no">Mussum</span> <span class="n">ipsum</span> <span class="n">cacilds</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/textarea&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;!-- Trigger --&gt;</span>
</span><span class='line'><span class="sr">&lt;button class=&quot;btn&quot; data-clipboard-action=&quot;cut&quot; data-clipboard-target=&quot;#bar&quot;&gt;</span>
</span><span class='line'><span class="sr">    Cut to clipboard</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">button</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As you may expect, the cut action only works on input or textarea elements.
</p>




<p>
  <strong>Copy text from attribute:</strong> Truth is, you don&#8217;t even need another element to copy its content from. You can just include a <code>data-clipboard-text</code> attribute in your trigger element.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="no">Trigger</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">button</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">clipboard</span><span class="o">-</span><span class="n">text</span><span class="o">=</span><span class="s2">&quot;Just because you can doesn&#39;t mean you should — clipboard.js&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="no">Copy</span> <span class="n">to</span> <span class="n">clipboard</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<h3>Events</h3>




<p>
  There are cases where you&#8217;d like to show some user feedback or capture what has been selected after a copy/cut operation.
</p>


<p></p>

<p>
  That&#8217;s why we fire custom events such as success and error for you to listen and implement your custom logic.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">clipboard</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">Clipboard</span><span class="p">(</span><span class="s1">&#39;.btn&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">clipboard</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;success&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Action:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">action</span><span class="p">);</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Text:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">text</span><span class="p">);</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Trigger:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">trigger</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">e</span><span class="o">.</span><span class="n">clearSelection</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">clipboard</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="n">function</span><span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">&#39;Action:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">action</span><span class="p">);</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">&#39;Trigger:&#39;</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">trigger</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Status Code and Symbols]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/16/http-status-code-and-symbols/"/>
    <updated>2017-03-16T21:36:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/16/http-status-code-and-symbols</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/list_http.jpg" width="600" alt="HTTP Status Code and Symbols" />
</p>




<p>
  Thanks to Cody Fauser for this list of HTTP responce codes and their Ruby on Rails or other Framework symbol mappings. Let go through the status code symbol below:
</p>




<p>
  <strong>1xx Informational</strong><br/>
  100 :continue<br/>
  101 :switching_protocols<br/>
  102 :processing
</p>




<p>
  <strong>2xx Success</strong><br/>
  200 :ok<br/>
  201 :created<br/>
  202 :accepted<br/>
  203 :non_authoritative_information<br/>
  204 :no_content<br/>
  205 :reset_content<br/>
  206 :partial_content<br/>
  207 :multi_status<br/>
  226 :im_used
</p>




<p>
  <strong>3xx Redirection</strong><br/>
  300 :multiple_choices<br/>
  301 :moved_permanently<br/>
  302 :found<br/>
  303 :see_other<br/>
  304 :not_modified<br/>
  305 :use_proxy<br/>
  307 :temporary_redirect
</p>




<p>
  <strong>4xx Client Error</strong><br/>
  400 :bad_request<br/>
  401 :unauthorized<br/>
  402 :payment_required<br/>
  403 :forbidden<br/>
  404 :not_found<br/>
  405 :method_not_allowed<br/>
  406 :not_acceptable<br/>
  407 :proxy_authentication_required<br/>
  408 :request_timeout<br/>
  409 :conflict<br/>
  410 :gone<br/>
  411 :length_required<br/>
  412 :precondition_failed<br/>
  413 :request_entity_too_large<br/>
  414 :request_uri_too_long<br/>
  415 :unsupported_media_type<br/>
  416 :requested_range_not_satisfiable<br/>
  417 :expectation_failed<br/>
  422 :unprocessable_entity<br/>
  423 :locked<br/>
  424 :failed_dependency<br/>
  426 :upgrade_required
</p>




<p>
  <strong>5xx Server Error</strong><br/>
  500 :internal_server_error<br/>
  501 :not_implemented<br/>
  502 :bad_gateway<br/>
  503 :service_unavailable<br/>
  504 :gateway_timeout<br/>
  505 :http_version_not_supported<br/>
  507 :insufficient_storage<br/>
  510 :not_extended
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I do combining apache and nginx together?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/13/why-i-do-combining-apache-and-nginx-together/"/>
    <updated>2017-03-13T10:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/13/why-i-do-combining-apache-and-nginx-together</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_apache.jpg" width="600" alt="Why I do combining apache and nginx together?" />
</p>




<p>
  Nginx and apache are powerful and effective servers by nowadays. Apache currently reigns as the number 1 server for websites and since its public release in 2006. And nginx has taken the world by storm and is now the number 2 server for active sites. 
</p>




<h3>The Reason Why I Use Nginx and Apache Together is</h3>




<p>
  <strong>Nginx</strong><br/>
  - nginx serves static files (images, css, html etc.) really fast and efficient and passes php and .htaccess requests to apache for processing.<br/>
  - nginx needs the help of php-fpm or similar modules for dynamic content.
</p>




<p>
  <strong>Apache</strong><br/>
  - apache is hard on server memory.<br/>
  - apache serves php and .htaccess (most cms site like wordpress needs it for rewrite) and if you throw in a php opcode cache like zend opcache or xcache it should serve php even faster.
</p>




<p>
  <strong>nginx + apache with php opcache = performance and server resource efficiency</strong>
</p>




<p>
  So far so good, in the next article I will show you the configurations. That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create content with multiple features with CKEditor Gem]]></title>
    <link href="http://geekhmer.github.io/blog/2017/01/05/create-content-with-multiple-features-with-ckeditor-gem/"/>
    <updated>2017-01-05T23:13:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/01/05/create-content-with-multiple-features-with-ckeditor-gem</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ckeditor.png" width="600" alt="Create content with multiple features with CKEditor Gem" />
</p>




<p>
  <strong>Setup & Usage</strong><br/>
  First, we need to add the CKEditor gem to our Gemfile. Open up your Gemfile and add the line listed below:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;ckeditor&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, open up the terminal and run a bundle install to install the gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now lets create a sample model and accompanying controller that will be used to store our data. Open up and run the command below to create the Magazine model and migrate the database:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">resource</span> <span class="no">Magazine</span> <span class="n">title</span> <span class="ss">body</span><span class="p">:</span><span class="n">text</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, open your routes file and add the following line to your routes:
</p>




<figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;magazines#index&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, lets add the CKEditor javascript include to our application.js. Modify your application.js file so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span> <span class="no">This</span> <span class="n">is</span> <span class="n">a</span> <span class="n">manifest</span> <span class="n">file</span> <span class="n">that</span><span class="s1">&#39;ll be compiled into application.js, which will include all the files</span>
</span><span class='line'><span class="s1">// listed below.</span>
</span><span class='line'><span class="s1">//</span>
</span><span class='line'><span class="s1">// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,</span>
</span><span class='line'><span class="s1">// or any plugin&#39;</span><span class="n">s</span> <span class="n">vendor</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">javascripts</span> <span class="n">directory</span> <span class="n">can</span> <span class="n">be</span> <span class="n">referenced</span> <span class="n">here</span> <span class="n">using</span> <span class="n">a</span> <span class="n">relative</span> <span class="n">path</span><span class="o">.</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span> <span class="no">It</span><span class="s1">&#39;s not advisable to add code directly here, but if you do, it&#39;</span><span class="n">ll</span> <span class="n">appear</span> <span class="n">at</span> <span class="n">the</span> <span class="n">bottom</span> <span class="n">of</span> <span class="n">the</span>
</span><span class='line'><span class="sr">//</span> <span class="n">compiled</span> <span class="n">file</span><span class="o">.</span> <span class="no">JavaScript</span> <span class="n">code</span> <span class="k">in</span> <span class="n">this</span> <span class="n">file</span> <span class="n">should</span> <span class="n">be</span> <span class="n">added</span> <span class="n">after</span> <span class="n">the</span> <span class="n">last</span> <span class="n">require_</span><span class="o">*</span> <span class="n">statement</span><span class="o">.</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span> <span class="no">Read</span> <span class="no">Sprockets</span> <span class="no">README</span> <span class="p">(</span><span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">rails</span><span class="o">/</span><span class="n">sprockets</span><span class="c1">#sprockets-directives) for details</span>
</span><span class='line'><span class="sr">//</span> <span class="n">about</span> <span class="n">supported</span> <span class="n">directives</span><span class="o">.</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">jquery</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">jquery_ujs</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">ckeditor</span><span class="o">/</span><span class="n">init</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">turbolinks</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="n">require_tree</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now we need to add some code to the magazines controller. Add the following code to the magazines controller:
</p>




<figure class='code'><figcaption><span>magazines_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MagazinesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@magazines</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="s2">&quot;created_at DESC&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">magazine_params</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@magazine</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">magazines_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;The magazines has been successfully created.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;new&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">edit</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="vi">@magazine</span> <span class="o">=</span> <span class="no">Magazine</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@magazine</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">magazine_params</span><span class="p">)</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="n">magazines_path</span><span class="p">,</span> <span class="ss">notice</span><span class="p">:</span> <span class="s2">&quot;The magazine has been successfully updated.&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">action</span><span class="p">:</span> <span class="s2">&quot;edit&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">magazine_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:magazine</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:body</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This code enables the ability to read, write, and update the magazines in our example. Now for the views, first lets create the index view:
</p>




<figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= link_to &quot;New Magazine&quot;, new_magazine_path %&gt;</span>
</span><span class='line'><span class="sx">&lt;% @magazines.each do |magazine| %&gt;</span>
</span><span class='line'><span class="sx">  &lt;h3&gt;&lt;%=</span> <span class="n">magazine</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">html_safe</span> <span class="sx">%&gt;&lt;/h3&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&lt;</span><span class="sx">%= magazine.body.html_safe %&gt;&lt;/p&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">link_to</span> <span class="s2">&quot;Edit Magazine&quot;</span><span class="p">,</span> <span class="n">edit_magazine_path</span><span class="p">(</span><span class="n">magazine</span><span class="p">)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;% if magazine != @magazines.last %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">hr</span> <span class="sr">/&gt;</span>
</span><span class='line'><span class="sr">  &lt;% end %&gt;</span>
</span><span class='line'><span class="sr">&lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, lets create a partial to store the form. Create a file called app/views/_form.html.erb and add the code listed below:
</p>




<figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">% if </span><span class="vi">@magazine</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;ul&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= @magazine.errors.full_messages.each do |message| %&gt;</span>
</span><span class='line'><span class="sx">        &lt;li&gt;&lt;%=</span> <span class="n">message</span> <span class="sx">%&gt;&lt;/li&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/ul&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;%= form_for @magazine do |f| %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :title %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">  &lt;div&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:title</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= f.label :body %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">  &lt;div&gt;</span>
</span><span class='line'><span class="sx">    &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">cktext_area</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">rows</span><span class="p">:</span> <span class="mi">10</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, lets create the new view. Create the app/views/magazines/new.html.erb file and add the code listed below:
</p>




<figure class='code'><figcaption><span>new.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span> <span class="no">New</span> <span class="no">Magazine</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">&lt;%= render &quot;form&quot; %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, if you visit the new magazines page on your development server you will see that CKEditor appears.
</p>




<p>
  Next lets create the edit view. Create the app/views/magazines/edit.html.erb file and add the code listed below:
</p>




<figure class='code'><figcaption><span>edit.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= &quot;Editing </span><span class="si">#{</span><span class="vi">@magazine</span><span class="o">.</span><span class="n">title</span><span class="si">}</span><span class="sx">&quot; %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">render</span> <span class="s2">&quot;form&quot;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now when you click &#8216;edit magazine&#8217; on any magazine, it will show the CKEditor for editing.
</p>




<p>
  <strong>Images Using Paperclip</strong><br/>
  In order to integrate images via paperclip, a few more steps are required. Note that you must have ImageMagick installed for this to work. First, lets include the paperclip gem:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;paperclip&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, we need to run a generator provided by ckeditor. This generator will create the necessary models that will be used to store image data. Run the command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">ckeditor</span><span class="p">:</span><span class="n">install</span> <span class="o">--</span><span class="n">orm</span><span class="o">=</span><span class="n">active_record</span> <span class="o">--</span><span class="n">backend</span><span class="o">=</span><span class="n">paperclip</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, if you restart your rails server and refresh the page, you will be able to click the images button, upload an image, and insert it into your articles.
</p>

]]></content>
  </entry>
  
</feed>
