<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-01-16T22:19:08+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang Variables]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/erlang-variables/"/>
    <updated>2015-01-16T21:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/erlang-variables</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  Erlang is a dynamic datatyping programming language. That means that when &#8220;declaring&#8221; a variable you do not need to statically specify the datatypes. For example, this is how we declare and initialize an integer in Erlang:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span> <span class="o">=</span> <span class="mi">17</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This approach has both advantages and disadvantages. Advantages: when programming, it is fast and convenient as we don&#8217;t need to declare the variables’ typetypes. Disadvantages: In big projects it can lead to code readability problems unless well documented.
</p>




<p>
  <strong>Variables Declaration</strong><br/>
  Erlang is influenced by <a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a>. As with Prolog variables is a string consisting of letters, numbers and underscore characters, and beginning with an upper-case letter or underscore.<br/>
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span>
</span><span class='line'><span class="no">Name1</span>
</span><span class='line'><span class="no">PhoneNumber</span>
</span><span class='line'><span class="no">Phone_number</span>
</span><span class='line'><span class="n">_</span>
</span><span class='line'><span class="n">_Height</span>
</span><span class='line'><span class="o">[</span><span class="n">H</span><span class="o">|</span><span class="n">_</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Variable Assignement</strong><br/>
  Another feature that Erlang inherited from Prolog is binding with pattern matching. In a nutshell, a value is not assigned to a variable but bound with pattern matching. The most important thing is that variables in Erlang are single assignement, it mean that once bound to a value, their value cannot change for their lifetime.<br/>
</p>




<p>
  Example (open terminator and try the following):
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Age</span> <span class="o">=</span> <span class="mi">10</span><span class="o">.</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Age</span> <span class="o">=</span> <span class="mi">11</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We will get an error:
</p>




<p>
  <code>** exception error: no match of right hand side value 11</code>
</p>




<p>
  The problem is that A is bound to the value 10, so Erlang tries to pattern match 10 with the value 11 which is impossible.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Erlang and Chicagoboss Framework]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/introduction-to-erlang-and-chicagoboss-framework/"/>
    <updated>2015-01-16T08:38:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/introduction-to-erlang-and-chicagoboss-framework</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Introduction to Erlang and Chicagoboss Framework" />
</p>




<p>
  <strong><a href="http://www.erlang.org/" target="_blank">Erlang</a></strong> is a programming language used to build massively scalable soft real-time systems with requirements on high availability. Some of its uses are in telecoms, banking, e-commerce, computer telephony and instant messaging. Erlang&#8217;s runtime system has built-in support for concurrency, distribution and fault tolerance.
</p>




<p>
  <strong>Erlang</strong> is the most advanced open-source server platform in existence, but it seems almost no one knows about it. <strong>Erlang</strong> can handle hundreds of thousands of simultaneous connections, it can spawn millions of simultaneous processes in under a second, server code can be upgraded, in production, without any interruption of service, and errors are handled in such a way that server crashes are extremely uncommon.
</p>




<p>
  What is not to like? Why isn&#8217;t the entire world programming in <strong>Erlang</strong>? Well, <strong>Erlang</strong> is a functional language, which means that to implement any algorithms, you must use recursion instead of familiar “for” and “while” loops. Unlike every major scripting language, there is no built-in syntax for dictionaries or hash maps. And to actually write a functioning server, you must learn an additional layer of magic known as OTP. These barriers, in my opinion, have prevented <strong>Erlang</strong> from gaining much traction outside of Scandinavia.
</p>




<p>
  <img src="http://geekhmer.github.io/images/logo_chicagoboss.svg" alt="Introduction to Erlang and Chicagoboss Framework" />
</p>




<p>
  But <strong><a href="http://www.chicagoboss.org/" target="_blank">Chicagoboss Framwork</a></strong> changes all that. It makes <strong>Erlang</strong> accessible to hackers
  who just want to write a reliable website in a nifty language. Boss uses code generation to get around the historic hash-map quandary, and takes care of all the OTP business so that you can focus on writing the features you need for your website. As for the supposed burdens of functional programming, I find that recursion is rarely necessary in workaday web programming; I would guess that 99% of server application code simply shuttles data to and from a database, so in the course of building a website, the pedestrian procedural programmer will hardly miss his “do/while” loops.
</p>




<p>
  If you are an experienced web programmer, you&#8217;ll probably enjoy all the
  amenities that CB has to offer: an advanced ORM with support for database associations, sharding, and caching. lightning-fast templates compiled down to <strong>Erlang</strong> bytecode, automatic recompiling and in-browser error reporting, simple directives for reloads and redirects, routes for constructing URLs and handling requests, full frameworks for sending and receiving email, a built-in message queue, a framework for writing and running functional tests, and a first-of-its-kind event system for monitoring the data model.
</p>




<p>
  In the end, by combining the <strong>Erlang</strong> platform with its own innovations,
  <strong>Chicagoboss Framwork</strong> makes websites a delight to develop and a joy to deploy. Boss applications can be written in the same time or less as equivalent Rails applications, and they will almost never crash or leak memory. Since the underlying networking is all asynchronous, you can easily write concurrent services, such as chat, that previously were only possible in callback-based frameworks (such as Nginx, Node.js, Twisted, or Perlbal).
</p>




<p>
  The importance of this advancement cannot be overstated. It is now feasible for a very small team to develop and operate a database-driven, highly interactive, heavily trafficked website with very little capital outlay. Although <strong>Chicagoboss Framwork</strong> can’t tell you how to acquire users, the rest of this manual will show you everything you need to do to handle their requests and (with luck) fulfill their desires.
</p>




<p>
  Reference: <a href="http://www.erlang.org/" target="_blank">www.erlang.org</a>, <a href="http://www.chicagoboss.org/" target="_blank">www.chicagoboss.org</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Erlang Learning Sequence]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/15/the-erlang-learning-sequence/"/>
    <updated>2015-01-15T09:10:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/15/the-erlang-learning-sequence</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="The Erlang Learning Sequence" />
</p>




<p>
  While I was writing my first article (<a href="http://geekhmer.github.io/blog/2014/06/26/why-erlang/">Why Erlang?</a>). I realized that since Erlang is not a popular programming language it would be nice to start an introduction to The Erlang Learning Sequence.
</p>




<p>
  I consider Erlang as a must-know language for an engineer that works with distributed systems and parallel programming. Believe me! in several cases Erlang is a problem solver.
</p>




<p>
  I will keep posting of short and example based. The approximation of the posts that I intend to write is:
</p>




<p>
  1. Introduction to Erlang & Chicagoboss Framework<br/>
  2. Variables<br/>
  3. Datatypes<br/>
  4. Modules and Compiling<br/>
  5. Functions<br/>
  6. Recursion<br/>
  7. Predefined Module<br/>
  8. List & List Module<br/>
  9. List Comprehension<br/>
  10. Concurrency (Processes)<br/>
  11. Message Passing<br/>
</p>




<p>
  So far so good, I will keep this list updated in case that I come up with new ideas! I hope I will convince you that Erlang worths for every software engineer’s attention. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Emacs Erlang Editor/IDE]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/14/install-emacs-erlang-editor-slash-ide/"/>
    <updated>2015-01-14T23:17:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/14/install-emacs-erlang-editor-slash-ide</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Install Emacs Erlang Editor/IDE" />
</p>




<p>
  Currently I personally use Emacs for programming in Erlang. There is an Erlang editing mode in Emacs. Well, I can help you to install Emacs and set Erlang mode in Emacs. So, let&#8217;s do it!
</p>




<p>
  <strong>Install Emacs</strong><br/>
  Run commands below to install Emacs:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">add</span><span class="o">-</span><span class="n">repository</span> <span class="ss">ppa</span><span class="p">:</span><span class="n">cassou</span><span class="o">/</span><span class="n">emacs</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">emacs24</span> <span class="n">emacs24</span><span class="o">-</span><span class="n">el</span> <span class="n">emacs24</span><span class="o">-</span><span class="n">common</span><span class="o">-</span><span class="n">non</span><span class="o">-</span><span class="n">dfsg</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Set Erlang Mode in Emacs</strong><br/>
  To set Erlang mode in Emacs add the following codes to file ~/.emacs:
</p>




<figure class='code'><figcaption><span>.emacs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">defun</span> <span class="n">my</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="n">setq</span> <span class="n">inferior</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">machine</span><span class="o">-</span><span class="n">options</span> <span class="s1">&#39;(&quot;-sname&quot; &quot;emacs&quot;))</span>
</span><span class='line'><span class="s1">  (imenu-add-to-menubar &quot;imenu&quot;)</span>
</span><span class='line'><span class="s1">)</span>
</span><span class='line'><span class="s1">(add-hook &#39;</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span> <span class="err">&#39;</span><span class="n">my</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, hope the article could helped you. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Erlang Using Repository on Ubuntu]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu/"/>
    <updated>2015-01-14T21:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Install Erlang on Ubuntu" />
</p>




<p>
  <strong>1. Adding Repository Entry</strong><br/>
  To add Erlang repository to your system, pls call the following commands:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="o">.</span><span class="mi">0</span><span class="n">_all</span><span class="o">.</span><span class="n">deb</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">dpkg</span> <span class="o">-</span><span class="n">i</span> <span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="o">.</span><span class="mi">0</span><span class="n">_all</span><span class="o">.</span><span class="n">deb</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Or Adding the Repository Entry Manually</strong><br/>
  Add one of the following lines to your /etc/apt/sources.list:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span> <span class="n">trusty</span> <span class="n">contrib</span>
</span><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span> <span class="n">saucy</span> <span class="n">contrib</span>
</span><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span> <span class="n">precise</span> <span class="n">contrib</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And next, add the Erlang public key for apt-secure using following commands:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="o">/</span><span class="n">erlang_solutions</span><span class="o">.</span><span class="n">asc</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">key</span> <span class="n">add</span> <span class="n">erlang_solutions</span><span class="o">.</span><span class="n">asc</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>2. Install Erlang</strong><br/>
  To install Erlang to your system, pls call the following commands:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">erlang</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, hope you enjoyed the article. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chicagoboss Publish/Subscribe]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/10/chicagoboss-publish-slash-subscribe/"/>
    <updated>2015-01-10T23:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/10/chicagoboss-publish-slash-subscribe</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Chicagoboss Publish/Subscribe" />
</p>




<p>
  In software architecture, publish–subscribe is a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers. Instead, published messages are characterized into classes, without knowledge of what, if any, subscribers there may be. Similarly, subscribers express interest in one or more classes, and only receive messages that are of interest, without knowledge of what, if any, publishers there are.
</p>




<p>
  Pub/sub is a sibling of the message queue paradigm, and is typically one part of a larger message-oriented middleware system. Most messaging systems support both the pub/sub and message queue models in their API.
</p>




<p>
  Actually Chicagoboss ships with a message queue service called <strong>BossMQ</strong>. The service consists of named channels which follow a <strong>publish/subscribe</strong> architecture; any Erlang process can publish or subscribe to any channel, and Erlang term can be sent as a message. Channels need not be explicitly created or destroyed; they are created on demand for publishers or subscribers, and automatically destroyed after a certain (configurable) amount of time. <strong>BossMQ</strong> runs in clustered configurations just as well as a single-machine setup.
</p>




<p>
  <strong>Process</strong>
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/chicagoboss_publish_subscribe.png"><img src="http://geekhmer.github.io/images/chicagoboss_publish_subscribe.png" width="680" /></a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Develop Your Own Gem and Gemify Your Own Assets Using Rails Engine]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/02/develop-your-own-gem-and-gemify-your-own-assets-using-rails-engine/"/>
    <updated>2015-01-02T23:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/02/develop-your-own-gem-and-gemify-your-own-assets-using-rails-engine</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rubygems_logo.png" alt="Develop Your Own Gem and Gemify Your Own Assets Using Rails Engine" />
</p>




<p>
  The Rails asset pipeline, powered by sprockets, compiles (sass, coffeescript, others), aggregates (combines multiple source files into one file for performance purposes), and post-processes (minimization, gzip’ing) your assets. And which make it easy to include versioned external assets as application dependencies as well.
</p>




<p>
  External assets are made available in Rails via Rails engines. When the engine is loaded into your Rails application, the engine&#8217;s asset paths are added to your application&#8217;s load paths. This makes them available for require in your manifest files. An asset gem is just an absurdly simple engine.
</p>




<p>
  You will find almost any JS or CSS library you want, already Gemified, but, if it is not the case, you can Gemify those libraries by your own, and I can help you with it. So, let&#8217;s do it!
</p>




<p>
  <strong>Create a bare-bones Gem:</strong><br/>
  Bundler makes it simple to create the files and directories necessary for creating a gem. Run the following command to create and initialize a Git repository along with several template files for the gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">gem</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This command will create basically the following tree:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">├──</span> <span class="no">Gemfile</span>
</span><span class='line'><span class="err">├──</span> <span class="n">lib</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">timeago</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>           <span class="err">└──</span> <span class="n">version</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">├──</span> <span class="no">LICENSE</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="err">├──</span> <span class="no">Rakefile</span>
</span><span class='line'><span class="err">├──</span> <span class="no">README</span><span class="o">.</span><span class="n">md</span>
</span><span class='line'><span class="err">└──</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span><span class="o">.</span><span class="n">gemspec</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Versioning</strong><br/>
  timeago-rails is a gem packaged version of the timeago.js library. Its version should track the version of JavaScript library. Open /lib/timeago/rails/version.rb and set the version:
</p>




<figure class='code'><figcaption><span>version.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Timeago</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Rails</span>
</span><span class='line'>    <span class="no">VERSION</span> <span class="o">=</span> <span class="s2">&quot;1.4.1&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Turn the Gem into an Engine</strong><br/>
  Bundler created the gem as a standard Ruby module, but we want it to be a Rails Engine.
</p>




<figure class='code'><figcaption><span>rails.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;timeago/rails/version&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Timeago</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Rails</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Engine</span> <span class="o">&lt;</span> <span class="o">::</span><span class="ss">Rails</span><span class="p">:</span><span class="ss">:Engine</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, the module is empty. All we&#8217;re doing here is declaring the gem as a Rails Engine. This will cause Rails to add its directories to the load path when the Gem is required.
</p>




<p>
  <strong>Add the Assets (Javascript library, CSS, Image) in the Gem</strong><br/>
  We&#8217;re going to create the directory /vendor/images/, /vendor/javascripts/, vendor/stylesheets/ and place the source for the timeago.js plugin there:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">├──</span> <span class="no">Gemfile</span>
</span><span class='line'><span class="err">├──</span> <span class="n">lib</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">timeago</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>           <span class="err">└──</span> <span class="n">version</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">├──</span> <span class="no">LICENSE</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="err">├──</span> <span class="no">Rakefile</span>
</span><span class='line'><span class="err">├──</span> <span class="no">README</span><span class="o">.</span><span class="n">md</span>
</span><span class='line'><span class="err">├──</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span><span class="o">.</span><span class="n">gemspec</span>
</span><span class='line'><span class="err">└──</span> <span class="n">vendor</span>
</span><span class='line'>         <span class="err">└──</span> <span class="n">assets</span>
</span><span class='line'>                  <span class="err">├──</span> <span class="n">images</span>
</span><span class='line'>                  <span class="err">├──</span> <span class="n">javascripts</span>
</span><span class='line'>                  <span class="err">│</span>             <span class="err">└──</span> <span class="n">timeago</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>                  <span class="err">└──</span> <span class="n">stylesheets</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Test</strong><br/>
  Moving to a sample Rails application, we can include the gem in our host application by adding it to the Gemfile using the path option:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;timeago-rails&quot;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;../timeago-rails&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Since we included an asset that needs to be included in the Rails assets, we have to take one more step and instruct the user to add the following to their app/assets/javascripts/application.js file:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This directive actually refers to the app/assets/javascripts/timeago.js file we included in our gem.
</p>




<p>
  Type command below to make sure timeago.js is included in sample Rails application:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">timeago</span><span class="o">.</span><span class="n">js</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The curl command should return the contents of the timeago.js file if everything is correctly.
</p>




<p>
  <strong>README.md</strong><br/>
  Make a simple readme file with the Gem as documentation.
</p>




<p>
  <strong>Push to GitHub & RubyGems</strong><br/>
  Create a GitHub repository for the Gem, stage all of your commits, commit, and push the code to GitHub.
</p>




<p>
  If you&#8217;ve never published a gem on RubyGems before, you&#8217;ll need to sign up for an account there. Your account settings will contain an API key that should be copied to ~/.gem/credentials.
</p>




<p>
  Publishing your gem is as simple as:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">release</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, hope you enjoyed the article. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Ruby on Rails Application to a Ubuntu Server]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/01/deploy-ruby-on-rails-application-to-a-ubuntu-server/"/>
    <updated>2015-01-01T00:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/01/deploy-ruby-on-rails-application-to-a-ubuntu-server</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Tools for Monitoring Performance in Ruby on Rails Application" />
</p>




<p>
  Assumes you have Ruby on Rails application already.
</p>




<p>
  <strong>Setup Ruby Version, Unicorn and Capistrano</strong><br/>
  Specifiy a ruby version for your app by creating a new file in the root of your app called &#8220;.ruby-version&#8221; that includes:
</p>




<figure class='code'><figcaption><span>.ruby-version </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Make the following changes to the Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="s1">&#39;2.1.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to install gems:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to install binstubs for capistrano:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">binstubs</span> <span class="n">capistrano</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Configure Capistrano</strong><br/>
  Type command below to initialize capistrano:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Add the following below require &#8216;capistrano/deploy&#8217; in the Capfile in the root of your app:
</p>




<figure class='code'><figcaption><span>Capfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Add or Replace this configuration in config/deploy.rb file:
</p>




<figure class='code'><figcaption><span>deploy.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;myapp&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@github.com:bunlong/myapp.git&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/opt/www/myapp&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;deploy&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{log tmp/pids tmp/cache tmp/sockets}</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="sx">%w[start stop restart]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="o">|</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s1">&#39;Manage Unicorn&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span> <span class="n">command</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="s2">&quot;/etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:publishing</span><span class="p">,</span> <span class="ss">:restart</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  After the configuration in /config/deploy/production.rb with your server ip or domain name:
</p>




<figure class='code'><figcaption><span>production.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="sx">%w{deploy@0.0.0.0}</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="sx">%w{deploy@0.0.0.0}</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>  <span class="sx">%w{deploy@0.0.0.0}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Configure Unicorn</strong><br/>
  Create a new file config/unicorn.rb with the following contents:
</p>




<figure class='code'><figcaption><span>unicorn.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="o">=</span> <span class="s2">&quot;/opt/www/myapp/current&quot;</span>
</span><span class='line'><span class="n">working_directory</span> <span class="n">root</span>
</span><span class='line'><span class="n">pid</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/tmp/pids/unicorn.pid&quot;</span>
</span><span class='line'><span class="n">stderr_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'><span class="n">stdout_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">listen</span> <span class="s2">&quot;/tmp/unicorn.myapp.sock&quot;</span>
</span><span class='line'><span class="n">worker_processes</span> <span class="mi">1</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Comment out production username and password from config/database.yml:
</p>




<figure class='code'><figcaption><span>database.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">default</span>
</span><span class='line'>  <span class="ss">database</span><span class="p">:</span> <span class="n">myapp_production</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to push changes to git:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;Added settings to deploy app&#39;</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to create a secret to be used on the server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="n">secret</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  On the server setup the secret by modify /home/deploy/.bashrc with the following contents:
</p>




<figure class='code'><figcaption><span>.bashrc </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">export</span> <span class="no">SECRET_KEY_BASE</span><span class="o">=[</span><span class="no">REPLACE</span> <span class="no">WITH</span> <span class="no">YOUR</span> <span class="no">SECRET</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  On the server restart nginx, type command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">service</span> <span class="n">nginx</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Deploy</strong><br/>
  Type command below to make sure capistrano is connected to the server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">production</span> <span class="ss">git</span><span class="p">:</span><span class="n">check</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to make sure can deploy or not:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">production</span> <span class="ss">deploy</span><span class="p">:</span><span class="n">check</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below for deploying:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">production</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you need to run db:seed, log into server as the deploy user and run following:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="sr">/opt/</span><span class="n">www</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">current</span> <span class="p">;</span> <span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you are having problems, try running a console on the server, log in as deploy user and run the following:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="sr">/opt/</span><span class="n">www</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">current</span> <span class="p">;</span> <span class="n">bin</span><span class="o">/</span><span class="n">rails</span> <span class="n">c</span> <span class="n">production</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Private doesn't apply to class method and define method]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/31/private-doesnt-apply-to-class-method-and-define-method/"/>
    <updated>2014-12-31T11:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/31/private-doesnt-apply-to-class-method-and-define-method</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Ruby - Check for nil Without Using an Explicit if" />
</p>




<p>
  Ruby&#8217;s private keyword might do a lot less than you think.
</p>




<p>
  <strong>The &#8220;private&#8221; does not apply to class methods defined on self</strong>
</p>




<p>
  This does not make anything private:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">print</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You need to use private_class_method instead:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">print</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:print</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>The &#8220;private&#8221; does not apply to define_method</strong>
</p>




<p>
  This does not make anything private:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:print</span> <span class="k">do</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You need to use private with an argument instead:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:print</span> <span class="k">do</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="ss">:print</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang &amp; Chicago Boss framework]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/11/erlang-and-chicago-boss-framework/"/>
    <updated>2014-12-11T21:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/11/erlang-and-chicago-boss-framework</id>
    <content type="html"><![CDATA[<h3>Erlang</h3>


<br/>




<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" />
</p>




<p>
  You may remember <a href="http://geekhmer.github.io/blog/2014/06/26/why-erlang/">my first article post about Erlang</a>. I&#8217;ve shared a short introduction to the Erlang programming language and it&#8217;s concurrency philosophy in the article. There are some highlights of that Erlang already include:
</p>




<p>
  <strong>High Availability and Reliability</strong><br/>
  - Simple and consistent error recovery and supervision hierarchiess.<br/>
  - Built-in fault tolerance (Let it fail/crash! - Do not program defensively).<br/>
  - Hot code loading during runtime (software upgrades with zero downtime).
</p>




<p>
  <strong>Scalability and Heterogeneity</strong><br/>
  - Run on multiple platforms, HetNet support.<br/>
  - Network aware runtime, out-of-the-box distributed architectures.<br/>
  - Very light-weight processes, highly scalable transparent or explicit concurrency.<br/>
  - Awesome transparent multi-core support:
</p>




<p>
  <img src="http://geekhmer.github.io/images/concurrent.jpg" />
</p>




<p>
  <strong>Less Effort</strong><br/>
  - Functional programming language, high abstraction level, concise readable programs.<br/>
  - When compared with any imperative language, 4–20 times less code written for same application.<br/>
  - Suitable for rapid prototyping.<br/>
  - Impressive and powerful libraries and middleware (Open Telecom Platform - OTP).
</p>




<p>
  So, what is the &#8220;dark side&#8221; of Erlang for most developers? The correct answer is &#8220;The Erlang syntax!&#8221;.
</p>




<p>
  In my first week with Erlang, I had no idea what I&#8217;ve been doing while coding something. Believe me, if you fall into the Erlang world from any imperative language, you&#8217;d feel like me. The problem could be good to discuss, but that&#8217;s beside the point.
</p>




<h3>Chicago Boss framwork: Start small, dream big</h3>




<p>
  <img src="http://geekhmer.github.io/images/logo_chicagoboss.svg" />
</p>




<p>
  In software development, using a framework is almost a rule for fast, clean, easy readable and standardized coding. Chicago Boss (<a href="http://www.chicagoboss.org/">http://www.chicagoboss.org/</a>) is a framework that is heavily inspired by Rails. Set up and use Chicago Boss is easy as falling off a log. Chicago Boss allows you to code with the aforementioned standards in Erlang. Plus, offers conveniences of modern web development, including WebSocket and Comet. Basic features of Chicago Boss listed below:<br/>
  - 100% asynchronous I/O<br/>
  - Support for Erlang and Elixir code<br/>
  - BossDB: Database connection layer with an advanced ORM which with built-in support for Mnesia, MongoDB, MySQL, PostgreSQL, Riak and Tokyo Tyrant.<br/>
  - BossCache: Database caching layer<br/>
  - BossMQ: Cluster–wide, channel–based message queue<br/>
  - BossRouter: URL router<br/>
  - BossSession: Session storage layer<br/>
  - BossNews: Event listener, model event system<br/>
  - BossMail: Built-in email server<br/>
  - Django and Jade template support<br/>
  - Very clean controllers as result of pattern matching<br/>
  - Auto document generation for models<br/>
  - An useful admin interface<br/>
  - Automatic code reloading
</p>




<p>
  We&#8217;ll cover almost all of features of Chicago Boss during developing an applicatioin. So far so good let enjoy in developing a simple application with Chicago Boss framwork. See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using UUID as Primary Key in Ruby on Rails with MySQL Guide]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/06/using-uuid-as-primary-key-in-ruby-on-rails-with-mysql-guide/"/>
    <updated>2014-12-06T22:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/06/using-uuid-as-primary-key-in-ruby-on-rails-with-mysql-guide</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails MySQL UUID Primary Key Guide" />
</p>




<p>
  A UUID (universally unique identifier) is an identifier standard used in software construction. A UUID is simply a 128-bit value. The meaning of each bit is defined by any of several variants.
</p>




<p>
  For human-readable display, many systems use a canonical format using hexadecimal text with inserted hyphen characters. For example: de305d54-75b4-431b-adb2-eb6b9e546013.
</p>




<p>
  The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.
</p>




<p>
  <strong>Installation</strong><br/>
  To use UUID as Primary Key you need to add uuidtools gem to your app&#8217;s Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;uuidtools&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Setting up UUID as Primary Key</strong><br/>
  To set UUID as Primary Key, you need to set id to false and the new UUID column as Primary Key in migration file:
</p>




<figure class='code'><figcaption><span>*_create_products.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateProducts</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:products</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="kp">false</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:uuid</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">36</span><span class="p">,</span> <span class="ss">primary</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">limit</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Inserting UUID Value into UUID Column</strong><br/>
  Create UUID helper library in app/lib directory:
</p>




<figure class='code'><figcaption><span>uuid_helper.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">UuidHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">primary_key</span> <span class="o">=</span> <span class="s1">&#39;uuid&#39;</span>
</span><span class='line'>    <span class="n">base</span><span class="o">.</span><span class="n">before_create</span> <span class="ss">:assign_uuid</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_uuid</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="ss">UUIDTools</span><span class="p">:</span><span class="ss">:UUID</span><span class="o">.</span><span class="n">timestamp_create</span><span class="p">()</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span> <span class="k">if</span> <span class="n">uuid</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then include UuidHelper library in Model file:
</p>




<figure class='code'><figcaption><span>product.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Product</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">UuidHelper</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Check for nil Without Using an Explicit if]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/02/ruby-check-for-nil-without-using-an-explicit-if/"/>
    <updated>2014-12-02T00:06:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/02/ruby-check-for-nil-without-using-an-explicit-if</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Ruby - Check for nil Without Using an Explicit if" />
</p>




<p>
  All checks for nil are a condition, but Ruby provides many ways to check for
  nil without using an explicit if. Watch out for nil conditional checks behind other syntax:
</p>




<p>
  <strong>Explicit if with nil?</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">listing</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="kp">nil</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">listing</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Using other syntax:
</p>




<p>
  <strong>Implicit nil check through truthy conditional</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">listing</span>
</span><span class='line'>  <span class="n">listing</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Relies on nil being falsey</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">listing</span> <span class="o">&amp;&amp;</span> <span class="n">listing</span><span class="o">.</span><span class="n">name</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Call to try</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">listing</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips to Improve the Performance of Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/01/tips-to-improve-the-performance-of-ruby-on-rails-application/"/>
    <updated>2014-12-01T22:06:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/01/tips-to-improve-the-performance-of-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" alt="Tips to Improve the Performance of Ruby on Rails Application" />
</p>




<p>
   In this article, I will show you tips to improve performance of Ruby on Rails application. let’s dive into those.
</p>




<p>
  <strong>1. Limit Amount of Data in a Controller Method</strong><br/>
  Thin controllers are easy to test and has a good performance profile because there’s some overhead involved in passing the controller instance variable around. In short, you need to follow &#8220;Thin controller and fat model&#8221;.
</p>




<p>
  <strong>2. Split View in Separate Partials</strong><br/>
  n this way, views will be easier to read and easier to cache.
</p>




<p>
  <strong>3. Choose Right Session Storage</strong><br/>
  Based on your level of need, choose your session storage carefully. Here are what rails provide:<br/>
  - CookieStore – Stores everything on the client.<br/>
  - DRbStore – Stores the data on a DRb server.<br/>
  - MemCacheStore – Stores the data in a memcache.<br/>
  - ActiveRecordStore – Stores the data in a database using Active Record.
</p>




<p>
  <strong>4. DRY (Don&#8217;t Repeat Yourself)</strong><br/>
  This is the most common things programmers tend to listen and don’t follow. Here is very basic example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;Bambo&quot;</span>
</span><span class='line'>  <span class="k">return</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It should be written by:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">listing</span> <span class="o">=</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">listing</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s2">&quot;Bambp&quot;</span> <span class="k">then</span> <span class="n">listing</span> <span class="k">else</span> <span class="kp">nil</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>4. Eager Loading</strong><br/>
  Eager loading is a way to solve the classic N + 1 query performance problem caused by inefficient use of child objects.
</p>




<p>
  Let’s look at the following code. It will fetch zip of 10 users.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">address</span><span class="o">.</span><span class="n">zip</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  11 queries will be executed, 1 for the top and 10. The solution is to rewrite it to eager load address:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">users</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">address</span><span class="o">.</span><span class="n">zip</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>5. Indexing</strong><br/>
  Database indexing is one of the simplest ways to improve database performance. The insert operation will become slower but will boost up fetching data which is more frequently used in web application.
</p>




<p>
  <strong>6. Avoid Dynamism</strong><br/>
  Although find_by and find_all_by dynamic methods are really cool, the are also kind of slow because each one needs to run through method_missing and parse the filename against the list of columns in database table.
</p>




<p>
  <strong>7. Caching</strong><br/>
  This is the purest way to speed up a rails application. Here are a short example of different types of caching:<br/>
  - Page Caching<br/>
  - Action Caching<br/>
  - Fragment Caching<br/>
  - SQL Caching<br/>
  - Asset Caching<br/>
</p>




<p>
  <strong>8. Image Spriting</strong><br/>
  In websites, a significant times are consumed for loading large number of images. One way of minimizing is to sprite your images. This will reduce number of images to be served significantly.
</p>




<p>
  <strong>9. Minify and GZIP Stylesheets and Javascripts</strong><br/>
  This is the last point, but an important one. You can reduce size of the stylesheets and javascripts significantly by Minifying it and serve as GZip format. It will improve the performance significantly by reducing request/response time.
</p>




<p>
  So far so good, these are pretty basic guidelines but surely help you to improve your application. Now, the bounce rate of your site should be less and you are expected to be a happier product owner. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools for Monitoring Performance in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/29/tools-for-monitoring-performance-in-ruby-on-rails-application/"/>
    <updated>2014-11-29T22:31:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/29/tools-for-monitoring-performance-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Tools for Monitoring Performance in Ruby on Rails Application" />
</p>




<p>
  Here are some tips for you to monitor performance in a Ruby on Rails application. Some tools and tips are equally applicable for other web applications:
</p>




<p>
  <strong>1. Rails Logger</strong><br/>
  The simplest way to get information about performance is to analyze rails log. It will provide you information of the time spent processing each request, broken down into rendering and SQL time. You can also find whether a particular part are cached or the occurrence of cache expiry.
</p>




<p>
  <strong>2. Rails Performance Test - Profiling</strong><br/>
  Profiling helps you to see the details of a performance test and provide an in-depth picture of the slow and memory hungry parts. Each test case is run 1 time in profiling mode.
</p>




<p>
  <strong>3. Rails Performance Test - Benchmarking</strong><br/>
  Through Rails performance test, source of application’s memory or speed bottleneck and can be found. Benchmarking helps find out how fast each performance test runs. Each test case is run 4 times in benchmarking mode.
</p>




<p>
  <strong>4. <a href="https://github.com/wvanbergen/request-log-analyzer" target="_blank">Rails Analyzer</a></strong><br/>
  The Rails Analyzer project contains a collection of tools (The Production Log Analyzer, The Action Profiler, Rails Analyzer Tools, The SQL Dependency Grapher) for Rails that let you discover biggest slow spots in your applications allowing you to best focus optimization efforts.
</p>




<p>
  <strong>5. <a href="https://github.com/josevalim/rails-footnotes" target="_blank">Rails Footnote</a></strong><br/>
  It is a rails plugin which displays footnotes in your application for easy debugging, such as sessions, request parameters, cookies, filter chain, routes, queries, etc. Even more, it contains links to open files directly in your editor including your backtrace lines.
</p>




<p>
  <strong>6. <a href="https://github.com/nesquena/query_reviewer" target="_blank">Query Reviewer</a></strong><br/>
  Query Reviewer is an advanced SQL query analyzer. It generates a page with explanation output of all SELECT queries, rate a page’s SQL usage, display interactive summary on page.
</p>




<p>
  <strong>7. <a href="https://github.com/sdsykes/slim_scrooge" target="_blank">Slim Scrooge</a></strong></strong><br/>
  SlimScrooge is an optimization layer to ensure your application only fetches the database content needed to minimize wire traffic, excessive SQL queries and reduce conversion overheads to native Ruby types.<br/>
  SlimScrooge implements inline query optimization, automatically restricting the columns fetched based on what was used during previous passes through the same part of your code.
</p>




<p>
  <strong>8. <a href="http://newrelic.com" target="_blank">New Relic</a></strong><br/>
  New Relic is the all-in-one web application performance tool that lets you see performance from the end user experience down to the line of application code. It will also list the errors if such occurrence occur.
</p>




<p>
  <strong>9. <a href="https://github.com/brynary/rack-bug" target="_blank">Rack-Bug</a></strong><br/>
  It is a debugging toolbar for Rack applications implemented as middleware.
</p>




<p>
  <strong>10. <a href="https://github.com/mperham/sidekiq" target="_blank">Sidekiq</a></strong><br/>
  Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with Rails 3/4 to make background processing dead simple.
</p>




<p>
  <strong>11. <a href="http://getfirebug.com" target="_blank">Firebug</a></strong><br/>
  Firebug is a firefox plugin and a very powerful tool. Apart from many outstanding features, it helps to monitor network performance. You can see the load time of each files (when they started to load and when they are completed), filter it by type (e.g. javascript or CSS) and examining http headers.
</p>




<p>
  So far so good, you can suggest more. These are a mere introduction. You can try those out and examine the health of your application. I have a plan to write another one with tips regarding enhancing performance based on the generated health report of a web application. Stay tuned for that!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Company]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/27/ruby-on-rails-company/"/>
    <updated>2014-11-27T20:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/27/ruby-on-rails-company</id>
    <content type="html"><![CDATA[<p>
  This article is about what makes a Ruby on Rails company stand out in the market. I am going to talk about what clients look for when they hire a Ruby on Rails company.
</p>




<p>
  <strong>Experience and Expertise</strong><br/>
  When hiring a Ruby on Rails company, clients generally look for expert engineers. In most job circulars you will see that they are asking for 2 to 5 or more years of expertise. There is a reason why clients prefer expertise. The biggest market for Ruby on Rails lies in startups. Startups need to do more with less. Ruby on Rails help them to quickly build software with limited budget. However, the nature of this framework is such that it takes time to master.
</p>




<p>
  <strong>Communication</strong><br/>
  Communication is extremely important for a Ruby on Rails company. It applies to both onsite and offsite developers. As a developer, if you cannot convey your message properly, no matter how expert you are, you will not impress the client. Communication is vital from the very first meeting to post delivery service.
</p>




<p>
  <strong>Development Method and Project Management Style</strong><br/>
  This is mostly applicable for remote developers. Clients want to know if the Ruby on Rails company follow any specific development method. They are also interested in the team’s project management style. You will often find clients asking about Agile, TDD etc.
</p>




<p>
  Let me share the diagram that shows how we develop software.
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/ruby_on_rails_company.jpg"><img src="http://geekhmer.github.io/images/ruby_on_rails_company.jpg" width="700" alt="Ruby on Rails Company" /></a>
</p>




<p>
  So far so good, If you are setting up a Ruby on Rails development company, these are the areas you should be concerned about. If you excel in these areas, you will definitely get more clients. Ruby on Rails clients, despite their vastly different projects, have similar technical requirements.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Progress Bar in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/14/add-progress-bar-in-ruby-on-rails-application/"/>
    <updated>2014-11-14T22:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/14/add-progress-bar-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/youtube_progress_bar.png" width="700" alt="Add Progress Bar in Ruby on Rails Application" />
</p>




<p>
  Okay, today I would like to show how to add progress bar in Ruby on Rails application. For add progress bar in Ruby on Rails application I use nprogress-rails ruby gem.
</p>




<p>
  <strong>Installation</strong><br/>
  Add nprogress-rails ruby gem to Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;nprogress-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then open terminal type:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Usage</strong><br/>
  Add the requires to the application.js:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">nprogress</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">nprogress</span><span class="o">-</span><span class="n">turbolinks</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Also, into the application.css.scss:
</p>




<figure class='code'><figcaption><span>application.css.scss </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">*=</span> <span class="nb">require</span> <span class="n">nprogress</span>
</span><span class='line'><span class="o">*=</span> <span class="nb">require</span> <span class="n">nprogress</span><span class="o">-</span><span class="n">bootstrap</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And then, add NProgress.start(); to application.js for loading progress bar whenever you load each pages:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">document</span><span class="p">)</span><span class="o">.</span><span class="n">ready</span><span class="p">(</span><span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">NProgress</span><span class="o">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, let enjoy the progress bar in your application. Thank for reading :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Most Gem That I Use for Developing Ruby on Rails Project]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/07/the-most-gem-that-i-use-for-developing-ruby-on-rails-project/"/>
    <updated>2014-11-07T20:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/07/the-most-gem-that-i-use-for-developing-ruby-on-rails-project</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/the_most_gem_i_use.jpg" alt="The most gem that I use for developing ruby on rails project" />
</p>




<h3>activerecord</h3>




<p>
  <strong>1. kaminari</strong><br/>
  Description: A Scope & Engine based, clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs.<br/>
  Source: <a href="https://github.com/amatsuda/kaminari" target="_blank">https://github.com/amatsuda/kaminari</a>
</p>




<p>
  <strong>2. i18n-active_record</strong><br/>
  Description: Use to lookup translations in the database.<br/>
  Source: <a href="https://github.com/svenfuchs/i18n-active_record" target="_blank">https://github.com/svenfuchs/i18n-active_record</a>
</p>




<p>
  <strong>3. paperclip</strong><br/>
  Description: Paperclip is intended as an easy file attachment library for Active Record.<br/>
  Source: <a href="https://github.com/thoughtbot/paperclip" target="_blank">https://github.com/thoughtbot/paperclip</a>
</p>




<p>
  <strong>4. paperclip-meta</strong><br/>
  Description: Use for adding width, height, and size to paperclip images.<br/>
  Source: <a href="https://github.com/teeparham/paperclip-meta" target="_blank">https://github.com/teeparham/paperclip-meta</a>
</p>




<p>
  <strong>5. swf_file</strong><br/>
  Description: SWF File is lightweight gem to read swf file headers from within a Ruby application.<br/>
  Source: <a href="https://github.com/DBA/swf_file" target="_blank">https://github.com/DBA/swf_file</a>
</p>




<h3>delayed_job</h3>




<p>
  <strong>1. delayed_job_active_record</strong><br/>
  Description: delayed_job_active_record encapsulates the common pattern of asynchronously executing longer tasks in the background.<br/>
  Source: <a href="https://github.com/collectiveidea/delayed_job" target="_blank">https://github.com/collectiveidea/delayed_job</a>
</p>




<p>
  <strong>2. delayed_job_web</strong><br/>
  Description: Resque like web interface for delayed job.<br/>
  Source: <a href="https://github.com/ejschmitt/delayed_job_web" target="_blank">https://github.com/ejschmitt/delayed_job_web</a>
</p>




<h3>mongoid</h3>




<p>
  <strong>1. mongoid</strong><br/>
  Description: Mongoid is an ODM (Object-Document-Mapper) framework for MongoDB in Ruby.<br/>
  Source: <a href="https://github.com/mongoid/mongoid" target="_blank">https://github.com/mongoid/mongoid</a>
</p>




<p>
  <strong>2. mongoid-rails-instrumentation</strong><br/>
  Description: Add additional information to rails logs about total time for MongoDB queries in action processing.<br/>
  Source: <a href="https://github.com/fredjean/mongoid-rails-instrumentation" target="_blank">https://github.com/fredjean/mongoid-rails-instrumentation</a>
</p>




<h3>solr</h3>




<p>
  <strong>1. rsolr</strong><br/>
  Description: A simple, extensible Ruby client for Apache Solr.<br/>
  Source: <a href="https://github.com/rsolr/rsolr" target="_blank">https://github.com/rsolr/rsolr</a>
</p>




<h3>views</h3>




<p>
  <strong>1. haml-rails</strong><br/>
  Description: Haml-rails provides Haml generators for rails 3.<br/>
  Source: <a href="https://github.com/indirect/haml-rails" target="_blank">https://github.com/indirect/haml-rails</a>
</p>




<p>
  <strong>2. simple_form</strong><br/>
  Description: simple_form aims to be as flexible as possible while helping you with powerful components to create your form.<br/>
  Source: <a href="https://github.com/plataformatec/simple_form" target="_blank">https://github.com/plataformatec/simple_form</a>
</p>




<p>
  <strong>3. unicode</strong><br/>
  Description: Unicode string manipulation library for Ruby.<br/>
  Source: <a href="https://github.com/blackwinter/unicode" target="_blank">https://github.com/blackwinter/unicode</a>
</p>




<p>
  <strong>4. wicked_pdf</strong><br/>
  Description: Wicked PDF uses the shell utility wkhtmltopdf to serve a PDF file to a user from HTML.<br/>
  Source: <a href="https://github.com/mileszs/wicked_pdf" target="_blank">https://github.com/mileszs/wicked_pdf</a>
</p>




<p>
  <strong>5. wkhtmltopdf-binary</strong><br/>
  Description: Provides binaries for WKHTMLTOPDF project in an easily accessible package.<br/>
  Source: <a href="https://rubygems.org/gems/wkhtmltopdf-binary" target="_blank">https://rubygems.org/gems/wkhtmltopdf-binary</a>
</p>




<p>
  <strong>6. best_in_place</strong><br/>
  Description: Best in Place is a jQuery based AJAX Inplace-Editor that takes profit of RESTful server-side controllers to allow users to edit stuff with no need of forms.<br/>
  Source: <a href="https://github.com/bernat/best_in_place" target="_blank">https://github.com/bernat/best_in_place</a>
</p>




<p>
  <strong>7. mustache</strong><br/>
  Description: Mustache is a framework-agnostic way to render logic-free views.<br/>
  Source: <a href="https://github.com/mustache/mustache" target="_blank">https://github.com/mustache/mustache</a>
</p>




<p>
  <strong>8. olive</strong><br/>
  Description: is the rails helper​ gem that enables to use content_for in controllers.<br/>
  Source: <a href="https://github.com/Bunlong/olive" target="_blank">https://github.com/Bunlong/olive</a>
</p>




<p>
  <strong>9. activenavbar</strong><br/>
  Description: is the gem that use to set the active navbar link, a link becomes active when you click on it.<br/>
  Source: <a href="https://github.com/Bunlong/activenavbar" target="_blank">https://github.com/Bunlong/activenavbar</a>
</p>




<h3>utils</h3>




<p>
  <strong>1. uuidtools</strong><br/>
  Description: uuidtools was designed to be a simple library for generating any of the various types of uuids.<br/>
  Source: <a href="https://github.com/sporkmonger/uuidtools/tree/" target="_blank">https://github.com/sporkmonger/uuidtools/tree</a>
</p>




<p>
  <strong>2. geoip</strong><br/>
  Description: The Ruby gem for querying Maxmind.com&#8217;s GeoIP database, which returns the geographic location of a server given its IP address.<br/>
  Source: <a href="https://github.com/cjheath/geoip" target="_blank">https://github.com/cjheath/geoip</a>
</p>




<p>
  <strong>3. fakie</strong><br/>
  Description: Libphonenumber Ruby wrapper.<br/>
  Source: <a href="https://github.com/seesawco/fakie" target="_blank">https://github.com/seesawco/fakie</a>
</p>




<h3>auth</h3>




<p>
  <strong>1. devise</strong><br/>
  Description: devise is a flexible authentication solution for Rails.<br/>
  Source: <a href="https://github.com/plataformatec/devise" target="_blank">https://github.com/plataformatec/devise</a>
</p>




<p>
  <strong>2. devise-encryptable</strong><br/>
  Description: Devise encryptable behavior.<br/>
  Source: <a href="https://github.com/plataformatec/devise-encryptable" target="_blank">https://github.com/plataformatec/devise-encryptable</a>
</p>




<p>
  <strong>3. CanCan</strong><br/>
  Description: CanCan is an authorization library for Ruby on Rails.<br/>
  Source: <a href="https://github.com/ryanb/cancan" target="_blank">https://github.com/ryanb/cancan</a>
</p>




<p>
  <strong>4. rolify</strong><br/>
  Description: Role management library with resource scoping.<br/>
  Source: <a href="https://github.com/RolifyCommunity/rolify" target="_blank">https://github.com/RolifyCommunity/rolify</a>
</p>




<h3>aws</h3>




<p>
  <strong>1. aws-sdk</strong><br/>
  Description: The official AWS SDK for Ruby.<br/>
  Source: <a href="https://github.com/aws/aws-sdk-ruby" target="_blank">https://github.com/aws/aws-sdk-ruby</a>
</p>




<h3>misc</h3>




<p>
  <strong>1. passenger</strong><br/>
  Description: Phusion Passenger™ is a web server and application server, designed to be fast, robust and lightweight.<br/>
  Source: <a href="https://github.com/phusion/passenger" target="_blank">https://github.com/phusion/passenger</a>
</p>




<p>
  <strong>2. whenever</strong><br/>
  Description: Whenever is a Ruby gem that provides a clear syntax for writing and deploying cron jobs.<br/>
  Source: <a href="https://github.com/javan/whenever" target="_blank">https://github.com/javan/whenever</a>
</p>




<p>
  <strong>3. ruby-graphviz</strong><br/>
  Description: Ruby interface to the GraphViz graphing tool.<br/>
  Source: <a href="https://github.com/glejeune/Ruby-Graphviz/" target="_blank">https://github.com/glejeune/Ruby-Graphviz/</a>
</p>




<h3>rake</h3>




<p>
  <strong>1. sitemap_generator</strong><br/>
  Description: SitemapGenerator is the easiest way to generate Sitemaps in Ruby.<br/>
  Source: <a href="https://github.com/kjvarga/sitemap_generator" target="_blank">https://github.com/kjvarga/sitemap_generator</a>
</p>




<p>
  <strong>2. fog</strong><br/>
  Description: fog is the Ruby cloud services library.<br/>
  Source: <a href="https://github.com/fog/fog" target="_blank">https://github.com/fog/fog</a>
</p>




<p>
  <strong>3. progressbar</strong><br/>
  Description: Ruby/ProgressBar is a text progress bar library for Ruby.<br/>
  Source: <a href="https://github.com/peleteiro/progressbar" target="_blank">https://github.com/peleteiro/progressbar</a>
</p>




<p>
  <strong>4. parallel</strong><br/>
  Description: Ruby parallel processing made simple and fast.<br/>
  Source: <a href="https://github.com/grosser/parallel" target="_blank">https://github.com/grosser/parallel</a>
</p>




<p>
  <strong>5. terminal-table</strong><br/>
  Description: Ruby ASCII Table Generator, simple and feature rich.<br/>
  Source: <a href="https://github.com/tj/terminal-table" target="_blank">https://github.com/tj/terminal-table</a>
</p>




<h3>production</h3>




<p>
  <strong>1. dalli</strong><br/>
  Description: Dalli is a high performance pure Ruby client for accessing memcached servers.<br/>
  Source: <a href="https://github.com/mperham/dalli" target="_blank">https://github.com/mperham/dalli</a>
</p>




<p>
  <strong>2. exception_notification</strong><br/>
  Description: The Exception Notification gem provides a set of notifiers for sending notifications when errors occur in a Rack/Rails application. The built-in notifiers can deliver notifications by email, campfire rooms or via webhooks.<br/>
  Source: <a href="https://github.com/smartinez87/exception_notification" target="_blank">https://github.com/smartinez87/exception_notification</a>
</p>




<p>
  <strong>3. newrelic_rpm</strong><br/>
  Description: New Relic is a performance management system, developed by New Relic, Inc. It provides you with deep information about the performance of your Rails or Ruby application as it runs in production.<br/>
  Source: <a href="https://github.com/newrelic/rpm" target="_blank">https://github.com/newrelic/rpm</a>
</p>




<h3>development & test</h3>




<p>
  <strong>1. brakeman</strong><br/>
  Description: Brakeman is a static analysis tool which checks Ruby on Rails applications for security vulnerabilities.<br/>
  Source: <a href="https://github.com/presidentbeef/brakeman" target="_blank">https://github.com/presidentbeef/brakeman</a>
</p>




<p>
  <strong>2. ffaker</strong><br/>
  Description: A library for generating fake data such as names, addresses, and phone numbers.<br/>
  Source: <a href="https://github.com/EmmanuelOga/ffaker" target="_blank">https://github.com/EmmanuelOga/ffaker</a>
</p>




<p>
  <strong>3. binding_of_caller</strong><br/>
  Description: Retrieve the binding of a method&#8217;s caller.<br/>
  Source: <a href="https://github.com/banister/binding_of_caller" target="_blank">https://github.com/banister/binding_of_caller</a>
</p>




<h4>guard</h4>




<p>
  <strong>4. rb-inotify</strong><br/>
  Description: This is a simple wrapper over the inotify Linux kernel subsystem for monitoring changes to files and directories.<br/>
  Source: <a href="https://github.com/nex3/rb-inotify" target="_blank">https://github.com/nex3/rb-inotify</a>
</p>




<p>
  <strong>5. guard-rspec</strong><br/>
  Description: Guard::RSpec allows to automatically & intelligently launch specs when files are modified.<br/>
  Source: <a href="https://github.com/guard/guard-rspec" target="_blank">https://github.com/guard/guard-rspec</a>
</p>




<p>
  <strong>6. guard-jasmine</strong><br/>
  Description: Guard::Jasmine automatically tests your Jasmine specs when files are modified.<br/>
  Source: <a href="https://github.com/guard/guard-jasmine" target="_blank">https://github.com/guard/guard-jasmine</a>
</p>




<p>
  <strong>7. guard-jasmine</strong><br/>
  Description: Zeus preloads your Rails app so that your normal development tasks such as console, server, generate, and specs/tests take less than one second.<br/>
  Source: <a href="https://github.com/burke/zeus" target="_blank">https://github.com/burke/zeus</a>
</p>




<h4>javascript</h4>




<p>
  <strong>8. jasminerice</strong><br/>
  Description: Pain free coffeescript testing.<br/>
  Source: <a href="https://github.com/bradphelan/jasminerice" target="_blank">https://github.com/bradphelan/jasminerice</a>
</p>




<h4>console</h4>




<p>
  <strong>9. pry</strong><br/>
  Description: An IRB alternative and runtime developer console.<br/>
  Source: <a href="https://github.com/pry/pry" target="_blank">https://github.com/pry/pry</a>
</p>




<p>
  <strong>10. pry-debugger</strong><br/>
  Description: Fast execution control in Pry.<br/>
  Source: <a href="https://github.com/nixme/pry-debugger" target="_blank">https://github.com/nixme/pry-debugger</a>
</p>




<p>
  <strong>11 pry-rails</strong><br/>
  Description: Avoid repeating yourself, use pry-rails instead of copying the initializer to every rails project. This is a small gem which causes rails console to open pry.<br/>
  Source: <a href="https://github.com/rweng/pry-rails" target="_blank">https://github.com/rweng/pry-rails</a>
</p>




<h4>web server</h4>




<p>
  <strong>12. thin</strong><br/>
  Description: A very fast & simple Ruby web server.<br/>
  Source: <a href="https://github.com/macournoyer/thin/" target="_blank">https://github.com/macournoyer/thin/</a>
</p>




<h4>rspec, capybara and shoulda</h4>




<p>
  <strong>13. rspec-rails</strong><br/>
  Description: rspec-rails is a testing framework for Rails.<br/>
  Source: <a href="https://github.com/rspec/rspec-rails" target="_blank">https://github.com/rspec/rspec-rails</a>
</p>




<p>
  <strong>14. headless</strong><br/>
  Description: Ruby wrapper for Xvfb, the virtual framebuffer.<br/>
  Source: <a href="https://github.com/leonid-shevtsov/headless" target="_blank">https://github.com/leonid-shevtsov/headless</a>
</p>




<p>
  <strong>15. factory_girl_rails</strong><br/>
  Description: factory_girl_rails provides Rails integration for factory_girl.<br/>
  Source: <a href="https://github.com/thoughtbot/factory_girl_rails" target="_blank">https://github.com/thoughtbot/factory_girl_rails</a>
</p>




<p>
  <strong>16. capybara</strong><br/>
  Description: Capybara helps you test web applications by simulating how a real user would interact with your app.<br/>
  Source: <a href="https://github.com/jnicklas/capybara" target="_blank">https://github.com/jnicklas/capybara</a>
</p>




<p>
  <strong>17. shoulda-matchers</strong><br/>
  Description: shoulda-matchers provides Test::Unit- and RSpec-compatible one-liners that test common Rails functionality.<br/>
  Source: <a href="https://github.com/thoughtbot/shoulda-matchers" target="_blank">https://github.com/thoughtbot/shoulda-matchers</a>
</p>




<h3>development</h3>




<p>
  <strong>1. rails-erd</strong><br/>
  Description: Generate Entity-Relationship Diagrams for Rails applications.<br/>
  Source: <a href="https://github.com/voormedia/rails-erd" target="_blank">https://github.com/voormedia/rails-erd</a>
</p>




<p>
  <strong>2. better_errors</strong><br/>
  Description: Better Errors replaces the standard Rails error page with a much better and more useful error page.<br/>
  Source: <a href="https://github.com/charliesome/better_errors" target="_blank">https://github.com/charliesome/better_errors</a>
</p>




<p>
  <strong>3. foreman</strong><br/>
  Description: Manage Procfile-based applications.<br/>
  Source: <a href="https://github.com/ddollar/foreman" target="_blank">https://github.com/ddollar/foreman</a>
</p>




<h3>test</h3>




<p>
  <strong>1. simplecov</strong><br/>
  Description: SimpleCov is a code coverage analysis tool for Ruby.<br/>
  Source: <a href="https://github.com/colszowka/simplecov" target="_blank">https://github.com/colszowka/simplecov</a>
</p>




<p>
  <strong>2. json_spec</strong><br/>
  Description: Easily handle JSON in RSpec and Cucumber.<br/>
  Source: <a href="https://github.com/collectiveidea/json_spec" target="_blank">https://github.com/collectiveidea/json_spec</a>
</p>




<p>
  <strong>3. database_cleaner</strong><br/>
  Description: Strategies for cleaning databases in Ruby. Can be used to ensure a clean state for testing.<br/>
  Source: <a href="https://github.com/DatabaseCleaner/database_cleaner" target="_blank">https://github.com/DatabaseCleaner/database_cleaner</a>
</p>




<h3>assets</h3>




<p>
  <strong>1. asset_sync</strong><br/>
  Description: Asset Sync is built to run with the new Rails Asset Pipeline feature introduced in Rails 3.1. After you run bundle exec rake assets:precompile your assets will be synchronised to your S3 bucket, optionally deleting unused files and only uploading the files it needs to.<br/>
  Source: <a href="https://github.com/rumblelabs/asset_sync" target="_blank">https://github.com/rumblelabs/asset_sync</a>
</p>




<p>
  <strong>2. sass-rails</strong><br/>
  Description: This gem provides official integration for Ruby on Rails projects with the Sass stylesheet language.<br/>
  Source: <a href="https://github.com/rails/sass-rails" target="_blank">https://github.com/rails/sass-rails</a>
</p>




<p>
  <strong>3. bootstrap-sass</strong><br/>
  Description: Official Sass port of Bootstrap.<br/>
  Source: <a href="https://github.com/twbs/bootstrap-sass" target="_blank">https://github.com/twbs/bootstrap-sass</a>
</p>




<p>
  <strong>4. jquery-fileupload-rails</strong><br/>
  Description: jQuery File Upload integrated for Rails Asset Pipeline.<br/>
  Source: <a href="https://github.com/tors/jquery-fileupload-rails" target="_blank">https://github.com/tors/jquery-fileupload-rails</a>
</p>




<p>
  <strong>5. bootstrap-wysihtml5-rails</strong><br/>
  Description: WYSIWYG editor for Bootstrap, integrated in Rails assets pipeline.<br/>
  Source: <a href="https://github.com/Nerian/bootstrap-wysihtml5-rails" target="_blank">https://github.com/Nerian/bootstrap-wysihtml5-rails</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9 things to be a professional programmer]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer/"/>
    <updated>2014-10-16T14:23:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/professional_programmer.jpg" width="550" alt="Professional Programmer" />
</p>




<p>
  I&#8217;ve been reading a lot of code, design pattern, leading and project management book for last few years and I&#8217;ve noted many good points how to be a Professional Programmer. Let enjoy reading and become &#8220;Go-to guy&#8221; together.
</p>




<p>
  <strong>1. Knows the domain of their project</strong><br/>
  As a professional programmer, your job is more than just reading requirement specifications and code the software. You should also know where and how the project is being used by the its users in the real world.
</p>




<p>
  This means that if you are working on an accounting software, you should at least have some basic knowledge about accounting. It is not necessary to become an expert in the subject, but a little knowledge helps a big way when solving problems and coming up with solutions.
</p>




<p>
   <strong>2. Is a team player</strong><br/>
   As a professional programmer, you should of course be polite and helpful towards other people. When other people ask for help, you should treat them in the same manner as you wish someone would treat you, if you were stuck. You should always offer help and welcome help from others.
</p>




<p>
  Also, you should not build a wall around yourself or your code. It is important to remember that you don’t own the code, but rather the team does. So instead of dismissing anyone from working in, or even seeing, the code, it should be encouraged. This will help you grow as a programmer, since it opens up for feedback, but it also greatly benefits the group and the project itself.
</p>




<p>
  Over time, teams slowly grows better and better as well, resulting in team members will eventually know each others strengths and weaknesses. When this happens the team becomes very efficient on solving issues as a group. Since it takes time to build up a solid team, when a project ends, it is smarter to give the team a new project, rather than disbanding the whole group.
</p>




<p>
  <strong>3. Takes responsibility</strong><br/>
  As a professional programmer, you take responsibility for your code. It is your job to know what your code does and know that all of the code works. When coding you should always aim to cause no harm in your project, by always aiming to get the error rate as close to zero as possible.
</p>




<p>
  This is done by simple writing tests. Tested code gives you more confident about your work, knowing the fact that what deliver is at top class and checked against errors. The QA department should never find bugs. An entire project with tested code also gives the programmer more confident to actually do something about smelly code.
</p>




<p>
  Unit and acceptance tests should be done automatically (due to it is significantly cheaper than manually testing) by using a continuous integration system. These tests should be running all the time, every time a programmer commits code to the project. If a test breaks, it should be fixed as soon as possible.
</p>




<p>
  As a professional programmer is also strongly for Test Driven Development. The TDD discipline forces the programmer to think about good design and structuring up their code to make it test-friendly, it is actually unprofessional not to use TDD.
</p>




<p>
  <strong>4. Knows patterns and disciplines</strong><br/>
  As a professional programmer, it is your responsibility to write high-quality, tested, clean code. This includes knowing design patterns, principles, methods, disciplines and artifacts.
</p>




<p>
  Since the software development industry is changing constantly with new ideas and tools around the next corner, it is also equally important that you keep yourself up to date on new disciples and techniques.
</p>




<p>
  <strong>5. Remains calm during hectic situations</strong><br/>
  As a professional developer, you should always remain calm during hectic and stressful situations. Instead, try and think out the best solution to resolve your situation and the inform your superiors about the situation and ask for their feedback and suggestions.
</p>




<p>
  Acting on panic will most likely just result in making more errors. In emergencies, you could try and pair program with a colleague. Not only will this probably decrease the number of new errors, but pair programming is also a great source of sharing knowledge between team members.
</p>




<p>
  <strong>6. Keeps practicing profession</strong><br/>
  As a professional programmer, you should spend time caring for your profession. Just like in any other profession, practice gives performance, skill and experience.
</p>




<p>
  It is your own responsibility to keep training yourself by reading, practicing and learning - actually anything that helps you grow as a software developer and helps you get on board with the constant industry changes.
</p>




<p>
  An important note is this should be done on your own time, not on your employer&#8217;s. It is not their responsibility to train you, but your own. However, do not mistake this with you should be doing your job during this time. This time should be dedicated for you and your own enjoyment only. You should do anything that interests you. If you work 40 hours a week ,you should spend around 20 additional hours enhancing your own profession.
</p>




<p>
  <strong>7. Rests</strong><br/>
  As a professional programmer, you should know that being a software developer is a very intellectual and exhausting job. It is important that you don’t overwork yourself, but rather find a balance in life with your job. Being a well rested developer makes you more focused and makes you perform better.
</p>




<p>
  <strong>8. Knows the value of time</strong><br/>
  As a professional programmer, you should know the value of time. Your time is expensive and should not be wasted, meaning you should use your time wisely and know things like the the high cost of meetings. Politely decline meetings that do not benefit you, or if your present doesn’t benefit anyone.
</p>




<p>
  Meetings should also have a clear agenda and a goal. If you notice that a meeting is getting boring and does not benefit you anymore, or if the agenda gets abandoned or if the meeting simple gets high-jacked, either request a new topic or politely leave the meeting. You probably have better things to do then remain seated.
</p>




<p>
  <strong>9. Is never afraid to say no</strong><br/>
  As a professional programmer should not be afraid to say no. If you know something is unrealistic (such as an estimation, a deadline, a requirement, etc) it is expected from you to speak up. Not most of the time - but all the time.
</p>




<p>
  You shouldn’t even say you can try, as that will give a false impression to everyone that the task is doable, and maybe even worse, it turns you into a liar which can hurt your reputation among your superiors and colleagues. Instead, try and rephrase yourself and explain your concerns. Be clear and specific about the problems and dates and times.
</p>




<p>
  The definition of an estimate is interpreted by different people. For business people, estimations are commitments. For software developers, estimations are guesses, measured in probability.
</p>




<p>
  You should only do commitments, when you are certain it can be done. When professional commits to something, the provide with a hard number and makes certain the job before the deadline.
</p>




<p>
  So far so good, the more you read the more you know the more you know the more places you&#8217;ll go. See you!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EngineX/Nginx Installation and Basic Usage]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage/"/>
    <updated>2014-10-07T21:52:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_installation.png" width="500" alt="Nginx plus" />
</p>




<p>
  Nginx is available in most Linux distributions. In this article, I use Ubuntu 14.10.
</p>




<p>
  <strong>Installation</strong><br/>
  Open your terminal and run the following command as root user:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now Nginx is installed, you can use the startup script to start, stop or restart the Web server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">stop</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Most configuration changes do not require to restart, in which case you can use the reload command. It is generally a good idea to test the Nginx configuration file for errors before reloading:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nginx</span> <span class="o">-</span><span class="n">t</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Let&#8217;s go ahead and start the server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Nginx now should be running on your machine. If you open http://127.0.0.1/ or http://localhost in your browser, you should see a page with “Welcome to nginx!”.
</p>




<p>
  <strong>Main Configuration File (/etc/nginx/nginx.conf)</strong><br/>
  Now Nginx is installed, let&#8217;s take a look at its config file that located at /etc/nginx/nginx.conf. This file contains the server-wide settings for Nginx, and it should look similar to this:
</p>




<figure class='code'><figcaption><span>/etc/nginx/nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="n">www</span><span class="o">-</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="n">worker_processes</span>  <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">error_log</span>  <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="n">pid</span>  <span class="sr">/var/</span><span class="n">run</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">events</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">worker_connections</span>  <span class="mi">1024</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">http</span> <span class="p">{</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">mime</span><span class="o">.</span><span class="n">types</span><span class="p">;</span>
</span><span class='line'>  <span class="n">default_type</span> <span class="n">application</span><span class="o">/</span><span class="n">octet</span><span class="o">-</span><span class="n">stream</span><span class="p">;</span>
</span><span class='line'>  <span class="n">access_log</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">access</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sendfile</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">keepalive_timeout</span> <span class="mi">65</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp_nodelay</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/*</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We are not going to change any of these settings, but let&#8217;s talk about some of them to help us understand how Nginx works:
</p>




<p>
  worker_processes setting tells Nginx how many child processes to start. If your server has more than one processor or is performing large amounts of disk IO, you might want to try increasing this number to see if you get better performance.
</p>




<p>
  worker_connections setting limits the number of concurrent connections per worker process. To determine the maximum number of concurrent requests, you simply multiply worker_processes by worker_connections.
</p>




<p>
  error_log and access_log settings indicate the default logging locations. You also can configure these settings on a per-site basis, as you will see later in the next article. Like Apache, Nginx is configured to run as the www-data user, but you easily can change this with the user setting. The startup script for Nginx needs to know the process ID for the master process, which is stored in /var/run/nginx.pid, as indicated by the pid setting.
</p>




<p>
  sendfile setting allows Nginx to use a special Linux system call to send a file over the network in a very efficient manner. The gzip option instructs Nginx to compress each response, which uses more CPU but saves bandwidth and decreases response time. Additionally, Nginx provides another compression module called gzip precompression (available as of version 0.6.24). This module looks for a compressed copy of the file with a .gz extension in the same location and serves it to gzip-enabled clients. This prevents having to compress the file each time it&#8217;s requested.
</p>




<p>
  The last setting we are concerned with is the include directive for the sites-enabled directory. Inside /etc/nginx, you&#8217;ll see two other directories, /etc/nginx/sites-available and /etc/nginx/sites-enabled. For each Web site you want to host with Nginx, you should create a config file in /etc/nginx/sites-available, then create a symlink in /etc/nginx/sites-enabled that points to the config file you created. The main Nginx config file includes all the files in /etc/nginx/sites-enabled. This helps organize your configuration files and makes it very easy to enable and disable specific Web sites.
</p>




<p>
  So far so good, next article I will show you how to work with Nginx. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EngineX/Nginx the High-Performance Web Server and Reverse Proxy]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/06/enginex-slash-nginx-the-high-performance-web-server-and-reverse-proxy/"/>
    <updated>2014-10-06T22:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/06/enginex-slash-nginx-the-high-performance-web-server-and-reverse-proxy</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx-plus.png" width="500" alt="Nginx plus" />
</p>




<p>
  Apache is the most popular Web server and one of the most successful open-source projects of all time. Apache has served more Web sites than any other Web server. Many of the world&#8217;s largest Web sites, including YouTube, Facebook, Wikipedia , use Apache to serve billions of page views per month. Over the years, Apache has proven itself to be a very stable, secure and configurable Web server.
</p>




<p>
  Although Apache is an excellent Web server, what if there were an alternative with the same functionality, a simpler configuration and better performance?<br/>
  A Web server exists with better performance, and it&#8217;s called Engine X or Nginx.
</p>




<p>
  Nginx is a high-performance Web server and reverse proxy. Nginx is used by some of the largest Web sites in the US, including WordPress etc, and it&#8217;s currently serving about 500 million requests per day. Nginx is the fourth-most-popular Web server, and it is currently serving more than two million Web sites. 
</p>




<p>
  <strong>Why Nginx?</strong><br/>
  Like Apache, Nginx has all the features you would expect from a leading Web server:<br/>
  1. Static file serving<br/>
  2. SSL/TLS support<br/>
  3. Virtual hosts<br/>
  4. Reverse proxying<br/>
  5. Load balancing<br/>
  6. Compression<br/>
  7. Access controls<br/>
  8. URL rewriting<br/>
  9. Custom logging<br/>
  10. Server-side includes<br/>
  11. Caching
</p>




<p>
   The main advantages of Nginx over Apache are performance and efficiency. Nginx is able to serve more requests per second with less resources because of its architecture. It consists of a master process, which delegates work to one or more worker processes. Each worker handles multiple requests in an event-driven or asynchronous manner using special functionality from the Linux kernel. This allows Nginx to handle a large number of concurrent requests quickly with very little overhead. Apache can be configured to use either a process per request (pre-fork) or a thread for each request (worker). Although Apache&#8217;s threaded mode performs much better than its pre-fork mode, it still uses more memory and CPU than Nginx&#8217;s event-driven architecture.
</p>




<p>
  So far so good, next article I will show you how to install & use it. See you!
</p>

]]></content>
  </entry>
  
</feed>
