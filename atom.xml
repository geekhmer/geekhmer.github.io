<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-05-29T21:32:04+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best Practices for Agile Ruby on Rails Development]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/24/best-practices-for-agile-ruby-on-rails-development/"/>
    <updated>2015-05-24T15:50:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/24/best-practices-for-agile-ruby-on-rails-development</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rails_artwork.jpg" alt="Best Practices for Agile Ruby on Rails Development" />
</p>




<p>
  Ruby on Rails is an open source web application framework built on Ruby. While Rails is 100% free, there is a lot of argument over its effectiveness in comparison with more standard, tried-and-true web applications. Despite its criticism, many big players such as Hulu, Groupon, and Twitter have incorporated its use into their booming platforms, so it is definitely worth at least knowing a little bit more about it.
</p>




<p>
  Like most open-source frameworks, Rails has found a home in the agile community.  This modern approach to software development promotes early deliveries, feedback from the client, and adaptation over the course of the development process. Because of its malleable nature, Ruby on Rails development works well with this approach.
</p>




<p>
  Like most open-source frameworks, Rails has found a home in the agile community.  This modern approach to software development  promotes early deliveries, feedback from the client, and adaptation over the course of the development process. Because of its malleable nature, Ruby on Rails development works well with this approach.
</p>




<p>
  <strong>1. Don’t Repeat Yourself</strong><br/>
  Is this code DRY enough? If a code only exists in one place, changing it later will be much easier. Rails is equipped with helpers and libraries to help implement this approach. More concise and efficient code allows changes to be made easily later on in the development cycle, as is the norm in an Agile methodology.
</p>




<p>
  <strong>2. Test-drive Your Code</strong><br/>
  Not only do tests ensure that features work, but they later come in handy when changes are being made to assure everything runs correctly. Starting tests are automatically generated for you in Ruby, which help to ensure that tests are run at every process in development (which, again, is important in Agile development).
</p>




<p>
  <strong>3. Focus on Convention over Configuration</strong><br/>
  Ruby on Rails comes with conventions to spend less time configuring, such as generators that enable you to setup fast, and a multi-environment setup that is part of the package. Also included are pre-configurations for HTTP servers, meaning changes can be made to the live-site to satisfy the client demands face-to-face. With common web programming tasks out of the way (and more concise and readable), more time can be devoted to catering towards the clients specifications. A project that is easy and fast to modify will work best in an Agile environment.
</p>




<p>
  <strong>4. Be Dynamic</strong><br/>
  Rails is constantly changing and adapting to the tech industry. When other frameworks develop new techniques, Rails is quick to follow through with their ideas. Rails has a thriving online community, consisting of blogs, conferences, IRC channels, and gems, which is the term used for Ruby software packages. All these make it easier to revise and update features for the product so that it is ready for the current environment.
</p>




<p>
  Agile has a strong focus on constant adaption in coordination with the client. Quickness, efficiency, and quality are key factors in implementing development in this method. Ruby on Rails is designed to be fast, simple, and malleable, and because of this has grown to be extremely popular.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Main Advantages of Ruby on Rails Usage]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/22/main-advantages-of-ruby-on-rails-usage/"/>
    <updated>2015-05-22T16:39:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/22/main-advantages-of-ruby-on-rails-usage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Main Advantages of Ruby on Rails Usage" />
</p>




<p>
  Ruby on Rails (RoR) is a compact and effective way to build web applications. Each platform has advantages and disadvantages that make sense in light of each company&#8217;s target market. The main advantages of Ruby on Rails usage are:
</p>




<p>
  <strong>1. High Speed of Development</strong><br/>
  For example, site development that would traditionally take about 2-3 months can commonly be launched much quicker with Ruby on Rails. This time savings results from a few factors: a leaner code-base (fewer lines of redundant code) and a modular design (re-using existing components rather than building everything from scratch). As such, after launching the site, modifications can be made more quickly as well.
</p>




<p>
  <strong>2. Cost-Effectiveness</strong><br/>
  As Rails sites can be built and modified quickly, this is a really cost-effective way to create and maintain the website — without compromising the quality, performance, or scalability of your site.
</p>




<p>
  <strong>3. Flexibility</strong><br/>
  There are lots of gems (already built components of specific functionality available); re-using them rather than building everything from scratch provides a lot of different bricks to build the application and extend its functionality.A variety of plugins are available to solve just about any functional challenge you may need for your project. Additionally, Rails is an ideal way to build custom database solutions at a fraction of the usual time and expense.
</p>




<p>
  <strong>3. Flexibility</strong><br/>
  There are lots of gems (already built components of specific functionality available); re-using them rather than building everything from scratch provides a lot of different bricks to build the application and extend its functionality.A variety of plugins are available to solve just about any functional challenge you may need for your project. Additionally, Rails is an ideal way to build custom database solutions at a fraction of the usual time and expense.
</p>




<p>
  <strong>4. High code quality</strong><br/>
  The Ruby language and Ruby on Rails framework are under active development and support. New features, ideas are introduced quite often. Security updates and fixes are released regularly. A large body of books, blog entries and experiences are also shared online to learn from.
</p>




<p>
  <strong>5. Industry support</strong><br/>
  There are professional hosting support companies, (Heroku, EngineYard). experienced consulting companies, two primary cloud-based offerings, and help with development and deployment and more. Both provide an easy-to-scale, managed hosting environment. Both are built on Amazon EC2 and offer contrasting approaches and features that will appeal to different audiences.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 8 Ruby on Rails Websites]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/21/top-8-ruby-on-rails-websites/"/>
    <updated>2015-05-21T14:44:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/21/top-8-ruby-on-rails-websites</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="How Technology Company Make Money?" />
</p>




<p>
  If you are curious to know which sites are built with Ruby on Rails, then this article is for you. In a previous blog we have mentioned that startups tend to choose Ruby on Rails for a variety of reason. Same reasons reflect here. These 8 following sites use the framework or at least these were built with Ruby on Rails initially.
</p>




<p>
  <strong><a href="https://twitter.com/" target="_blank">TWITTER</a></strong><br/>
  Twitter is the most popular micro blogging platform in the world. It was envisioned by Dorsey as the sms of the internet. Twitter was first developed in 2006 with public release in 2007. It was developed in Ruby on Rails. Later it shifted its framework due to scalability. Like we said, startups have some special interest in Ruby on Rails.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_twitter.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.shopify.com/" target="_blank">SHOPIFY</a></strong><br/>
  Shopify is SaaS e-commerce platform. Basically, the merchants subscribes and uses Shopify for selling their product online or in store. Shopify was developed by Lütke in Ruby on Rails. He spent two months to develop the e-commerce platform for their snowboarding website. Interestingly, he did it because he was very dissatisfied with the existing platforms. In 2006, Shopify opened up to merchant and began enjoying significant growth.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_shopify.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.shopify.com/" target="_blank">GROUPON</a></strong><br/>
  Groupon is a deal of the day platform that issues discounted gift certificate a buy can use at variety of stores. Groupon was initially build with Ruby on Rails. It has enjoyed significant growth and now has 3 billion+ market capitalization. However, its business model has been heavily criticized since it inception. The criticism has been further bolstered by steady decline in sales and the ousting of the Founder-CEO Mr. Andrew D. Mason.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_groupon.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.bloomberg.com/" target="_blank">BLOOMBERG</a></strong><br/>
  Bloomberg is a private software, data and media company. It currently employs 15000 employees. Bloomberg provides analytical and stock trading platform, data and news services to companies through Bloomberg terminal.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_bloomberg.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="https://soundcloud.com/" target="_blank">SOUNDCLOUD</a></strong><br/>
  SoundCloud is a social platform for sound. It is like audio youtube where anybody can upload any sound or tunes and share them publicly or privately. Today, everyone is on multiple social platform. This has added a new dimension to SoundCloud. It is growing everyday and becoming a concern for other paid platform like iTunes and Google Play.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_soundCloud.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="https://squareup.com/global/en-gb/register" target="_blank">SQUARE</a></strong><br/>
  Square is making commerce easier for both enterprises and consumers. It was co-founded by twitter.com co-founder Dorsey. It makes credit card readers and stands that are attached with phones and tables. Users swap cards through these readers and make purchases.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_square.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="https://github.com/" target="_blank">GITHUB</a></strong><br/>
  The hub is the social platform for programmers. Git works a repository where coders push codes and conduct review. It is a leading website for code share. If you are a programmer/ developer applying for a job, many times perhaps you have noticed employers asking for your Github username to see your work. Github significantly facilitates the development of web application.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_github.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.slideshare.net/" target="_blank">SLIDESHARE</a></strong><br/>
  Another site built with Ruby on Rails is Slideshare. Slideshare is one of the most popular education and e-learning platform. It hosts different presentation slides and documents from users. Headed by CEO and Co-founder Ms. Rashmi Sinha, Slideshare is growing in popularity every day. It supports PowerPoint, PDF, Keynote and OpenDocument and also it hosts variety of documents from users.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_slideshare.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  The article merely introduces the sites, does not go into technicalities. The purpose was to show you that there are many strong web platform that use the Ruby on Rails. If you are interested to use Ruby on Rails for your next project, you can choose Ruby on Rails and for that
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Technology Company Make Money?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/20/how-technology-company-make-money/"/>
    <updated>2015-05-20T17:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/20/how-technology-company-make-money</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/how_tech_company_make_money.png" width="400" alt="How Technology Company Make Money?" />
</p>




<p>
  Have you ever wonder how the companies that offer free services make money? Such as Instagram, Evernote, Facebook, Twitter, LinkedIn, Google Maps, so on&#8230; or if it is even profitable to keep free users using their services. We would go through several revenue models and hopefully, it will throw you some light next time you decide to roll your own startup.
</p>




<p>
  <strong>Revenues Models</strong><br/>
  Let’s start first giving some perspective what models are actually giving the most revenues. In 2013, App Store, reported that free apps brought the 71% of the revenue! Even more than paid apps&#8230; how’s that even possible?
</p>




<p>
  Ok, let’s discuss some revenue models to understand this. There are 8 main models.
</p>




<p>
  <strong>Freemium:</strong> apps are free to download and use. However, quite often some different features are sold separately (e.g. new levels, specialized functions, remove ads, more capacity, and so on). E.g. Pandora, Hulu, Google Docs.
</p>




<p>
  <strong>Premium:</strong> users paid upfront a fixed price for the application. After you pay for it, you are able to download it. Usually new software updates are free. E.g. MS Office 365.
</p>




<p>
  <strong>Subscription:</strong> users paid a fixed price which is automatically charged every certain time. Magazines in the iOS Newsstand are a good example of this subscription based model. Subscriptions have generally lower prices than premium accounts. E.g. Netfix.
</p>




<p>
  Freemium is not as &#8220;free&#8221; as it might seem in the surface, there are indirect ways of getting revenues from it.
</p>




<p>
  <strong>Advertising:</strong> the application/service is free to use, but it contains ads or interruption banners for an couple of minutes in order to raise revenue. This model is usually applied along with freemium apps and to remove the ads users have to pay a subscription. E.g. Spotify.
</p>




<p>
  <strong>Selling data:</strong> user information and behavior inside the application is sell to interested 3rd-parties. Usually used with freemium apps and specified in the terms of used.
</p>




<p>
  <strong>Transaction:</strong> the application is free to use generally and charges a percentage or fixed fee with every users’ transaction made. For example, it allows you to publish your item on their site for free but when you sell it, it charges you a fee. Or publish a project in a site and when it reaches certain goal a percentage fee is applied. E.g. eBay, Kickstarter.
</p>




<p>
  <strong>Online lead generation:</strong> collects user’s information sometimes in an exchange of a product or service and then resell the information to companies interested indirectly. It’s different from the selling data model because the information is not sold to 3rd party directly, but indirectly. Influencing users desitions based on 3rd party companies affiliated and users’ interests, likes and behaviors. E.g. Mint, LinkedIn.
</p>




<p>
  <strong>Donations:</strong> (it’s self-explanatory) Services/apps are free, but it encourages users to contribute throughout donations to support the development.
</p>




<p>
  After reading these, you might have more clues why free apps are so much win nowadays. They helped to create those million-dollar-per-day games! (remembered FlappyBird, Candycrush, Farmville…) In a market where there is enough competition, having a free option will take you to large numbers of users quicker and broader, because of the low barrier to entry. For instance, Whatsapp had at certain point 10k of daily downloads, after moving it to $1 it download rate drops 10 times, they finally opted for yearly subscriptions.
</p>




<p>
  Subscription-based revenue are also a model worth doing a special mention. It brings a steady flow of income to companies and usually comes in different tiers to fulfill users need. But, it has to be flexible enough, because it might limit hard core users which might be willing to pay more for taking the product to a new level.
</p>




<p>
  <strong>How does Instagram make money?</strong><br/>
  Freemium: Before selling to Facebook they were not making money. They are trying to incorporate Ads.
</p>




<p>
  <strong>How does Facebook make money?</strong><br/>
  Advertising & Freemium: Advertising is the main source of revenue but also some small percentage comes from payments, web apps and other sources.
</p>




<p>
  <strong>How does Whatsapp make money?</strong><br/>
  Freemium & Subscribers: The company is based on Freemium model for firt year. Later, it has a subscription of $1 per year.
</p>




<p>
  <strong>How does Twitter make money?</strong><br/>
  Advertising & Freemium: Mostly on corporate advertising and payments from &#8216;promoted&#8217; tweets.
</p>




<p>
  <strong>How does Kickstarter make money?</strong><br/>
  Transactions/Royalties: Charges a 5% for successfully funded projects.
</p>




<p>
  <strong>How does Skype make money?</strong><br/>
  Freemium & Subscribers: Skype-to-skype calls are free, but users can buy additional features.
</p>




<p>
  <strong>How does Groupon make money?</strong><br/>
  Freemium & Transactions/Royalties: Groupon takes charges a fee to seller for every deal sold. It&#8217;s one of the fastest growing company in the world. Going from $30.5 million in year one to $713.4 million in year two.
</p>




<p>
  <strong>How does Mint make money?</strong><br/>
  Lead Gen: Mint get paid a small fee when user switch to a new bank or company.
</p>




<p>
  <strong>How does Linkedin make money?</strong><br/>
  Advertising, Freemium, Subscribers & Selling Data: Sells user&#8217;s data to companies and recruiters.
</p>




<p>
  <strong>How does Amazon Kindle make money?</strong><br/>
  Premium: Amazon loses money with Kindle but at the same time makes money selling digital content on it.
</p>




<p>
  <strong>How does Microsoft Xbox Kindle make money?</strong><br/>
  Advertising, Freemium, Subscribers, Premium & Transactions/Royalties: Xbox console and games cost money (premium), charges $50 annually (subscribers) in addition to ads.
</p>




<p>
  <strong>How does Stack Overflow make money?</strong><br/>
  Advertising: Ads, banners and sponsored results.
</p>




<p>
  <strong>How does Netflix make money?</strong><br/>
  Subscribers: Just subscribers.
</p>




<p>
  <strong>How does Pandora make money?</strong><br/>
  Advertising, Freemium & Subscribers: For free users presents adds, for subscribers does not.
</p>




<p>
  <strong>How does Pandora make money?</strong><br/>
  Advertising, Freemium & Subscribers: For free users presents adds, for subscribers does not.
</p>




<p>
  <strong>How does Spotify make money?</strong><br/>
  Advertising, Freemium & Subscribers: It has been reporting loses for a couple of years due to royalty payments.
</p>




<p>
  <strong>How does Firefox make money?</strong><br/>
  Transactions/Royalties: Most of the income comes from royalties from the Firefox search box. Their search partners includes Google, Bing, Yahoo, Yandex, Amazon, eBay and others. Also donations and grants.
</p>




<p>
  <strong>How does Craigslist make money?</strong><br/>
  Advertising, Freemium & Transactions/Royalties: Ads and charging users for posting in selected categories.
</p>




<p>
  <strong>How does Dropbox make money?</strong><br/>
  Freemium, Subscribers & Transactions/Royalties: A fixed capacity for free, to increase it users have to subscribe.
</p>




<p>
  <strong>How does Google make money?</strong><br/>
  Advertising: Ad products is their main source of revenue (AdSense and AdWords).
</p>




<p>
  <strong>How does Shopify make money?</strong><br/>
  Subscribers & Transactions/Royalties: Ad products is their main source of revenue (AdSense and AdWords).
</p>




<p>
  <strong>How does Airbnb make money?</strong><br/>
  Subscribers & Transactions/Royalties: Charge to travelers a fee of 6-12% and hosts pay a 3% for every booking on their site.
</p>




<p>
  <strong>How does Zynga make money?</strong><br/>
  Advertising & Freemium: Zynga makes money through people purchasing credits for games and also throught partnerships.
</p>




<p>
  <strong>How does World Of Warcraft make money?</strong><br/>
  Advertising & Subscribers: Charges $15 per month to users. They also sends expasions packs and discs.
</p>




<p>
  <strong>How does Hulu make money?</strong><br/>
  Advertising & Subscribers: Free service has Ads, limitations and restrictions, which are removed for subscribed users.
</p>




<p>
  So far so good, That it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Tips to Scale Your Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/19/5-tips-to-scale-your-ruby-on-rails-application/"/>
    <updated>2015-05-19T11:39:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/19/5-tips-to-scale-your-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="5 Tips to Scale Your Ruby on Rails Application" />
</p>




<p>
  There are lots of resources on the web that explain how to scale web applications and how to scale Rails. Here&#8217;s a quick summary of just five of the basic strategies for a scalable Ruby on Rails web application. Some of them are specific to Ruby on Rails; others generalize to any shared-nothing application server architecture.
</p>




<p>
  <strong>1. Cache, cache, cache and More Cache</strong><br/>
  Cache at the client and use Ajax libraries like JQuery to stream in data to the browser on demand. Use gateway /reverse proxy caches to cache HTTP responses at your website, and learn how to use expiration and etags. Take full advantage of Rails&#8217; built-in action, page and fragment caching. Use memcache to cache results that you&#8217;d otherwise pull from your database.
</p>




<p>
  <strong>2. Segregate Data and Data Serving</strong><br/>
  Don&#8217;t munge all your data storage into a single database &#8220;for convenience.&#8221; Datasets that are independent should go into separate databases. Serve static assets from a separate tier, or use Amazon S3 or a CDN like Akamai to serve those assets. It&#8217;s more expensive, but it simplifies scaling. Relational databases scale up, not out, so sit down and have a heart to heart talk with your DBA over whether you really need a relational data model for all your data stores. Maybe you can get away with a simpler key-value data store for some of your simpler data. There are ruby clients, so use Hadoop for scaling the storage and analysis of large amounts of unstructured data. Also know the scalability limitations of whatever file system you&#8217;re using. If you have heavy data reporting needs, do your reporting from a copy of your main database, not from your production database.
</p>




<p>
  <strong>3. Minimize & Handle External Dependencies</strong><br/>
  Watch for dependencies on external services like ad serving networks or RSS feeds. If a service isn&#8217;t responding or can&#8217;t handle your growing request load, make sure that you have a fallback strategy.
</p>




<p>
  <strong>4. Tend Your Database and Your Job Handlers</strong><br/>
  Any ORM, including Rails&#8217; ActiveRecord can generate SQL queries that cause database performance issues. Make sure you&#8217;re looking at your slow query log after each major integration to make sure you don&#8217;t have &#8220;missing&#8221; database indices, and haven&#8217;t written inappropriate find-all&#8217;s in your Rails code. Scrub your database periodically for indices that are no longer being used. Similarly, watch the resource consumption of your background and scheduled jobs. As your user base grows jobs can start to overlap, and daily log processing can start to take more than 24 hrs! This kind of thing can sneak up on you easily. Ideally, segregate your jobs in a separate tier. And, as you grow, look at moving to a message based job handler.
</p>




<p>
  <strong>5. Shard Your Unavoidably Relational Data</strong><br/>
  At high scaling levels, your MySQL database will have to be sharded. Sharding involves breaking up your datasets into independent pieces based on a key. For many consumer-oriented Rails sites, that can mean sharding based on userid&#8217;s, but other sharding schemes use data-age, or access-frequency (if that&#8217;s predictable).
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IP Geolocation in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/16/ip-geolocation-in-ruby-on-rails-application/"/>
    <updated>2015-05-16T23:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/16/ip-geolocation-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="IP Geolocation in Ruby on Rails Application" />
</p>




<p>
  Sometimes it can be useful to find a user&#8217;s physical location in our Rails application. For instance, maybe we want to send a special Happy Holidays to users of a particular country. IP address geolocation lets us do exactly that. With IP address geolocation you can get a pretty good idea of where the customer is accessing your site from as long as they aren&#8217;t using a proxy server or some other means of obscuring their IP address. In this article we will show you how to utilize the Maxmind GeoIP database to look up the location of just about any IP address. Let&#8217;s get started.
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  To utilize the IP address geolocation functionality, we first need to add the geoip gem to our gemfile. Open up your gemfile and add in the code listed below:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;geoip&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.4.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now let&#8217;s run a bundle install to install the gem.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now we need to download the GeoIP database for use with the geoip gem. A free one <a href="http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz" target="_blank"> can be downloaded at this link</a>, or you can use the paid version if you have a subscription. Once downloaded, extract the compressed archive and place the .dat folder contained within in the root directory of your Rails app.
</p>




<p>
  Great, now let&#8217;s create a controller so that we can play around with the GeoIP functionality. Run the commands below to create a controller called GeoIpRequest:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">geo_ip_request</span> <span class="kp">new</span> <span class="n">create</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, open up your routes file and modify it so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">resource</span> <span class="ss">:geo_ip_request</span><span class="p">,</span> <span class="ss">controller</span><span class="p">:</span> <span class="ss">:geo_ip_request</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;geo_ip_request#new&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now open up your GeoIpRequest controller and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/controllers/geo_ip_request_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GeoIpRequestController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="nb">require</span> <span class="s1">&#39;geoip&#39;</span>
</span><span class='line'>    <span class="vi">@info</span> <span class="o">=</span> <span class="no">GeoIP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;GeoLiteCity.dat&quot;</span><span class="p">))</span><span class="o">.</span><span class="n">city</span><span class="p">(</span><span class="n">ip_request_params</span><span class="o">[</span><span class="ss">:host</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ip_request_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:request</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:host</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In the code above, we tell the geoip gem to load our database file and do a search for the host parameter.
</p>




<p>
  Now let&#8217;s create our views. Open up the new view for the GeoIpRequest controller and modify it so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>app/views/geo_ip_request/new.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">GeoIP</span> <span class="no">Example</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;p&gt;Get the country for any ip address or hostname by typing it below and pressing the lookup button.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for :request, url: geo_ip_request_index_path do |f| %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:host</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.submit &quot;Lookup&quot; %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now finally let&#8217;s do the create view. Open up the create view for the GeoIpRequest controller and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/views/geo_ip_request/create.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">IP</span> <span class="no">Address</span> <span class="no">Info</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;b&gt;IP:&amp;nbsp;&amp;nbsp;&lt;/</span><span class="n">b</span><span class="o">&gt;&lt;</span><span class="sx">%= @info.request %&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="sx">&lt;b&gt;Country:&amp;nbsp;&amp;nbsp;&lt;/b&gt;&lt;%=</span> <span class="vi">@info</span><span class="o">.</span><span class="n">country_name</span> <span class="sx">%&gt;&lt;br /&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">b</span><span class="o">&gt;</span><span class="ss">City</span><span class="p">:</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/b&gt;&lt;%= @info.city_name %&gt;&lt;br /</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">b</span><span class="o">&gt;</span><span class="ss">Region</span><span class="p">:</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="o">&amp;</span><span class="n">nbsp</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/b&gt;&lt;%= @info.real_region_name %&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Excellent, now if you fire up your rails development server and and navigate to http://localhost:3000 you will see a form requesting your ip address or hostname. Entering any ip address or host name will show the country, city, and region that ip is from.
</p>




<p>
  So far so good, that&#8217;s it!!! that&#8217;s all there is to it!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Concerns in Rails 4 Models]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/14/code-concerns-in-rails-4-models/"/>
    <updated>2015-05-14T12:48:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/14/code-concerns-in-rails-4-models</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Code Concerns in Rails 4 Models" />
</p>




<p>
  You may have noticed that Rails 4 creates a new folder called concerns. Concerns are pieces of code that allow you to better organize the code that you write. This feature has actually been around for a long time prior to Rails 4, Rails 4 merely creates the folders for you and sets up the environment. In this article, we focus primarily on Rails 4.0, but it should apply equally to 3.2.x or even 3.0.x and earlier.
</p>




<p>
  Here is a simple example, lets say we have a model called user. In this model we would typically have something like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_secure_password</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>    <span class="n">user</span> <span class="k">if</span> <span class="o">!</span><span class="n">user</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_password_reset_token</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;Create password reset token code goes here.&quot;</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We can create a a file in the app/models/concerns folder called authentication.rb (app/models/concerns/authentication.rb) and place the following code in it:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Authentication</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">has_secure_password</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">authenticate</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user</span> <span class="o">=</span> <span class="n">find_by_email</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>      <span class="n">user</span> <span class="k">if</span> <span class="n">user</span> <span class="o">&amp;&amp;</span> <span class="n">user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_password_reset_token</span>
</span><span class='line'>    <span class="n">logger</span><span class="o">.</span><span class="n">warn</span> <span class="s2">&quot;Create password reset token code goes here.&quot;</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, lets refactor the User model to use the new code. Change the users model (app/models/user.rb) so that it looks like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Authentication</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now if you start the rails server and attempt to authenticate, you&#8217;ll notice that the functionality hasn&#8217;t changed at all. That&#8217;s the idea! You can use this method for organizing and DRYing up your code.
</p>




<p>
  The extend <code>ActiveSupport::Concern</code> tells rails that we are creating a concern.
</p>




<p>
  The code contained within the included block will be executed within the context of the class that is including the module. This is perfect for including functionality provided by 3rd party gems, etc.
</p>




<p>
  Next you will notice the <code>module ClassMethods</code> block. The code contained within this block will be added to the Class itself. For example, the code above adds an authenticate function to the User class. This allows you to do User.authenticate(email, password) instead of User.find_by_email(email).authenticate(password).
</p>




<p>
  Finally you will see the last bit of code, the <code>create_password_reset_token</code> function. Code not included in the <code>ClassMethods</code> block or the <code>included</code> block will be included as instance methods. For example, You could do <code>@user = User.find(params[:id])</code> and then do <code>@user.create_password_reset_token</code> to create a password reset token for the specified user.
</p>




<p>
  Now, all of this is great, but what benefit do you get from organizing your code in this fashion? Well, lets look at a good example of how utilizing this functionality of Rails can save you time and make your code much cleaner. Lets say we have a number of different models, BlogPosts, Articles, Comments, etc and we want to add tagging functionality that will allow the user to tag each object as something. Utilizing concerns we can quickly and easily do this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Taggable</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:taggings</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:taggable</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'>    <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:taggings</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tag_names</span>
</span><span class='line'>    <span class="n">tags</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In this simple example, you&#8217;ll see that simply including Taggable on your modules will (with the database structure in place of course) make your models taggable. This code can quickly and easily be spread upon as many models as needed. Well that&#8217;s it! Concerns are a great way to keep your code organized and DRY.
</p>




<p>
  So far so good, That it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome jQuery Tricks]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/13/awesome-jquery-tricks/"/>
    <updated>2015-05-13T12:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/13/awesome-jquery-tricks</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/jquery_logo.png" width="500" alt="Awesome jQuery Tricks" />
</p>




<p>
  As we all know, jQuery is an awesome library and has transformed the internet as we know it. In this article we will cover 5 extremely useful jQuery tricks that you can use in your sites. Let&#8217;s get started.
</p>




<p>
  <strong>Gracefully Degrade Broken Images</strong><br/>
  Broken images can be a pain to deal with. They degrade the user experience and can be difficult to find without scanning your site regularly with a 3rd party tool. Luckily it&#8217;s easy to substitute broken images with an image that you specify using jQuery. the <code>error</code> callback of an image gets fired any time an image can&#8217;t be successfully loaded by the browser. For example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="nx">images</span><span class="o">/</span><span class="nx">missing</span><span class="p">.</span><span class="nx">png</span><span class="err">’</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The code above would replace any broken images with an image in the images folder called missing.png. You could also do something like make an AJAX request to your server to log the location of the broken image.
</p>




<p>
  <strong>Wait For an Image to Be Loaded</strong><br/>
  Sometimes you need to wait for an image to be loaded before continuing to process events. This is most often useful with libraries like the <a href="http://masonry.desandro.com/" target="_blank">jQuery Masonry library</a>, where images can affect the size of the overall content. Fortunately this is easy with the load callback. For example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;img&#39;</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Do stuff here...</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The above code would wait for the image to be loaded and then execute the code specified in the callback.
</p>




<p>
  <strong>Zebra Stripe a Table</strong><br/>
  Sometimes we want our tables to alternating odd/even colors. While this is possible using CSS3, older browsers don&#8217;t support most CSS3 features. Using this script allows our tables to be striped across all browsers.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;table tr:even&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;background&#39;</span><span class="p">,</span> <span class="s1">&#39;#f7f7f7&#39;</span><span class="p">);</span> <span class="c1">// Strip every even row</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;table tr:odd&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;background&#39;</span><span class="p">,</span> <span class="s1">&#39;#f7f7f7&#39;</span><span class="p">);</span> <span class="c1">// Stripe every odd row</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;table &gt; tbody &gt; tr:even&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;background&#39;</span><span class="p">,</span> <span class="s1">&#39;#f7f7f7&#39;</span><span class="p">);</span> <span class="c1">// Only stripe the table body</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The above code will do striping as noted in the comments.
</p>




<p>
  <strong>Preloading Images</strong><br/>
  If your page uses a lot of images that aren&#8217;t visible initially, it might be worth it to preload them. This simple script listed below does exactly that.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">preloadImages</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;&lt;img /&gt;&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;src&quot;</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">preloadImages</span><span class="p">(</span><span class="s2">&quot;images/myimage1.jpg&quot;</span><span class="p">,</span><span class="s2">&quot;images/myimage2.jpg&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Detect Mobile Devices</strong><br/>
  Sometimes we need a &#8216;check all&#8217; checkbox for our web pages that selects every checkbox in a fieldset. The code below lets you easily accomplish this.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.checkall&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parents</span><span class="p">(</span><span class="s1">&#39;fieldset:eq(0)&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;:checkbox&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;checked&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">checked</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails with Bootstrap-Sass]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/11/ruby-on-rails-with-bootstrap-sass/"/>
    <updated>2015-05-11T16:41:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/11/ruby-on-rails-with-bootstrap-sass</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bootstrap.png" alt="Ruby on Rails with Bootstrap-Sass" />
</p>




<p>
  Twitter Bootstrap is an insanely popular CSS framework that is used to quickly and easily throw together great looking websites. Many websites (including this one) are built on this framework, and with good reason; the power and ease of use rival that of most other frameworks.
</p>




<p>
  In this tutorial we will show you how to add the framework using the bootstrap-sass gem. We will also show you how to override the bootstrap styles using the various scss variables provided by the bootstrap framework. Finally we will show you how to use the will_paginate-bootstrap gem to style your pagination using bootstrap&#8217;s pagination styles.
</p>




<p>
  <strong>Setup Project</strong><br/>
  In an existing or new project, add the following line to Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;bootstrap-sass&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.3&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Run a <code>bundle install</code> and start your <code>rails server</code>. Now that the gem is installed you are ready to to start using bootstrap.
</p>




<p>
  The first thing we will need to do is create a new SCSS file to store our bootstrap configuration. Create a file called <code>bootstrap_config.scss</code> in the <code>app/assets/stylesheets</code> folder.  This file will be used to store bootstrap specific configuration. Next, we will need to tell Rails to actually include bootstrap in this file. Open <code>app/assets/stylesheets/bootstrap_config.scss</code> and add the following line:
</p>




<figure class='code'><figcaption><span>app/assets/stylesheets/bootstrap_config.scss </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@import</span> <span class="s2">&quot;bootstrap&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you want a responsive layout, also add the following line:
</p>




<figure class='code'><figcaption><span>app/assets/stylesheets/bootstrap_config.scss </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@import</span> <span class="s2">&quot;bootstrap-responsive&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will include bootstrap in your application. Now, any views you create will automatically include bootstrap as long as they use the main application layout. We aren&#8217;t quite done yet though, if you are on Rails 4 (Rails 3.2 users don&#8217;t need to do this) you will need to perform one more step. Open up the <code>config/application.rb</code> file and add the following line to your application&#8217;s configuration:
</p>




<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w(*.png *.jpg *.jpeg *.gif)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This is due to rails no longer compiling images in vendor assets by default.
</p>




<p>
  Now go ahead and create a controller and try it out. If you aren&#8217;t familiar with the framework itself, the absolute best place to learn about it is at <a href="http://getbootstrap.com/" target="_blank">The Official Twitter Boostrap Site</a>. That&#8217;s all there is to setting it up!
</p>




<p>
  <strong>Bootstrap Variables</strong><br/>
  The bootstrap-sass gem, much like it&#8217;s official LESS-based cousin, has a number of variables that you can override to change the look and feel of various styles. Lets try it out. Suppose we want to change the background color of our website. To do this we just need to open up <code>app/assets/stylesheets/bootstrap_config.scss</code> and add the following line to the very top of the file:
</p>




<figure class='code'><figcaption><span>app/assets/stylesheets/bootstrap_config.scss </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$bodyBackground</span><span class="p">:</span> <span class="c1">#e0e0e0;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, if you refresh the page you will notice that the body background has changed to a light gray color. 
</p>




<p>
  <strong>Will Paginate</strong><br/>
  One pitfall that rails users often run into is utilizing will_paginate in a twitter bootstrap project. Luckily the will_paginate-bootstrap gem makes this very easy. Add the following line to your gemfile and then run a <code>bundle install</code> and restart your rails server:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;will_paginate-bootstrap&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now, open up the view where you are using will_paginate, find any will_paginate lines and add <code>:renderer => BootstrapPagination::Rails</code> to the end of them so they look like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= will_paginate @products, :renderer =</span><span class="o">&gt;</span> <span class="ss">BootstrapPagination</span><span class="p">:</span><span class="ss">:Rails</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now if you refresh the page, you&#8217;ll see that that will_paginate is now styled using bootstrap.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enable Compression for Nginx]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/11/enable-compression-for-nginx/"/>
    <updated>2015-05-11T15:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/11/enable-compression-for-nginx</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx-plus.png" width="500" alt="Enable Compression for Nginx" />
</p>




<p>
  Using Nginx for your Rails app? Use this trick to speed up your site. If you are using Nginx, you can quickly and easily speed up your site by enabling gzip compression for your application. Gzip compression compresses files and assets before they are sent to the client, resulting in a nice little speed boost. A sample of how to do this is listed below:
</p>




<figure class='code'><figcaption><span>nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="n">server_name</span> <span class="n">mysite</span><span class="o">.</span><span class="n">com</span> <span class="n">www</span><span class="o">.</span><span class="n">mysite</span><span class="o">.</span><span class="n">com</span><span class="p">;</span>
</span><span class='line'>  <span class="n">root</span> <span class="sr">/opt/m</span><span class="n">ysite</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">current</span><span class="o">/</span><span class="kp">public</span><span class="p">;</span>
</span><span class='line'>  <span class="n">passenger_enabled</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_http_version</span> <span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_vary</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_comp_level</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_proxied</span> <span class="n">any</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip_types</span> <span class="n">text</span><span class="o">/</span><span class="n">plain</span> <span class="n">text</span><span class="o">/</span><span class="n">html</span> <span class="n">text</span><span class="o">/</span><span class="n">css</span> <span class="n">application</span><span class="o">/</span><span class="n">json</span> <span class="n">application</span><span class="o">/</span><span class="n">javascript</span> <span class="n">application</span><span class="o">/</span><span class="n">x</span><span class="o">-</span><span class="n">javascript</span> <span class="n">text</span><span class="o">/</span><span class="n">javascript</span> <span class="n">text</span><span class="o">/</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">rss</span><span class="o">+</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">atom</span><span class="o">+</span><span class="n">xml</span> <span class="n">application</span><span class="o">/</span><span class="n">rdf</span><span class="o">+</span><span class="n">xml</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The gzip types specifies the mime types that will be compressed using the gzip protocol. You can exclude and include other mime types using this particular list. It&#8217;s best not to include things such as images and/or media files.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 FriendlyId]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/09/rails-4-friendlyid/"/>
    <updated>2015-05-09T22:13:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/09/rails-4-friendlyid</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Rails 4 FriendlyId" />
</p>




<p>
  In this article we will go over using <a href="https://github.com/norman/friendly_id" target="_blank">FriendlyId</a> in Rails 4. It is important to note that the current version of FriendlyId (4.0) does not work with Rails 4. Therefore we will need to use FriendlyId 5.x, which is currently in release candidate status.
</p>




<p>
  First, let&#8217;s include the FriendlyId gem in our gemfile.
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;friendly_id&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 5.0.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  FriendlyId no longer overrides finder code by default. Because of this we will need to change the way our controller code works. FriendlyId now exposes it&#8217;s functionality via <code>.friendly</code>. For example, to find a post by it&#8217;s friendly id, we use something like <code>Post.friendly.find(params[:id])</code>. To get FriendlyId working, you need to modify your controllers to use this behavior. An example is shown below.
</p>




<figure class='code'><figcaption><span>app/controllers/posts_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">friendly</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you have a large site making extensive use of FriendlyId, you can also restore the old finder override behavior. This isn&#8217;t recommended though. An example of how to do this is listed below.
</p>




<figure class='code'><figcaption><span>app/models/post.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">FriendlyId</span>
</span><span class='line'>  <span class="n">friendly_id</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">use</span><span class="p">:</span> <span class="o">[</span><span class="ss">:slugged</span><span class="p">,</span> <span class="ss">:finders</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Once you&#8217;ve added this, finder override functionality should now be restored. For example, the code listed below will now work as before.
</p>




<figure class='code'><figcaption><span>app/controllers/posts_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  FriendlyId 5 introduces a new slug candidates feature. This feature allows you to tell friendly id what to do in the case of duplicate slugs. See the code listed below for an example of how to utilize this functionality.
</p>




<figure class='code'><figcaption><span>app/models/post.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">FriendlyId</span>
</span><span class='line'>  <span class="n">friendly_id</span> <span class="ss">:slug_candidates</span><span class="p">,</span> <span class="ss">use</span><span class="p">:</span> <span class="o">[</span><span class="ss">:slugged</span><span class="p">,</span> <span class="ss">:finders</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">slug_candidates</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>      <span class="ss">:title</span><span class="p">,</span>
</span><span class='line'>      <span class="o">[</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:id</span><span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The code listed above tells FriendlyId you want to use the slug_candidates method to make the slug unique. It will try the list beginning to last, so in the example above, it will try to generate the slug first using title, and then if a post by that title already exists, it will try again by appending the id.
</p>




<p>
  Some other quick things to note when upgrading to FriendlyId 5:<br/>
  - The default sequence separator has been changed from two dashes (&#8211;) to one dash (-). If you have a url scheme in place using the old way of doing things, you might want to find a workaround.<br/>
  - FriendlyId no longer uses a numeric sequence to differentiate a conflicting slug. Instead it uses a UUID (example: 2bc08962-b3dd-4f29-b2e6-244710c86106). If you dislike this functionality, you can utilize the new slug candidates feature explained above.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Get a User's Gravatar]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/09/ruby-on-rails-get-a-users-gravatar/"/>
    <updated>2015-05-09T21:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/09/ruby-on-rails-get-a-users-gravatar</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Ruby on Rails Get a User's Gravatar" />
</p>




<p>
  <a href="https://en.gravatar.com/" target="_blank">Gravatar</a> is a Fantastic service that provides a universal avatar for users. Gravatar has designed their service in such a way that the user&#8217;s avatar can be rendered on any site free of charge. Gravatar is used on millions of sites across the globe including GitHub, Stack Overflow, Word Press, Disqus, and many more sites. You can easily use gravatar without much effort. Simply add the code below to your application helper:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationHelper</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">gravatar_url</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gravatar</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:MD5</span><span class="o">::</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>    <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://gravatar.com/avatar/</span><span class="si">#{</span><span class="n">gravatar</span><span class="si">}</span><span class="s2">.png?s=</span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The first parameter, email, is the email address you wish to obtain the gravatar for. The second parameter, size, is the size of the gravatar you wish to render. To actually get the link to the gravatar, we obtain an MD5 hash of the email and then lowercase it and append it to the end of the gravatar url. The size is specified using the s parameter. To use this function, simple pass the newly generated Gravatar url to an image tag like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">image_tag</span> <span class="n">gravatar_url</span><span class="p">(</span><span class="s2">&quot;you@youremail.com&quot;</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span> <span class="ss">alt</span><span class="p">:</span> <span class="s2">&quot;&quot;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will render the gravatar for that email address or a default image if the avatar doesn&#8217;t exist. If you wish to specify your default image, you can modify your helper to look like the code listed below, changing the default url to whatever you wish:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">gravatar_url</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'>  <span class="n">gravatar_id</span> <span class="o">=</span> <span class="ss">Digest</span><span class="p">:</span><span class="ss">:MD5</span><span class="o">::</span><span class="n">hexdigest</span><span class="p">(</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="n">default_url</span> <span class="o">=</span> <span class="s2">&quot;http://mysite.com/myavatar.png&quot;</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;http://gravatar.com/avatar/</span><span class="si">#{</span><span class="n">gravatar_id</span><span class="si">}</span><span class="s2">.png?s=</span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&amp;d=</span><span class="si">#{</span><span class="ss">CGI</span><span class="p">:</span><span class="ss">:escape</span><span class="p">(</span><span class="n">default_url</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will use whatever default URL you provide for the default url variable.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Put Ruby on Rails on a Slim]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/09/put-ruby-on-rails-on-a-slim/"/>
    <updated>2015-05-09T08:39:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/09/put-ruby-on-rails-on-a-slim</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Put Ruby on Rails on a Slim" />
</p>




<p>
  Ruby on Rails is my usual framework of choice to build web applications. It is good and easy to use, but let’s face it: it’s massive compared to more lightweight frameworks, such as Sinatra. Why is it bad? There are a few reasons and slow start-up time and high resources usage are just two most common concerns. Slimming down Ruby on Rails applications can allow you to use different components (say Sequel instead of ActiveRecord) and improve system security. Remember the last year’s security dramas related to JSON parameters parsing? It would be largely irrelevant for most applications if everyone who does not use it, disabled it.
</p>




<p>
  <strong>Rails Modularity</strong><br/>
  To enable individual modules, replace the following in config/application.rb:
</p>




<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rails/all&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  With:
</p>




<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record/railtie&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;action_controller/railtie&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;action_mailer/railtie&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_model/railtie&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sprockets/railtie&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As you can see above, you can remove ActiveRecord altogether if you use different database, the same with ActionMailer or Sprockets. It probably does not make sense to remove ActionController, however.
</p>




<p>
  <strong>Internal Middleware Stack</strong><br/>
  Each Ruby on Rails applications comes with <a href="http://guides.rubyonrails.org/rails_on_rack.html" target="_blank">Internal Middleware Stack Enabled</a>. Check out <a href="http://guides.rubyonrails.org/rails_on_rack.html#internal-middleware-stack" target="_blank">This Section of Documentation</a> for a list and description of each component. On a fairly small Ruby on Rails application I work on, the stack looks like this:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">middleware</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Sendfile</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Static</span>
</span><span class='line'><span class="n">use</span> <span class="c1">#&lt;ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x007f0bda2d73e0&gt;</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Runtime</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:MethodOverride</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:RequestId</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Rack</span><span class="o">::</span><span class="no">Logger</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:ShowExceptions</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:DebugExceptions</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:RemoteIp</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Callbacks</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Cookies</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Session</span><span class="o">::</span><span class="no">CookieStore</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:Flash</span>
</span><span class='line'><span class="n">use</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:ParamsParser</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Head</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:ConditionalGet</span>
</span><span class='line'><span class="n">use</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:ETag</span>
</span><span class='line'><span class="n">run</span> <span class="ss">Blog</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  I can safely disable most of the above by modifying config/application.rb, for example:
</p>




<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">disable</span> <span class="s2">&quot;Rack::ETag&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The same way, I was able to disable most of the default middleware, without doing any harm to my little app. You will have to be careful, however, what you disable. If you use login system, you will need sessions, if you display flash messages do not remove “ActionDispatch::Flash”&#8230; etc.
</p>




<p>
  When it comes to JSON parameters parsing, that was a headache for most Ruby on Rails developers last year, it can be easily disabled. To disable JSON params parsing, put this line into config/application.rb:
</p>




<figure class='code'><figcaption><span>config/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">swap</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:ParamsParser</span><span class="p">,</span> <span class="ss">ActionDispatch</span><span class="p">:</span><span class="ss">:ParamsParser</span><span class="p">,</span> <span class="ss">Mime</span><span class="p">:</span><span class="ss">:JSON</span> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Rails API</strong><br/>
  If you are building only API for your application, you can use nice gem called <a href="https://github.com/rails-api/rails-api" target="_blank">rails-api</a>.
</p>




<p>
  <strong>Put Controllers on a Hunger Slim</strong><br/>
  If you check out Ruby on Rails source code for <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/base.rb" target="_blank">ActionController::Base</a>, you will learn that it inherits from ActionController::Metal and includes <a href="https://github.com/rails/rails/blob/master/actionpack/lib/action_controller/base.rb#L203" target="_blank">Bunch of Modules</a> that you might or might not need in your controllers. A way to slim down your controllers stack, is to cherry-pick the ones you need. If all you need is basic rendering, there is nothing stopping you from creating lightweight controllers like this one:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SlimController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Metal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Rendering</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">text</span><span class="p">:</span> <span class="s2">&quot;I&#39;m Slim, yes I&#39;m the real Bunlong&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  There is no ActionController:HipHop I’m afraid, but that will work just as good.
</p>




<p>
  <strong>Single File Rails Applications</strong><br/>
  Okay, they don’t have to be single-file. But you are not forced to use default Rails catalogues structure, and you can make them really slim and custom.
</p>




<p>
  You can, however, create 100% functional Rails application only in config.ru:
</p>




<figure class='code'><figcaption><span>config.ru </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Port of https://gist.github.com/josevalim/1942658 to Rails 4</span>
</span><span class='line'><span class="c1"># Original author: Jose Valim</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Run this file with:</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   bundle exec RAILS_ENV=production rackup -p 3000 -s thin</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># And access:</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   http://localhost:3000/hello/world</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># We are using Bundler in this example, but we could also</span>
</span><span class='line'><span class="c1"># have used rubygems:</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   require &quot;rubygems&quot;</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   gem &quot;actionpack&quot;</span>
</span><span class='line'><span class="c1">#   gem &quot;railties&quot;</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#   require &quot;rails&quot;</span>
</span><span class='line'><span class="c1">#   require &quot;rails/all&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The following lines should come as no surprise. Except by</span>
</span><span class='line'><span class="c1"># ActionController::Metal, it follows the same structure of</span>
</span><span class='line'><span class="c1"># config/application.rb, config/environment.rb and config.ru</span>
</span><span class='line'><span class="c1"># existing in any Rails 4 app. Here they are simply in one</span>
</span><span class='line'><span class="c1"># file and without the comments.</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;rails&quot;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;action_controller/railtie&quot;</span> <span class="c1"># require more if needed</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyApp</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'>  <span class="n">routes</span><span class="o">.</span><span class="n">append</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/hello/world&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;hello#world&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable cache classes. Production style.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">cache_classes</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># uncomment below to display errors</span>
</span><span class='line'>  <span class="c1"># config.consider_all_requests_local = true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Here you could remove some middlewares, for example</span>
</span><span class='line'>  <span class="c1"># Rack::Lock, ActionDispatch::Flash and  ActionDispatch::BestStandardsSupport below.</span>
</span><span class='line'>  <span class="c1"># The remaining stack is printed on rackup (for fun!).</span>
</span><span class='line'>  <span class="c1"># Rails API has config.middleware.api_only! to get</span>
</span><span class='line'>  <span class="c1"># rid of browser related middleware.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">delete</span> <span class="s2">&quot;Rack::Lock&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">delete</span> <span class="s2">&quot;ActionDispatch::Flash&quot;</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">delete</span> <span class="s2">&quot;ActionDispatch::BestStandardsSupport&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># We need a secret token for session, cookies, etc.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">secret_token</span> <span class="o">=</span> <span class="s2">&quot;49837489qkuweoiuoqwehisuakshdjksadhaisdy78o34y138974xyqp9rmye8yrpiokeuioqwzyoiuxftoyqiuxrhm3iou1hrzmjk&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># This is a barebone controller. One good reference can be found here:</span>
</span><span class='line'><span class="c1"># http://piotrsarnacki.com/2010/12/12/lightweight-controllers-with-rails3/</span>
</span><span class='line'><span class="k">class</span> <span class="nc">HelloController</span> <span class="o">&lt;</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Metal</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Rendering</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">world</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="s2">&quot;Hello world!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Initialize the app (originally in config/environment.rb)</span>
</span><span class='line'><span class="no">MyApp</span><span class="o">.</span><span class="n">initialize!</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Print the stack for fun!</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;&gt;&gt; Starting Rails lightweight stack&quot;</span>
</span><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">configuration</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">middleware</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;use </span><span class="si">#{</span><span class="n">middleware</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;run </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">.routes&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Run it (originally in config.ru)</span>
</span><span class='line'><span class="n">run</span> <span class="no">MyApp</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Your Gemfile is Fat</strong><br/>
  Including too many libraries is bad for weight of the app. You need to check your Gemfile, and make sure you do require gems like ‘pry’ only in :development group, ‘rspec’ in :test etc.
</p>




<p>
  There is general tendency of Rails developers of putting together applications together with ready-to-use blocks. You need to consider if that is what you really need. Writing simple authentication is a matter of controller and two actions, you might not need Devise for that. Handling simple file uploads can be almost as easily implemented as with use of Carrierwave, with much less boilerplate code. I do encourage you to build minimal solutions for your needs only, especially when you do not need to use majority of functionality provided by given gem. If there is a hole found in, say, Carrierwave, including the gem might make your application vulnerable too, and heavier than it needs to be, of course.
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;psych&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0.12&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;builder&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;dynamic_form&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-sdk-core&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;gchartrb&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="s1">&#39;google_chart&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;gravtastic&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;high_voltage&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;highline&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;honeybadger&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mail&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;dalli&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;multi_json&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;paul_revere&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rack&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rdoc&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.12.2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;redis&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rest-client&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="s1">&#39;rest_client&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;statsd-instrument&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0.6&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;validates_formatting_of&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;will_paginate&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;xml-simple&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;yajl-ruby&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="s1">&#39;yajl&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;autoprefixer-rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;clearance&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;daemons&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;delayed_job&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;delayed_job_active_record&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;newrelic_rpm&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;newrelic-redis&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span>   <span class="s1">&#39;~&gt; 5.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.0.3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-notification&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rails-erd&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;minitest&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;launchy&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rack-test&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="s1">&#39;rack/test&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rr&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;shoulda&#39;</span><span class="p">,</span> <span class="nb">require</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;timecop&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:recovery</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;fakeredis&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">platforms</span> <span class="ss">:jruby</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;jruby-openssl&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217; it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Pagination with Kaminari]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/08/ruby-on-rails-pagination-with-kaminari/"/>
    <updated>2015-05-08T14:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/08/ruby-on-rails-pagination-with-kaminari</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Ruby on Rails Pagination with Kaminari" />
</p>




<p>
  The <a href="https://github.com/mislav/will_paginate" target="_blank">will_paginate</a> gem has long since been the most popular gem used when it comes to pagination. However it is not the only gem out there. <a href="https://github.com/amatsuda/kaminari" target="_blank">Kaminari</a> is another very popular pagination gem. In this article we will show you how to use it in your application.
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  To begin using the kaminari gem, we must first add it to our Gemfile. Open up your Gemfile and add in the line listed below.
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;kaminari&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now run a bundle install to install the gem.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, create a model called Post. The post model in this example will represent a blog post. Run the commands below to create the post model:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Post</span> <span class="n">title</span> <span class="ss">body</span><span class="p">:</span><span class="n">string</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We need some seed data. Open your <code>db/seeds.rb</code> file and modify it so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>db/seeds.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;Lipsum Post </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="sx">%{</span>
</span><span class='line'><span class="sx">      Nullam hendrerit iaculis sodales. Curabitur varius nibh arcu, id molestie nibh fermentum vitae. Cras quis semper dui. Cras porttitor urna sit amet risus vehicula tempor. Maecenas quis tempor ligula. Donec et nibh eu leo volutpat placerat. Fusce vulputate elit in nisi pretium, vel fermentum mi fermentum. Mauris scelerisque, lectus non luctus ultricies, urna eros tincidunt risus, at varius sapien diam id erat.</span>
</span><span class='line'><span class="sx">  }</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now run a rake db:seed to add the seed data:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We need to add a controller called Posts that we will use to render the posts. Run the command below to create this controller now:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">Posts</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Let&#8217;s modify our routes file to set a site root. Open up your config/routes.rb file and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;posts#index&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Open up your Posts controller and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/controllers/posts_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">page</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:page</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">per</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As you can see, the first bit of our pagination code is here. The <code>page</code> method tells kaminari what page we are on. The <code>per</code> method tells kaminari how many items we wish to have per page.
</p>




<p>
  Let&#8217;s open up the <code>index</code> view for our <code>Posts</code> controller and modify it so that it looks like the code listed below:
</p>




<figure class='code'><figcaption><span>app/views/posts/index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Posts</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'><span class="sr">&lt;hr /</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% @posts.each </span><span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;h2&gt;</span><span class="o">&lt;</span><span class="sx">%= post.title %&gt;&lt;/h2&gt;</span>
</span><span class='line'><span class="sx">  &lt;p&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">post</span><span class="o">.</span><span class="n">body</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;/p&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">&lt;hr /&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">%= paginate @posts %&gt;</span>
</span><span class='line'><span class="sx">&lt;%=</span> <span class="n">page_entries_info</span> <span class="vi">@posts</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The <code>paginate</code> helper is the line actually responsible for rendering the pagination links. The <code>page_entries_info</code> helper displays a line similar to Displaying posts 1 - 10 of 100 in total. This can be extremely helpful in letting the user know how many items there are in the list.
</p>




<p>
  <strong>Global Configuration</strong><br/>
  You can also specify global defaults for Kaminari. First, run the following command to generate an initializer file for Kaminari:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="ss">kaminari</span><span class="p">:</span><span class="n">config</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you open up the <code>config/initializers/kaminari_config.rb</code> file you&#8217;ll see something similar to the following:
</p>




<figure class='code'><figcaption><span>config/initializers/kaminari_config.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Kaminari</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># config.default_per_page = 25</span>
</span><span class='line'>  <span class="c1"># config.max_per_page = nil</span>
</span><span class='line'>  <span class="c1"># config.window = 4</span>
</span><span class='line'>  <span class="c1"># config.outer_window = 0</span>
</span><span class='line'>  <span class="c1"># config.left = 0</span>
</span><span class='line'>  <span class="c1"># config.right = 0</span>
</span><span class='line'>  <span class="c1"># config.page_method_name = :page</span>
</span><span class='line'>  <span class="c1"># config.param_name = :page</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  A description of these options can be found below:
</p>


<table>
<thead>
<tr>
<th>Config </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>config.default_per_page </td>
<td> Specifies the default amount of items to display per page.</td>
</tr>
<tr>
<td>config.max_per_page </td>
<td> The maximum amount of items to display per page.</td>
</tr>
<tr>
<td>config.window </td>
<td> Specifies the inner window size. The inner window is the number of items in the middle of the pagination block. e.g. « First ‹ Prev &hellip; 1 2 3 4 &hellip; Next › Last », in the previous example, 1 2 3 4 would be considered the inner window.</td>
</tr>
<tr>
<td>config.outer_window </td>
<td> Specifies how many items to display in the outer window. For example: 1 2 3 4 &hellip; 8 9 10 11, numbers visible on the outside are the outer window.</td>
</tr>
<tr>
<td>config.left </td>
<td> Specifies how many items should be displayed in the left outer window.</td>
</tr>
<tr>
<td>config.right </td>
<td> Specifies how many items should be displayed in the right outer window.</td>
</tr>
<tr>
<td>config.page_method_name </td>
<td> Changes the page method name from page to whatever you want. Can be used to avoid conflict with other gems that use page.</td>
</tr>
<tr>
<td>config.param_name </td>
<td> The default parameter to use when looking for the page number.</td>
</tr>
</tbody>
</table>


<br/>




<p>
  <strong>I18N</strong><br/>
  Kaminari can be configured via I18N. The default I18N configuration file looks like the code listed below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">en</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">views</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">pagination</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">first</span><span class="p">:</span> <span class="s2">&quot;&amp;laquo; First&quot;</span>
</span><span class='line'>      <span class="ss">last</span><span class="p">:</span> <span class="s2">&quot;Last &amp;raquo;&quot;</span>
</span><span class='line'>      <span class="ss">previous</span><span class="p">:</span> <span class="s2">&quot;&amp;lsaquo; Prev&quot;</span>
</span><span class='line'>      <span class="k">next</span><span class="p">:</span> <span class="s2">&quot;Next &amp;rsaquo;&quot;</span>
</span><span class='line'>      <span class="ss">truncate</span><span class="p">:</span> <span class="s2">&quot;&amp;hellip;&quot;</span>
</span><span class='line'>  <span class="ss">helpers</span><span class="p">:</span>
</span><span class='line'>    <span class="n">page_entries_info</span><span class="p">:</span>
</span><span class='line'>      <span class="n">one_page</span><span class="p">:</span>
</span><span class='line'>        <span class="n">display_entries</span><span class="p">:</span>
</span><span class='line'>          <span class="ss">zero</span><span class="p">:</span> <span class="s2">&quot;No %{entry_name} found&quot;</span>
</span><span class='line'>          <span class="ss">one</span><span class="p">:</span> <span class="s2">&quot;Displaying &lt;b&gt;1&lt;/b&gt; %{entry_name}&quot;</span>
</span><span class='line'>          <span class="ss">other</span><span class="p">:</span> <span class="s2">&quot;Displaying &lt;b&gt;all %{count}&lt;/b&gt; %{entry_name}&quot;</span>
</span><span class='line'>      <span class="n">more_pages</span><span class="p">:</span>
</span><span class='line'>        <span class="n">display_entries</span><span class="p">:</span> <span class="s2">&quot;Displaying %{entry_name} &lt;b&gt;%{first}&amp;nbsp;-&amp;nbsp;%{last}&lt;/b&gt; of &lt;b&gt;%{total}&lt;/b&gt; in total&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  To override it, simply modify your locale files under <code>config/locales</code>.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby/Ruby on Rails Mistakes]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/07/ruby-slash-ruby-on-rails-mistakes/"/>
    <updated>2015-05-07T21:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/07/ruby-slash-ruby-on-rails-mistakes</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Ruby/Ruby on Rails Mistakes" />
</p>




<p>
  Software Engineer make mistakes. Some of them are just annoying (for others to read) and some are really dangerous. Here is my selection of 10 mistakes done by Ruby / Ruby on Rails developers. These tips are easy to follow and can save you much time of later debugging.
</p>




<p>
  <strong>Double Negative and Complex Conditionals</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="n">user</span><span class="o">.</span><span class="n">blank?</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">unless</span> <span class="n">user</span><span class="o">.</span><span class="n">active?</span> <span class="o">||</span> <span class="n">address</span><span class="o">.</span><span class="n">confirmed?</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Double negative is hard to read. Every time I encounter it, I spend a couple of seconds on parsing the condition. Use the API which Rails gives you  <code>user.present?</code> instead of <code>!user.blank?</code>.
</p>




<p>
  I also rarely see any usage for unless, especially with complex conditionals connected by && and ||. How fast can you decide when unless <code>user.active? || address.confirmed?</code> will fire?
</p>




<p>
  <strong>Using Save Instead of save! and Not Checking Return Value</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;John&quot;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What is wrong with this piece of code? It will fail silently when user cannot be saved. There will be no single trace of this failure in your logs and you will spend time wondering: “why there are no users in the database”. If you expect that data is valid and model should be always saved successfully, then use bang versions – <code>save!</code>, <code>create!</code> and so on. Use save only when you handle the return value:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>self When It’s Not Needed</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:first_name</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">display_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In this case writing self.first_name is completely unnecessary, because <code>first_name</code> will do. This is of course just matter of style and has no other negative consequences than overly verbose code. Please mind that you need <code>self</code> in assignments: <code>self.first_name = "John"</code>.
</p>




<p>
  <strong>N + 1 Queries</strong><br/>
  This is a vast topic, but I will try to give the simplest example. You want to display a list of posts with names of authors. Post model <code>belongs_to :user</code>. If you just do <code>Post.limit(10)</code> and then call <code>post.user.name</code> in your views, you will make a separate database query for each user. That’s because Rails has no single chance to guess that you need users when you make the first query in the controller.
</p>




<p>
  It’s easy to spot N + 1 queries problem just by looking at server’s logs:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Template</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;templates&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;templates&quot;</span>   <span class="no">ORDER</span> <span class="no">BY</span> <span class="s2">&quot;templates&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="n">desc</span> <span class="no">LIMIT</span> <span class="mi">30</span> <span class="no">OFFSET</span> <span class="mi">0</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">6</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;collections&quot;</span>  <span class="no">WHERE</span> <span class="s2">&quot;collections&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[</span><span class="s2">&quot;id&quot;</span><span class="p">,</span> <span class="mi">4</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You have to be explicit at telling what you need from the database. In the easy cases Rails includes method will do. You can read more about it in Rails guides - <a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations" target="_blank">Eager Loading</a>
</p>




<p>
  <strong>Boolean Field with Three Possible Values</strong><br/>
  Boolean is supposed to have two possible values – <code>true</code> and <code>false</code>, right? And how about <code>nil</code>? If you do not specify default value and null: false in your migrations, you end up with boolean field with three possible values – <code>true</code>, <code>false</code> and <code>nil</code>. This leads to nasty code like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># post is new, not published, not rejected</span>
</span><span class='line'><span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># post is published</span>
</span><span class='line'><span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># post is new or rejected</span>
</span><span class='line'><span class="k">unless</span> <span class="n">post</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you need three possible states – use string field with three <code>well-defined</code> values.
</p>




<p>
  <strong>Orphaned Records After Destroy</strong><br/>
  When you destroy a model and it is required by associated records, you should handle it. It’s easy to find such cases:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  User is required for post. Hence, we have to write:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Leaving puts</strong><br/>
  Leaving <code>puts</code> in the code after some debugging session pollutes server logs and output of tests. Use <code>Rails.logger.debug</code> so it’s later possible to adjust the desired log level.
</p>




<p>
  <strong>Not Using map</strong><br/>
  I’ve seen such code many times:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'><span class="n">posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="n">users</span> <span class="o">&lt;&lt;</span> <span class="n">post</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This is exactly the case for using <code>map</code>, which is shorter and more idiomatic:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">posts</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Not Using Hash#fetch</strong><br/>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What’s wrong with this code? It will throw <code>NoMethodError: undefined method `[]' for nil:NilClass</code> if there is no user key in the hash. If you expect the key to always be present, use <code>Hash#fetch</code>:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This will give you a meaningful <code>exception – KeyError: key not found: :user</code>.
</p>




<p>
  <strong>Using Code from app/ in Migrations</strong><br/>
  Let’s say you have the following model:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="no">ACTIVE</span> <span class="o">=</span> <span class="s2">&quot;after_registration&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  and you want to add points field to it. So you create a migration. But you would also like to handle existing users: 10 points for active and 0 for the rest. You add to your migration:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">status</span><span class="p">:</span> <span class="ss">User</span><span class="p">:</span><span class="ss">:ACTIVE</span><span class="p">)</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="ss">points</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It works and you are happy. Time passes by and you decide to remove <code>User::ACTIVE</code> constant. Your migrations are now broken, you cannot run them from scratch, because <code>User::ACTIVE</code> is undefined.
</p>




<p>
  Never use code from app/ directory in migrations. If you need to update existing data and do it in a few environments (development, staging, production) create a Rake task and delete it once it’s executed in every environment.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Rails API with Rails-api and Active_model_serializers]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/07/fast-rails-api-with-rails-api-and-active-model-serializers/"/>
    <updated>2015-05-07T13:50:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/07/fast-rails-api-with-rails-api-and-active-model-serializers</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Fast Rails API with Rails-api and Active_model_serializers" />
</p>




<p>
  Dealing with JSON in Rails is pretty easy and straight forward. The support is built into the framework, request data is automatically available in params hash. Then we just have to say <code>render :json</code> and we are done.
</p>




<p>
  If JSON is one of the formats which we use. For instance, we can render both JSON and HTML in the same controller action. Or we may create an action intended for AJAX call which changes some model and returns JSON with status field.
</p>




<p>
  On the other hand, we may use Ruby on Rails for building JSON API – app with the assumption that JSON is the only format we support. In such a case we know that the app won’t render HTML. There is no View layer (or you can say that JSON is your View layer). We probably won’t need cookies support and the code specific to handling browser requests.
</p>




<h3>
  Rails-API
</h3>




<p>
  Ruby on Rails has modular structure – you can opt out of the things which you don’t want to use. But if we are talking about API only Rails app already did it for us and published in the gem called <a href="https://github.com/rails-api/rails-api/blob/master/README.md" target="_blank">rails-api</a>.
</p>




<p>
  What I care is &#8220;Don’t require things which you won’t use&#8221;. There might be bugs hiding there or security vulnerabilities connected with it. And of course there are other reasons:
</p>




<p>
  <strong>More Lightweight Application</strong><br/>
  I generated two fresh applications – one using <code>rails-api new</code> and the second using <code>rails new</code>. The environment was consistent – Ruby 2.1.0, Rails 4.0.2. Then I started the server with rails s and measured RAM memory taken by server process. The results are following:
</p>




<p>
  This is 15% less. Obviously when you start adding new gems the relative difference will be smaller.
</p>




<p>
  <strong>Faster Application</strong><br/>
  The same benchmarking environment as above. I created controller action which loads 100 User records from the database and renders them as JSON. I placed exactly the same code in rails-api application and regular rails application. Then I measured the server response time for a bunch of requests and took the avarage value. It looks like:
</p>




<p>
  This is 12% faster.
</p>




<p>
  <strong>Useful Generator</strong><br/>
  The controller scaffold which comes with rails-api is really cool. It disables new and edit actions (they don’t make sense because we do not display forms) and provides sensible default code inside other actions.
</p>




<p>
  <strong>Easy Installation and No Maintenance Costs</strong><br/>
  Last but not least, rails-api is super easy to install and learn. All you have to do to bootstrap new app is:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">rails</span><span class="o">-</span><span class="n">api</span>
</span><span class='line'><span class="n">rails</span><span class="o">-</span><span class="n">api</span> <span class="kp">new</span> <span class="n">my_app</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It’s worth to spend 10 minutes of your time for learning it. <a href="https://github.com/rails-api/rails-api/blob/master/README.md" target="_blank">Check out the docs</a>.
</p>




<h3>
  Active Model Serializers
</h3>




<p>
  If you want to build JSON API it’s good to have control over the generated JSON. And here we need the second gem is <a href="https://github.com/rails-api/active_model_serializers" target="_blank">active_model_serializers</a>.
</p>




<p>
  Let’s look at a sample serializer:
</p>




<figure class='code'><figcaption><span>app/serializers/user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:email</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:address</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:packages</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  As you can see UserSerializer is used to serialize User model. Using attributes we define what should be included in the generated JSON. You may think that this is repeating yourself (the fields are already defined in database schema), but in my opinion you rarely render all the fields, more often you want to hide some internals.
</p>




<p>
  As you can see we embed associated records using familiar syntax: has_one and has_many. Serializing Address and Package will be handled using AddressSerializer and PackageSerializer, respectively.
</p>




<figure class='code'><figcaption><span>app/serializers/user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:full_name</span><span class="p">,</span> <span class="ss">:email_address</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">email_address</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">email</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Serializers are just classes which inherit from ActiveModel::Serializer. You can define regular methods and the model being serialized is accessed by object method.
</p>




<p>
  How does the code inside UsersController look like?
</p>




<figure class='code'><figcaption><span>app/controllers/users_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:address</span><span class="p">,</span> <span class="ss">:packages</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@users</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Pretty simple, You just say: “I want JSON” and you have JSON rendered with proper serializer.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;users&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Some String&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;last_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Another String&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'>        <span class="s2">&quot;address&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="s2">&quot;street&quot;</span><span class="p">:</span> <span class="s2">&quot;Yet another string&quot;</span> <span class="p">},</span>
</span><span class='line'>        <span class="s2">&quot;packages&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>          <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;delivered&quot;</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;status&quot;</span><span class="p">:</span> <span class="s2">&quot;lost&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>More about Associations</strong><br/>
  Let’s imagine following use case, we want to get information about a package given its id. And we want it to contain information about the owner (user).
</p>




<figure class='code'><figcaption><span>package_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PackageSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What’s different here from model code? Package <code>belongs_to</code> user, but here it says <code>has_one</code> user. From the point of view of serializers <code>belongs_to</code> is exactly the same as <code>has_one</code>, hence we have only has_one and has_many.
</p>




<p>
  Now let’s go back to <code>UsersController#index</code> after our changes. We hit the action again and what do we get this time?
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="no">Unable</span> <span class="n">to</span> <span class="n">find</span> <span class="n">matching</span> <span class="n">line</span> <span class="n">from</span> <span class="n">backtrace</span>
</span><span class='line'>  <span class="ss">SystemStackError</span><span class="p">:</span>
</span><span class='line'>    <span class="n">stack</span> <span class="n">level</span> <span class="n">too</span> <span class="n">deep</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  That’s an infinite loop: user contains package, package contains user, user contains package&#8230; How can we solve this?
</p>




<p>
  <strong>Solution 1</strong>
</p>




<figure class='code'><figcaption><span>user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:packages</span><span class="p">,</span> <span class="ss">:embed</span> <span class="o">=&gt;</span> <span class="ss">:ids</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;users&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="o">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'>        <span class="s2">&quot;package_ids&quot;</span><span class="p">:</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We can use <code>:embed</code> option and include only ids of the packages. This has a drawback: if a client of our API wants not only id of the package, but also its status then he will have to make a separate request for each package. Certainly this is a situation which we want to avoid.
</p>




<p>
  <strong>Solution 2</strong>
</p>




<figure class='code'><figcaption><span>user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:packages</span><span class="p">,</span> <span class="ss">:serializer</span> <span class="o">=&gt;</span> <span class="no">ShortPackageSerializer</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">[.</span><span class="n">.</span><span class="o">.]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>short_package_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ShortPackageSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We use <code>:serializer</code> option to specify different serializer than that inferred from naming conventions. We create <code>ShortPackageSerializer</code>, which doesn’t contain user embeded. What’s more you can put <code>ShortPackageSerializer</code> and <code>PackageSerializer</code> in the inheritance hierarchy so you DRY.
</p>




<p>
  In my opinion this solution is pretty clean. We have separate class for each representation and we are able to share some pieces of code by using inheritance. Of course, this may become too complex if the inheritance hierarchy grows very big. However if we limit ourselves to 2-3 serializers per model the code should stay clear and maintainable.
</p>




<p>
  Use rails-api if you are building API-only application. It’s easy to learn and maintenance won’t hit you later, because you can opt out without any problems.
</p>




<p>
  Use active_model_serializers for better control over the generated JSON.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Rails API]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/06/fast-rails-api/"/>
    <updated>2015-05-06T10:41:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/06/fast-rails-api</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/fast_rails_api.png" alt="Fast Rails API" />
</p>




<p>
  Rendering JSON is pretty easy in Rails.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It works well if there are small number of records to be returned. But what happens when we need to return 10,000 records at once? Things slow down dramatically and the most time-consuming parts are JSON serialization and database operations.
</p>




<p>
  <strong>Include only Required Attributes</strong><br/>
  The first obvious thing is generating JSON with only attributes that we need.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span><span class="p">,</span> <span class="nb">methods</span><span class="p">:</span> <span class="o">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:virtual_odometer</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Tidying JSON gives over 20% performance
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Select only Required Columns</strong><br/>
  Second, we should consider selecting only required columns when we don’t need all of them.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:virtual_odometer</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  It’ll help us to avoid transferring a huge amount of data to the application from the database and gives 2x speed up.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span><span class='line'><span class="nb">select</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">170000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">190000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">222277</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Don’t Instantiate ActiveRecord Objects If Possible</strong><br/>
  Let’s implement a method to return “lightning” array of hashes instead of ActiveRecord instances.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">lightning</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="nb">select</span><span class="p">(</span><span class="o">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:virtual_odometer</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">arel</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attrs</span><span class="o">|</span>
</span><span class='line'>    <span class="n">attrs</span><span class="o">.</span><span class="n">each_key</span> <span class="k">do</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span>
</span><span class='line'>      <span class="n">attrs</span><span class="o">[</span><span class="kp">attr</span><span class="o">]</span> <span class="o">=</span> <span class="n">type_cast_attribute</span><span class="p">(</span><span class="kp">attr</span><span class="p">,</span> <span class="n">attrs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Returns array of hashes instead of array of single column values. Invoke a new method in controller.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span><span class="o">.</span><span class="n">lightning</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Using lightweight hashes makes JSON rendering 2x faster.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span><span class='line'><span class="nb">select</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">170000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">190000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">222277</span><span class="p">)</span>
</span><span class='line'><span class="n">lightning</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">120000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">1</span><span class="o">.</span><span class="mi">130000</span> <span class="p">(</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">148763</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<h3>
  Fastest JSON
</h3>




<p>
  There are several JSON libraries available:<br/>
  - <a href="https://github.com/flori/json" target="_blank">JSON</a> - The default JSON gem with C-extensions (ships with Ruby 1.9).<br/>
  - <a href="https://github.com/brianmario/yajl-ruby" target="_blank">YAJL</a> - Yet Another JSON Library.<br/>
  - <a href="https://github.com/ohler55/oj" target="_blank">OJ</a> - Optimized JSON.
</p>




<p>
  It’s a good idea to use the fastest dumper of them.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">json</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">810000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">841307</span><span class="p">)</span>
</span><span class='line'><span class="n">yajl</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">760000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">780000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">809903</span><span class="p">)</span>
</span><span class='line'><span class="n">oj</span>         <span class="mi">0</span><span class="o">.</span><span class="mi">640000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">650000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">666230</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  But we prefer <a href="https://github.com/rails-api/active_model_serializers" target="_blank">active_model_serializers</a> which it run faster than OJ.
</p>




<p>
  Summarized benchmark results are:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span><span class='line'><span class="nb">select</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">170000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">190000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">222277</span><span class="p">)</span>
</span><span class='line'><span class="n">lightning</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">120000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">1</span><span class="o">.</span><span class="mi">130000</span> <span class="p">(</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">148763</span><span class="p">)</span>
</span><span class='line'><span class="n">json</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">810000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">841307</span><span class="p">)</span>
</span><span class='line'><span class="n">yajl</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">760000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">780000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">809903</span><span class="p">)</span>
</span><span class='line'><span class="n">oj</span>         <span class="mi">0</span><span class="o">.</span><span class="mi">640000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">650000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">666230</span><span class="p">)</span>
</span><span class='line'><span class="n">ams</span>        <span class="mi">0</span><span class="o">.</span><span class="mi">270000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">270000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">272239</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preload Active Record Associations in Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/05/preload-active-record-associations-in-rails-application/"/>
    <updated>2015-05-05T16:26:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/05/preload-active-record-associations-in-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Preload Active Record Associations in Rails Application" />
</p>




<p>
  Active Record makes database querying so simple. Chain together a few methods and bam, you’ve saved your self lines and lines of T-SQL. The problem is this simplicity masks the underlying operation and it’s very easy to not realize how inefficient your database calls are.
</p>




<p>
  For example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:comments</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Let’s say on a users profile page we would like to show a listing of comments from this user.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>   <span class="n">post</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">comment</span><span class="o">|</span>
</span><span class='line'>      <span class="o">&lt;%=</span> <span class="n">comment</span><span class="o">.</span><span class="n">message</span> <span class="o">%&gt;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  What you end up with is something like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="s1">&#39;id&#39;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'> <span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`posts`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`blogs`</span> <span class="no">WHERE</span> <span class="sb">`blogs`</span><span class="o">.</span><span class="n">`user_id</span><span class="sb">` = 2</span>
</span><span class='line'><span class="sb"> Comment Load (0.7ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 43</span>
</span><span class='line'><span class="sb"> Comment Load (1.7ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 55</span>
</span><span class='line'><span class="sb"> Comment Load (2.2ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 32</span>
</span><span class='line'><span class="sb"> Comment Load (0.9ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 66</span>
</span><span class='line'><span class="sb"> Comment Load (2.2ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 56</span>
</span><span class='line'><span class="sb"> Comment Load (4.8ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 65</span>
</span><span class='line'><span class="sb"> Comment Load (1.8ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 68</span>
</span><span class='line'><span class="sb"> Comment Load (0.8ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` = 71</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The user has commented in 9 different posts, which results in 9 separate queries to the DB. This is a small scale example, but you can see how this can compound into something nasty.
</p>




<p>
  he solution is to user includes method:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span> <span class="o">=&gt;</span> <span class="ss">:comments</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  When using includes method, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries. The actual query executed is converted into a more optimal singular query and it is that result set that is iterated over instead of the replicated find(id) style queries.
</p>




<p>
  Our query stack list now looks like:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`users`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`users`</span> <span class="no">WHERE</span> <span class="s1">&#39;id&#39;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`posts`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`posts`</span> <span class="no">WHERE</span> <span class="sb">`posts`</span><span class="o">.</span><span class="n">`user_id</span><span class="sb">` IN (1)</span>
</span><span class='line'><span class="sb">Comment Load (0.5ms)  SELECT `</span><span class="n">comments</span><span class="sb">`.* FROM `</span><span class="n">comments</span><span class="sb">` WHERE `</span><span class="n">comments</span><span class="sb">`.`</span><span class="n">post_id</span><span class="sb">` IN (43, 55, 32, 66, 56, 65, 68, 71)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Where Does Your Code Go in Rails Application?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/05/where-does-your-code-go-in-rails-application/"/>
    <updated>2015-05-05T08:50:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/05/where-does-your-code-go-in-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Where Does Your Code Go in Rails Application?" />
</p>




<p>
  After you finish the Rails tutorials and start your own app, things get confusing something like where does your non-CRUD and general logic go?
</p>




<p>
  You can&#8217;t build the app you&#8217;ve been dreaming of without some general, non-Rails logic. So where do you put your code, and still keep things simple?
</p>




<p>
  <strong>The Easy Place to Start</strong><br/>
  when I have logic that feels related to an existing ActiveRecord model, I&#8217;ll start by putting it into that model. For example if I had a Game model and I want to import a bunch of games from CSV files, I would put that method right onto the Game class.
</p>




<figure class='code'><figcaption><span>app/models/game.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Game</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">parse_from_csv</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span>
</span><span class='line'>    <span class="n">games</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="n">quote_char</span><span class="p">:</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>      <span class="n">games</span> <span class="o">&lt;&lt;</span> <span class="no">Game</span><span class="o">.</span><span class="n">from_csv_row</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;G&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">games</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_csv_row</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">({</span>
</span><span class='line'>      <span class="n">dgs_game_id</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">opponent_name</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">created_at</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">updated_at</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You have all the information your methods need right at hand. it&#8217;s easily testable. And it&#8217;s probably where a new contributor world look for that logic first.
</p>




<p>
  But if you keep adding and changing that model, it&#8217;ll get big and complicated. Different parts of the model will interact in strange ways. The more you change it, the harder it will be to change.
</p>




<p>
  In that case, you would probably want to refactor that code out to a non-ActiveRecord model.
</p>




<p>
  <strong>Non-ActiveRecord Models</strong><br/>
  You can write your own Ruby code, in plain Ruby objects, and use them in your Rails app. These objects can still be called models, because they&#8217;re modeling part of your problem. They just don&#8217;t have an ActiveRecord database storing their data.
</p>




<p>
  The next time I worked on that game CSV parser, the Game class was getting a little too big. So I moved the parser logic into its own GameCSVParser class.
</p>




<p>
  Non-ActiveRecord class looks like:
</p>




<figure class='code'><figcaption><span>app/models/game_csv_parser.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">GameCSVParser</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@rows</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="n">quote_char</span><span class="p">:</span> <span class="s2">&quot;&#39;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">games</span>
</span><span class='line'>    <span class="n">game_rows</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="no">Game</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">game_attributes</span><span class="p">(</span><span class="n">row</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">game_rows</span>
</span><span class='line'>    <span class="vi">@rows</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="n">is_game_row?</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">game_attributes</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="n">dgs_game_id</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">opponent_name</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">created_at</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="n">updated_at</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">is_game_row?</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
</span><span class='line'>    <span class="n">row</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;G&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  I will go right to creating a new plain Ruby object if the logic I&#8217;m adding doesn&#8217;t feel related to any specific ActiveRecord model. Of if the code seems like it should be a part of a thing that doesn&#8217;t exist yet in the app. Otherwise, they mostly pop up through refactoring.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Charting with Chartkick Gem]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/02/ruby-on-rails-charting-with-chartkick-gem/"/>
    <updated>2015-05-02T20:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/02/ruby-on-rails-charting-with-chartkick-gem</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/chartkick.png" alt="Ruby on Rails Charting with Chartkick Gem" />
</p>




<p>
  Chartkick is a charting library for Ruby on Rails that allows you to easily create nice looking charts. Chartkick is compatible with all major browsers and can easily be used to give your Ruby on Rails application some additional flair. In this article we will cover the basics of using Chartkick.
</p>




<p>
  <strong>Rails Application Setup</strong><br/>
  Before we can use Chartkick, we will need to add it to our Gemfile. Open up your Gemfile and add the following code.
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;chartkick&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.2.4&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  In addition, let&#8217;s include a couple of helper gems that will make life easier when dealing with data. Add the following gems to your Gemfile.
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;groupdate&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.1.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;active_median&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.1.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now let&#8217;s run a bundle install to install all three gems.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now we need to create a model that we will use with our charts. For this example app we will create a simple model called Visit. This model will represent a single user&#8217;s &#8216;visit&#8217; to a website. Run the command below to create this model now.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Visit</span> <span class="ss">country</span><span class="p">:</span><span class="n">string</span> <span class="n">visited_at</span><span class="ss">:datetime</span> <span class="n">load_time</span><span class="ss">:decimal</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now let&#8217;s run a rake db:migrate to create the table associated with this model.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now we need to add some data to our seeds file in order to give us some data to play with. Open up your seeds.rb file and add in the code listed below.
</p>




<figure class='code'><figcaption><span>db/seeds.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">delete_all</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">3</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;United States&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">3</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;Germany&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">3</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">5</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">2</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">3</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">3</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">4</span><span class="o">.</span><span class="mi">0</span>
</span><span class='line'><span class="no">Visit</span><span class="o">.</span><span class="n">create</span>  <span class="ss">country</span><span class="p">:</span> <span class="s1">&#39;South Korea&#39;</span><span class="p">,</span> <span class="n">visited_at</span><span class="p">:</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">3</span><span class="o">.</span><span class="n">days</span><span class="p">,</span> <span class="n">load_time</span><span class="p">:</span> <span class="mi">5</span><span class="o">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now let&#8217;s run a rake db:seed to seed our database.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now let&#8217;s create a controller to give us a place to play around. Run the commands below to create the Homes controller.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="n">homes</span> <span class="n">show</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now open up your routes file and add in the route listed below.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="s2">&quot;homes#show&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, open up your homes controller and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/controllers/homes_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@visits</span> <span class="o">=</span> <span class="no">Visit</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Finally, we need to modify our application layout. Open up your application&#8217;s layout and modify it so that it looks like the following code. Note the inclusion of the Google API javascript file below. Chartkick can use either Google Charts or Highcharts for charting. In this example we use Google Charts. We also utilize Bootstrap for a cleaner look and feel.
</p>




<figure class='code'><figcaption><span>app/views/layouts/application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">title</span><span class="o">&gt;</span><span class="no">ChartKickExample</span><span class="o">&lt;</span><span class="sr">/title&gt;</span>
</span><span class='line'><span class="sr">  </span>
</span><span class='line'><span class="sr">  &lt;%= stylesheet_link_tag    &#39;application&#39;, media: &#39;all&#39; %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= javascript_include_tag &#39;application&#39; %&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= javascript_include_tag &quot;http:/</span><span class="o">/</span><span class="n">www</span><span class="o">.</span><span class="n">google</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">jsapi</span><span class="s2">&quot;, &quot;</span><span class="n">chartkick</span><span class="s2">&quot; %&gt;</span>
</span><span class='line'><span class="s2">  &lt;%= stylesheet_link_tag &#39;http://yandex.st/bootstrap/3.1.1/css/bootstrap.min.css&#39; %&gt;</span>
</span><span class='line'><span class="s2">  &lt;%= javascript_include_tag &#39;http://yandex.st/bootstrap/3.1.1/js/bootstrap.min.js&#39; %&gt;</span>
</span><span class='line'><span class="s2">  </span>
</span><span class='line'><span class="s2">  &lt;%= csrf_meta_tags %&gt;</span>
</span><span class='line'><span class="s2">&lt;/head&gt;</span>
</span><span class='line'><span class="s2">&lt;body&gt;</span>
</span><span class='line'><span class="s2">  &lt;div class=&quot;</span><span class="n">container</span><span class="s2">&quot;&gt;</span>
</span><span class='line'><span class="s2">    &lt;%= yield %&gt;</span>
</span><span class='line'><span class="s2">  &lt;/div&gt;</span>
</span><span class='line'><span class="s2">&lt;/body&gt;</span>
</span><span class='line'><span class="s2">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Line Charts</strong><br/>
  The first chart type we will work with is the line charts Line charts are handy for doing things like plotting out events over time. Open up your show view for the Homes controller and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/views/homes/show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Single</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= line_chart @visits.group_by_day(:visited_at, format: &quot;%B %d, %Y&quot;).count, discrete: true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Now if you start a <code>rails s</code> and navigate to http://localhost:3000 you will see a chart being rendered showing the number of vists by day.
</p>




<p>
  Great, now lets make a slightly more complex line chart. Open up the show view again and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/views/homes/show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Single</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= line_chart @visits.group_by_day(:visited_at, format: &quot;%B %d, %Y&quot;).count, discrete: true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Multiple</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Country</span> <span class="no">Per</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= line_chart   Visit.pluck(&quot;country&quot;).uniq.map { |c| { name: c, data: @visits.where(country: c).group_by_day(:visited_at, format: &quot;%B %d, %Y&quot;).count }  }, discrete: true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Refreshing the page results in a new line chart with multiple series listed. You see a line for each country with each point corresponding to the number of visits for that day.
</p>




<p>
  <strong>Pie Charts and Area Charts</strong><br/>
  We can also render a pie chart. Open up your show view again and append the following code to the end of the view.
</p>




<figure class='code'><figcaption><span>app/views/homes/show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Total</span> <span class="no">Visits</span> <span class="n">by</span> <span class="no">Country</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= pie_chart @visits.group(:country).count %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you refresh the page a pie chart will render with each slice representing the visits for that particular country. This information can also be represented via a geo chart. Modify your homes view to look like the code listed below.
</p>




<figure class='code'><figcaption><span>app/views/homes/show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Single</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= line_chart @visits.group_by_day(:visited_at, format: &quot;%B %d, %Y&quot;).count, discrete: true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Multiple</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Country</span> <span class="no">Per</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= line_chart   Visit.pluck(&quot;country&quot;).uniq.map { |c| { name: c, data: @visits.where(country: c).group_by_day(:visited_at, format: &quot;%B %d, %Y&quot;).count }  }, discrete: true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;div class=&quot;row&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  &lt;!-- Pie Chart --&gt;</span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;col-xs-6&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;h3&gt;Total Visits by Country&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= pie_chart @visits.group(:country).count %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Geo Chart --&gt; </span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= geo_chart @visits.group(:country).count %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Awesome! Now if you refresh the page, you&#8217;ll notice a geo chart in the bottom right.
</p>




<p>
  <strong>Area Charts</strong><br/>
  You can also create an area chart. Add the code listed below to the end of your homes/show view.
</p>




<figure class='code'><figcaption><span>app/views/homes/show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="n">area</span> <span class="n">chart</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-12&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Total</span> <span class="no">Load</span> <span class="no">Time</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= area_chart @visits.group_by_day(:visited_at).maximum(:load_time) %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Great, now if you refresh the page you will see that the area chart has been added.
</p>




<p>
  <strong>Bar Charts and Column Charts</strong><br/>
  Both bar charts and column charts can be easily created. Modify your homes/show view so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/views/homes/show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Single</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= line_chart @visits.group_by_day(:visited_at, format: &quot;%B %d, %Y&quot;).count, discrete: true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Multiple</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Country</span> <span class="no">Per</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= line_chart   Visit.pluck(&quot;country&quot;).uniq.map { |c| { name: c, data: @visits.where(country: c).group_by_day(:visited_at, format: &quot;%B %d, %Y&quot;).count }  }, discrete: true %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;div class=&quot;row&quot;&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">  &lt;!-- Pie Chart --&gt;</span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;col-xs-6&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;h3&gt;Total Visits by Country&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= pie_chart @visits.group(:country).count %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  &lt;!-- Geo Chart --&gt; </span>
</span><span class='line'><span class="sx">  &lt;div class=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= geo_chart @visits.group(:country).count %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;!-- area chart --&gt; </span>
</span><span class='line'><span class="sr">&lt;div class=&quot;row&quot;&gt;</span>
</span><span class='line'><span class="sr">  &lt;div class=&quot;col-xs-12&quot;&gt;</span>
</span><span class='line'><span class="sr">    &lt;h3&gt;Total Load Time By Day&lt;/</span><span class="n">h3</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="sx">%= area_chart @visits.group_by_day(:visited_at).maximum(:load_time) %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;div class=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Column</span> <span class="no">Chart</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Total</span> <span class="no">Visits</span> <span class="no">Per</span> <span class="no">Country</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= column_chart @visits.group(:country).count %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;!--</span> <span class="no">Bar</span> <span class="no">Chart</span> <span class="o">--&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-6&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Total</span> <span class="no">Visits</span> <span class="no">Per</span> <span class="no">Country</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">    &lt;%= bar_chart @visits.group(:country).count %&gt;</span>
</span><span class='line'><span class="sr">  &lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you refresh the page you&#8217;ll see both column and bar charts at the bottom.
</p>




<p>
  <strong>Remote Charts</strong><br/>
  You can quickly and easily build remote AJAX driven charts. Let&#8217;s create a simple series chart. First, we will create a new method on your homes controller called visits_by_day. Open up your homes controller and modify it so that it looks like the code listed below.
</p>




<figure class='code'><figcaption><span>app/controllers/homes_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HomesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="vi">@visits</span> <span class="o">=</span> <span class="no">Visit</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">visits_by_day</span>
</span><span class='line'>   <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="no">Visit</span><span class="o">.</span><span class="n">group_by_day</span><span class="p">(</span><span class="ss">:visited_at</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="s2">&quot;%B %d, %Y&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Next, add in the code listed below to your homes/show view.
</p>




<figure class='code'><figcaption><span>app/views/homes/show.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;!--</span> <span class="no">Line</span> <span class="no">Chart</span> <span class="o">-</span> <span class="no">Single</span> <span class="no">Series</span> <span class="o">--&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-xs-12&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">h3</span><span class="o">&gt;</span><span class="no">Visits</span> <span class="no">By</span> <span class="no">Day</span><span class="o">&lt;</span><span class="sr">/h3&gt;</span>
</span><span class='line'><span class="sr">  &lt;%= line_chart visits_by_day_home_path %&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you refresh the page, you&#8217;ll notice that the new chart has been rendered. A quick look at your browser&#8217;s developer console will show you that the visits_by_day data is pulled down via AJAX and then the site is rendered.
</p>




<p>
  <strong>Global Options</strong><br/>
  You can customize the global options for ChartKick. Create an initializer called chartkick.rb and add in the code listed below.
</p>




<figure class='code'><figcaption><span>config/initializers/chartkick.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Chartkick</span><span class="o">.</span><span class="n">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">height</span><span class="p">:</span> <span class="s2">&quot;300px&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">colors</span><span class="p">:</span> <span class="o">[</span><span class="s2">&quot;#ff0000&quot;</span><span class="p">,</span> <span class="s2">&quot;#00ff00&quot;</span><span class="p">,</span> <span class="s2">&quot;#0000ff&quot;</span><span class="p">,</span> <span class="s2">&quot;#ffff00&quot;</span><span class="p">,</span> <span class="s2">&quot;#ff00ff&quot;</span><span class="p">,</span> <span class="s2">&quot;0000ff&quot;</span><span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you restart your Rails server and refresh the page, you will notice that the colors have changed.
</p>




<p>
  For more information on ChartKick you can check <a href="http://www.chartkick.com" target="_blank">Chartkick</a>.
</p>




<p>
  So far so good, That&#8217;s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
