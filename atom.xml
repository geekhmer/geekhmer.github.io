<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-01-28T21:58:40+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang Message Passing]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/27/erlang-message-passing/"/>
    <updated>2015-01-27T23:07:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/27/erlang-message-passing</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Message Passing" />
</p>




<p>
  The communication model (among processes) in Erlang is message passing. Erlang processes share no memory. The way that processes communicate is via (asynchronous) message passing. Every process (even the shell) holds a mailbox queue where incoming messages are placed until received by the process. Message passing is asynchronous because the sending process does not block on send. On the other hand, receiving a message in Erlang is a blocking operation.
</p>




<p>
  <h3>Characteristics</h3>
</p>




<p>
  In this subsection I will describe some of the characteristics of message passing in Erlang.
</p>




<p>
  <strong>Asynchronous</strong><br/>
  Message passing in Erlang is a non-blocking operation.
</p>




<p>
  <strong>Data Copy</strong><br/>
  The message’s data are copied from the sending process to the receiver’s message queue, so the receiver gets a fresh copy of the data.
</p>




<p>
  <strong>Ordering</strong><br/>
  Erlang runtime guarantees that if two messages are sent from node A to node B and both are delivered, then the ordering of these messages is kept (because ordering).
</p>




<p>
  <strong>Successful Send</strong><br/>
  The send operation always succeeds (even if the target is a non-existing process) and evaluates to the data sent. An exception is when trying to send data to a non-existing registered process.
</p>




<p>
  <h3>Sending Messages</h3>
</p>




<p>
  Erlang uses the exclamation mark (!) as the operator for sending a message.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">%</span><span class="nb">send</span> <span class="n">message</span> <span class="no">Message</span> <span class="n">to</span> <span class="n">the</span> <span class="n">process</span> <span class="n">with</span> <span class="n">pid</span> <span class="no">Pid</span>
</span><span class='line'><span class="no">Pid</span> <span class="o">!</span> <span class="no">Message</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Send multiple messages &#8220;at once&#8221;:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Pid1</span> <span class="o">!</span> <span class="no">Message</span><span class="p">,</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="no">Message</span><span class="p">,</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="no">Message</span>
</span><span class='line'><span class="no">Pid1</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid2</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid3</span> <span class="o">!</span> <span class="no">Message</span><span class="p">))</span>
</span><span class='line'><span class="no">Pid1</span> <span class="o">!</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="no">Message</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<p>
  As I have mentioned before, the shell is nothing more than a process. As a process, it has a message queue. In order to print and empty the shell’s message queue we can use the flush/0 BIFs.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="n">erlang_term_can_be_sent</span><span class="o">.</span>
</span><span class='line'><span class="n">erlang_term_can_be_sent</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">erlang_term_can_be_sent</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="o">[</span><span class="n">this</span><span class="p">,</span> <span class="n">is</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">list</span><span class="p">,</span> <span class="s1">&#39;of&#39;</span><span class="p">,</span> <span class="n">atoms</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="n">this</span><span class="p">,</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">list</span><span class="p">,</span><span class="s1">&#39;of&#39;</span><span class="p">,</span><span class="n">atoms</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="p">{</span><span class="n">this</span><span class="p">,</span> <span class="o">[</span><span class="n">is</span><span class="p">,</span> <span class="n">a</span><span class="o">]</span><span class="p">,</span> <span class="n">tuple</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;!&#39;</span><span class="p">,</span> <span class="s1">&#39;!&#39;</span><span class="p">}}</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">this</span><span class="p">,</span><span class="o">[</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="o">]</span><span class="p">,</span><span class="n">tuple</span><span class="p">,{</span><span class="s1">&#39;!&#39;</span><span class="p">,</span><span class="s1">&#39;!&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="nb">self</span><span class="p">()</span> <span class="o">!</span> <span class="p">{</span><span class="nb">self</span><span class="p">(),</span> <span class="mi">123</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">35</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="mi">123</span><span class="p">}</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="o">[</span><span class="n">this</span><span class="p">,</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">list</span><span class="p">,</span><span class="s1">&#39;of&#39;</span><span class="p">,</span><span class="n">atoms</span><span class="o">]</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="p">{</span><span class="n">this</span><span class="p">,</span><span class="o">[</span><span class="n">is</span><span class="p">,</span><span class="n">a</span><span class="o">]</span><span class="p">,</span><span class="n">tuple</span><span class="p">,{</span><span class="s1">&#39;!&#39;</span><span class="p">,</span><span class="s1">&#39;!&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="p">{</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">35</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">,</span><span class="mi">123</span><span class="p">}</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">=</span> <span class="nb">self</span><span class="p">(),</span> <span class="no">Pid2</span> <span class="o">=</span> <span class="nb">self</span><span class="p">(),</span> <span class="no">Pid3</span> <span class="o">=</span> <span class="nb">self</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">35</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">8</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">!</span> <span class="n">msg</span><span class="p">,</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="n">msg</span><span class="p">,</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="n">msg</span><span class="o">.</span>
</span><span class='line'><span class="n">msg</span>
</span><span class='line'><span class="mi">9</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">10</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid2</span> <span class="o">!</span> <span class="p">(</span><span class="no">Pid3</span> <span class="o">!</span> <span class="n">msg</span><span class="p">))</span><span class="o">.</span>
</span><span class='line'><span class="n">msg</span>
</span><span class='line'><span class="mi">11</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">12</span><span class="o">&gt;</span> <span class="no">Pid1</span> <span class="o">!</span> <span class="no">Pid2</span> <span class="o">!</span> <span class="no">Pid3</span> <span class="o">!</span> <span class="n">msg</span><span class="o">.</span>
</span><span class='line'><span class="n">msg</span>
</span><span class='line'><span class="mi">13</span><span class="o">&gt;</span> <span class="n">flush</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="no">Shell</span> <span class="n">got</span> <span class="n">msg</span>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Receiving Messages</h3>
</p>




<p>
  Erlang uses pattern matching for receiving messages (same as in function clause selection and the case statement). The receive statement is used to deliver messages from the message queue.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">receive</span>
</span><span class='line'>  <span class="no">Pattern1</span> <span class="k">when</span> <span class="no">Guard1</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo1</span><span class="p">;</span>
</span><span class='line'>  <span class="no">Pattern2</span> <span class="k">when</span> <span class="no">Guard2</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_Other</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">Catch_all</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Receiving Order</strong><br/>
  The message processing is done in a FIFS (First In – First Served) order. Every incoming message is placed in the tail of the process’ message queue. When a receive statement is meet the following processing happens:<br/>
  1. The first message (head of the message queue) is pattern matched against the first receive clause. If match, execute the clause’s body, else go to the next step.<br/>
  2. The same message is pattern matched against the second (if any) receive clause. If match, execute the clause’s body, else go to the next step.<br/>
  3. &#8230;
  4. The same message is pattern matched against the last clause. If match, execute the clause’s body, else go to the next step.
  5. The same iterative process starts again from step 1, but now with the next message from the message queue.<br/><br/>
  The message (if any) that is delivered through receive is removed from the message queue.
</p>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>pingpong.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">pingpong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">play</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">play</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">is_integer</span><span class="p">(</span><span class="n">N</span><span class="p">),</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong</span> <span class="o">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span> <span class="n">pong</span><span class="o">/</span><span class="mi">0</span><span class="p">),</span>
</span><span class='line'>  <span class="n">ping</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="no">Pong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="no">Pong</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong</span> <span class="o">!</span> <span class="nb">exit</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="no">Pong</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong</span> <span class="o">!</span> <span class="p">{</span><span class="nb">self</span><span class="p">(),</span> <span class="n">ping</span><span class="p">},</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">pong</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;~w : pong [~w]~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="nb">self</span><span class="p">(),</span> <span class="n">N</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ping</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="no">Pong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">pong</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="p">{</span><span class="no">From</span><span class="p">,</span> <span class="n">ping</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;~w : ping~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="nb">self</span><span class="p">()</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>      <span class="no">From</span> <span class="o">!</span> <span class="n">pong</span><span class="p">,</span>
</span><span class='line'>      <span class="n">pong</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">ok</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example running:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">pingpong</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">pingpong</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">pingpong</span><span class="p">:</span><span class="n">play</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">49</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">ping</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">39</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="p">:</span> <span class="n">pong</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="n">ok</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Timeout</strong><br/>
  Receive is a blocking statement; it blocks until a message that matches one of the clauses is placed in the incoming message queue. Erlang allows the programmer to explicitly unblock the receive statement using a timeout (if a matching message is not delivered until the timeout expires). The complete format of receive statement, including the after construct.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">receive</span>
</span><span class='line'>  <span class="no">Pattern1</span> <span class="k">when</span> <span class="no">Guard1</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo1</span><span class="p">;</span>
</span><span class='line'>  <span class="no">Pattern2</span> <span class="k">when</span> <span class="no">Guard2</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">ToDo2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_Other</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">Catch_all</span>
</span><span class='line'><span class="n">after</span> <span class="no">Millisecs</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">ToDo_timeout</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>timeout.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="nb">sleep</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span> <span class="n">timeout</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">timeout</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">cancel</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;Timeout canceled~n&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">after</span> <span class="mi">2000</span> <span class="o">-&gt;</span> <span class="sx">% 2 </span><span class="n">seconds</span>
</span><span class='line'>    <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;Timeout triggered~n&quot;</span><span class="p">),</span>
</span><span class='line'>    <span class="n">timeout</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="n">a</span> <span class="nb">sleep</span> <span class="n">function</span>
</span><span class='line'><span class="nb">sleep</span><span class="p">(</span><span class="no">Ms</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;Sleeping for ~w ms~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="no">Ms</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>  <span class="n">after</span> <span class="no">Ms</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">done</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example running:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">timeout</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">timeout</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">P</span> <span class="o">=</span> <span class="ss">timeout</span><span class="p">:</span><span class="n">start</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">42</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="no">Timeout</span> <span class="n">triggered</span>
</span><span class='line'><span class="no">Timeout</span> <span class="n">triggered</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">P</span> <span class="o">!</span> <span class="n">cancel</span><span class="o">.</span>
</span><span class='line'><span class="no">Timeout</span> <span class="n">canceled</span>
</span><span class='line'><span class="n">cancel</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">timeout</span><span class="p">:</span><span class="nb">sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">Sleeping</span> <span class="k">for</span> <span class="mi">1000</span> <span class="n">ms</span>
</span><span class='line'><span class="n">done</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="ss">timeout</span><span class="p">:</span><span class="nb">sleep</span><span class="p">(</span><span class="mi">3000</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">Sleeping</span> <span class="k">for</span> <span class="mi">3000</span> <span class="n">ms</span>
</span><span class='line'><span class="n">done</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Concurrency]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/26/erlang-concurrency/"/>
    <updated>2015-01-26T18:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/26/erlang-concurrency</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Concurrency" />
</p>




<p>
  Concurrency is defined as “the temporal property of two things happening at the same time”. In Computer Science, the definition is “concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other. The computations may be executing on multiple cores in the same chip, preemptively time-shared threads on the same processor, or executed on physically separated processors.”
</p>




<p>
  Erlang was built with concurrency and fault-tolerance in mind.
</p>




<p>
  <h3>Processes</h3>
</p>




<p>
  The granularity of concurrency in Erlang is a process. A process is an activity/task that runs concurrently with and independently from the other processes (though processes can interact with each other using messages, links, etc.). Processes in Erlang are different than the processes and threads most people are familiar with. Erlang processes are lightweight, operate in (memory) isolation from other processes, and are scheduled by the Erlang’s Virtual Machine (VM). The creation time of process is very low, the memory footprint of a just spawned process is very small, and a single Erlang VM can have millions of processes running.
</p>




<p>
  <h3>Messaging Passing</h3>
</p>




<p>
  The communication model (among processes) in Erlang is message passing. Erlang processes share no memory. The way that processes communicate is via message passing (asynchronous). Every process (even the shell) holds a mailbox queue where incoming messages are placed until received by the process. Message passing is asynchronous because the sending process does not block on send. Sending a message in Erlang is a non-blocking operation that always succeed (more in the next post).
</p>




<p>
  <h3>Why Message Passing?</h3>
</p>




<p>
  We are so used to the shared memory model, why changing it? Here are some characteristics that are part of Erlang mostly because of the message passing memory model.
</p>




<p>
  <strong>Crash Independency</strong><br/>
  Message passing allows for easier distributed programming. Imagine if you want to distribute an application that uses shared memory. To do this, one should either use a message passing solution (such as MPI) or a Distributed Shared Memory system (DSM), that also uses message passing to operate. Why not using message passing in the first place? Especially in Erlang, message passing allows for location transparency (when sending a message there is no difference to the programmer if the receiver resides in the local or a remote node).
</p>




<p>
  <h3>Creating Processes</h3>
</p>




<p>
  Erlang provides Built-In Functions that are used to spawn new processes. The simplest one is spawn/1|3 (the 1|3 denotes that both spawn/1 and spawn/3 functions exist).
</p>




<p>
  <strong>Pid Datatype</strong><br/>
  Pid stands for Process identifier and is the datatype used for the unique process, identifiers that are assigned to every process.
</p>




<p>
  <strong>spawn/1|3</strong><br/>
  Creates a new process and returns its pid. The new process is placed in the system scheduler queue, so it will be run some time later.
</p>




<p>
  <strong>spawn/1</strong><br/>
  Called as spawn(Fun). The new process will run function Fun with an empty list ([]) as input.
</p>




<p>
  <strong>spawn/3</strong><br/>
  Called as spawn(Module, Function, Args). The new process will run function Module:Function with the elements of the list Args as input.
</p>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>process.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">process</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">say_something</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">say_something</span><span class="p">(</span><span class="n">_What</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">done</span><span class="p">;</span>
</span><span class='line'><span class="n">say_something</span><span class="p">(</span><span class="no">What</span><span class="p">,</span> <span class="no">Times</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;~p~n&quot;</span><span class="p">,</span> <span class="o">[</span><span class="no">What</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">say_something</span><span class="p">(</span><span class="no">What</span><span class="p">,</span> <span class="no">Times</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">process</span><span class="p">,</span> <span class="n">say_something</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">process</span><span class="p">,</span> <span class="n">say_something</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;bonjour&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>process1.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">process1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">start</span><span class="o">/</span><span class="mi">0</span><span class="p">,</span> <span class="n">ping</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span> <span class="n">pong</span><span class="o">/</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong_Pid</span> <span class="o">!</span> <span class="n">finished</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;ping finished~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">);</span>
</span><span class='line'><span class="n">ping</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong_Pid</span> <span class="o">!</span> <span class="p">{</span><span class="n">ping</span><span class="p">,</span> <span class="nb">self</span><span class="p">()},</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">pong</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;ping received pong~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span>
</span><span class='line'>  <span class="n">ping</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">pong</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">receive</span>
</span><span class='line'>    <span class="n">finished</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;pong finished~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">);</span>
</span><span class='line'>    <span class="p">{</span><span class="n">ping</span><span class="p">,</span> <span class="no">Ping_Pid</span><span class="p">}</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="ss">io</span><span class="p">:</span><span class="nb">format</span><span class="p">(</span><span class="s2">&quot;pong received ping~n&quot;</span><span class="p">,</span> <span class="o">[]</span><span class="p">),</span>
</span><span class='line'>      <span class="no">Ping_Pid</span> <span class="o">!</span> <span class="n">pong</span><span class="p">,</span>
</span><span class='line'>      <span class="n">pong</span><span class="p">()</span>
</span><span class='line'>  <span class="k">end</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Pong_Pid</span> <span class="o">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">pong</span><span class="p">,</span> <span class="o">[]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">ping</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="no">Pong_Pid</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Creating Linked Processes</h3>
</p>




<p>
  A very useful feature is to create a new process that is linked to the “parent” one. The link between them guarantees that if one of the two fails (finishes abnormally), the other one also stops executing. This feature is very helpful because it reduces the need for “cleaning up” in case of a failure. Instead of explicitely handling an error, the “let it fail and let someone else handle it” philosophy can be used. The BIF(s) providing this functionality are the spawn_link/1|3.
</p>




<p>
  <strong>link/1</strong><br/>
  Creates a bidirectional link between the calling process and another process (or port), if there is not such a link already. If a process attempts to create a link to itself, nothing is done. Returns true.
</p>




<p>
  <strong>spawn_link/1|3</strong><br/>
  Provides the same functionality as spawn/1|3 with the addition that a link is atomically created between the caller and the newly spawned process.
</p>




<p>
  <strong>spawn_link/1</strong><br/>
  Same call convention as spawn/1.
</p>




<p>
  <strong>spawn_link/3</strong><br/>
  Same call convention as spawn/3.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">spawnLink</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn</span><span class="p">(</span><span class="n">fun</span> <span class="n">spawnLink_</span><span class="o">/</span><span class="mi">0</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">spawnLink_</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">spawn_link</span><span class="p">(?</span><span class="no">MODULE</span><span class="p">,</span> <span class="n">sayExit</span><span class="p">,</span> <span class="o">[]</span><span class="p">),</span>
</span><span class='line'>  <span class="n">justLoop</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">justLoop</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">justLoop</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">sayExit</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="ss">timer</span><span class="p">:</span><span class="nb">sleep</span><span class="p">(</span><span class="mi">4000</span><span class="p">),</span>
</span><span class='line'>  <span class="ss">erlang</span><span class="p">:</span><span class="n">kill</span><span class="p">(</span><span class="n">not_catched</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">spawning</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span><span class="n">spawning</span><span class="p">}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Pid</span> <span class="o">=</span> <span class="ss">spawning</span><span class="p">:</span><span class="n">spawnLink</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">42</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">=</span><span class="no">ERROR</span> <span class="no">REPORT</span><span class="o">====</span> <span class="mi">7</span><span class="o">-</span><span class="no">May</span><span class="o">-</span><span class="mi">2011</span><span class="o">::</span><span class="mi">12</span><span class="p">:</span><span class="mi">24</span><span class="p">:</span><span class="mi">54</span> <span class="o">===</span>
</span><span class='line'><span class="no">Error</span> <span class="k">in</span> <span class="n">process</span> <span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">43</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">with</span> <span class="nb">exit</span> <span class="ss">value</span><span class="p">:</span> <span class="p">{</span><span class="k">undef</span><span class="p">,</span><span class="o">[</span><span class="p">{</span><span class="n">erlang</span><span class="p">,</span><span class="n">kill</span><span class="p">,</span><span class="o">[</span><span class="n">not_</span>
</span><span class='line'><span class="kp">false</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="ss">erlang</span><span class="p">:</span><span class="n">is_process_alive</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Other Processes’-related Built-In Functions</h3>
</p>




<p>
  There are several other BIFs related to processes. The following are some commonly used.
</p>




<p>
  <strong>is_pid/1</strong><br/>
  Returns true if the argument is a pid, else false.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Pid</span> <span class="o">=</span> <span class="n">spawn</span><span class="p">(</span><span class="n">io</span><span class="p">,</span> <span class="nb">format</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;Hello~n&quot;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="no">Hello</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">37</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">is_pid</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>is_process_alive/1</strong><br/>
  Called as is_process_alive(Pid). Pid must refer to a process at the local node. Returns true if the process exists and is alive, that is not exiting and has not exited. Otherwise, returns false.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">is_process_alive</span><span class="p">(</span><span class="nb">self</span><span class="p">())</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>list_to_pid/1</strong><br/>
  Transforms the input string to a pid. This BIF is intended to be used for debugging and not in the application development.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Pid</span> <span class="o">==</span> <span class="n">list_to_pid</span><span class="p">(</span><span class="s2">&quot;&lt;0.39.0&gt;&quot;</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>pid_to_list/1</strong><br/>
  Returns the textual representation of a pid. This BIF is intended to be used for debugging only.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">StringPid</span> <span class="o">=</span> <span class="n">pid_to_list</span><span class="p">(</span><span class="no">Pid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="s2">&quot;&lt;0.37.0&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>register/2</strong><br/>
  Registers a process (or a port) with a name. This name can be later used to refer to the process.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">ShellPid</span> <span class="o">=</span> <span class="nb">self</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">99</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">register</span><span class="p">(</span><span class="n">shell</span><span class="p">,</span> <span class="no">ShellPid</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>registered/0</strong><br/>
  Returns a list with the names of all registered processes.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">registered</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">init</span><span class="p">,</span><span class="n">shell</span><span class="p">,</span><span class="n">error_logger</span><span class="p">,</span><span class="n">rex</span><span class="p">,</span><span class="n">kernel_sup</span><span class="p">,</span><span class="n">inet_db</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_name_server</span><span class="p">,</span><span class="n">file_server_2</span><span class="p">,</span><span class="n">code_server</span><span class="p">,</span>
</span><span class='line'> <span class="n">erl_prim_loader</span><span class="p">,</span><span class="n">user_drv</span><span class="p">,</span><span class="n">standard_error_sup</span><span class="p">,</span>
</span><span class='line'> <span class="n">application_controller</span><span class="p">,</span><span class="n">standard_error</span><span class="p">,</span><span class="n">kernel_safe_sup</span><span class="p">,</span><span class="n">user</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_group</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>self/0</strong><br/>
  One of the most commonly used BIF, returns the pid of the calling processes. As you will see in the next post (about messaging), self is used in almost every message send.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">ShellPid</span> <span class="o">=</span> <span class="nb">self</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">44</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>erlang:send/2|3</strong><br/>
  Sends a message to a process. You will see message sending in detail in the next post.
</p>




<p>
  <strong>erlang:send_after/3</strong><br/>
  Sends a message after a given amount of time.
</p>




<p>
  <strong>unlink/1</strong><br/>
  Removes the link between two processes. Returns true even if there is no exist link.
</p>




<p>
  <strong>unregister/1</strong><br/>
  Called as unregister(Name). Removes the association between the Name and the process which it is associated with.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">unregister</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">registered</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">init</span><span class="p">,</span><span class="n">error_logger</span><span class="p">,</span><span class="n">rex</span><span class="p">,</span><span class="n">kernel_sup</span><span class="p">,</span><span class="n">inet_db</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_name_server</span><span class="p">,</span><span class="n">file_server_2</span><span class="p">,</span><span class="n">code_server</span><span class="p">,</span>
</span><span class='line'> <span class="n">erl_prim_loader</span><span class="p">,</span><span class="n">user_drv</span><span class="p">,</span><span class="n">standard_error_sup</span><span class="p">,</span>
</span><span class='line'> <span class="n">application_controller</span><span class="p">,</span><span class="n">standard_error</span><span class="p">,</span><span class="n">kernel_safe_sup</span><span class="p">,</span><span class="n">user</span><span class="p">,</span>
</span><span class='line'> <span class="n">global_group</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>whereis/1</strong><br/>
  Called as whereis(Name). Returns the pid of the process that is register with the name Name.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">whereis</span><span class="p">(</span><span class="n">shell</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="mi">0</span><span class="o">.</span><span class="mi">44</span><span class="o">.</span><span class="mi">0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang List Comprehension]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/24/erlang-list-comprehension/"/>
    <updated>2015-01-24T21:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/24/erlang-list-comprehension</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang List Comprehension" />
</p>




<p>
  <h3>Syntax:</h3>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Expression</span> <span class="o">||</span> <span class="no">Generators1</span><span class="p">,</span> <span class="no">Guards1</span><span class="p">,</span> <span class="no">Generators2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.]</span>
</span></code></pre></td></tr></table></div></figure>




<p><p>
  <strong>Expression</strong><br/>
  The expression specifies the elements of the result. Example: <code>[I || &lt;&ndash; [1, 2, 3]]</code> returns the input list element as is.
</p></p>

<p><p>
  <strong>Generators</strong><br/>
  Generators create the data used in ther filter-map operations. A generator has the &ldquo;Pattern &lt;&ndash; Data&rdquo; format, where &ldquo;Data&rdquo; is a list or an expression that results to a list and Pattern is a pattern used to match with the elements of the list. This pattern can be used to disassembly elements. Example two valid generators are <code>I &lt;&ndash; lists:seq(1, 10)</code> and <code>{X, Y} &lt;&ndash; [{&lsquo;A&rsquo;, &lsquo;Excellent&rsquo;}, {&lsquo;B&rsquo;, &lsquo;Good&rsquo;}, {&lsquo;C&rsquo;, &lsquo;Fair&rsquo;}]</code>.
</p></p>

<p><p>
  <strong>Guards</strong><br/>
  Guards are expression that return either true or false, the same as the guards we have seen in the previous posts. They apply to the variables that are on the left of the guard and the ones that are accessible to the scope where the comprehension runs. Example: <code>I &lt;&ndash; [1, 2, 3, 4], I rem 1 == 0</code> is a valid generator.
</p></p>

<p><p>
  <h3>Example:</h3>
</p></p>

<p><p>
  I will show some examples that implements some list functions. The most of them already exists in the lists module as I did in the past, I will add these functions to the module called mylists.
</p></p>

<p><p>
  <strong>map/2</strong><br/>
  The results contains the elements of the input list after applied to the input function.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% Generator: </span><span class="n">the</span> <span class="n">items</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span> <span class="n">provided</span>
</span><span class='line'><span class="sx">% Guard: </span><span class="n">no</span> <span class="n">guard</span> <span class="n">expression</span><span class="p">,</span> <span class="n">all</span> <span class="n">items</span> <span class="n">are</span> <span class="n">kept</span>
</span><span class='line'><span class="sx">% Expression: </span><span class="n">the</span> <span class="n">item</span> <span class="n">from</span> <span class="n">the</span> <span class="n">generator</span> <span class="n">after</span> <span class="n">applied</span> <span class="n">to</span> <span class="n">the</span> <span class="no">Function</span>
</span><span class='line'>
</span><span class='line'><span class="n">map</span><span class="p">(</span><span class="no">Function</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="o">[</span><span class="no">Function</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="o">].</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&ndash;&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">I</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>deleteall/2</strong><br/>
  Deletes all occurrences of an element from the list.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% Generator: </span><span class="n">the</span> <span class="n">items</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span> <span class="n">provided</span>
</span><span class='line'><span class="sx">% Guard: </span><span class="n">the</span> <span class="n">item</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">equal</span> <span class="p">(</span><span class="n">both</span> <span class="n">value</span> <span class="ow">and</span> <span class="n">type</span><span class="p">)</span> <span class="n">with</span> <span class="n">the</span> <span class="no">Elem</span>
</span><span class='line'><span class="sx">% Expression: </span><span class="n">keep</span> <span class="n">the</span> <span class="n">elements</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span> <span class="n">that</span> <span class="s2">&quot;pass&quot;</span> <span class="n">the</span> <span class="n">guard</span> <span class="nb">test</span><span class="p">,</span> <span class="n">as</span> <span class="n">they</span> <span class="n">are</span>
</span><span class='line'>
</span><span class='line'><span class="n">deleteall</span><span class="p">(</span><span class="no">Elem</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">=</span><span class="sr">/= Elem].</span>
</span><span class='line'>
</span><span class='line'><span class="sr">1&gt; mylists:deleteall(3, [1, 2, 3, 4, 3, 2, 1]).</span>
</span><span class='line'><span class="sr">[1,2,4,2,1]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>partition/2</strong><br/>
  Partition a list into two, according to if the elements satisfy or not a given predicate.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">partition</span><span class="p">(</span><span class="no">Pred</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="p">,</span> <span class="no">Pred</span><span class="p">(</span><span class="n">I</span><span class="p">)</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="p">,</span> <span class="ow">not</span><span class="p">(</span><span class="no">Pred</span><span class="p">(</span><span class="n">I</span><span class="p">))</span><span class="o">]</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% an </span><span class="n">alternative</span> <span class="n">implementation</span>
</span><span class='line'><span class="n">partition2</span><span class="p">(</span><span class="no">Pred</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>    <span class="no">Sat</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="no">Pred</span><span class="p">,</span> <span class="no">List</span><span class="p">),</span>
</span><span class='line'>    <span class="p">{</span><span class="no">Sat</span><span class="p">,</span> <span class="no">List</span> <span class="o">&mdash;</span> <span class="no">Sat</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">partition</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&ndash;&gt;</span> <span class="n">is_atom</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>replicated/2</strong><br/>
  Creates a list of Items of length Times.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% Generator: </span><span class="n">only</span> <span class="n">used</span> <span class="k">for</span> <span class="n">fixing</span> <span class="n">the</span> <span class="n">length</span>
</span><span class='line'><span class="sx">% Expression: </span><span class="n">a</span> <span class="n">fixed</span> <span class="n">item</span>
</span><span class='line'>
</span><span class='line'><span class="n">replicated</span><span class="p">(</span><span class="no">Item</span><span class="p">,</span> <span class="no">Times</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="o">[</span><span class="no">Item</span> <span class="o">||</span> <span class="n">_</span> <span class="o">&lt;&ndash;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">Times</span><span class="p">)</span><span class="o">].</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">replicated</span><span class="p">(</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="p">,</span><span class="s1">&#39;:&ndash;)&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>replicate_items/2</strong><br/>
  Replicates each elements of the list Times times.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">replicate_items</span><span class="p">(</span><span class="no">Times</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="ss">mylists</span><span class="p">:</span><span class="n">flatten</span><span class="p">(</span><span class="o">[[</span><span class="no">Item</span> <span class="o">||</span> <span class="n">_</span> <span class="o">&lt;&ndash;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">Times</span><span class="p">)</span><span class="o">]</span> <span class="o">||</span> <span class="no">Item</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% same </span><span class="n">as</span>
</span><span class='line'><span class="sx">% replicate_items(Times, </span><span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'><span class="sx">%  </span> <span class="ss">mylists</span><span class="p">:</span><span class="n">flatten</span><span class="p">(</span><span class="o">[</span><span class="n">replicated</span><span class="p">(</span><span class="no">Item</span><span class="p">,</span> <span class="no">Times</span><span class="p">)</span> <span class="o">||</span> <span class="no">Item</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">replicate_items</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>member/2</strong><br/>
  Returns true if an element is a member of the list, else returns false.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">member</span><span class="p">(</span><span class="no">Elem</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="o">[]</span> <span class="o">/=</span> <span class="o">[</span><span class="n">ok</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">==</span> <span class="no">Elem</span><span class="o">].</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">member</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">member</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">aa</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">z</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>member_times/2</strong><br/>
  Returns the number of occurences of an element in a list.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">member_times</span><span class="p">(</span><span class="no">Elem</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="n">length</span><span class="p">(</span><span class="o">[</span><span class="n">ok</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">==</span> <span class="no">Elem</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">member_times</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">member_times</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">member_times</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>quicksort/1</strong><br/>
  This is the famous Quicksort implementation that is often used to show the power and compactness of Erlang.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">qsort</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="o">[]</span><span class="p">;</span>
</span><span class='line'><span class="n">qsort</span><span class="p">(</span><span class="o">[</span><span class="no">Pivot</span> <span class="o">|</span> <span class="no">List</span><span class="o">]</span><span class="p">)</span> <span class="o">&ndash;&gt;</span>
</span><span class='line'>  <span class="n">qsort</span><span class="p">(</span><span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">&lt;</span> <span class="no">Pivot</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="o">++</span>
</span><span class='line'>  <span class="o">[</span><span class="no">Pivot</span> <span class="o">|</span> <span class="n">qsort</span><span class="p">(</span><span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">&gt;=</span> <span class="no">Pivot</span><span class="o">]</span><span class="p">)</span><span class="o">].</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">qsort</span><span class="p">(</span><span class="o">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><p>
  <strong>Multiple Generators</strong><br/>
  Now I will present some examples with multiple generators.
</p></p>

<p><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="p">{</span><span class="n">I</span><span class="p">,</span> <span class="n">J</span><span class="p">}</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="n">J</span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]].</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="n">c</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">c</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% duplicate </span><span class="n">list</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n"><em></span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="o">]</span><span class="p">,</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% duplicate </span><span class="n">elements</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="n">J</span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="o">]].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% discard </span><span class="n">elements</span> <span class="ow">and</span> <span class="n">duplicate</span> <span class="n">the</span> <span class="n">others</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">Discard</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span><span class="p">,</span> <span class="ow">not</span><span class="p">(</span><span class="ss">lists</span><span class="p">:</span><span class="n">member</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="no">Discard</span><span class="p">)),</span> <span class="n"></em></span> <span class="o">&lt;&ndash;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="o">]].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% subsequences</span>
</span><span class='line'><span class="sx">8&gt; </span><span class="o">[[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&lt;&ndash;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">J</span><span class="p">)</span><span class="o">]</span> <span class="o">||</span> <span class="n">J</span> <span class="o">&lt;&ndash;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span><span class="o">].</span>
</span><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang List &amp; List Module]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/22/erlang-list-and-list-module/"/>
    <updated>2015-01-22T23:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/22/erlang-list-and-list-module</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Control Flow Statement" />
</p>




<p>
  List is the the most important data type in Erlang, as in every functional programming language. In this article, I will present the Erlang’s lists module and its most important functions.
</p>




<p>
  <h3>Syntax</h3>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Element1</span><span class="p">,</span> <span class="no">Element2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="no">ElementN</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  N is called the length of the list. So, [] is the empty list.
</p>




<p>
  <h3>Decomposing & Pattern Matching</h3>
</p>




<p>
  An empty list pattern matches with [].
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">=</span> <span class="o">[].</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">==</span> <span class="o">[].</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">=</span> <span class="o">[].</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">NotEmpty</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">==</span> <span class="no">NotEmpty</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">=</span> <span class="no">NotEmpty</span><span class="o">.</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="ss">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">value</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  A non-empty list pattern matches with [Head | Tail].
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="no">Head</span> <span class="o">|</span> <span class="no">Tail</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Head</span><span class="o">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">Tail</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="o">[</span><span class="no">Head1</span> <span class="o">|</span> <span class="no">Tail1</span><span class="o">]</span> <span class="o">=</span> <span class="no">Tail</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="no">Head1</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="no">Tail1</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="o">[</span><span class="no">Head2</span> <span class="o">|</span> <span class="no">Tail2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[].</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="ss">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">value</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Normal Representation</strong><br/>
  The format [Element1, Element2, &#8230;, ElementN] is a shorthand of [Element1 | [Element2 | &#8230; | [ElementN | []] &#8230; ] representation.<br/>
  Example: the list [1, 2, 3] is a shorthand of [1 | [2 | 3 | []]], that is the normal representation of a list.
</p>




<p>
  Decomposing:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span> <span class="o">|</span> <span class="o">[</span><span class="n">B</span> <span class="o">|[</span><span class="n">C</span> <span class="o">|</span> <span class="n">D</span><span class="o">]]]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">B</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">C</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="n">D</span><span class="o">.</span>
</span><span class='line'><span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Composing:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">List</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">List1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span> <span class="o">|</span> <span class="no">List</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">List2</span> <span class="o">=</span> <span class="o">[-</span><span class="mi">1</span> <span class="o">|</span> <span class="o">[</span><span class="mi">0</span> <span class="o">|</span> <span class="no">List1</span><span class="o">]].</span>
</span><span class='line'><span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">List3</span> <span class="o">=</span> <span class="o">[[-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">]</span> <span class="o">|</span> <span class="no">List2</span><span class="o">].</span>
</span><span class='line'><span class="o">[[-</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">%</span> <span class="n">the</span> <span class="n">head</span> <span class="n">is</span> <span class="n">just</span> <span class="mi">1</span> <span class="n">element</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Of course, since it is more readable and easier to write, the shorthand representation is usually used: 
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span> <span class="o">%</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">match</span> <span class="n">cause</span>
</span><span class='line'><span class="sx">% the </span><span class="n">left</span><span class="o">-</span><span class="n">hand</span> <span class="n">side</span> <span class="n">matches</span> <span class="n">a</span> <span class="mi">4</span><span class="o">-</span><span class="n">elements</span> <span class="n">list</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="ss">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">value</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span> <span class="o">|</span> <span class="n">D</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">D</span><span class="o">.</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="o">[-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span> <span class="o">|</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span> <span class="o">|</span> <span class="o">[</span><span class="mi">1</span> <span class="o">|</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]]]].</span>
</span><span class='line'><span class="o">[-</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>List Parsing</strong><br/>
  The pattern matching you saw before can be used in a function in order to parse the list:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">parse</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">parsed</span><span class="o">.</span>
</span><span class='line'><span class="n">parse</span><span class="p">(</span><span class="o">[</span><span class="no">Head</span> <span class="o">|</span> <span class="no">Tail</span><span class="o">]</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">parse</span><span class="p">(</span><span class="no">Tail</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Concatenation</strong><br/>
  Two lists can be concatenated using ++:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">L1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="no">L2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">L1</span> <span class="o">++</span> <span class="no">L2</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">L1</span> <span class="o">++</span> <span class="no">L2</span> <span class="o">++</span> <span class="no">L1</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">Mirror</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">List</span> <span class="o">++</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="k">end</span><span class="o">.</span>
</span><span class='line'><span class="c1">#Fun&lt;erl_eval .6.13229925&gt;</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="no">Mirror</span><span class="p">(</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">{</span><span class="n">c</span><span class="p">}</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,{</span><span class="n">c</span><span class="p">},{</span><span class="n">c</span><span class="p">},</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Difference</strong><br/>
  You can take the difference of two lists (the left-hand side one without the element of the right-hand side) using the &#8211; operator:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">--</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">--</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">--</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">--</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">--</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">--</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="no">Delete</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="no">List</span><span class="p">,</span> <span class="no">Element</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">List</span> <span class="o">--</span> <span class="o">[</span><span class="no">Element</span><span class="o">]</span> <span class="k">end</span><span class="o">.</span>
</span><span class='line'><span class="c1">#Fun&lt;erl_eval .12.113037538&gt;</span>
</span><span class='line'><span class="mi">8</span><span class="o">&gt;</span> <span class="no">Delete</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Module Lists</h3>
</p>




<p>
  The lists module defines some commonly used list processing functions. This module is extremely useful, so it is a good idea to “remember” what functions it provides.
</p>




<p>
  <strong>all/2</strong><br/>
  Called as all(Pred, List). Returns true if Pred(Element) returns true for all lists’ elements.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">F</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">X</span> <span class="n">rem</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">all</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">F</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">X</span> <span class="n">rem</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">all</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>append/1|2</strong><br/>
  Concatenates the lists to one.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">append</span><span class="p">(</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">append</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Notice that the operator ++ and the function append/2 are the same.
</p>




<p>
  <strong>delete/2</strong><br/>
  Deletes an element from the list (first occurrence, if any).
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">delete</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="n">d</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">d</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">d</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">d</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>concat/1</strong><br/>
  Accepts a list of items (atom, integer, float, string) and returns the concatenation of their textual representation as a list.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">concat</span><span class="p">(</span><span class="o">[</span><span class="s2">&quot;ab&quot;</span><span class="p">,</span> <span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="s2">&quot;ab.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>filter/2</strong><br/>
  Called as filter(Pred, List). Returns a list containing only the elements that return true for the Pred.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Gt10</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">X</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="k">end</span><span class="p">,</span> <span class="ss">lists</span><span class="p">:</span><span class="n">filter</span><span class="p">(</span><span class="no">Gt10</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">66</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">22</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">66</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="p">{</span><span class="mi">4</span><span class="p">}</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span><span class="n">d</span><span class="p">,{</span><span class="mi">4</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">filter</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">is_number</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>flatten/1</strong><br/>
  Returns a flattened (no element is a list) version of the input list.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">flatten</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="o">]]]</span><span class="p">,</span> <span class="o">[[[[</span><span class="mi">8</span><span class="o">]]]]]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>key*** functions</strong><br/>
  There are several functions which their name starts with the word &#8220;key&#8221;. They are all used to process lists of tuples.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Kl</span> <span class="o">=</span> <span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">k1</span><span class="p">,</span> <span class="n">a</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">k2</span><span class="p">,</span> <span class="n">b</span><span class="p">},</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">k3</span><span class="p">,</span> <span class="n">c</span><span class="p">},</span> <span class="p">{</span><span class="n">e</span><span class="p">,</span> <span class="n">k5</span><span class="p">,</span> <span class="n">e</span><span class="p">}</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span><span class="n">k1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">k2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="n">k3</span><span class="p">,</span><span class="n">c</span><span class="p">},{</span><span class="n">e</span><span class="p">,</span><span class="n">k5</span><span class="p">,</span><span class="n">e</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keydelete</span><span class="p">(</span><span class="n">k3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span><span class="n">k1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">k2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="n">e</span><span class="p">,</span><span class="n">k5</span><span class="p">,</span><span class="n">e</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keysearch</span><span class="p">(</span><span class="n">k3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">value</span><span class="p">,{</span><span class="n">c</span><span class="p">,</span><span class="n">k3</span><span class="p">,</span><span class="n">c</span><span class="p">}}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keysearch</span><span class="p">(</span><span class="n">k4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keyreplace</span><span class="p">(</span><span class="n">k3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">,</span> <span class="p">{</span><span class="kp">new</span><span class="p">,</span> <span class="n">tuple</span><span class="p">})</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span><span class="n">k1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">k2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="kp">new</span><span class="p">,</span><span class="n">tuple</span><span class="p">},{</span><span class="n">e</span><span class="p">,</span><span class="n">k5</span><span class="p">,</span><span class="n">e</span><span class="p">}</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>last/1</strong><br/>
  Returns the last element of the list.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">last</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>map/2</strong><br/>
  Called as map(Fun, List). Applies function Fun to every item of the list and returns the resulting list.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">I</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>partition/2</strong><br/>
  Partitions a list to two according to if the elements satisfy or not a given predicate.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">I</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>reverse/1|2</strong><br/>
  Returns the reverse of a list.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">d</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">d</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>sort/1|2</strong><br/>
  Sorts a list to increasing order or according to a given function.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">sort</span><span class="p">(</span><span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">Gt</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">J</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">I</span> <span class="o">&gt;</span> <span class="n">J</span> <span class="k">end</span><span class="o">.</span>
</span><span class='line'><span class="c1">#Fun&lt;erl_eval .12.113037538&gt;</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">sort</span><span class="p">(</span><span class="no">Gt</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>sum/1</strong><br/>
  Returns the sum of the elements of a list containing numbers.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">sum</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">6</span><span class="o">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>u*** functions</strong><br/>
  There are several function which their name starts with &#8220;u&#8221; and the results they return contain no duplicates.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">usort</span><span class="p">(</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Control Flow Statement]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/20/erlang-control-flow-statement/"/>
    <updated>2015-01-20T23:17:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/20/erlang-control-flow-statement</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Control Flow Statement" />
</p>




<p>
  As we saw in the previous post, pattern matching with different function clauses can be used in order to control the execution flow in Erlang. Erlang also provides the if, case, and receive control flow constructs that can be used in a function body. In this post I will only present the if and casestatements since receive is used for message passing and I will write a dedicated post about the subject. Both if and case are similar to the statements of other programming languages.
</p>




<p>
  <strong>If Statement</strong>
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span>
</span><span class='line'>  <span class="no">BoolbeanExpression1</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">IfBody1</span><span class="p">;</span>
</span><span class='line'>  <span class="no">BooleanExpression2</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">IfBody2</span><span class="p">;</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="kp">true</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">BodyCathAll</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The different clauses, except the last one are like &#8220;else if&#8221; in other languages, while the last one (true ->) is like the &#8220;else&#8221;; it succeeds when all the previous clauses have failed.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">is_greater_than</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">if</span>
</span><span class='line'>    <span class="n">X</span> <span class="o">&gt;</span> <span class="n">Y</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>    <span class="kp">true</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Case Statement</strong>
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="no">Expression</span> <span class="n">of</span>
</span><span class='line'>  <span class="no">Value1</span> <span class="o">[</span><span class="k">when</span> <span class="no">Guard1</span><span class="o">]</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">CaseBody1</span><span class="p">;</span>
</span><span class='line'>  <span class="no">Value2</span> <span class="o">[</span><span class="k">when</span> <span class="no">Guard2</span><span class="o">]-&gt;</span>
</span><span class='line'>    <span class="no">CaseBody2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_Other</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="no">CaseBodyCatchAll</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Notice that the last clause (_Other) is like the default clause in other programming languages. The Expression should always return a value (if it is a function call) that will be used to perform the pattern matching.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">check</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="k">when</span> <span class="n">is_list</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="n">of</span>
</span><span class='line'>    <span class="no">List</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>    <span class="n">_</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="n">check</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">arg_not_list</span><span class="p">}</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Tail Recursion]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/18/erlang-tail-recursion/"/>
    <updated>2015-01-18T21:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/18/erlang-tail-recursion</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  A function is called tail recursive when the recursive call to itself happens only in the last expression of the body in every clause.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">non_tail_recursive</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">non_tail_recursive</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">),</span>
</span><span class='line'>  <span class="n">other_expression</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">.</span>
</span><span class='line'><span class="n">tail_recursive</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="n">other_expression</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">tail_recursive</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The first function is not the tail recursive as the recursive call is followed by other expression. While the second is, since the recursive call is the last statement.
</p>




<p>
  <strong>Tail Recursion & Performance</strong><br/>
  In many programming languages tails recursion is a good approach performance. But in general, it is not the case in the latest releases of Erlang. Tail recursion is not guaranteed to give you better performance.
</p>




<p>
  <strong>Tail Recursion VS Non Tail Recursion</strong><br/>
</p>




<p>
  Non Tail Recursive:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">length</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">length</span><span class="p">(</span><span class="o">[</span><span class="n">_</span> <span class="o">|</span> <span class="n">T</span><span class="o">]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Tail Recursive:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">length</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">length</span><span class="p">(</span><span class="no">List</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">length</span><span class="p">(</span><span class="o">[]</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">L</span><span class="p">;</span>
</span><span class='line'><span class="n">length</span><span class="p">(</span><span class="o">[</span><span class="n">_</span> <span class="o">|</span> <span class="n">T</span><span class="o">]</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">length</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">L</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Recursion]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/18/erlang-recursion/"/>
    <updated>2015-01-18T11:28:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/18/erlang-recursion</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  The definition of the word <strong>Recursion</strong> is &#8220;(mathematics) an expression such that each term is generated by repeating a particular mathematical operation&#8221;. Recursion is one of the most powerful &#8220;tools&#8221; in a functional programming language.
</p>




<p>
  Recursion can be used to divide techniques to problem solving, where a problem is broken to smaller subproblems, the subproblems are solved, and the results are “merged” to generate the final result.
</p>




<p>
  Recursion happens when a function calls itself directly or indirectly. Recursion is used instead of the conventional loop statements of other programming languages, such as while and for in C.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">functionA</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Body_before_recursion</span><span class="p">,</span> <span class="sx">% optional</span>
</span><span class='line'><span class="sx"> </span> <span class="n">functionA</span><span class="p">(</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">),</span>
</span><span class='line'>  <span class="no">Body_after_recursion</span><span class="o">.</span> <span class="o">%</span> <span class="n">optional</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">sum</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">sum</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">N</span> <span class="o">+</span> <span class="n">sum_n</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span> <span class="ss">example</span><span class="p">:</span><span class="n">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">fac</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">fac</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">fac</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">N</span> <span class="o">*</span> <span class="n">fac</span><span class="p">(</span><span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">%%</span> <span class="ss">example</span><span class="p">:</span><span class="n">fac</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">list_sum</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_sum</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">list_sum</span><span class="p">(</span><span class="o">[</span><span class="n">H</span><span class="o">|</span><span class="n">T</span><span class="o">]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">H</span> <span class="o">+</span> <span class="n">sum_list</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="sx">% example:list_sum([1, </span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">list_increase_element</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_increase_element</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">[]</span><span class="p">;</span>
</span><span class='line'><span class="n">list_increase_element</span><span class="p">(</span><span class="o">[</span><span class="n">H</span><span class="o">|</span><span class="n">T</span><span class="o">]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="o">[</span><span class="n">H</span> <span class="o">+</span> <span class="mi">1</span><span class="o">|</span><span class="n">increase</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="o">].</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="sx">% example:list_increase_element([1, </span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">list_length</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_length</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">list_length</span><span class="p">(</span><span class="o">[</span><span class="n">_H</span><span class="o">|</span><span class="n">T</span><span class="o">]</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">list_length</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">%</span><span class="sx">% example:list_length([1, </span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Guards]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/17/erlang-guards/"/>
    <updated>2015-01-17T22:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/17/erlang-guards</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<h3>Guard structures</h3>




<p>
  Guards in Erlang are boolean functions placed after the key word, &#8220;when&#8221; and before the arrow, &#8220;->&#8221;. Guards may appear as part of a function definition, &#8216;receive&#8217;, &#8216;if&#8217;, &#8216;case&#8217; and &#8216;try/catch&#8217; expressions.
</p>




<p>
  We use a guard in a function definition.
</p>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">the_answer_is</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'><span class="n">the_answer_is</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kp">false</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% c(example).</span>
</span><span class='line'><span class="sx">% </span><span class="n">ok</span>
</span><span class='line'><span class="o">%</span>
</span><span class='line'><span class="sx">% example:the_answer_is(42).</span>
</span><span class='line'><span class="sx">% </span><span class="kp">true</span>
</span><span class='line'><span class="o">%</span>
</span><span class='line'><span class="sx">% example:the_answer_is(21).</span>
</span><span class='line'><span class="sx">% </span><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>fun definition</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">F</span> <span class="o">=</span> <span class="n">fun</span>
</span><span class='line'>  <span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>receive expression</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">receive</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="o">-&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>if expression</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="kp">true</span> <span class="o">-&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>case expression</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">L</span> <span class="n">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_</span> <span class="o">-&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">L</span> <span class="n">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">node</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_AnyNode</span> <span class="o">-&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>try/catch</strong>
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">try</span> <span class="n">find</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="n">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_</span> <span class="o">-&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="kp">catch</span>
</span><span class='line'>  <span class="p">{</span><span class="n">notanumber</span><span class="p">,</span> <span class="n">R</span><span class="p">}</span> <span class="k">when</span> <span class="n">is_list</span><span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">alist</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">notanumber</span><span class="p">,</span> <span class="n">R</span><span class="p">}</span> <span class="k">when</span> <span class="n">is_float</span><span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">afloat</span>
</span><span class='line'>  <span class="n">_</span> <span class="o">-&gt;</span> <span class="n">noidea</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Multiple Guards</h3>
  It is possible to use multiple guards within the same function definition or expression. When using multiple guards, a semicolon, &#8220;;&#8221;, signifies a boolean &#8220;OR&#8221;, while a comma, &#8220;,&#8221;, signifies boolean &#8220;AND&#8221;.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">the_answer_is</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">42</span><span class="p">,</span> <span class="n">is_integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'><span class="n">geq_1_or_leq_2</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">N</span> <span class="o">=&lt;</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Guard Functions</h3>
  There are several built-in-functions which be used in a guard.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">is_alive</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="n">is_boolean</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_builtin</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="n">is_constant</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_float</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_function</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="n">is_function</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_integer</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_list</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_number</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_pid</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_port</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_record</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="n">is_record</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="n">is_reference</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_tuple</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">tuple_size</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_binary</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_bitstring</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">bit_size</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">byte_size</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">length</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">N</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">A</span> <span class="o">&gt;</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">&lt;</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">==</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">=&lt;</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">&gt;=</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">/=</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">=</span><span class="sr">/= B</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Functions]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/17/erlang-functions/"/>
    <updated>2015-01-17T20:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/17/erlang-functions</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  As you know by now, Erlang is a functional programming language. In my point of view, different programming has different problem solving philosophy:<br/>
  - Procedural: describe the steps needed to be taken to solve the problem.<br/>
  - Logical (Declarative): describe the problem properly and let the language solve it.<br/>
  - Object-orientation: design the objects that will lead you to the solution.<br/>
  - Functional: define small and precise functions that all together solve the problem.
</p>




<p>
  <strong>Declaring a Function</strong><br/>
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function_name</span><span class="p">(</span><span class="no">Argument1</span><span class="p">,</span> <span class="no">Argument2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="no">Statement1</span><span class="p">,</span>
</span><span class='line'>  <span class="no">Statement2</span><span class="p">,</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">double</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">double</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">N</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Modules and Compiling]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/17/erlang-modules-and-compiling/"/>
    <updated>2015-01-17T11:09:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/17/erlang-modules-and-compiling</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  Erlang code is divided into modules. A module consists of a sequence of attributes and function declarations, each terminated by period (.). It provided the contained functions with a common namespace as well, You can imagine a module as a package in Java, or a header file in C. Program in Erlang spans over more than one modules.
</p>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>m.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="o">.</span>          <span class="o">%</span> <span class="k">module</span> <span class="nn">attribute</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">fact</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>   <span class="o">%</span> <span class="k">module</span> <span class="nn">attribute</span>
</span><span class='line'>
</span><span class='line'><span class="n">fact</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">-&gt;</span>  <span class="sx">% beginning </span><span class="n">of</span> <span class="n">function</span> <span class="n">declaration</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">*</span> <span class="n">fact</span><span class="p">(</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>     <span class="o">%</span>  <span class="o">|</span>
</span><span class='line'><span class="n">fact</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">-&gt;</span>           <span class="sx">%  </span><span class="o">|</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">.</span>                 <span class="o">%</span> <span class="k">end</span> <span class="n">of</span> <span class="n">function</span> <span class="n">declaration</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Defining Modules</h3>
  Assume that we want to create a module that will contain our own implementation of list functions and name it mlists.<br/>
  First, we create a file named mlists.erl that will contain the module. The container file and the module names have to be the same.
</p>




<p>
  <h3>Calling a Module&#8217;s Function</h3>
  The calling function of a module, convention in Erlang is <code>module:function(argument1, argument2, ...)</code>.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">max</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <h3>Calling a Module Function within the Module</h3>
  A function defined within the module file can be called either as <code>module_name:function(arguments1, argument2, ...)</code>, or <code>function(arguments1, argument2, ...)</code>, so the module name can be skipped.
</p>




<p>
  <h3>Modules Attributes</h3>
  Then we need to define the module’s attributes. An attribute is the information that we provide to the Erlang compiler. It is placed as a directive (usually) in the top of the file and has the <code>-attribute_name(attribue_value(s)).</code> format. The one attribute that we have to define is the one providing the module name.
</p>




<p>
  <strong>-module(Module).</strong><br/>
  Module declaration, defining the name of the module. The name Module, an atom, should be the same as the file name minus the extension erl. Otherwise code loading will not work as intended. 
</p>




<p>
  Example in the top of mlists.erl place:
</p>




<figure class='code'><figcaption><span>mlists.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">mlists</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>-export(Functions).</strong><br/>
  Exported functions is used to define which functions the module exports, where &#8220;exports&#8221; means that they will be available to be called outside the module.
</p>




<p>
  All the functions that are not exported by the module are only visible within the file, similar with the private functions in Ruby, Java and the static ones in C.
</p>




<p>
  Example:
</p>




<figure class='code'><figcaption><span>mlists.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">mlists</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">function1</span><span class="o">/</span><span class="n">arity1</span><span class="p">,</span> <span class="n">function2</span><span class="o">/</span><span class="n">arity2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>-import(Module,Functions).</strong></br>
  You can use this directive in order to import the selected exported functions of a module in the namespace of another one. It means that if you do so, you will be able to call the functions without the module prefix. Although in some cases it could be convenient, it is not recommended to use this directive, because it decreases the code’s readability.
</p>




<p>
  <strong>-compile(Options).</strong><br/>
  Compile is used to pass compilation instructions to the compiler.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">compile</span><span class="p">(</span><span class="o">[</span><span class="n">export_all</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>-on_load(Function).</strong><br/>
  Names a function that should be run automatically when a module a loaded.
</p>




<p>
  <h3>Compiling Modules</h3>
  Erlang programs must be compiled to object code. The compiler can generate a new file which contains the object code. The current abstract machine which runs the object code is called BEAM. To compile the modules start an Erlang emulator on the folder that contains your source files. In order to compile a .erl, using <code>c(Module)</code> Bult-in Function.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">mlist</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If there is no error occurs, the compiler generates the compiled .beam file.
</p>




<p>
  <h3>Loading a Module</h3>
  The object code must be loaded into the Erlang runtime system. To load the modules start an Erlang emulator on the folder that contains your source files. In order to load a compiled module .beam, using <code>l(Module)</code> Bult-in Function.
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">module</span><span class="p">,</span> <span class="n">mlist</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  I promise, from now on the posts will be far more interesting. Next one, or two posts will be about defining functions in Erlang. You can imagine how important functions are for a functional programming language. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Datatypes]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/erlang-datatypes/"/>
    <updated>2015-01-16T23:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/erlang-datatypes</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  I will introduce the most datatypes that being used in Erlang such as number, atom, function, tuple, map, list, record, and boolean.
</p>




<p>
  <strong>Number</strong><br/>
  There are two datatypes of numeric are integers and floats.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="mi">42</span><span class="o">.</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Atom</strong><br/>
  Atom is a literal, a constant with name. Atom should be enclosed in single quotes (&#8216;) if it does not begin with a lower-case letter or if it contains other characters than alphanumeric characters, underscore (_), or @ sign.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hi</span>
</span><span class='line'><span class="n">phone_number</span>
</span><span class='line'><span class="s1">&#39;Sunday&#39;</span>
</span><span class='line'><span class="s1">&#39;phone number&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Fun</strong><br/>
  Fun is a functional object. Funs make it possible to create an anonymous function and pass the function itself.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Fun1</span> <span class="o">=</span> <span class="n">fun</span> <span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">X</span><span class="o">+</span><span class="mi">1</span> <span class="k">end</span><span class="o">.</span>
</span><span class='line'><span class="c1">#Fun&lt;erl_eval.6.39074546&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Fun1</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Tuple</strong><br/>
  Tuple is a compound data type, it consists of elements of any datatypes.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="no">Element1</span><span class="p">,</span> <span class="no">Element2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="no">ElementN</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">T</span> <span class="o">=</span> <span class="p">{</span><span class="n">bunlong</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="p">{</span><span class="n">may</span><span class="p">,</span> <span class="mi">17</span><span class="p">}}</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">bunlong</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="p">{</span><span class="n">may</span><span class="p">,</span> <span class="mi">17</span><span class="p">}}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">element</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="n">bunlong</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">T2</span> <span class="o">=</span> <span class="n">setelement</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">bunlong</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="p">{</span><span class="n">may</span><span class="p">,</span> <span class="mi">17</span><span class="p">}}</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">tuple_size</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">tuple_size</span><span class="p">({})</span><span class="o">.</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <string>Map</string><br/>
  Map is a compound data type with a variable number of key-value associations.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#{Key1=&gt;Value1,...,KeyN=&gt;ValueN}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">M1</span> <span class="o">=</span> <span class="c1">#{name=&gt;bunlong,age=&gt;26,date=&gt;{may,07}}.</span>
</span><span class='line'><span class="c1">#{age =&gt; 26,date =&gt; {may,07},name =&gt; bunlong}</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">maps</span><span class="p">:</span><span class="n">get</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span><span class="no">M1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="n">bunlong</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">maps</span><span class="p">:</span><span class="n">get</span><span class="p">(</span><span class="n">date</span><span class="p">,</span><span class="no">M1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">may</span><span class="p">,</span><span class="mo">07</span><span class="p">}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">M2</span> <span class="o">=</span> <span class="ss">maps</span><span class="p">:</span><span class="n">update</span><span class="p">(</span><span class="n">age</span><span class="p">,</span><span class="mi">27</span><span class="p">,</span><span class="no">M1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="c1">#{age =&gt; 27,date =&gt; {may,07},name =&gt; bunlong}</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="n">map_size</span><span class="p">(</span><span class="n">M</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="n">map_size</span><span class="p">(</span><span class="c1">#{}).</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>List</strong><br/>
  As in all functional programming language, list is one of the most used datatyped. Again, Erlang borrows the list syntax from Prolog. Because of their importance. List is a compound data type with a variable number of terms.
</p>




<p>
  Syntax:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Element1</span><span class="p">,</span> <span class="no">Element2</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">,</span> <span class="no">ElementN</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="o">[</span><span class="n">H</span><span class="o">|</span><span class="n">T</span><span class="o">]</span> <span class="o">=</span> <span class="n">L</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">H</span><span class="o">.</span>
</span><span class='line'><span class="n">a</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">T</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="no">L2</span> <span class="o">=</span> <span class="o">[</span><span class="n">d</span><span class="o">|</span><span class="n">T</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="n">d</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">length</span><span class="p">(</span><span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">length</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Record</strong><br/>
  A record is a data structure for storing a fixed number of elements. It has named fields and is similar to a struct in C. However, record is not a true data type.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">person</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="kp">new</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">record</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="p">{</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">})</span><span class="o">.</span>
</span><span class='line'><span class="kp">new</span><span class="p">(</span><span class="no">Name</span><span class="p">,</span> <span class="no">Age</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="c1">#person{name=Name, age=Age}.</span>
</span><span class='line'>
</span><span class='line'><span class="sx">% &gt; </span><span class="ss">person</span><span class="p">:</span><span class="kp">new</span><span class="p">(</span><span class="n">bunlong</span><span class="p">,</span> <span class="mi">27</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="sx">% {person, </span><span class="n">bunlong</span><span class="p">,</span> <span class="mi">27</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Boolean</strong><br/>
  There is no Boolean data type in Erlang. Instead the atoms true and false are used to denote Boolean values.
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="mi">2</span> <span class="o">=&lt;</span> <span class="mi">3</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kp">true</span> <span class="ow">or</span> <span class="kp">false</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So are so good, there are some other datatypes, such as binary, reference, Pid, etc. I will explain them when needed. see you in the next articles! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Variables]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/erlang-variables/"/>
    <updated>2015-01-16T21:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/erlang-variables</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  <strong>Dynamic Datatyping</strong><br/>
  Erlang is a dynamic datatyping programming language. That means that when &#8220;declaring&#8221; a variable you do not need to statically specify the datatypes. For example, this is how we declare and initialize an integer in Erlang:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span> <span class="o">=</span> <span class="mi">17</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This approach has both advantages and disadvantages. Advantages: when programming, it is fast and convenient as we don&#8217;t need to declare the variables datatypes. Disadvantages: In big projects it can lead to code readability problems unless well documented.
</p>




<p>
  <strong>Variables Declaration</strong><br/>
  Erlang is influenced by <a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a>. As with Prolog variables is a string consisting of letters, numbers and underscore characters, and beginning with an upper-case letter or underscore.<br/>
</p>




<p>
  Example:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span>
</span><span class='line'><span class="no">Name1</span>
</span><span class='line'><span class="no">PhoneNumber</span>
</span><span class='line'><span class="no">Phone_number</span>
</span><span class='line'><span class="n">_</span>
</span><span class='line'><span class="n">_Height</span>
</span><span class='line'><span class="o">[</span><span class="n">H</span><span class="o">|</span><span class="n">_</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Variable Assignement</strong><br/>
  Another feature that Erlang inherited from Prolog is binding with pattern matching. In a nutshell, a value is not assigned to a variable but bound with pattern matching. The most important thing is that variables in Erlang are single assignement, it mean that once bound to a value, their value cannot change for their lifetime.<br/>
</p>




<p>
  Example (open terminator and try the following):
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Age</span> <span class="o">=</span> <span class="mi">10</span><span class="o">.</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Age</span> <span class="o">=</span> <span class="mi">11</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  We will get an error:
</p>




<p>
  <code>** exception error: no match of right hand side value 11</code>
</p>




<p>
  The problem is that A is bound to the value 10, so Erlang tries to pattern match 10 with the value 11 which is impossible.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Erlang and Chicagoboss Framework]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/introduction-to-erlang-and-chicagoboss-framework/"/>
    <updated>2015-01-16T08:38:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/introduction-to-erlang-and-chicagoboss-framework</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Introduction to Erlang and Chicagoboss Framework" />
</p>




<p>
  <strong><a href="http://www.erlang.org/" target="_blank">Erlang</a></strong> is a programming language used to build massively scalable soft real-time systems with requirements on high availability. Some of its uses are in telecoms, banking, e-commerce, computer telephony and instant messaging. Erlang&#8217;s runtime system has built-in support for concurrency, distribution and fault tolerance.
</p>




<p>
  <strong>Erlang</strong> is the most advanced open-source server platform in existence, but it seems almost no one knows about it. <strong>Erlang</strong> can handle hundreds of thousands of simultaneous connections, it can spawn millions of simultaneous processes in under a second, server code can be upgraded, in production, without any interruption of service, and errors are handled in such a way that server crashes are extremely uncommon.
</p>




<p>
  What is not to like? Why isn&#8217;t the entire world programming in <strong>Erlang</strong>? Well, <strong>Erlang</strong> is a functional language, which means that to implement any algorithms, you must use recursion instead of familiar “for” and “while” loops. Unlike every major scripting language, there is no built-in syntax for dictionaries or hash maps. And to actually write a functioning server, you must learn an additional layer of magic known as OTP. These barriers, in my opinion, have prevented <strong>Erlang</strong> from gaining much traction outside of Scandinavia.
</p>




<p>
  <img src="http://geekhmer.github.io/images/logo_chicagoboss.svg" alt="Introduction to Erlang and Chicagoboss Framework" />
</p>




<p>
  But <strong><a href="http://www.chicagoboss.org/" target="_blank">Chicagoboss Framwork</a></strong> changes all that. It makes <strong>Erlang</strong> accessible to hackers
  who just want to write a reliable website in a nifty language. Boss uses code generation to get around the historic hash-map quandary, and takes care of all the OTP business so that you can focus on writing the features you need for your website. As for the supposed burdens of functional programming, I find that recursion is rarely necessary in workaday web programming; I would guess that 99% of server application code simply shuttles data to and from a database, so in the course of building a website, the pedestrian procedural programmer will hardly miss his “do/while” loops.
</p>




<p>
  If you are an experienced web programmer, you&#8217;ll probably enjoy all the
  amenities that CB has to offer: an advanced ORM with support for database associations, sharding, and caching. lightning-fast templates compiled down to <strong>Erlang</strong> bytecode, automatic recompiling and in-browser error reporting, simple directives for reloads and redirects, routes for constructing URLs and handling requests, full frameworks for sending and receiving email, a built-in message queue, a framework for writing and running functional tests, and a first-of-its-kind event system for monitoring the data model.
</p>




<p>
  In the end, by combining the <strong>Erlang</strong> platform with its own innovations,
  <strong>Chicagoboss Framwork</strong> makes websites a delight to develop and a joy to deploy. Boss applications can be written in the same time or less as equivalent Rails applications, and they will almost never crash or leak memory. Since the underlying networking is all asynchronous, you can easily write concurrent services, such as chat, that previously were only possible in callback-based frameworks (such as Nginx, Node.js, Twisted, or Perlbal).
</p>




<p>
  The importance of this advancement cannot be overstated. It is now feasible for a very small team to develop and operate a database-driven, highly interactive, heavily trafficked website with very little capital outlay. Although <strong>Chicagoboss Framwork</strong> can’t tell you how to acquire users, the rest of this manual will show you everything you need to do to handle their requests and (with luck) fulfill their desires.
</p>




<p>
  Reference: <a href="http://www.erlang.org/" target="_blank">www.erlang.org</a>, <a href="http://www.chicagoboss.org/" target="_blank">www.chicagoboss.org</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Erlang Learning Sequence]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/15/the-erlang-learning-sequence/"/>
    <updated>2015-01-15T09:10:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/15/the-erlang-learning-sequence</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="The Erlang Learning Sequence" />
</p>




<p>
  While I was writing my first article (<a href="http://geekhmer.github.io/blog/2014/06/26/why-erlang/">Why Erlang?</a>). I realized that since Erlang is not a popular programming language it would be nice to start an introduction to The Erlang Learning Sequence.
</p>




<p>
  I consider Erlang as a must-know language for an engineer that works with distributed systems and parallel programming. Believe me! in several cases Erlang is a problem solver.
</p>




<p>
  I will keep posting of short and example based. The approximation of the posts that I intend to write is:
</p>




<p>
  1. Introduction to Erlang & Chicagoboss Framework<br/>
  2. Variables<br/>
  3. Datatypes<br/>
  4. Modules and Compiling<br/>
  5. Functions<br/>
  6. Guard<br/>
  7. Recursion<br/>
  8. Tail Recursion<br/>
  9. Expressions<br/>
  10. Predefined Module<br/>
  11. List & List Module<br/>
  12. List Comprehension<br/>
  13. Concurrency (Processes)<br/>
  14. Message Passing
</p>




<p>
  So far so good, I will keep this list updated in case that I come up with new ideas! I hope I will convince you that Erlang worths for every software engineer’s attention. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Emacs Erlang Editor/IDE]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/14/install-emacs-erlang-editor-slash-ide/"/>
    <updated>2015-01-14T23:17:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/14/install-emacs-erlang-editor-slash-ide</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Install Emacs Erlang Editor/IDE" />
</p>




<p>
  Currently I personally use Emacs for programming in Erlang. There is an Erlang editing mode in Emacs. Well, I can help you to install Emacs and set Erlang mode in Emacs. So, let&#8217;s do it!
</p>




<p>
  <strong>Install Emacs</strong><br/>
  Run commands below to install Emacs:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">add</span><span class="o">-</span><span class="n">repository</span> <span class="ss">ppa</span><span class="p">:</span><span class="n">cassou</span><span class="o">/</span><span class="n">emacs</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">emacs24</span> <span class="n">emacs24</span><span class="o">-</span><span class="n">el</span> <span class="n">emacs24</span><span class="o">-</span><span class="n">common</span><span class="o">-</span><span class="n">non</span><span class="o">-</span><span class="n">dfsg</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Set Erlang Mode in Emacs</strong><br/>
  To set Erlang mode in Emacs add the following codes to file ~/.emacs:
</p>




<figure class='code'><figcaption><span>.emacs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">defun</span> <span class="n">my</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="n">setq</span> <span class="n">inferior</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">machine</span><span class="o">-</span><span class="n">options</span> <span class="s1">&#39;(&quot;-sname&quot; &quot;emacs&quot;))</span>
</span><span class='line'><span class="s1">  (imenu-add-to-menubar &quot;imenu&quot;)</span>
</span><span class='line'><span class="s1">)</span>
</span><span class='line'><span class="s1">(add-hook &#39;</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span> <span class="err">&#39;</span><span class="n">my</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, hope the article could helped you. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Erlang Using Repository on Ubuntu]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu/"/>
    <updated>2015-01-14T21:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Install Erlang on Ubuntu" />
</p>




<p>
  <strong>1. Adding Repository Entry</strong><br/>
  To add Erlang repository to your system, pls call the following commands:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="o">.</span><span class="mi">0</span><span class="n">_all</span><span class="o">.</span><span class="n">deb</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">dpkg</span> <span class="o">-</span><span class="n">i</span> <span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="o">.</span><span class="mi">0</span><span class="n">_all</span><span class="o">.</span><span class="n">deb</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Or Adding the Repository Entry Manually</strong><br/>
  Add one of the following lines to your /etc/apt/sources.list:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span> <span class="n">trusty</span> <span class="n">contrib</span>
</span><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span> <span class="n">saucy</span> <span class="n">contrib</span>
</span><span class='line'><span class="n">deb</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span> <span class="n">precise</span> <span class="n">contrib</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  And next, add the Erlang public key for apt-secure using following commands:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="o">/</span><span class="n">erlang_solutions</span><span class="o">.</span><span class="n">asc</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">key</span> <span class="n">add</span> <span class="n">erlang_solutions</span><span class="o">.</span><span class="n">asc</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>2. Install Erlang</strong><br/>
  To install Erlang to your system, pls call the following commands:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">erlang</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, hope you enjoyed the article. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chicagoboss Publish/Subscribe]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/10/chicagoboss-publish-slash-subscribe/"/>
    <updated>2015-01-10T23:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/10/chicagoboss-publish-slash-subscribe</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Chicagoboss Publish/Subscribe" />
</p>




<p>
  In software architecture, publish–subscribe is a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers. Instead, published messages are characterized into classes, without knowledge of what, if any, subscribers there may be. Similarly, subscribers express interest in one or more classes, and only receive messages that are of interest, without knowledge of what, if any, publishers there are.
</p>




<p>
  Pub/sub is a sibling of the message queue paradigm, and is typically one part of a larger message-oriented middleware system. Most messaging systems support both the pub/sub and message queue models in their API.
</p>




<p>
  Actually Chicagoboss ships with a message queue service called <strong>BossMQ</strong>. The service consists of named channels which follow a <strong>publish/subscribe</strong> architecture; any Erlang process can publish or subscribe to any channel, and Erlang term can be sent as a message. Channels need not be explicitly created or destroyed; they are created on demand for publishers or subscribers, and automatically destroyed after a certain (configurable) amount of time. <strong>BossMQ</strong> runs in clustered configurations just as well as a single-machine setup.
</p>




<p>
  <strong>Process</strong>
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/chicagoboss_publish_subscribe.png"><img src="http://geekhmer.github.io/images/chicagoboss_publish_subscribe.png" width="680" /></a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Develop Your Own Gem and Gemify Your Own Assets Using Rails Engine]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/02/develop-your-own-gem-and-gemify-your-own-assets-using-rails-engine/"/>
    <updated>2015-01-02T23:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/02/develop-your-own-gem-and-gemify-your-own-assets-using-rails-engine</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rubygems_logo.png" alt="Develop Your Own Gem and Gemify Your Own Assets Using Rails Engine" />
</p>




<p>
  The Rails asset pipeline, powered by sprockets, compiles (sass, coffeescript, others), aggregates (combines multiple source files into one file for performance purposes), and post-processes (minimization, gzip’ing) your assets. And which make it easy to include versioned external assets as application dependencies as well.
</p>




<p>
  External assets are made available in Rails via Rails engines. When the engine is loaded into your Rails application, the engine&#8217;s asset paths are added to your application&#8217;s load paths. This makes them available for require in your manifest files. An asset gem is just an absurdly simple engine.
</p>




<p>
  You will find almost any JS or CSS library you want, already Gemified, but, if it is not the case, you can Gemify those libraries by your own, and I can help you with it. So, let&#8217;s do it!
</p>




<p>
  <strong>Create a bare-bones Gem:</strong><br/>
  Bundler makes it simple to create the files and directories necessary for creating a gem. Run the following command to create and initialize a Git repository along with several template files for the gem:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">gem</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This command will create basically the following tree:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">├──</span> <span class="no">Gemfile</span>
</span><span class='line'><span class="err">├──</span> <span class="n">lib</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">timeago</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>           <span class="err">└──</span> <span class="n">version</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">├──</span> <span class="no">LICENSE</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="err">├──</span> <span class="no">Rakefile</span>
</span><span class='line'><span class="err">├──</span> <span class="no">README</span><span class="o">.</span><span class="n">md</span>
</span><span class='line'><span class="err">└──</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span><span class="o">.</span><span class="n">gemspec</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Versioning</strong><br/>
  timeago-rails is a gem packaged version of the timeago.js library. Its version should track the version of JavaScript library. Open /lib/timeago/rails/version.rb and set the version:
</p>




<figure class='code'><figcaption><span>version.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Timeago</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Rails</span>
</span><span class='line'>    <span class="no">VERSION</span> <span class="o">=</span> <span class="s2">&quot;1.4.1&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Turn the Gem into an Engine</strong><br/>
  Bundler created the gem as a standard Ruby module, but we want it to be a Rails Engine.
</p>




<figure class='code'><figcaption><span>rails.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s2">&quot;timeago/rails/version&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Timeago</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Rails</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Engine</span> <span class="o">&lt;</span> <span class="o">::</span><span class="ss">Rails</span><span class="p">:</span><span class="ss">:Engine</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Well, the module is empty. All we&#8217;re doing here is declaring the gem as a Rails Engine. This will cause Rails to add its directories to the load path when the Gem is required.
</p>




<p>
  <strong>Add the Assets (Javascript library, CSS, Image) in the Gem</strong><br/>
  We&#8217;re going to create the directory /vendor/images/, /vendor/javascripts/, vendor/stylesheets/ and place the source for the timeago.js plugin there:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">├──</span> <span class="no">Gemfile</span>
</span><span class='line'><span class="err">├──</span> <span class="n">lib</span>
</span><span class='line'><span class="err">│</span>   <span class="err">├──</span> <span class="n">timeago</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span>
</span><span class='line'><span class="err">│</span>   <span class="err">│</span>           <span class="err">└──</span> <span class="n">version</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">│</span>   <span class="err">└──</span> <span class="n">rails</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">├──</span> <span class="no">LICENSE</span><span class="o">.</span><span class="n">txt</span>
</span><span class='line'><span class="err">├──</span> <span class="no">Rakefile</span>
</span><span class='line'><span class="err">├──</span> <span class="no">README</span><span class="o">.</span><span class="n">md</span>
</span><span class='line'><span class="err">├──</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span><span class="o">.</span><span class="n">gemspec</span>
</span><span class='line'><span class="err">└──</span> <span class="n">vendor</span>
</span><span class='line'>         <span class="err">└──</span> <span class="n">assets</span>
</span><span class='line'>                  <span class="err">├──</span> <span class="n">images</span>
</span><span class='line'>                  <span class="err">├──</span> <span class="n">javascripts</span>
</span><span class='line'>                  <span class="err">│</span>             <span class="err">└──</span> <span class="n">timeago</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'>                  <span class="err">└──</span> <span class="n">stylesheets</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Test</strong><br/>
  Moving to a sample Rails application, we can include the gem in our host application by adding it to the Gemfile using the path option:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;timeago-rails&quot;</span><span class="p">,</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;../timeago-rails&quot;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Since we included an asset that needs to be included in the Rails assets, we have to take one more step and instruct the user to add the following to their app/assets/javascripts/application.js file:
</p>




<figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">timeago</span><span class="o">-</span><span class="n">rails</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  This directive actually refers to the app/assets/javascripts/timeago.js file we included in our gem.
</p>




<p>
  Type command below to make sure timeago.js is included in sample Rails application:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">timeago</span><span class="o">.</span><span class="n">js</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  The curl command should return the contents of the timeago.js file if everything is correctly.
</p>




<p>
  <strong>README.md</strong><br/>
  Make a simple readme file with the Gem as documentation.
</p>




<p>
  <strong>Push to GitHub & RubyGems</strong><br/>
  Create a GitHub repository for the Gem, stage all of your commits, commit, and push the code to GitHub.
</p>




<p>
  If you&#8217;ve never published a gem on RubyGems before, you&#8217;ll need to sign up for an account there. Your account settings will contain an API key that should be copied to ~/.gem/credentials.
</p>




<p>
  Publishing your gem is as simple as:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="n">release</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  So far so good, hope you enjoyed the article. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Ruby on Rails Application to a Ubuntu Server]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/01/deploy-ruby-on-rails-application-to-a-ubuntu-server/"/>
    <updated>2015-01-01T00:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/01/deploy-ruby-on-rails-application-to-a-ubuntu-server</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Tools for Monitoring Performance in Ruby on Rails Application" />
</p>




<p>
  Assumes you have Ruby on Rails application already.
</p>




<p>
  <strong>Setup Ruby Version, Unicorn and Capistrano</strong><br/>
  Specifiy a ruby version for your app by creating a new file in the root of your app called &#8220;.ruby-version&#8221; that includes:
</p>




<figure class='code'><figcaption><span>.ruby-version </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Make the following changes to the Gemfile:
</p>




<figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ruby</span> <span class="s1">&#39;2.1.4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to install gems:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to install binstubs for capistrano:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">binstubs</span> <span class="n">capistrano</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Configure Capistrano</strong><br/>
  Type command below to initialize capistrano:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Add the following below require &#8216;capistrano/deploy&#8217; in the Capfile in the root of your app:
</p>




<figure class='code'><figcaption><span>Capfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Add or Replace this configuration in config/deploy.rb file:
</p>




<figure class='code'><figcaption><span>deploy.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;myapp&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@github.com:bunlong/myapp.git&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s1">&#39;/opt/www/myapp&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;deploy&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{log tmp/pids tmp/cache tmp/sockets}</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="sx">%w[start stop restart]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="o">|</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s1">&#39;Manage Unicorn&#39;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span> <span class="n">command</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">),</span> <span class="k">in</span><span class="p">:</span> <span class="ss">:sequence</span><span class="p">,</span> <span class="ss">wait</span><span class="p">:</span> <span class="mi">1</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="s2">&quot;/etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:publishing</span><span class="p">,</span> <span class="ss">:restart</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  After the configuration in /config/deploy/production.rb with your server ip or domain name:
</p>




<figure class='code'><figcaption><span>production.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">role</span> <span class="ss">:app</span><span class="p">,</span> <span class="sx">%w{deploy@0.0.0.0}</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:web</span><span class="p">,</span> <span class="sx">%w{deploy@0.0.0.0}</span>
</span><span class='line'><span class="n">role</span> <span class="ss">:db</span><span class="p">,</span>  <span class="sx">%w{deploy@0.0.0.0}</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Configure Unicorn</strong><br/>
  Create a new file config/unicorn.rb with the following contents:
</p>




<figure class='code'><figcaption><span>unicorn.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="o">=</span> <span class="s2">&quot;/opt/www/myapp/current&quot;</span>
</span><span class='line'><span class="n">working_directory</span> <span class="n">root</span>
</span><span class='line'><span class="n">pid</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/tmp/pids/unicorn.pid&quot;</span>
</span><span class='line'><span class="n">stderr_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'><span class="n">stdout_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">listen</span> <span class="s2">&quot;/tmp/unicorn.myapp.sock&quot;</span>
</span><span class='line'><span class="n">worker_processes</span> <span class="mi">1</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Comment out production username and password from config/database.yml:
</p>




<figure class='code'><figcaption><span>database.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span><span class="p">:</span> <span class="o">*</span><span class="n">default</span>
</span><span class='line'>  <span class="ss">database</span><span class="p">:</span> <span class="n">myapp_production</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to push changes to git:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s1">&#39;Added settings to deploy app&#39;</span>
</span><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to create a secret to be used on the server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="n">secret</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  On the server setup the secret by modify /home/deploy/.bashrc with the following contents:
</p>




<figure class='code'><figcaption><span>.bashrc </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">export</span> <span class="no">SECRET_KEY_BASE</span><span class="o">=[</span><span class="no">REPLACE</span> <span class="no">WITH</span> <span class="no">YOUR</span> <span class="no">SECRET</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  On the server restart nginx, type command below:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">service</span> <span class="n">nginx</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>Deploy</strong><br/>
  Type command below to make sure capistrano is connected to the server:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">production</span> <span class="ss">git</span><span class="p">:</span><span class="n">check</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below to make sure can deploy or not:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">production</span> <span class="ss">deploy</span><span class="p">:</span><span class="n">check</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  Type command below for deploying:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bin</span><span class="o">/</span><span class="n">cap</span> <span class="n">production</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you need to run db:seed, log into server as the deploy user and run following:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="sr">/opt/</span><span class="n">www</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">current</span> <span class="p">;</span> <span class="n">bin</span><span class="o">/</span><span class="n">rake</span> <span class="no">RAILS_ENV</span><span class="o">=</span><span class="n">production</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  If you are having problems, try running a console on the server, log in as deploy user and run the following:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="sr">/opt/</span><span class="n">www</span><span class="o">/</span><span class="n">myapp</span><span class="o">/</span><span class="n">current</span> <span class="p">;</span> <span class="n">bin</span><span class="o">/</span><span class="n">rails</span> <span class="n">c</span> <span class="n">production</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Private doesn't apply to class method and define method]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/31/private-doesnt-apply-to-class-method-and-define-method/"/>
    <updated>2014-12-31T11:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/31/private-doesnt-apply-to-class-method-and-define-method</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Ruby - Check for nil Without Using an Explicit if" />
</p>




<p>
  Ruby&#8217;s private keyword might do a lot less than you think.
</p>




<p>
  <strong>The &#8220;private&#8221; does not apply to class methods defined on self</strong>
</p>




<p>
  This does not make anything private:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">print</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You need to use private_class_method instead:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">print</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">private_class_method</span> <span class="ss">:print</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  <strong>The &#8220;private&#8221; does not apply to define_method</strong>
</p>




<p>
  This does not make anything private:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:print</span> <span class="k">do</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<p>
  You need to use private with an argument instead:
</p>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Klass</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:print</span> <span class="k">do</span>
</span><span class='line'>    <span class="s1">&#39;Hello&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span> <span class="ss">:print</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
