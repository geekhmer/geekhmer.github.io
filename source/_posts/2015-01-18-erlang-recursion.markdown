---
layout: post
title: "Erlang Recursion"
date: 2015-01-18 11:28
categories: [Erlang]
keywords: The Erlang Learning Sequence, Learning Erlang, Learn Erlang, Study Erlang, Studying Erlang, The Studying Erlang, Chicagoboss Framwork, Erlang Modules and Compiling, Modules and Compiling, Erlang Recursion, Recursion, Erlang Tail Recursion, Tail Recursion
---

<p>
  <img src="/images/logo_erlang.png" alt="Erlang Variables" />
</p>

<p>
  The definition of the word <strong>Recursion</strong> is "(mathematics) an expression such that each term is generated by repeating a particular mathematical operation". Recursion is one of the most powerful "tools" in a functional programming language.
</p>

<p>
  Recursion can be used to divide techniques to problem solving, where a problem is broken to smaller subproblems, the subproblems are solved, and the results are “merged” to generate the final result.
</p>

<p>
  Recursion happens when a function calls itself directly or indirectly. Recursion is used instead of the conventional loop statements of other programming languages, such as while and for in C.
</p>

<p>
  Syntax:
</p>

{% codeblock lang:ruby %}
functionA(...) ->
  Body_before_recursion, % optional
  functionA(...),
  Body_after_recursion. % optional
{% endcodeblock %}

<p>
  Example:
</p>

{% codeblock example.erl lang:ruby %}
-module(example).
-export([sum/1]).

sum(1) -> 1;
sum(N) -> N + sum_n(N - 1).

%% example:sum(10).
{% endcodeblock %}

{% codeblock example.erl lang:ruby %}
-module(example).
-export([fac/1]).

fac(1) -> 1;
fac(N) -> N * fac(N - 1).

%% example:fac(10).
{% endcodeblock %}

{% codeblock example.erl lang:ruby %}
-module(example).
-export([list_sum/1]).

list_sum([]) -> 0;
list_sum([H|T]) -> H + sum_list(T).

%% example:list_sum([1, 2, 3, 4, 5]).
{% endcodeblock %}

{% codeblock example.erl lang:ruby %}
-module(example).
-export([list_increase_element/1]).

list_increase_element([]) -> [];
list_increase_element([H|T]) -> [H + 1|increase(T)].

%% example:list_increase_element([1, 2, 3, 4, 5]).
{% endcodeblock %}

{% codeblock example.erl lang:ruby %}
-module(example).
-export([list_length/1]).

list_length([]) -> 0;
list_length([_H|T]) -> 1 + list_length(T).

%% example:list_length([1, 2, 3, 4, 5]).
{% endcodeblock %}
