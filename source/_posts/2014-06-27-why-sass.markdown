---
layout: post
title: "Why Sass?"
date: 2014-06-27 00:00
comments: true
categories: Layout
keywords: Why Sass?, Why Sass, Sass
---

<p>
  <img src="/images/sass.png" />
</p>

<p>
  Sass is a Cascading Style Sheets (CSS) meta language. It is a scripting language that is interpreted into CSS. SassScript provides the following mechanisms: variables, nesting, mixins, and selector inheritance.
</p>

<p>
  <strong>Variables</strong><br/>
  - Sass allows variables to be defined.<br/>
  - Variables begin with a dollar sign ($).<br/>
  - Variable assignment is done with a colon (:).<br/>
  - SassScript supports four data types: Numbers, Strings, Colors, Booleans.
</p>

{% codeblock In CSS lang:javascript %}
.content-navigation {
  border-color: #3bbfce;
  color: #2b9eab;
}

.border {
  padding: 8px;
  margin: 8px;
  border-color: #3bbfce;
}
{% endcodeblock %}

{% codeblock In Sass lang:javascript %}
$blue: #3bbfce;
$margin: 16px;

.content-navigation {
  border-color: $blue;
  color:
    darken($blue, 9%);
}

.border {
  padding: $margin / 2;
  margin: $margin / 2;
  border-color: $blue;
}
{% endcodeblock %}

<p>
  <strong>Nesting</strong><br/>
  CSS does support logical nesting, but the code blocks themselves are not nested. Sass allows the nested code to be inserted within each other.
</p>

{% codeblock In CSS lang:javascript %}
table.hl {
  margin: 2em 0;
}

table.hl td.ln {
  text-align: right;
}

li {
  font-family: serif;
  font-weight: bold;
  font-size: 1.2em;
}
{% endcodeblock %}

{% codeblock In Sass lang:javascript %}
table.hl {
  margin: 2em 0;
  td.ln {
    text-align: right;
  }
}

li {
  font: {
    family: serif;
    weight: bold;
    size: 1.2em;
  }
}
{% endcodeblock %}

<p>
  <strong>Mixins</strong><br/>
  - CSS does not support mixins.<br/>
  - Any repeated code must be repeated in each location.<br/>
  - A mixin is a section of code that contains any valid Sass code.<br/>
  - Whenever a mixin is called, the result of translating the mixin is inserted at the calling location.<br/>
  - Mixins allow for efficient and clean code repetitions, as well as easy alteration of code.
</p>

{% codeblock In CSS lang:javascript %}
#data th {
  text-align: center;
  font-weight: bold;
}

#data td, #data th {
  padding: 2px;
}
{% endcodeblock %}

{% codeblock In Sass lang:javascript %}
@mixin table-base {
  th {
    text-align: center;
    font-weight: bold;
  }
  td, th {padding: 2px}
}

#data {
  @include table-base;
}
{% endcodeblock %}

<p>
  Mixins also support arguments:
</p>

{% codeblock In CSS lang:javascript %}
#data {
  float: left;
  margin-left: 10px;
}
{% endcodeblock %}

{% codeblock In Sass lang:javascript %}
@mixin left($dist) {
  float: left;
  margin-left: $dist;
}

#data {
  @include left(10px);
}
{% endcodeblock %}

<p>
  In combination:
</p>

{% codeblock In CSS lang:javascript %}
#data {
  float: left;
  margin-left: 10px;
}

#data th {
  text-align: center;
  font-weight: bold;
}

#data td, #data th {
  padding: 2px;
}
{% endcodeblock %}

{% codeblock In Sass lang:javascript %}
@mixin table-base {
  th {
    text-align: center;
    font-weight: bold;
  }
  td, th {padding: 2px}
}

@mixin left($dist) {
  float: left;
  margin-left: $dist;
}

#data {
  @include left(10px);
  @include table-base;
}
{% endcodeblock %}

<p>
  For more information <a href="http://sass-lang.com/" target="_blank">sass-lang.com</a>
</p>