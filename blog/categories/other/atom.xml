<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2016-08-09T15:56:39+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Application Steps for Applying to Study Masters in Computer Science at MAHARISHI UNIVERSITY OF MANAGEMENT USA]]></title>
    <link href="http://geekhmer.github.io/blog/2016/07/22/application-steps-for-applying-to-study-masters-in-computer-science-at-maharishi-university-of-management-usa/"/>
    <updated>2016-07-22T09:48:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/07/22/application-steps-for-applying-to-study-masters-in-computer-science-at-maharishi-university-of-management-usa</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/mum.JPG" width="600" alt="Application Steps for Applying to Study Masters in Computer Science at MAHARISHI UNIVERSITY OF MANAGEMENT USA" />
</p>




<p>
  Well, there are 7 sequence of steps to follow as list below:
</p>




<p>
  <strong>1. Complete the online application form <a href="https://admin.cs.mum.edu/Admissions/ApplicationForm.html" target="_blank">here</a>.</strong>
</p>




<p>
  <strong>2. Take a programming exam.</strong> For this simple test you are required to write code in one of the following languages: Java, C++, C#, or C language. If you do not pass the test, you will need to study programming for some time and then take the test again before your application can proceed.
</p>




<p>
  <strong>3. Send the items requested</strong> on the Application Checklist including your transcripts and resume. Do NOT send these items until you are asked to send them.
</p>




<p>
  <strong>4. English interview</strong> via telephone.
</p>




<p>
  <strong>5.1.</strong> Send documents verifying finances.<br/>
  <strong>5.2.</strong> Submit application fee.<br/>
  <strong>5.3.</strong> Sign student agreement form.<br/>
</p>




<p>
  <strong>6.1.</strong> You schedule your visa interview at the U.S. embassy, attend your visa interview and receive visa.<br/>
  <strong>6.2.</strong> Book a flight to Cedar Rapids, Iowa.<br/>
  <strong>6.3.</strong> Notify your admissions representative of your travel itinerary, and ask for instructions on transportation to the University.
</p>




<p>
  <strong>7.</strong> Arrive at your dormitory on campus. Attend orientation session as requested. Enjoy 8 months of courses on campus. Search for a Curricular Practical Training (CPT) internship job at a US company under the guidance of our Career Placement Center. Complete coursework via distance education while gaining hands on, professional experience for which you will earn a full salary, and gain academic credit. Attend graduation ceremonies, Enjoy the rest of your life!
</p>




<p>
  So far so good, Let enjoy the rest of your life in USA. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Requirements to Applying to Study Masters in Computer Science at MAHARISHI UNIVERSITY OF MANAGEMENT USA]]></title>
    <link href="http://geekhmer.github.io/blog/2016/07/22/the-requirements-to-applying-to-study-masters-in-computer-science-at-maharishi-university-of-management-usa/"/>
    <updated>2016-07-22T09:45:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/07/22/the-requirements-to-applying-to-study-masters-in-computer-science-at-maharishi-university-of-management-usa</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/mum.JPG" width="600" alt="The Requirements to Applying to Study Masters in Computer Science at MAHARISHI UNIVERSITY OF MANAGEMENT USA" />
</p>




<p>
  My friend always ask me, What is the requirement to applying to study Masters in Computer Science at MAHARISHI UNIVERSITY OF MANAGEMENT USA?
</p>




<p>
  Well, before applying, please carefully read all requirements below. Admission requirements are subject to change.
</p>




<p>
  Upon arrival, you are tested to confirm that you meet the entrance requirements as per your application materials. If you are unable to demonstrate your stated level, you will be deferred from the program until you can remedy these deficiencies.
</p>




<p>
  <strong>There are Three Main Areas of Requirements:</strong><br/>
  1. Academic and undergraduate degree<br/>
  2. English proficiency for internationals<br/>
  3. Professional paid work experience as a programmer (only required for international students)<br/>
</p>




<p>
  Please read all requirement details below carefully.
</p>




<p>
  <strong>Academic Requirements</strong><br/>
  1. 4-year Bachelors degree in computer science or related area.<br/>
  2. Courses must include at the least: Programming of a higher language (C, C++, C# or Java), Data Structures, Math courses (Calculus 1 & 2, Discrete Math).<br/>
  3. GPA of at least 2.7 out of 4. <br/>
  4. Other Computer Science courses are helpful but not required.<br/>
</p>




<p>
  <strong>English Proficiency</strong><br/>
  International students must be able to communicate fluently (speak, understand, read and write), and will be tested during the application process and again on arrival. IELTS and TOEFL not required.
</p>




<p>
  <strong>Work Experience</strong><br/>
  International students must have at least 6 months of OOP professionally paid work experience. If the GPA is lower than 2.7, students may be asked to have more work experience, and/or may be asked to take the GRE.
</p>




<p>
  So far so good, If you meet the admissions requirements, please <a href="https://admin.cs.mum.edu/Admissions/faces/login.xhtml" target="_blank">apply online</a>.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Command Line]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/25/git-command-line/"/>
    <updated>2016-03-25T15:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/25/git-command-line</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Git Command Line" />
</p>




<p>
  <a href="http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu/" target="_blank">How to install GIT on Linux/Ubuntu</a> -- Today, Source Version Control has gained popularity in the management of source code. Therefore, the software engineer needs to know how to use and manipulate GIT. The following common GIT command line will help you manipulate GIT:
</p>




<p>
  <strong>Set up Git Configuration</strong>
</p>


<p>{% codeblock lang:ruby %}
git config &mdash;global user.email &ldquo;<a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x79;&#x6f;&#x75;&#114;&#95;&#101;&#109;&#97;&#105;&#x6c;&#x40;&#x64;&#x6f;&#x6d;&#97;&#105;&#110;&#x5f;&#110;&#x61;&#x6d;&#x65;&#46;&#x63;&#111;&#109;">&#121;&#x6f;&#x75;&#x72;&#x5f;&#x65;&#x6d;&#x61;&#x69;&#x6c;&#x40;&#x64;&#111;&#109;&#x61;&#x69;&#x6e;&#95;&#110;&#x61;&#109;&#101;&#x2e;&#x63;&#111;&#109;</a>&rdquo; /<em> Setup email is used to commit </em>/</p>

<p>git config &mdash;global user.name &ldquo;your user name&rdquo; /<em> Setup username is used to commit </em>/</p>

<p>git config &mdash;global core.editor &ldquo;vi&rdquo; /<em> Choose editor used by GIT </em>/</p>

<p>git config &mdash;global color.ui true /<em> Setup color ui for command line </em>/</p>

<p>git config &mdash;list /<em> See Git configuration </em>/
{% endcodeblock %}</p>

<p>
  <strong>To Initialise a Local Repository</strong>
</p>


<p>{% codeblock lang:ruby %}
git init
{% endcodeblock %}</p>

<p>
  <strong>Add a File to the Repository</strong>
</p>


<p>{% codeblock lang:ruby %}
git init
{% endcodeblock %}</p>

<p>
  <strong>Commit the Change to Git</strong>
</p>


<p>{% codeblock lang:ruby %}
git commit -m &ldquo;message&rdquo;
{% endcodeblock %}</p>

<p>
  <strong>See the Commits</strong>
</p>


<p>{% codeblock lang:ruby %}
git log
{% endcodeblock %}</p>

<p>
  <strong>Basic Commands</strong>
</p>


<p>{% codeblock lang:ruby %}
git status  /<em>  The command &lsquo;git status&rsquo; tells which files are not added or committed from Working to Staging to Repository </em>/</p>

<p>git commit -m &ldquo;message&rdquo; /<em>  Commits and changes to all files that are in Staging into Repo  </em>/</p>

<p>git diff /<em>  Show changes between Working and Local Repo, no file supplied shows all files  </em>/</p>

<p>git diff &mdash;staged /<em>  Shows changes between Staged and Local Repo  </em>/</p>

<p>git rm file.txt /<em>  Will remove file from working then git commit -m &ldquo;&rdquo; to also remove from Repo </em>/</p>

<p>git rm &mdash;cached file.txt /<em> Leaves copy of file in Working but removes from Staging and Repo </em>/</p>

<p>git mv /<em> Rename or move files &ndash; then git commit -m &ldquo;&rdquo; to move to Repo </em>/</p>

<p>git commit -am &ldquo;text goes here&rdquo; /<em> Adds all files straight to Repo from Staging if they have changes &ndash; meaning they skip git add </em>/</p>

<p>git checkout &mdash; file.txt /<em> Restore Repo file to Working Directory using current branch  </em>/</p>

<p>git reset &mdash;soft HEAD^ /<em> Restore repo file to staging </em>/</p>

<p>git reset HEAD file.txt /<em>  Move a Stage file out of Stage back to Working </em>/</p>

<p>git commit &mdash;amend -m &ldquo;message&rdquo; file.txt /<em> Change last commit to Repo (only last one can change) </em>/
{% endcodeblock %}</p>

<p>
  <strong>Resetting & Reverting</strong>
</p>


<p>{% codeblock lang:ruby %}
/<em> Reverting &mdash;soft &mdash;mixed &mdash;hard will go back to previous commits</em> /</p>

<p>git log /<em> Gets the sha1s so you can see the coomits where you want revert  back to </em>/</p>

<p>git reset &mdash;soft sha /<em> Changes Repo but not Staging or Working </em>/</p>

<p>git reset &mdash;mixed sha /<em> Changes Repo and Staging but not Working </em>/</p>

<p>git reset &mdash;hard sha /<em> Changes all 3 Tiers </em>/</p>

<p>git clean -f /<em> Remove untracked files from Working  </em>/
{% endcodeblock %}</p>

<p>
  <strong>Ignore File</strong>
</p>


<p>{% codeblock lang:ruby %}
.gitignore /<em> Ignores files to track in Working / track the .gitignore file </em>/</p>

<p>Global Ignore /<em> Create in home folder  </em>/
.gitignore_global
.DS_Store
.Trashes
.Spotlight_V100
/<em> Add in  </em>/</p>

<p>git config &mdash;global core.excludesfile ~/.gitignore_global /<em> Add to gitconfig </em>/
{% endcodeblock %}</p>

<p>
  <strong>Stop Tracking Changes</strong>
</p>


<p>{% codeblock lang:ruby %}
git rm &mdash;cached file.txt /<em> Leaves copy in Repo and Working </em>/
{% endcodeblock %}</p>

<p>
  <strong>Commit Log</strong>
</p>


<p>{% codeblock lang:ruby %}
git ls-tree HEAD
git ls-tree master
git log &mdash;oneline
git log &mdash;author=&ldquo;Bunlong&rdquo;
git log &mdash;grep=&ldquo;temp&rdquo;
{% endcodeblock %}</p>

<p>
  <strong>Show Commit</strong>
</p>


<p>{% codeblock lang:ruby %}
git show dc094cb /<em>  show SHA1 </em>/
{% endcodeblock %}</p>

<p>
  <strong>Commands on Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git branch /<em> Show local branches * is the one we are on </em>/</p>

<p>git branch -r /<em> Shows remote branches </em>/</p>

<p>git branch -a /<em> Shows local and remote </em>/</p>

<p>git branch newbranch /<em> Creates a new branch </em>/</p>

<p>git checkout newbranch /<em> Switch to new branch </em>/</p>

<p>git checkout -b oldbranch /<em> Creates and switches to new branch  </em>/</p>

<p>git push origin newbranch /<em> Push new branch to remote </em>/</p>

<p>/<em> Diff in Branches </em>/</p>

<p>git diff master..otherbranch /<em> Shows diff </em>/</p>

<p>git diff &mdash;color-words master..otherbranch /<em>  Shows diff in color </em>/</p>

<p>git branch &mdash;merged /<em> Shows any merged branches </em>/</p>

<p>/<em> Rename Branch </em>/</p>

<p>git branch -m oldname newname</p>

<p>/<em> Delete  Branch </em>/</p>

<p>git branch -d nameofbranch</p>

<p>/<em> Merge Branch  </em>/</p>

<p>git merge branchname /<em> Be on the receiver branch to merge the other branch </em>/</p>

<p>/<em> Merge Conflicts between the same file on 2 branches are marked in HEAD and other branch </em>/</p>

<p>git merge &mdash;abort /<em>  Abort basically cancels the merge </em>/
{% endcodeblock %}</p>

<p>
  <strong>Manually Fix Files and Commit - The Stash</strong>
</p>


<p>{% codeblock lang:ruby %}
git stash save &ldquo;message&rdquo;</p>

<p>git stash list /<em> Shows whats in stash </em>/</p>

<p>git stash show -p stash@{0} /<em> Show the diff in the stash </em>/</p>

<p>git stash pop stash@{0} /<em> Restores the stash deletes the tash </em>/</p>

<p>git stash apply stash@{0} /<em> Restores the stash and keeps the stash </em>/</p>

<p>git stash clear /<em> Removes all stash </em>/</p>

<p>git stash drop stash@{0}
{% endcodeblock %}</p>

<p>
  <strong>Remotes Commands</strong>
</p>


<p>{% codeblock lang:ruby %}
git remote add origin <a href="https://github.com/bunlong/test.git">https://github.com/bunlong/test.git</a> /<em> Origin can be named whateve followed by the remote </em>/</p>

<p>git remote /<em> To show all remotes </em>/</p>

<p>git remote show origin /<em> To see remote URL</em>/</p>

<p>git remote remove origin /<em> To remove remote </em>/</p>

<p>git remote rm origin /<em> To remove remote </em>/
{% endcodeblock %}</p>

<p>
  <strong>Clone project. Push from local to Remote</strong>
</p>


<p>{% codeblock lang:ruby %}
/<em> Cloning a GitHub Repo &ndash; create and get the URL of a new repository from GitHub, then clone that to your local repo, example below uses local repo named &lsquo;nameoffolder&rsquo; </em>/</p>

<p>git clone <a href="https://github.com/bunlong/test.git">https://github.com/bunlong/test.git</a> nameoffolder</p>

<p>git push -u origin master /<em> Push to remote(origin) and branch(master) </em>/</p>

<p>/<em> Push to Remote from Local &ndash; more &ndash; since when we pushed the local to remote we used -u parameter then the remote branch is tracked to the local branch and we just need to use&hellip; </em>/</p>

<p>git push</p>

<p>git push origin newbranch /<em> Push a branch to a remote </em>/
{% endcodeblock %}</p>

<p>
  <strong>Fetch Changes from a Cloned Repository</strong>
</p>


<p>{% codeblock lang:ruby %}
git fetch origin /<em> Pulls down latest committs from remote origin/master not origin, also pull down any branches pushed to Repo Fetch before you work Fetch before you pull Fetch often </em>/
{% endcodeblock %}</p>

<p>
  <strong>Merge with origin/master</strong>
</p>


<p>{% codeblock lang:ruby %}
git merge origin/master
{% endcodeblock %}</p>

<p>
  <strong>Fetch + Merge data ==> Pull</strong>
</p>


<p>{% codeblock lang:ruby %}
git merge origin/master
{% endcodeblock %}</p>

<p>
  <strong>Get Remote Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git branch branch_name origin/branch_name /<em> This will bring the remote branch to local and track with the remote </em>/
{% endcodeblock %}</p>

<p>
  <strong>Delete Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git branch -d branch_name
{% endcodeblock %}</p>

<p>
  <strong>Checkout and Switch Branch and Track to Remote</strong>
</p>


<p>{% codeblock lang:ruby %}
git checkout -b nontracking origin/nontracking
{% endcodeblock %}</p>

<p>
  <strong>Remove Remote Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git push origin &mdash;delete branch
{% endcodeblock %}</p>

<p>
  <strong>Undoing Changes</strong>
</p>


<p>{% codeblock lang:ruby %}
git checkout path-to-file /<em> Restores a file before it is staged </em>/</p>

<p>git reset HEAD path-to-file /<em> If it is staged &ndash; restores a file from last commit and then git checkout path-to-file </em>/</p>

<p>git checkout HEAD^ path-to-file /<em> If is staged and committed &ndash; restores from last commit </em>/</p>

<p>git reset &mdash;hard HEAD^ /<em> Restore prior commit </em>/
{% endcodeblock %}</p>

<p>
  <strong>Tag</strong>
</p>


<p>{% codeblock lang:ruby %}
git tag -a v1.0.0 -m &ldquo;message&rdquo; /<em> Tagging a commit with a version number</em>/</p>

<p>git push &mdash;tags /<em> Pushes tag info to master remote </em>/</p>

<p>/<em> You can checkout a commit and add a tag to that commit by checking out its SHA </em>/</p>

<p>git checkout f1f4a3d /<em> Checking out a commit &ndash; see the commit SHAS by git log </em>/
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Freelancer]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/22/the-freelancer/"/>
    <updated>2016-03-22T16:45:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/22/the-freelancer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/the_freelancer.jpg" width="600" alt="The Freelancer" />
</p>




<p>
  Freelancer is a self-employed person who pursues a profession without a long-term commitment to any particular employer. Your curiosity in this opportunity was probably sparked by posts marked "Freelance" or "Work from anywhere" on the myriad of job boards around the Web. Freelancing is equal parts freedom and responsibility. While you have the freedom to choose when you work, where you work and what you work on, you are also responsible for everything: deadlines, finding work, the quality of your work, communication and so much more.
</p>




<p>
  So, your skill may be in Web development, Graphic design and your approach is to freelance, but it’s not that easy: freelancing is no walk in the park. It could become a living nightmare if you’re not able to use your time efficiently and remain focused and motivated until a project comes to a close. It could also become a nightmare if you market yourself poorly, are constantly desperate for work or surrender too much power to a client, putting you in the position of a monkey-worker responding to petty demands. The reasons I love being a freelancer:
</p>




<p>
  <strong>Be your own boss</strong><br/>
  Report to no one but yourself. You will work on boring tasks.
</p>




<p>
  <strong>Enjoy your freedom</strong><br/>
  You have the freedom to work when and where you please, the freedom to structure your day as you please.
</p>




<p>
  <strong>Choose what to work on</strong><br/>
  Want to spend 50% of your time on open-source projects? Interested in building your own Web app? You have the power to make that a reality. Want to work exclusively on projects in social media? Make it happen.
</p>




<p>
  <strong>Set your rates</strong><br/>
  Value is both a reflection of how you perceive yourself and how others perceive you. Are you capable of meeting deadlines, communicating well and delivering quality code?
</p>




<p>
  If you are just starting out, charging $80 per hour will be hard; you have to earn that rate over time and with experience.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Learning]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/21/continuous-learning/"/>
    <updated>2016-03-21T14:15:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/21/continuous-learning</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/continuous_learning.jpg" width="600" alt="Continuous Learning" />
</p>




<p>
  <strong>WE LIVE IN INTERESTING TIMES.</strong> As development gets distributed across the globe, you learn there are lots of people capable of doing your job. <strong> You need to keep learning to stay marketable.</strong> Otherwise you'll become a dinosaur, stuck in the same job until, one day, you'll no longer be needed or your job get out-sourced to some cheaper resource.
</p>




<p>
  So what do you do about it? Here's a list of ways to keep you learning. Many of these can be found on the Internet for free:
</p>




<p>
  + Read books, magazines, blogs, Twitter feeds, and websites. If you want to go deeper into a subject, consider joining a mailing list or new group.
</p>




<p>
  + If you really want to get immersed in a technology, get hand on--write some code.
</p>




<p>
  + A good way to learn something is to teach or speak about it. When people are going to listen to you and ask you questions, you'll be highly motivated to learn. Try a lunch learn at work, a user group, or a local conference.
</p>




<p>
  + Join or start a study group or a local user group for a languages, technology, or discipline you are interested in.
</p>




<p>
  + Go to conferences. And if you can't go, many conferences put their talks on line for free.
</p>




<p>
  + Long commute? Listen to podcasts.
</p>




<p>
  + Follow the advice of the Pragmatic Programmers and learn a new language every year.
</p>




<p>
  + Not everything you learn has to be about technology. Learn the domain you're working in so you can better understand the requirements and help solve the business problem. Learning how to be more productive--how to work better--is another good option.
</p>




<p>
  + Go back to school.
</p>




<p>
  You don't have to spend every waking hour learning. A little time--say, each week--is better than nothing. There is (or should be) a life outside of work.
</p>




<p>
  <strong>Technology changes fast. Don't get left behind.</strong>
</p>

]]></content>
  </entry>
  
</feed>
