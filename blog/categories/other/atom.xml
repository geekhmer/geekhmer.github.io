<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-03-15T10:49:56+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Developer View]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/10/the-developer-view/"/>
    <updated>2015-03-10T19:55:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/10/the-developer-view</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/professional_programmer.jpg" width="550" alt="The Developer View" />
</p>




<p>
  A developer might be someone who writes code, or it may be an interaction designer, a graphic designer, or a tester. In this document describes the things that happend in between the daily standup meetings.
</p>




<p>
  <strong>1. Tools and Practices</strong><br/>
  Tools don't solve your problem; people do. Tools just help. It's crucial to choose the right practices to go with your tools -- the right ways to use your tools so that they do the most for you.
</p>




<p>
  And day-to-day as required, we discuss how our tools are helping or hurting us, and how they can work better for us. When things aren't working quite right, we'll first try to look at the way we're using the tool; changing our practices is less costly and disruptive than changing a tool. But we occasionally change the tool as well.
</p>




<p>
  <strong>2. Pair Programming</strong><br/>
  Pair programming involves two programmers at a single computer (each with a monitor and keyboard of their own) working together on a single task. As a unit, they maintain a hight level of quality as well as ensuring a broad perspective on problem solving. For many complex problems and architectural design exercises, pair programming can drastically reduce defects and helps ensure that code requires a minimum amount of rewriting.
</p>




<p>
  When used effectively, pair programming reduces the overall cost of development and maintenance.
</p>




<p>
  We look at each coding and design task determine if pairing is appropriate, and at the discretion of the project team, many coding tasks are performed solo. When this happens, the code must pass code review before moving to QA.
</p>




<p>
  <strong>3. Test-Driven Development</strong><br/>
</p>




<p>
  <strong>4. Behavior-Driven Development</strong><br/>
</p>




<p>
  <strong>5. Code Review</strong><br/>
  Although many tasks call for pair programming, it is simply not practical or efficient to pair on every task. Then tasks are tackled by a solo developer, their work must always be reviewed by another developer on the team.
</p>




<p>
  Our task manangement system is configured to give a task two paths out of development. One path is "Completed by Pair, Ready for QA" Tasks handled by a solo developer follow an alternate path: "Completed Solo, Ready for Code Review". That allows us to ensure that every piece of code that gets delivered to our customers thas been seen by at least two developers. Of course, that doesn't mean there aren't any problems, but it does shorten an important feedback loop, catching most problems early, when fixing them is cheapest.
</p>




<p>
  <strong>6. Continuous Integration</strong><br/>
  Continuous Integration (CI) ensures that an application is healthy by making sure that automated test pass on a neutral machine (not just a specific developer's machine). Whenever anybody commits code to the central code repository, a CI server downloads the code and runs the build to ensure that the tests are still passing. If any of the automated tests fail, the build fails and the entire team is notified.
</p>




<p>
  We believe that the build should always be passing, and if somebody breaks the build, it needs to be fixed immediately before futher development can task place.
</p>




<p>
  <strong>7. Code Coverage</strong><br/>
  Code coverage has many definitions, but it normally represents the percentage of lines (or branches) in a software project that are covered by automated tests. A low score probably means bad code, but a hight score doesn't necessarily mean good code.
</p>




<p>
  At the start of a project, the project team can choose what code coverage standard to enforce.
</p>




<p>
  <strong>8. Distributed Source Control</strong><br/>
  We uses a distributed source control system called Git (and Github) to store and track source code and other development-related artifacts.
</p>




<p>
  This is more important than it may first appear. Traditional, centralized source control systems inhibit agile teams by making branch and merge operations expensive. This make parallel, distributed development more costly. So much so, in fact, that source control can become a bottleneck on overall productivity of the team.
</p>




<p>
  <strong>9. Fridays (20% Time)</strong><br/>
  On Fridays, we don't do billable client work. We spend our time on things that improve our lives as developer, our own pet project or passions, and for giving back to the rich sea of open-source software (espcially development tools) in which our business swims and thrives.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stashing Codes Changes in Git]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/20/stashing-codes-changes-in-git/"/>
    <updated>2015-02-20T19:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/20/stashing-codes-changes-in-git</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Stashing Codes Changes in Git" />
</p>




<p>
  Using version control, is best to commit your code in small, discrete chunks rather than making large commits. However, What happens when you are working on a large change, and your boss comes to you and tells you they need an urgent bug fixed? With the git stash command you can quickly and easily store your code away and recall it for later use. Let’s run through this with me.
</p>




<p>
  <strong>Stash the Code</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Reapply the Changes You Sent to the Stash Type</strong><br/>
  What if you want to reapply your changes? Use <code>git stash apply</code> to reapply all the changes you stashed away with git stash.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>List All of the Stashes You've Made Type</strong><br/>
  Git stash supports stashing multiple times. To see a list of all the code you've stashed, use <code>git stash list</code>. The git stash list will show you a list of all the stashes you've made.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Stash Apply From the Earlier List</strong><br/>
  If the first stash is named stash@{1}, you can type <code>git stash apply stash@{1}</code> to apply the changes from that stash.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Git with Ruby on Rails Project]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/09/use-git-with-ruby-on-rails-project/"/>
    <updated>2015-02-09T23:31:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/09/use-git-with-ruby-on-rails-project</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Install Git on Linux/Ubuntu" />
</p>




<p>
  Well, in the previous article I've shown you "<a href="http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu/">Install Git on Linux/Ubuntu</a>", and in this article I want to show you "Create Ruby on Rails project and using Git". Let’s run through this with me.
</p>




<p>
  <strong>Create Ruby on Rails Project</strong><br/>
  Type command below to create a Rails project:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="kp">new</span> <span class="n">todo</span> <span class="o">-</span><span class="n">d</span> <span class="n">mysql</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Initialize Git</strong><br/>
  Type command below to initialize git:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cd</span> <span class="n">todo</span>
</span><span class='line'><span class="n">git</span> <span class="n">init</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Ignore File/Dir</strong><br/>
  Git uses file <code>.gitignore</code> to determine which files and directories to ignore, before you make a commit.
</p>




<p>
  <code>.gitignore</code> file should be committed into your repository, in order to share the ignore rules with any other users that clone the repository.
</p>




<p>
  Type command below to create a <code>.gitignore</code> file:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="o">.</span><span class="n">gitignore</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Then type file/dir or content that you want git to ignore:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.gitignore </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">log</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;.</span><span class="n">log</span>
</span><span class='line'><span class="n">tmp</span><span class="o">/**/&lt;</span><span class="sr">/em&gt;</span>
</span><span class='line'><span class="sr">config/</span><span class="n">database</span><span class="o">.</span><span class="n">yml</span>
</span><span class='line'><span class="n">db</span><span class="o">/*.</span><span class="n">mysql</span>
</span><span class='line'><span class="sr">/public/</span><span class="n">assets</span><span class="o">/**</span>
</span><span class='line'><span class="sr">/vendor/</span><span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Type command below to add Rails project into git:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Type command below to commit into git:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="kp">initialize</span> <span class="n">income</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  And type command below to push to the repository branch master:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">master</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Git on Linux/Ubuntu]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu/"/>
    <updated>2015-02-09T22:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Install Git on Linux/Ubuntu" />
</p>




<p>
  <strong>Overview</strong><br/>
  Git is a free and open source distributed version control system with an emphasis on speed, data integrity, and support for distributed, non-linear workflows.
</p>




<p>
  <strong>Installation</strong><br/>
  Use command line below to update local package index and then install the packages:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">build</span><span class="o">-</span><span class="n">essential</span> <span class="n">libssl</span><span class="o">-</span><span class="n">dev</span> <span class="n">libcurl4</span><span class="o">-</span><span class="n">gnutls</span><span class="o">-</span><span class="n">dev</span> <span class="n">libexpat1</span><span class="o">-</span><span class="n">dev</span> <span class="n">gettext</span> <span class="n">unzip</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Setting Up Git</strong><br/>
  Now you have git installed, you need to do a few things so that the commit messages that will be generated for you will contain your correct information.
</p>




<p>
  You need to provide your name and email address by using <code>git config</code> because git embeds this information into each commit you do. You can go ahead and add this information by typing:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Your</span> <span class="no">Name</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">global</span> <span class="n">user</span><span class="o">.</span><span class="n">email</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#58;&amp;#121;&amp;#x6f;&amp;#x75;&amp;#x72;&amp;#101;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#64;&amp;#100;&amp;#111;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6e;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#x79;&amp;#x6f;&amp;#117;&amp;#114;&amp;#101;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x40;&amp;#100;&amp;#x6f;&amp;#109;&amp;#x61;&amp;#105;&amp;#110;&amp;#x2e;&amp;#x63;&amp;#x6f;&amp;#109;&lt;/a&gt;&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can see all of the configuration items that you have been set by typing command below:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">config</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What you will see:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="o">=</span><span class="no">Your</span> <span class="no">Name</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="o">=&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#x79;&amp;#111;&amp;#117;&amp;#x72;&amp;#101;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#x40;&amp;#x64;&amp;#x6f;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6e;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#x79;&amp;#x6f;&amp;#x75;&amp;#114;&amp;#101;&amp;#109;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#x40;&amp;#100;&amp;#111;&amp;#109;&amp;#97;&amp;#105;&amp;#110;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The information is stored in the configuration file, which you can optionally edit by hand with your text editor like this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vim</span> <span class="o">~</span><span class="sr">/.gitconfig</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">user</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">name</span> <span class="o">=</span> <span class="no">Your</span> <span class="no">Name</span>
</span><span class='line'>  <span class="n">email</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#109;&amp;#x61;&amp;#105;&amp;#108;&amp;#x74;&amp;#x6f;&amp;#58;&amp;#x79;&amp;#111;&amp;#117;&amp;#114;&amp;#x65;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#64;&amp;#100;&amp;#111;&amp;#x6d;&amp;#97;&amp;#105;&amp;#x6e;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#x79;&amp;#x6f;&amp;#117;&amp;#114;&amp;#x65;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x40;&amp;#100;&amp;#x6f;&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6e;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, now you should have git installed and ready to use on your system. To learn more about how to use Git, check out these: <a href="https://try.github.io/levels/1/challenges/1" target="_blank">www.try.github.io</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tips to Improve the Performance of Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/01/tips-to-improve-the-performance-of-ruby-on-rails-application/"/>
    <updated>2014-12-01T22:06:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/01/tips-to-improve-the-performance-of-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" alt="Tips to Improve the Performance of Ruby on Rails Application" />
</p>




<p>
   In this article, I will show you tips to improve performance of Ruby on Rails application. let’s dive into those.
</p>




<p>
  <strong>1. Limit Amount of Data in a Controller Method</strong><br/>
  Thin controllers are easy to test and has a good performance profile because there’s some overhead involved in passing the controller instance variable around. In short, you need to follow "Thin controller and fat model".
</p>




<p>
  <strong>2. Split View in Separate Partials</strong><br/>
  n this way, views will be easier to read and easier to cache.
</p>




<p>
  <strong>3. Choose Right Session Storage</strong><br/>
  Based on your level of need, choose your session storage carefully. Here are what rails provide:<br/>
  - CookieStore – Stores everything on the client.<br/>
  - DRbStore – Stores the data on a DRb server.<br/>
  - MemCacheStore – Stores the data in a memcache.<br/>
  - ActiveRecordStore – Stores the data in a database using Active Record.
</p>




<p>
  <strong>4. DRY (Don't Repeat Yourself)</strong><br/>
  This is the most common things programmers tend to listen and don’t follow. Here is very basic example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Bambo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It should be written by:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">listing</span> <span class="o">=</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">listing</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Bambp</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">then</span> <span class="n">listing</span> <span class="k">else</span> <span class="kp">nil</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>4. Eager Loading</strong><br/>
  Eager loading is a way to solve the classic N + 1 query performance problem caused by inefficient use of child objects.
</p>




<p>
  Let’s look at the following code. It will fetch zip of 10 users.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;users.each do |user|</span>
</span><span class='line'><span class="sr">  puts user.address.zip</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  11 queries will be executed, 1 for the top and 10. The solution is to rewrite it to eager load address:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;users.each do |user|</span>
</span><span class='line'><span class="sr">  puts user.address.zip</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>5. Indexing</strong><br/>
  Database indexing is one of the simplest ways to improve database performance. The insert operation will become slower but will boost up fetching data which is more frequently used in web application.
</p>




<p>
  <strong>6. Avoid Dynamism</strong><br/>
  Although find_by and find_all_by dynamic methods are really cool, the are also kind of slow because each one needs to run through method_missing and parse the filename against the list of columns in database table.
</p>




<p>
  <strong>7. Caching</strong><br/>
  This is the purest way to speed up a rails application. Here are a short example of different types of caching:<br/>
  - Page Caching<br/>
  - Action Caching<br/>
  - Fragment Caching<br/>
  - SQL Caching<br/>
  - Asset Caching<br/>
</p>




<p>
  <strong>8. Image Spriting</strong><br/>
  In websites, a significant times are consumed for loading large number of images. One way of minimizing is to sprite your images. This will reduce number of images to be served significantly.
</p>




<p>
  <strong>9. Minify and GZIP Stylesheets and Javascripts</strong><br/>
  This is the last point, but an important one. You can reduce size of the stylesheets and javascripts significantly by Minifying it and serve as GZip format. It will improve the performance significantly by reducing request/response time.
</p>




<p>
  So far so good, these are pretty basic guidelines but surely help you to improve your application. Now, the bounce rate of your site should be less and you are expected to be a happier product owner. :)
</p>

]]></content>
  </entry>
  
</feed>
