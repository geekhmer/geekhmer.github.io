<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-07-09T00:46:38+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use Helpful Google Search Operators to Search Faster]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/09/use-helpful-google-search-operators-to-search-faster/"/>
    <updated>2015-07-09T00:25:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/09/use-helpful-google-search-operators-to-search-faster</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/google_search _operators.jpg" width="430" alt="Use Helpful Google Search Operators to Search Faster" />
</p>




<p>
  Google is working hard to improve search, and it’s doing such a great job that the general public doesn’t seem to be noticing. Google search operators help us to search faster, and you can use search operators and other punctuation to get more specific search results. Today we cover some of the basic search operators:
</p>




<p>
  <strong>site:</strong><br/>
  Include "site:"" to search for information within a single website, this one in particular can be a godsend when trying to match styles, specific spellings or usages to a client with a website full of already published works.<br/>
  Example: <code>site:nbc.com</code>
</p>




<p>
  <strong>define:</strong><br/>
  Include a word or phrase immediately after the operator "define:"" to find the definition of said word or phrase, just like a dictionary.<br/>
  Example: <code>define:food</code>
</p>




<p>
  <strong>related:</strong><br/>
  Type a URL after "related:"" to be presented with a list of pages that Google considers to be related to the one you've entered.<br/>
  Example: <code>related:geekhmer.github.io</code>
</p>




<p>
  <strong>OR</strong><br/>
  If you want to search for pages that may have just one of several words, include OR (must be capitalized) between the words. Without the OR, your results would typically show only pages that match both terms.<br/>
  Example: <code>olympics location 2014 OR 2018</code>
</p>




<p>
  <strong>info:</strong><br/>
  Type a URL after "info:" to be presented with a short description of the site and a list links to other information related to the site in question.<br/>
  Example: <code>info:geekhmer.github.io</code>
</p>




<p>
  <strong>"" (double quotes)</strong><br/>
  Use double quotes to search for an exact word or set of words in a specific order, without normal improvements such as spelling corrections and synonyms. Extremely useful for searching for proper nouns, expressions and examples of usage, etc.<br/>
  Example: <code>"read a book written over 100 years ago"</code>
</p>




<p>
  <strong>* (asterisk)</strong><br/>
  Use an asterisk (*) within a query as a placeholder for any unknown or "wildcard" terms.<br/>
  Example: <code>Food * Translators</code>
</p>




<p>
  <strong>– (minus sign)</strong><br/>
  Add a dash (-) before a word to exclude all results that include that word. This is especially useful for synonyms like mountain lion the large cat species and mountain lion the Apple OS.<br/>
  Example: <code>mountain lion -apple</code>
</p>




<p>
  <strong>~ (tilde)</strong><br/>
  Normally, synonyms might replace some words in your original query. Add a tilde sign (~) immediately in front of a word to search for that word as well as even more synonyms.<br/>
  Example: <code>~food facts</code>
</p>




<p>
  <strong>filetype:</strong><br/>
  Include "filetype:" to search for files of a specific type, such as PDFs.<br/>
  Example: <code>filetype:pdf chicago manual of style facsimile</code>
</p>




<p>
  <strong>.. (two periods)</strong><br/>
  Separate numbers by two periods (with no spaces) to see results that contain numbers in a given range of things like dates, prices, and measurements.<br/>
  Example: <code>paralympic gold medalists 1996..2012</code>
</p>




<p>
  <strong>allintitle:</strong><br/>
  Use "allintitle" to restrict a search so that all of the keywords must appear in the page title.<br/>
  Example: <code>allintitle: books for translators</code>
</p>




<p>
  <strong>allintext:</strong><br/>
  Use "allintitle" to restrict a search so that all of the keywords must appear within the body of the text on the page, rather than in any of the titles, etc.<br/>
  Example: <code>allintext: signs and symptoms of translators dementia</code>
</p>




<p>
  <strong>time:</strong><br/>
  Promised a client that you’ll have a finished piece of work with them before 3pm? Is that 3pm in their country or yours? What time is it in their country now? Or what time is it in your country for that matter? 4am? …isn’t it about time you went to bed?<br/>
  Example: <code>time:Phnom Penh</code>
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Reasons You Should Design and Code]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/04/10-reasons-you-should-design-and-code/"/>
    <updated>2015-07-04T00:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/04/10-reasons-you-should-design-and-code</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/design_and_code.jpg" width="430" alt="10 Reasons You Should Design and Code" />
</p>




<p>
  <strong>1. Higher Pay</strong><br/>
  By knowing how to design and code, you’ll be worth more to companies. Especially startups! By not only knowing how to design a beautiful UI element, but also implement what you design, you’ll be able work faster and create better work. All of which makes you more valuable and able to demand a higher salary.
</p>




<p>
  <strong>2. More Opportunities</strong><br/>
  Not only will you make more money, but you won’t have a problem getting a job. Your skill set is so rare that everyone will be trying to snatch you up! Startups especially, because they have smaller teams and less resources, a employee who is able to do more than one thing (design and code) is almost a must. Everyone will be fighting over you!
</p>




<p>
  <strong>3. Start Your Own Company</strong><br/>
  One of the reasons these designer/developer combos (Unicorns) are so rare is because they’re usually busy starting their own companies. When you have the knowledge to not only develop a application, but also make it beautiful, you have everything (almost) you need to launch any idea you have!
</p>




<p>
  <strong>4. Freedom</strong><br/>
  There is an incredible freedom that comes from not having to rely on someone else to take care of a part of your project. You can allow someone else to do the design, or the development, but by being able to design & code you have the ability to do it yourself. Freedom!
</p>




<p>
  <strong>5. Build from Start to Finish</strong><br/>
  By knowing how to do both the design and the development of a project, you have the ability to take an idea from concept to completion all by yourself. This also gives you greater control over the outcome of the project because you make every decision. This brings me to my next point:
</p>




<p>
  <strong>6. Experimentation</strong><br/>
  Since you can build both sides of any given project, you won’t need to hire someone else to do either the design or the development. This means it won’t cost you thousands of dollars, or a percentage of your project or company ownership, just to validate the idea. Putting a project out and seeing if it gains any traction costs nothing more than your time… Which of course means you can put out more work! It’s experimentation without the risk.
</p>




<p>
  <strong>7. Work More Efficiently</strong><br/>
  Design & code go hand in hand. They’re so tightly integrated that it’s important to know what is possible on both sides. By knowing how to design & how to code you can make smart decision about one side that would later effect the other.
</p>




<p>
  <strong>8. Higher Quality of Work</strong><br/>
  There are so many decisions that are made between the initial concept and launch. It’s very easy for things to get lost in the communication between the designer and the developer. By knowing how to design and code you can make smart decisions for both sides as you work, leading to a higher quality end product.
</p>




<p>
  <strong>9. Work Better on a Team</strong><br/>
  As I mentioned in the previous point, you’ll know what both sides need. This means when you are working with another designer or another developer, you can avoid making decisions that will negatively affect the other side. For example, a designer creating a UI element that he/she thinks (wrongly assuming) will be simple to implement, but not fully understanding the effort it will take to create it. (I did this when I was only a designer… I designed something assuming it wouldn’t be too much work only to find out from he developer it was very complicated. All of which could have been avoided if I understood what it took to do the development).
</p>




<p>
  <strong>10. Make a Better Leader</strong><br/>
  So not only will you make a great team member, but you’ll also make a great team leader. You’ll have the understanding and empathy you need because you know what is required to do this work. You know if a project timeline could happen quicker, but you also know if the deadline is unrealistic because you’ve been there.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 10 Best Project Management Tools for Freelancers]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/18/the-10-best-project-management-tools-for-freelancers/"/>
    <updated>2015-06-18T00:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/18/the-10-best-project-management-tools-for-freelancers</id>
    <content type="html"><![CDATA[<p>
  You just heard back from your Client No 1: He likes your pitch and wants a first draft within seven days. Client No 2 just sent you his comments on your piece and would like to see revisions by Friday. Client No 3 needs an invoice for the projects you’ve already completed this month. Meanwhile, you’re waiting on checks from Client Nos 4, 5, and 6. Oh, and you’re still putting together some ideas for Client No 7.
</p>




<p>
  Sound familiar?
</p>




<p>
  The nature of freelancing means you’re constantly juggling projects in different stages of completion. And you have to be keenly away of letting any accidentally drop because your reputation depends on meeting your deadlines, while your livelihood depends on making sure you get paid.
</p>




<p>
  Luckily, there are some great online tools out there that’ll allow you to carefully track the progress of every project on your docket. Check out my top 10.
</p>




<p>
  <h3><a href="https://asana.com/" target="_blank">Asana</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/asana.png" />
</p>




<p>
  Not only does Asana’s clean, simple layout make it incredibly easy on the eyes, it also makes using and mastering this app a breeze. When you create a project, which can be broken down into sub-tasks with individual deadlines, it’s really easy to monitor exactly what you’ve done and what still needs to be taken care of.
</p>




<p>
  I suggest making every assignment a separate project and using Asana’s "Highlight" feature to color-code them based on the client. Then, you can outline everything that needs to happen from pitching to getting paid.
</p>




<p>
  Asana also allows you to upload attachments and share your projects with other people—meaning you can loop in your clients or collaborators depending on the situation.
</p>




<p>
  <h3><a href="https://trello.com/" target="_blank">Trello</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/trello.png" />
</p>




<p>
  Trello is a good choice if you handle a lot of recurring projects for different clients or if you’re a very visual thinker. Its basic organizational tool is the "board". Each board is separated into lists, and each list is composed of one or more “cards”, which represent separate tasks.
</p>




<p>
  I recommend making a different board for every client. Then, depending on how each client handles submission and payment, you can make individualized lists for each step of the process. Maybe your first list is "Pitched", your next list is "Approved", and so on until a list for "Paid."
</p>




<p>
  Once you’ve made a card for each task you need to complete, you can give it a deadline, add an attachment, choose labels, make a checklist, write notes, and even share it with other Trello users.
</p>




<p>
  <h3><a href="https://www.wrike.com/" target="_blank">Wrike</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/wrike.png" />
</p>




<p>
  At first, Wrike seems pretty similar to Asana and Trello: You set up folders, create tasks, and assign task deadlines. However, Wrike has a few unique features really set it apart.
</p>




<p>
  First, it automatically tracks how much time you spend on each task, which is really helpful if you charge by the hour or need to see how long a project is taking. Second, it lets you create and share your project schedule. Once you’ve planned out a project, all you have to do is click the “Share timeline” button, and Wrike will send snapshots of your schedule to anyone you want, even if they don’t have a Wrike account. And third, Wrike integrates with a bunch of third-party apps, like Chrome, your email, cloud storage, and iCal.
</p>




<p>
  <h3><a href="http://www.thrivesolo.com/" target="_blank">Solo</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/solo.png" />
</p>




<p>
  Solo belongs on this list because it was specifically designed for freelancers. In addition to creating projects and setting due dates, you can also create a client roster, which analyzes how many returning clients you have, what sectors they’re in, and how profitable you are working with them. You can easily see which clients are your most valuable while also keeping track of basic contact info like phone numbers and emails.
</p>




<p>
  This is also cool: When you can make invoices in the app, the software tracks which clients have paid you, which clients have overdue payments, and which clients you still need to bill.
</p>




<p>
  Solo also comes with a "Quotes" feature that logs how many quotes you’ve sent out and tracks how many have been accepted.
</p>




<p>
  <h3><a href="https://www.wunderlist.com/" target="_blank">WunderList</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/wunder_list.png" />
</p>




<p>
  This tool is definitely the way to go if you want a quick and easy way to keep all your assignments organized. You start out on Wunderlist by making folders—I give each client their own—then adding “to-dos.” The program offers reminders in addition to deadlines. The reminder feature is super helpful—for example, maybe you need to interview someone for a story in the next eight days, so you can easily add a reminder at the four-day mark.
</p>




<p>
  Plus, Wunderlist pulls to-dos from emails. Let’s say you get a message from a client asking for revisions; just forward it to Wunderlist, and “make revisions on X article” will become a task.
</p>




<p>
  <h3><a href="https://podio.com/site/en" target="_blank">Podio</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/podio.png" />
</p>




<p>
  When it comes to personalization, most project management tools are fairly limited—you can adjust names and color-code, but that’s pretty much it. Not so with Podio, which lets you completely control the design of each project outline.
</p>




<p>
  You can add endless fields to each, from links or numbers to text boxes, categories, and even maps. So if your typical assignments are pretty detailed and complex (or you just want an app that gives you lots of customization power), Podio is worth checking out.
</p>




<p>
  You can also make project templates, which comes in handy if your freelance process can be replicated. Let’s say you write a similar set of articles every month for the same magazine; rather than creating a new project each time, you can use the template option to clone the first one and reuse it in the future.
</p>




<p>
  <h3><a href="https://redbooth.com/" target="_blank">RedBooth</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/red_booth.png" />
</p>




<p>
  Thanks to its email and desktop notifications, Redbooth is ideal for people juggling a lot of deadlines. Suppose you’ve created a task like “Turn in website copy for approval” and set the deadline for August 14. If you haven’t marked the task as completed by that day, Redbooth will either ping you on your browser, send you an email, or both. In other words, you’ll never miss a deadline because of forgetfulness.
</p>




<p>
  There’s also a useful "Reporting" section. This tab will show you when you’re finishing tasks, from “early” to “more than 1 week,” and record all your activity from the past seven days.
</p>




<p>
  <h3><a href="https://www.getflow.com/" target="_blank">Flow</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/flow.png" />
</p>




<p>
  Want a project management tool that’s functional without all the bells and whistles? Go with Flow. It has all the basic functionality of the others (separate workspaces for separate projects, project and task creation, work history, etc.), but without some of the busy interfaces. In fact, its design is nearly Mac-like in its minimalism and friendliness for new users.
</p>




<p>
  In addition to the computer-based platform, you can also use Flow’s iPhone and Android apps. Plus, the software also comes in a specific version for Macs so you don’t have to go through the brief hassle of opening Flow in your Internet browser.
</p>




<p>
  <h3><a href="https://quire.io/" target="_blank">Quire</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/quire.png" />
</p>




<p>
  Quire’s setup is pretty traditional: You’ve got projects composed of tasks that can be drilled down into sub-tasks. Furthermore, you can set due dates, add tags, and track your progress.
</p>




<p>
  However, Quire has a few qualities stands out. It has a ton of keyboard shortcuts, which means after a week or two of using the platform, you’ll be navigating really quickly. Also, you can make individual projects viewable by URL—so if you have a client who wants to know exactly what the status is for an assignment, you can conveniently share the project specs. This feature can also be helpful if the project scope expands and you’d like to renegotiate your price.
</p>




<p>
  And if you like looking at physical to-do lists, rather than virtual ones, Quire automatically formats your tasks for printing.
</p>




<p>
  <h3><a href="http://taskboard.matthewross.me/" target="_blank">TaskBoard</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/task_board.png" />
</p>




<p>
  Unlike the other tools above, Taskboard is a completely free, open-source project. You don’t make an account to access Taskboard; you just download it.
</p>




<p>
  My favorite Taskboard feature is the "automatic option." When specific criteria are met, items will automatically update. For example, you can tell Taskboard to clear the deadline if you mark a task as complete before its deadline. The automation saves you from having to constantly fiddle with all the different details to keep your board clean.
</p>




<p>
  Taskboard’s Markdown compatibility makes it even simpler to use. (If you’ve never heard of Markdown, it’s a plain text style that converts to HTML and saves you tons of time formatting your work) Thanks to this feature, you can seamlessly transition your comments, notes, and reminders from documents to Taskboard to a website, and back again.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Spend Less Time and Money on Growing Your Business?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/05/how-to-spend-less-time-and-money-on-growing-your-business/"/>
    <updated>2015-06-05T21:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/05/how-to-spend-less-time-and-money-on-growing-your-business</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/how_to_spend_less_time_and_money_on_growing_your_business.png" alt="How to Spend Less Time and Money on Growing Your Business?" />
</p>




<p>
  We all have ideas we would like to validate yesterday if possible but of course in reality that rarely happens. The constant lack of developer time makes our wishes become dreams most of which will never see the light of day.
</p>




<p>
  Being able to move fast so that you can put your ideas thru the build/measure/learn loop and iterate all the way to product market fit requires having a solid software foundation that will allow you to achieve fast release cycles.
</p>




<p>
  In this post I will show you how to:<br/>
  1. Speed up the development cycle<br/>
  2. Spend less money on developer time<br/>
  3. Build a more productive team
</p>




<p>
  <strong>We Call It Automated Testing</strong><br/>
  Testing — or automated testing — means you put the machine at work by having it test your application often and making sure everything works as expected. You can imagine someone clicking thru the buttons and links on your website, filling in forms etc. and making sure everything is in good shape.
</p>




<p>
  So by having every corner of your application checked at will and in record time, you will have the confidence that a feature you've previously built will stay functional forever — or at least until you decide to nuke it — by being notified immediately when something stopped working for whatever the reason.
</p>




<p>
  <strong>How Can Testing Help My Business?</strong><br/>
  It's less obvious until you've done software development for a while but, the most time spent by developers is not on building new and cool stuff — nor on playing video games. Actually, the most time is spent on fixing bugs (previously built features that somehow got broken in the process of increasing the complexity of your application).
</p>




<p>
  Knowing immediately when things got broken, where and why, means developers will spend a lot less time searching for the source of evil before they can actually do the work involved in fixing the issue — which usually amounts to much less then the digging, staring, guessing and searching process.
</p>




<p>
  So having to spend less and less time on fixing broken features as your app becomes more and more complex translates into improving development speed and cutting costs greatly in the long run.
</p>




<p>
  Automated testing gives you a new power; the confidence of changing existing features and adding ones with minimal overhead.
</p>




<p>
  <strong>Let’s Get the Product Managers Involved</strong><br/>
  Another very important aspect of testing is that features need to be described in great detail before the developer’s work can start so in other words, the developer knows exactly what he needs to do in order to deliver the required features to the stakeholders and match their expectations. This is also a good time for the developers to actually see the product from a different perspective.
</p>




<p>
  Instead of going back and forth about what the product manager wanted and what the developer thought he wanted and thus building the wrong feature, more time is spent communicating using a common language, the real expectations and making sure the developer's efforts are well spent.
</p>




<p>
  The automated testing language is written in plain english — or any other language of your choosing — and it requires both the product manager and the developer to sit down, think thru each step of every feature and put everything on paper before writing the first line of code.
</p>




<p>
  <strong>Planing for the Future</strong><br/>
  In the developer's world, technology changes extremely fast and thus new tools or new versions emerge with new and shiny features that your business could benefit from. But there’s one thing that stands in the way of all that goodness and that is… the fear of change. Changing a tool or upgrading one to a newer version increases the chance of breaking existing functionality.
</p>




<p>
  As you might’ve expected, this is another area where testing can save you a ton of time. By having a fully tested application, you can have your cake and eat it too — just get the new stuff, run your tests and see precisely what got broken in the process so you can start fixing. The horrible alternative would be to have your developers and QA team go over each and every feature — that they remember — and manually test it, or even worse, users discovering bugs and probably not telling you about them.
</p>




<p>
  <strong>Show Me an Example</strong><br/>
  Let’s see how an automated test might look like in real life.
</p>


<p>{% codeblock lang:ruby %}
Feature: User login
  In order to see history that’s unique to my account
  As a user
  I want to be able to log in</p>

<p>  Scenario: User logs in</p>

<pre><code>Given I have a user account
And I am currently logged out
When I log in
Then I should see my dashboard
</code></pre>

<p>{% endcodeblock %}</p>

<p>
  What you see here is a valid automated test that makes sure that a user can log into your site by opening a browser, clicking on the login link, filling in the sign-in form and making sure that when the log in was successful, the user will be on his dashboard page.
</p>




<p>
  As you can see the test is very readable and thus it can be easily used as a communication tool between the product team — or the stakeholders — and the development team.
</p>




<p>
  So my advice to you is to use testing as much as possible and as early in the development process as you can. It saved me and my business countless hours and I can guarantee it will do the same for yours.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Development Stack]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/03/my-development-stack/"/>
    <updated>2015-06-03T23:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/03/my-development-stack</id>
    <content type="html"><![CDATA[<p>
  I always try to improve my development stack in order to gain productivity. And during the last few months, there has been a lot of change.
</p>




<p>
  Here is my current development stack that I use to create web apps:
</p>




<h3>
  Front-End
</h3>




<p>
  <strong>Bootstrap:</strong> A great HTML/CSS framework. It helps you build MVC very fast. Sass: A language compiled into CSS which adds many features such as variables, imports and functions.<br/>
  <strong>Sass:</strong> A language compiled into CSS which adds many features such as variables, imports and functions.<br/>
  <strong>Jquery:</strong> Good old Jquery, indeed. I may start to use angular in the next few weeks if I have enough time.
</p>




<h3>
  Back-End
</h3>




<p>
  <strong>Ruby on Rails:</strong> The most productive web framework I have ever worked with, much faster than any PHP framework, and enforcing many good software engineering practices.<br/>
  <strong>PostgreSQL:</strong> Faster and most powerful than most RDBMS (including MySQL), and free.
</p>




<h3>
  Hosting
</h3>




<p>
  <strong>Heroku:</strong> A great PaaS, and free for small apps. I also tried Google App Engine but its lack of flexibility was a problem for me.<br/>
  <strong>Cloudflare:</strong> It makes your app load faster and gives you a free SSL certificate.<br/>
  <strong>Mandrill:</strong> Very easy to use, yet powerful, EaaS (Email as a Service). I use it to send transactional emails like welcome messages and password resets.
</p>




<h3>
  Deployment
</h3>




<p>
  <strong>Git:</strong> I configured it with a pre-commit hook which automatically runs rails tests. And thanks to Heroku a simple push deploys my code. It’s very useful and now I just couldn’t go back.
</p>




<h3>
  Monitoring
</h3>




<p>
  <strong>Pingdom:</strong> A great tool to receive alerts if your app goes down (and if you add IFTTT you can receive them by SMS).
</p>




<p>
  Let’s see what it looks like (with the help of a great website I recently found):
</p>




<p>
  <img src="http://geekhmer.github.io/images/my_development_stack.png" alt="My Development Stack" />
</p>

]]></content>
  </entry>
  
</feed>
