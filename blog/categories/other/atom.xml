<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-03-20T23:56:30+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Push to Multiple Git Repositories]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/16/push-to-multiple-git-repositories/"/>
    <updated>2015-03-16T20:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/16/push-to-multiple-git-repositories</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Push to Multiple Git Repositories" />
</p>




<p>
  Here's a cool little trick I've found out about the other day. Even though Git is a distributed revision control system, there are times when you need to push to two systems at once. In my case those systems are Github and Heroku. Here is a simple way to do it by modifying your .git/config file.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="n">core</span><span class="o">]</span>
</span><span class='line'>  <span class="n">repositoryformatversion</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">filemode</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">bare</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">logallrefupdates</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="o">[</span><span class="n">remote</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">heroku</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">url</span> <span class="o">=</span> <span class="n">git</span><span class="vi">@heroku</span><span class="o">.</span><span class="n">com</span><span class="ss">:pgsearch</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">heroku</span><span class="o">/&lt;</span><span class="sr">/em&gt;</span>
</span><span class='line'><span class="sr">[remote &amp;ldquo;github&amp;rdquo;]</span>
</span><span class='line'><span class="sr">  url = git@github.com:Bunlong/</span><span class="n">rvm</span><span class="o">.</span><span class="n">git</span>
</span><span class='line'>  <span class="n">fetch</span> <span class="o">=</span> <span class="o">+</span><span class="n">refs</span><span class="o">/</span><span class="n">heads</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="ss">:refs</span><span class="o">/</span><span class="n">remotes</span><span class="o">/</span><span class="n">github</span><span class="o">/&lt;</span><span class="sr">/em&gt;</span>
</span><span class='line'><span class="sr">[remote &amp;ldquo;origin&amp;rdquo;]</span>
</span><span class='line'><span class="sr">  url = git@heroku.com:pgsearch.git</span>
</span><span class='line'><span class="sr">  url = git@github.com:Bunlong/</span><span class="n">rvm</span><span class="o">.</span><span class="n">git</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The "heroku" and "github" remotes are generated by git and are created in the setup instructional steps of each service respectively. I went ahead and manually added the remote "origin" and just copied the url variable from the other remotes. You'll now be able to push to both by calling "git push origin" and then you can fetch from each one as individually needed.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Choose Ruby on Rails Framework?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/16/why-choose-ruby-on-rails-framework/"/>
    <updated>2015-03-16T20:03:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/16/why-choose-ruby-on-rails-framework</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Why Choose Ruby on Rails Framework?" />
</p>




<p>
  Ruby on rails is one of the popular development frameworks for regular websites as well as kind of tools, web and mobile apps or combinations of all. Some of the following reasons which makes it popular among others:
</p>




<p>
  <strong>Higher Flexibility</strong> - In Ruby on Rails, it is easy to mold the platform to suit different business needs more efficiently than other frameworks. We can quickly mock up a working prototype, and then see how things work and then build on the idea. Faster Development Speed - In Rails, there are lots of in-built components(called gems) available which we can re-use to build the application rather than building everything from scratch.
</p>




<p>
  <strong>Agile Development at its best</strong> - Ruby on Rails is developed using the MVC design pattern along with the agile methodology which is well suited for web application development with fast changing requirements.
</p>




<p>
  <strong>Integrated testing tools</strong> - Rails features a convenient testing tool as it automatically starts producing the skeleton test code in background at the time of development. Rails tests can also simulate browser requests and thus you can test your application's response without having to test it over browser.
</p>




<p>
  <strong>Compatibility</strong> - Rails development is compatible with a wide range of web servers and databases; which ultimately makes the web deployment easier.Cost-effective Web solutions - As it is an open source framework this helps in developing cost-effective web applications without sacrificing performance, speed and quality.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reasons to bring Ruby on Rails Development on Board]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/16/reasons-to-bring-ruby-on-rails-development-on-board/"/>
    <updated>2015-03-16T00:09:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/16/reasons-to-bring-ruby-on-rails-development-on-board</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Reasons to bring Ruby on Rails Development on Board" />
</p>




<p>
  Ruby on Rails is an innovation in development framework. It encompasses all the necessary elements to boost a web application’s performance. This framework is designed to address agile development and deliver productivity as well as flexibility to Ruby on Rails developers. Developed using Ruby programming language, it has transformed the world of web development through its practical approach.
</p>




<h3>Ruby on Rails is built upon two programming philosophies</h3>




<p>
  <strong>Convention over Configuration:</strong>
  Developers only need to write codes for the irregular or unconventional aspects of the web application.
</p>




<p>
  <strong>Don’t Repeat Yourself:</strong>
  The data is stored in definite place. It saves time and reduces code.
</p>




<h3>Advantages of Ruby on Rails</h3>




<p>
  <strong>Faster Development:</strong>
  Rails framework enables the developers to write concise and clear syntax and produces fewer codes than its competitors. Therefore it requires less time to code and generates fewer errors. On the other hand it facilitates the programmers to maintain much less code. It is also enabled to integrate numerous tools to automate repetitive tasks such as managing database errors, creating forms etc... it simplifies development process because the language is lightweight and easily readable, almost like the natural language.
</p>




<p>
  <strong>Increases Productivity:</strong>
  Rails framework is specifically featured to reduce the development aspects of applications, instead leveraging creativity and uniqueness of the web application. It empowers productivity by eliminating repetitive programming codes.
</p>




<p>
  <strong>Assists Development of Creative Interfaces:</strong>
  Rails includes numerous integrations to enable developers in creating rich, intriguing user interfaces. Integrated JavaScript framework is easier to activate and features elements like apparition progressive, drag & drop and many more to ease the designing aspects of the application.
</p>




<p>
  <strong>Model View Controller Design Pattern:</strong>
   Rails is developed on MVC architecture that separates the development logics from the presentation layer. It provides a well-structured application to the developers and the code is maintained in a logical and coherent manner.  It encourages abstraction in the application and enables the team to work on separate modules without depending on each other. It focuses on the features rather than minute details. Rails framework delivers ease of project development, conciseness and faster deployment of application.
</p>




<p>
  Rails Development makes web app development easier because it involves less coding while implementing new changes and updates into the development process. It enables the organizations to meet all the business requirements within the budget and schedule. So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Developer View]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/10/the-developer-view/"/>
    <updated>2015-03-10T19:55:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/10/the-developer-view</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/professional_programmer.jpg" width="550" alt="The Developer View" />
</p>




<p>
  A developer might be someone who writes code, or it may be an interaction designer, a graphic designer, or a tester. In this document describes the things that happend in between the daily standup meetings.
</p>




<p>
  <strong>1. Tools and Practices</strong><br/>
  Tools don't solve your problem; people do. Tools just help. It's crucial to choose the right practices to go with your tools -- the right ways to use your tools so that they do the most for you.
</p>




<p>
  And day-to-day as required, we discuss how our tools are helping or hurting us, and how they can work better for us. When things aren't working quite right, we'll first try to look at the way we're using the tool; changing our practices is less costly and disruptive than changing a tool. But we occasionally change the tool as well.
</p>




<p>
  <strong>2. Pair Programming</strong><br/>
  Pair programming involves two programmers at a single computer (each with a monitor and keyboard of their own) working together on a single task. As a unit, they maintain a hight level of quality as well as ensuring a broad perspective on problem solving. For many complex problems and architectural design exercises, pair programming can drastically reduce defects and helps ensure that code requires a minimum amount of rewriting.
</p>




<p>
  When used effectively, pair programming reduces the overall cost of development and maintenance.
</p>




<p>
  We look at each coding and design task determine if pairing is appropriate, and at the discretion of the project team, many coding tasks are performed solo. When this happens, the code must pass code review before moving to QA.
</p>




<p>
  <strong>3. Test-Driven Development</strong><br/>
</p>




<p>
  <strong>4. Behavior-Driven Development</strong><br/>
</p>




<p>
  <strong>5. Code Review</strong><br/>
  Although many tasks call for pair programming, it is simply not practical or efficient to pair on every task. Then tasks are tackled by a solo developer, their work must always be reviewed by another developer on the team.
</p>




<p>
  Our task manangement system is configured to give a task two paths out of development. One path is "Completed by Pair, Ready for QA" Tasks handled by a solo developer follow an alternate path: "Completed Solo, Ready for Code Review". That allows us to ensure that every piece of code that gets delivered to our customers thas been seen by at least two developers. Of course, that doesn't mean there aren't any problems, but it does shorten an important feedback loop, catching most problems early, when fixing them is cheapest.
</p>




<p>
  <strong>6. Continuous Integration</strong><br/>
  Continuous Integration (CI) ensures that an application is healthy by making sure that automated test pass on a neutral machine (not just a specific developer's machine). Whenever anybody commits code to the central code repository, a CI server downloads the code and runs the build to ensure that the tests are still passing. If any of the automated tests fail, the build fails and the entire team is notified.
</p>




<p>
  We believe that the build should always be passing, and if somebody breaks the build, it needs to be fixed immediately before futher development can task place.
</p>




<p>
  <strong>7. Code Coverage</strong><br/>
  Code coverage has many definitions, but it normally represents the percentage of lines (or branches) in a software project that are covered by automated tests. A low score probably means bad code, but a hight score doesn't necessarily mean good code.
</p>




<p>
  At the start of a project, the project team can choose what code coverage standard to enforce.
</p>




<p>
  <strong>8. Distributed Source Control</strong><br/>
  We uses a distributed source control system called Git (and Github) to store and track source code and other development-related artifacts.
</p>




<p>
  This is more important than it may first appear. Traditional, centralized source control systems inhibit agile teams by making branch and merge operations expensive. This make parallel, distributed development more costly. So much so, in fact, that source control can become a bottleneck on overall productivity of the team.
</p>




<p>
  <strong>9. Fridays (20% Time)</strong><br/>
  On Fridays, we don't do billable client work. We spend our time on things that improve our lives as developer, our own pet project or passions, and for giving back to the rich sea of open-source software (espcially development tools) in which our business swims and thrives.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stashing Codes Changes in Git]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/20/stashing-codes-changes-in-git/"/>
    <updated>2015-02-20T19:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/20/stashing-codes-changes-in-git</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Stashing Codes Changes in Git" />
</p>




<p>
  Using version control, is best to commit your code in small, discrete chunks rather than making large commits. However, What happens when you are working on a large change, and your boss comes to you and tells you they need an urgent bug fixed? With the git stash command you can quickly and easily store your code away and recall it for later use. Let’s run through this with me.
</p>




<p>
  <strong>Stash the Code</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Reapply the Changes You Sent to the Stash Type</strong><br/>
  What if you want to reapply your changes? Use <code>git stash apply</code> to reapply all the changes you stashed away with git stash.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>List All of the Stashes You've Made Type</strong><br/>
  Git stash supports stashing multiple times. To see a list of all the code you've stashed, use <code>git stash list</code>. The git stash list will show you a list of all the stashes you've made.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Stash Apply From the Earlier List</strong><br/>
  If the first stash is named stash@{1}, you can type <code>git stash apply stash@{1}</code> to apply the changes from that stash.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">git</span> <span class="n">stash</span> <span class="n">apply</span> <span class="n">stash</span><span class="err">@</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it! See ya! :)
</p>

]]></content>
  </entry>
  
</feed>
