<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2017-11-05T01:35:47+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create-React-App Vs NextJs]]></title>
    <link href="http://geekhmer.github.io/blog/2017/11/04/create-react-app-vs-nextjs/"/>
    <updated>2017-11-04T22:13:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/11/04/create-react-app-vs-nextjs</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/cra_vs_next.png" width="600" alt="Create-React-App Vs NextJs" />
</p>




<p>
  <a href="https://github.com/zeit/next.js/" target="_blank">NextJs</a> is a new project with a lot to offer.
</p>




<p>
  The comparison between NextJs and Create-React-App is an apt one. What NextJs brings is great defaults. Like Create-React-App, NextJs is opinionated. It makes choices for you about what an ideal React setup should look like.
</p>




<p>
  One of the biggest pain points in starting a new javascript App is the tooling. Webpack, babel, and the like can be a pain to setup, especially with the aggressive release cycle of open source javascript projects. As of this writing you're probably already using Webpack syntax that's been deprecated.

</p>




<p>
  Here are the biggest differences between Create-React-App and NextJs.
</p>




<p>
  <strong>Create-React-App Is Ejectable, NextJs Is Extensible</strong><br/>
</p>




<p>
  Create-React-App uses babel, webpack, and eslint but "hides" this tooling and bundles it together in react-scripts. But Create-React-App doesn't lock you in; when you're ready to depart from training wheels you can unmask these dependencies and then configure them.
</p>




<p>
  NextJs, on the other hand, provides great defaults with the option to configure tooling if you want to. For example, you can override (or extend) NextJs's webpack configuration by adding a webpack.config.js file. Or you can add an express server if you don't want to use NextJs' server.
</p>




<p>
  <strong>NextJs is Out Of The Box</strong>
</p>




<p>
  The biggest point of NextJs is server-side rendering.
</p>




<p>
  People will tell you that Google crawls javascript and that it's sufficient to serve up an almost-empty html document with <code>root</code> class along with a massive bundle.js.
</p>




<p>
  It's true that Google crawls javascript. But this just isn't a good approach for apps that are content-focused and need to expose their content to search. 
</p>




<p>
  <strong>Styling is A Pain With NextJs</strong>
</p>




<p>
  NextJs can be a pain with styling. Out of the box, NextJs uses styled-jsx, which is OK. But what if you want to use SASS or styled-components? You're in for a few hours of frustration.
</p>




<p>
  <strong>You Can't make API Calls In Components With NextJs</strong>
</p>




<p>
  Initializing a new NextJs project creates two directores ./pages and ./components.
</p>




<p>
  Pages are like container React components. But they have more significance than simply wrapping other components. Page components are literally rendered into pages with a little help from react-router. That is, http://localhost:3000/about points to ./pages/about.js. This approach has strengthes and limitations. One of the limitations is that you can only make a client-side fetch request in top-level page components.
</p>




<p>
  <strong>Create-React-App Vs NextJs: Comparison Table</strong>
</p>




<table>
  <thead>
    <tr>
      <th></th>
      <th>Create React App</th>
      <th>NextJs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Dependencies</td>
      <td>One (react-scripts)</td>
      <td>One (next)</td>
    </tr>
    <tr>
      <td>Ejectable</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Extensible</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Isomorphic/Universal</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Zero-configuration</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Service workers</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Hot-reloading</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Code-splitting</td>
      <td>Can be configured</td>
      <td>Out of the box</td>
    </tr>
  </tbody>
</table>




<br/>




<p>
  <strong>Conclusion</strong>
</p>




<p>
  NextJs is a good start if you need SSR first, SEO friendly with lots of public content. But if you build a highly dynamic statically deployed Single Page Application client, CRA (Create React App) is better suited for that.
</p>




<p>
  So for blog, news, with lots of public content and shareability, I'll go with NextJs. For dashboard, admin, apps, I'll go with CRA (Create React App)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Full Stack Developer?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/06/25/what-is-full-stack-developer/"/>
    <updated>2017-06-25T00:26:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/06/25/what-is-full-stack-developer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/full_lstack_developer.jpg" width="600" alt="What is Full Stack Developer?" />
</p>




<p>
  We live in the world of start-ups and freelancers. If you want to make it in such a world, you need to be equipped with the necessary skills.
</p>




<p>
  Big organizations can afford to have developer, designer, tester etc... and roles assigned to different people. 
</p>




<p>
  As the start-up or small organization, such roles assigned to different people may be too costly. It is far much more preferable to have a single person who can work comfortably in all of the above roles.
</p>




<p>
  Gone the days, one needed to know only one language/technology and get with. But these days, you will need to know more than one language/technology. This is where the full-stack developer comes in. A full-stack developer is comfortable working in both the back-end and front-end environments.
</p>




<h3>BACK-END DEVELOPER</h3>




<p>
  Back-end developers are much more focused on what happens on the server-side. This includes writing the code that responds to front-end user requests, interacting with the database and infrastructure for web server as well. One will need to know more than one of the following.
</p>




<p>
  <strong>PROGRAMMING LANGUAGES</strong>
</p>




<p>
  The following are some of the languages that you should know.
</p>




<p>
  <strong>PHP/Laravel</strong><br/>
   PHP is a scripting server-side language. You can use PHP to interact with the database, develop APIs and do a hell lot of things. PHP is open source and almost supported by all hosting environments.
</p>




<p>
  As a full-stack developer, having knowledge of PHP is almost a must. It is a massive advantage but you will need to prove yourself to your employers or clients.
</p>




<p>
  <strong>Ruby/Rails</strong><br/>
  Ruby on rails is another popular MVC framework built on ruby. Just like PHP, Ruby on rails is open source. You can use ruby to create web applications and APIs.
</p>




<p>
  <strong>ASP.Net</strong><br/>
  ASP is the acronym for active server pages. It is a web development language developed by Microsoft and runs on the .Net framework.
</p>




<p>
  <strong>JSP</strong><br/>
  JSP is the acronym for Java Server Pages. It is powered by Java and used to create web applications.
</p>




<p>
  <strong>DATABASE ENGINES</strong>
</p>




<p>
  In todayâ€™s world, almost all applications must store data in the database. Data is literally the blood line of all modern businesses. Knowing about databases will help you to go a long way
</p>




<p>
  <strong>MySQL</strong><br/>
  MySQL is a client-server relational database management system. It runs on all operating systems and is mostly used with PHP. It supports tables, views, triggers and stored procedures etc. You can also use it with other programming languages such as Ruby, Java, C# etc.
</p>




<p>
  <strong>Microsoft SQL Server</strong><br/>
  SQL Server is a commercial relational database management systems developed by Microsoft. It is most commonly used with ASP.Net but you can also use it with other languages i.e. Java, PHP etc.
</p>




<p>
  <strong>Sqlite</strong><br/>
  SQLite is an embedded relational SQL database. It is commonly used on mobile devices i.e. smart phones. You can also use it when working with web applications.
</p>




<p>
  <strong>Oracle</strong><br/>
  Oracle is another popular relational database management system developed by Oracle. It is most used by big corporations.
</p>




<p>
  <strong>PostgreSQL</strong><br/>
  PostgreSQL (pronounced "post-gress-Q-L") is an open source relational database management system ( DBMS ) developed by a worldwide team of volunteers. PostgreSQL is not controlled by any corporation or other private entity and the source code is available free of charge.
</p>




<p>
  <strong>DEVELOPMENT METHODOLOGIES</strong>
</p>




<p>
  In addition to possessing the technical skills, you will also need to know about project management and development methodologies.
</p>




<p>
  <strong>Agile Development Methodologies</strong><br/>
  Agile development is a term that is used to refer to development methodologies that incremental development practices. Some of the most popular methodologies include <a href="http://scrummethodology.com/" target="_blank">Scrum</a> and Extreme Programming (XP).
</p>




<p>
  <strong>Development Tools / Techniques</strong><br/>
  One only needed to know a single programing language, develop something functional and get away with it. Things have changed these days. In additional to knowing at least more than one language. Your skill set should also including: Version Control, Test Driven Development (TDD).
</p>




<h3>FRONT-END DEVELOPER</h3>




<p>
  The major role of a front-end developer is to create the user interface that the user interacts with. This generally requires knowing HTML, CSS, and JavaScript intimately. Letâ€™s briefly look at some of the skills that you will need to know.
</p>




<p>
  <strong>Hyper Text Markup Language (HTML)</strong><br/> 
  As of this writing, the latest version of HTML is 5. It comes with a lot of cool features that you must know. Web pages are literally build using HTML.
</p>




<p>
  <strong>Cascading Style Sheets (CSS)</strong><br/>
  Another component of building web pages. CSS provides you with the styling that makes the web beautiful.
</p>




<p>
  <strong>JavaScript (JS)</strong><br/>
  JavaScript is a client-side scripting language that is used to make web pages interactive and provide a lot of functionality. You can use JavaScript to provide client-side validation, performing Ajax calls etc. apart from doing client-side activities, JavaScript can now be used on the server side as well i.e. Node.JS.
</p>




<p>
  <strong>JavaScript Frameworks / Libraries</strong><br/>
  Pure JavaScript is great for simple tasks but things can and usually tend to get more complex. Frameworks and libraries allow you to focus on the user needs while they take care of the technical needs. Libraries such as jQuery allow you to do more with less. jQuery comes with functionality for things like validation, animations, Ajax calls etc. You will also need to know JavaScript frameworks i.e. ReactJS, AngularJS etc. to create killer interactive interfaces.
</p>




<p>
  <strong>Front-End Frameworks</strong><br/>
  Time is money you donâ€™t want to spent a lot of time on a project focusing on technical details. You can take advantage of front-end frameworks such as twitter bootstrap to make your life sweet. Twitter bootstrap comes with CSS and JavaScript functionality out of the box. Once you have the design mock-ups, you can focus on applying CSS classes to your HTML elements and watch the magic happen instead of writing the CSS code that will translate your mock-ups to cool HTML pages.
</p>




<p>
  <strong>CSS Pre-Processors </strong><br/>
  These enable you to speed up your CSS development. CSS pre-processors such as SASS and LESS process your CSS code before publishing to make the code cross-browser friendly and well formatted.
</p>




<p>
  <strong>Template Engines</strong><br/>
   Letâ€™s assume that you are using PHP on the back-end, before template engines, the front-end developers would create the HTML, handle it over to the developers and then they would embed pure PHP code into the HTML. This is no longer acceptable. You need to learn a template engine and they are super easy actually. Laravel uses blade template.
</p>




<p>
  <strong>Responsive and Mobile Designs</strong><br/>
  Your interfaces need to be able to respond to the size of the design and mobile devices.
</p>




<p>
  So far so good, as you can see from the above list, the back-end and front-end developers needs to know a lot of things. A full-stack developer needs to know all things.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installation and Configuration Nginx as Reverse Proxy for Apache on Ubuntu Server]]></title>
    <link href="http://geekhmer.github.io/blog/2017/04/26/installation-and-configuration-nginx-as-reverse-proxy-for-apache-on-ubuntu-server/"/>
    <updated>2017-04-26T16:11:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/04/26/installation-and-configuration-nginx-as-reverse-proxy-for-apache-on-ubuntu-server</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_apache.jpg" width="600" alt="Installation and Configuration Nginx as Reverse Proxy for Apache on Ubuntu Server" />
</p>




<p>
  In this article, I will show you how to install and configure Nginx as a caching reverse proxy for an Apache web server on Ubuntu, Nginx is used as the front-end and Apache as the back-end. 
</p>




<p>
  Nginx will run on port 80 to respond to requests from user/browser, the request will be forwarded to the Apache server that is running on port 7070.
</p>




<p>
  <h3>Apache</h3>
</p>




<p>
  <strong>Install Apache & PHP</strong><br/>
  Log into your ubuntu server with SSH and switch to root user by running:
</p>


<p>{% codeblock lang:ruby %}
sudo su
{% endcodeblock %}</p>

<p>
  Then install apache with the apt-get command:
</p>


<p>{% codeblock lang:ruby %}
apt-get install apache2
{% endcodeblock %}</p>

<p>
  Once apache is installed, we must install PHP as apache module for this tutorial:
</p>


<p>{% codeblock lang:ruby %}
apt-get install php5 php5-mysql libapache2-mod-php5
{% endcodeblock %}</p>

<p>
  <strong>Configure Apache and PHP</strong><br/>
  By default, apache listens on port 80. We have to configure apache to run on port 7070 for our proxy setup as port 80 will be used by nginx later.
</p>




<p>
  If you want to change the port for apache web server, you must edit the apache configuration file <code>/etc/apache2/ports.conf</code>, and then proceed with the virtual host configuration in the <code>/etc/apache2/sites-available/</code> directory.
</p>




<p>
  First change the Apache port to 7070 by editing the file <code>ports.conf</code> with the vim editor:
</p>


<p>{% codeblock lang:ruby %}
vim /etc/apache2/ports.conf
{% endcodeblock %}</p>

<p>
  And then change port 80 to 7070:
</p>


<p>{% codeblock ports.conf lang:ruby %}
Listen 7070
{% endcodeblock %}</p>

<p>
  And then save and exit.
</p>




<p>
  And now go to the virtualhost directory and edit the file <code>000-default.conf</code>:
</p>


<p>{% codeblock lang:ruby %}
vim /etc/apache2/sites-available/000-default.conf
{% endcodeblock %}</p>

<p>
  And then make sure your configuration is same as below:
</p>


<p>{% codeblock 000-default.conf lang:ruby %}
<VirtualHost *:7070>
  ServerName www.reverse.com
  ServerAlias reverse.com</p>

<p>  ServerAdmin webmaster@localhost
  DocumentRoot /var/www/html/geekhmer-dev</p>

<p>  <Directory "/var/www/html/geekhmer-dev"></p>

<pre><code>RewriteEngine On
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</code></pre>

<p>  </Directory></p>

<p>  ErrorLog ${APACHE_LOG_DIR}/geekhmer-dev_error.log
  CustomLog ${APACHE_LOG_DIR}/geekhmer-dev_access.log combined
</VirtualHost>
{% endcodeblock %}</p>

<p>
  And then save and exit.
</p>




<p>
  Next test the configuration and restart apache:
</p>


<p>{% codeblock lang:ruby %}
apachectl configtest</p>

<p>systemctl restart apache2
{% endcodeblock %}</p>

<p>
  Then we verify that the apache and php is working by creating a new file with the name <code>info.php</code> in the directory <code>/var/www/html/</code>.

</p>


<p>{% codeblock lang:ruby %}
echo &ldquo;&lt;?php phpinfo(); ?>&rdquo; > /var/www/html/info.php
{% endcodeblock %}</p>

<p>
  Visit your site www.reverse.com:7070/info.php.
</p>




<p>
  <h3>Nginx</h3>
</p>




<p>
  <strong>Install Nginx</strong><br/>
  Let install Nginx with the following apt-get command:
</p>


<p>{% codeblock lang:ruby %}
apt-get install nginx
{% endcodeblock %}</p>

<p>
  <strong>Configure Nginx</strong><br/>
  Once Nginx is installed, configure Nginx to act as reverse proxy for the apache web server that running on port 7070.
</p>




<p>
  Go to the nginx configuration directory and edit the file <code>nginx.conf</code>:
</p>


<p>{% codeblock lang:ruby %}
vim /etc/nginx/nginx.conf
{% endcodeblock %}</p>

<p>
  And then enable Gzip compression for Nginx by uncomment the gzip lines below:
</p>


<p>{% codeblock nginx.conf lang:ruby %}</p>

<h1>#</h1>

<h1>Gzip Settings</h1>

<h1>#</h1>

<p>gzip on;
gzip_disable &ldquo;msie6&rdquo;;</p>

<p>gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers 16 8k;
gzip_http_version 1.1;
gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/    javascript;
{% endcodeblock %}</p>

<p>
  The most important is:<br/>
  - gzip on : to turn gzip compression.<br/>
  - gzip_types : is list of MIME-types which you want to turn the compression.<br/>
  - gzip_proxied any : is enable compression for proxied request.
</p>




<p>
  Under gzip settings, add these proxy cache settings:
</p>


<p>{% codeblock nginx.conf lang:ruby %}</p>

<h1>#</h1>

<h1>Proxy Cache Settings</h1>

<h1>#</h1>

<p>proxy_cache_path /var/cache levels=1:2 keys_zone=reverse_cache:60m inactive=90m max_size=1000m;
{% endcodeblock %}</p>

<p>
  The important is:<br/>
  - The directory for the proxy cache is /var/cache.<br/>
  - levels : is a directive that tells Nginx how the cache is saved in file system.
<br/>
  - key_zone : is just a name of the cache zone, you can choose it freely, but don't add special chars or whitespace in the name. I will use the name "reverse_cache" here.
</p>




<p>
  And then save and exit.
</p>




<p>
  And then we will configure proxy params in <code>/etc/nginx/proxy_params</code> file for using in virtualhost later.
</p>


<p>{% codeblock lang:ruby %}
vim /etc/nginx/proxy_params
{% endcodeblock %}</p>

<p>
  Paste the configuration below:
</p>


<p>{% codeblock proxy_params lang:ruby %}
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header Host $http_host;
proxy_set_header X-Forwarded-Proto $scheme;
proxy_set_header X-Forwarded-Host $host;</p>

<h1>#</h1>

<h1>Cache configuration</h1>

<h1>#</h1>

<p>proxy_cache reverse_cache;
proxy_cache_valid 3s;
proxy_no_cache $cookie_PHPSESSID;
proxy_cache_bypass $cookie_PHPSESSID;
proxy_cache_key &ldquo;$scheme$host$request_uri&rdquo;;
add_header X-Cache $upstream_cache_status;
{% endcodeblock %}</p>

<p>
  And then save and exit.
</p>




<p>
  Now we will configure a virtualhost in the directory <code>/etc/nginx/sites-available</code>.  And I will create a new virtualhost configuration file named <code>reverse.conf</code>. Just got to the directory and create new file with vim:
</p>


<p>{% codeblock lang:ruby %}
vim /etc/nginx/sites-available/reverse.conf
{% endcodeblock %}</p>

<p>
  Paste the configuration below:
</p>


<p>{% codeblock reverse.conf lang:ruby %}
server {
  listen 80;</p>

<p>  # Site Directory same in the apache virtualhost configuration
  root /var/www/html/geekhmer_dev;
  index index.php index.html index.htm;</p>

<p>  # Domain
  server_name www.reverse.com reverse.com;</p>

<p>  location / {</p>

<pre><code>try_files $uri @proxy;
</code></pre>

<p>  }</p>

<p>  location @proxy {</p>

<pre><code>proxy_pass http://127.0.0.1:7070;
include /etc/nginx/proxy_params;
</code></pre>

<p>  }</p>

<p>  location ~* .php$ {</p>

<pre><code>proxy_pass http://127.0.0.1:7070;
include /etc/nginx/proxy_params;
</code></pre>

<p>  }</p>

<p>  # Enable Cache the file 30 days
  location ~* .(jpg|png|gif|jpeg|css|mp3|wav|swf|mov|doc|pdf|xls|ppt|docx|pptx|xlsx|css|js)$ {</p>

<pre><code>proxy_cache_valid 200 120m;
# expires max;
expires 30d;
proxy_cache reverse_cache;
access_log off;
</code></pre>

<p>  }</p>

<p>  # Disable Cache for the file type html, json
  location ~* .(?:manifest|appcache|html?|xml|json)$ {</p>

<pre><code>expires -1;
</code></pre>

<p>  }</p>

<p>  location ~ /.ht {</p>

<pre><code>deny all;
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  And then save and exit.
</p>




<p>
  And then activate the new virtualhost configuration:
</p>


<p>{% codeblock lang:ruby %}
ln -s /etc/nginx/sites-available/reverse.conf /etc/nginx/sites-enabled/
{% endcodeblock %}</p>

<p>
  And then we will test the nginx configuration and restart nginx:
</p>


<p>{% codeblock lang:ruby %}
nginx -t</p>

<p>systemctl restart nginx
{% endcodeblock %}</p>

<p>
  Nginx is configured as reverse proxy now. You can test it with curl:
</p>


<p>{% codeblock lang:ruby %}
curl -I www.reverse.com</p>

<p>curl -I www.reverse.com/info.php
{% endcodeblock %}</p>

<p>
  <h3>Configure Logging</h3>
</p>




<p>
  I will configure apache to log the real ip of the visitor instead of the local IP.
</p>




<p>
  Let go to install the apache module <code>libapache2-mod-rpaf</code> and edit the module configuration file:
</p>


<p>{% codeblock lang:ruby %}
apt-get install libapache2-mod-rpaf</p>

<p>vim /etc/apache2/mods-available/rpaf.conf
{% endcodeblock %}</p>

<p>
  Add the server IP to the line 10. My server IP is: 192.168.1.117.
</p>


<p>{% codeblock rpaf.conf lang:ruby %}
RPAFproxy_ips 127.0.0.1 192.168.1.117 ::1
{% endcodeblock %}</p>

<p>
  And then save and exit.
</p>




<p>
  And then restart apache:
</p>


<p>{% codeblock lang:ruby %}
systemctl restart apache2
{% endcodeblock %}</p>

<p>
  Test rpaf by viewing the apache access log with the tail command:
</p>


<p>{% codeblock lang:ruby %}
tail -f /var/log/apache2/geekhmer-dev_access.log
{% endcodeblock %}</p>

<p>
  Nginx is installed as reverse proxy in front of the Apache web server. If a visitor requests a php file, the request will be passed to apache on port 7070, and you can see the real IP visitor on the apache log file.
</p>




<p>
  <h3>Conclusion</h3>
</p>




<p>
  Nginx is fast and popular web server with low memory usage that can act as web server and reverse proxy for HTTP and HTTPS protocol. Nginx reverse proxy for apache is a setup that uses Nginx as front-end, and apache as back-end. Nginx handles the incoming request from the browser and passes it to the apache back-end. In this article, we have setup a configuration for nginx as http cache that caches PHP file requests and images.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Is Website Maintenance Important?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/27/why-is-website-maintenance-important/"/>
    <updated>2017-03-27T00:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/27/why-is-website-maintenance-important</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/website_maintenance_important.png" width="600" alt="Why Is Website Maintenance Important?" />
</p>




<p>
  I saw it many times a company has a website delivered, with no changes, no additions, no fresh content and most important of all is no security updates. The website stays as it was delivered, sometimes for many years.
</p>




<p>
  You truly ask yourself: "If I like the design and the website just works, why would I need to be maintained?". Please go through with me and read on to learn why maintenance is very important:
</p>




<p>
  <strong>SECURITY</strong><br/>
  Probably the most important thing is: keep your site safe! Website software (Content Management Systems, plug-ins and other add-ons to the websiteâ€™s functionality) are constantly updated. Partly to improve how it works or to add something new and handy, but often also to patch security holes.
</p>




<p>
  Hackers are constantly looking for outdated websites or software (and known security holes). If you donâ€™t keep up with the latest version of the software, your website could be at risk.
</p>




<p>
  <strong>ATTRACTIVENESS</strong><br/>
  A website that is regularly updated with fresh content (blog posts, news articles, promotions, new products, etc.) attracts more visitors. And isnâ€™t that what you want to achieve with your website: attracting visitors? Visitors get a bad impression if there is old data on your website.
</p>




<p>
  Regularly create the new content, text, or images that relate to your business to attract both new and returning visits.
</p>




<p>
  <strong>GOOGLE RANKING</strong><br/>
  Google loves websites that are regularly updated. Keeping your products and services up-to-date shows search engines that your site is fresh. A site with copyright on the bottom and the "Latest News" article years out of date will not be as attractive to Google in terms of quality or usefulness. When new content is added on a regular basis, Google values this and takes that into account with the overall ranking of your website.
</p>




<p>
  Google itself provides a useful tool called "Webmaster Tools" which essentially checks the 'health' of your website.
</p>




<p>
  <strong>YOUR CORPORATE IMAGE</strong><br/>
  Your website is an interface into your business and it can have a big impact on how visitors value your products or services. Your website should be kept relevant by regularly refreshing content. Also regularly check that contact forms work, addresses and phone numbers are updated and products, services and price lists are current and correct. This means visitors find what they are looking for quickly and easily, and are more likely to become customers.
</p>




<p>
  <strong>Can you do maintenance yourself?</strong><br/>
  Of course you can. The websites with Content Management Systems (like WordPress) that make it very easy to add or update content yourself. However, ask yourself: will you really do that? Will you really dedicate time every week or month to update your websiteâ€™s content? And maintain those regular updates year after year? Or do you rather concentrate on your business instead of maintaining your website?
</p>




<p>
  Additionally there is one thing that's not easy for non-technical people to do software updates. An update to your websiteâ€™s software can easily break your website. Because (part of) a software is not compatible with another application.
</p>




<p>
  So far so good, let technical people do website maintenance for your business to professionals.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online Payment Gateway in Cambodia]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/24/online-payment-gateway-in-cambodia/"/>
    <updated>2017-03-24T17:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/24/online-payment-gateway-in-cambodia</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/payment_gateway.png" width="600" alt="Online Payment Gateway in Cambodia" />
</p>




<p>
  The amount of shops in Cambodia wanna sell product and service online is growing. But you truly don't know which Online Payment Gateway you consider to choose for implement and do integration right? 
</p>




<p>
  The good news is here, take it easy I will do a presentaion for you, let go through with me:
</p>




<p>
  <strong>PayPal</strong><br/>
  <a href="https://www.paypal.com" target="_blank">PayPal</a> is by far the easiest method to receive online payments made by credit card or via PayPal itself. However, the company has <a href="https://www.paypal.com/kh/cgi-bin/webscr?cmd=_display-xborder-fees-outside&countries=" target="_blank">no relations with any bank in Cambodia.</a>
</p>




<p>
  So it's not possible right? Well, the only possibility is to have a bank account in another country linked to your PayPal account.
</p>




<p>
  <strong>Cathay United Bank</strong><br/>
  <a href="http://www.cathaybk.com.kh/index.php?view=bzspgwy" target="_blank">Cathay United Bank (formerly SBC Bank)</a> in Cambodia offers an online payment gateway, which is rather easy to implement.
</p>




<p>
  Of course, you need an account with the bank and Cathay United charges a percentage fee for this service. It only can handle credit cards of MasterCard, JCB and VISA, which is a bit limited.
</p>




<p>
  <strong>ACLEDA Bank</strong><br/>
  As a well respected bank, ACLEDA is a bit late to the party, only announcing recently their <a href="http://www.acledabank.com.kh/kh/eng/ps_ebecommerce_migs" target="_blank">E-Commerce Payment Gateway</a>.
</p>




<p>
  ACLEDA uses the same MasterCard Internet Gateway Service (MiGS) as Cathay United Bank, so this is just as easy to set up on your website.
</p>




<p>
  <strong>WING</strong><br/>
  WING is primarily a phone-to-phone payment service and very popular among Cambodians. They can send and receive money nationwide, the company has a large network of agents and also offers a solution for <a href="https://www.wingmoney.com/online-payment/" target="_blank">online payments</a>. The only thing you have to do is open a free business account. Once thatâ€™s done youâ€™ll get instructions on how to implement it on your website to receive online payments in your Wing account. This service is only available for customers within Cambodia.
</p>




<p>
  <strong>PayGo</strong><br/>
  <a href="https://www.paygo24.com/" target="_blank">PayGo</a> is a service provided by ABA Bank. To use the service, customers first have to sign up using a mobile phone number. This only works for Cambodian phone numbers, so not suitable for international customers. Although it is convenient for customers in Cambodia, we have some doubts about the security of this system. Only using a phone number as a check seems not very secure.
</p>




<p>
  My suggestion for you is that:<br/>
</p>




<p>
  Due PayPal not yet entered in Cambodian market, the services offered by Cathay United Bank and ACLEDA Bank seem the most robust, secure and comparatively easy to implement.
</p>




<p>
  And if you only or primarily target customers within Cambodia, WING and PayGo can be an alternative.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
