<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2016-01-29T17:03:50+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Make Project Success on GitHub?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/01/29/how-to-make-project-success-on-github/"/>
    <updated>2016-01-29T16:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/01/29/how-to-make-project-success-on-github</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/how_to_make_project_success_on_github.png" width="400" alt="How to Make Project Success on GitHub?" />
</p>




<p>
  Community-driven software development is becoming the new path to brand and project success. You would be advised to pay attention to this surging trend: With more than 27 million projects currently on <a href="https://github.com/" blank="_target">GitHub</a>, the ever-increasing popularity of community-driven development is evident.
</p>




<p>
  I've come up with five concrete ways you too make your project successful on GitHub. It's all about engaging the community.
</p>




<p>
  <strong>1. Prioritize Your Community</strong><br/>
  Open source is more than a license and software development model; it's also largely about the people. Encourage both users and maintainers to collaborate to promote a surge in new ideas. You'll find that most prominent projects incorporate a community of contributors with a mailing list, GitHub project.
</p>




<p>
  <strong>2. Welcome New Contributors</strong><br/>
  Contributors often feel intimidated and self-conscious when starting a new project. Help them break out of their shell by offering a set of contribution guidelines and using an issue tracker to highlight troubleshooting that can be easily handled by new contributors. Laying out the proper groundwork is vital to the success of your project.
</p>




<p>
  <strong>3. Appreciate Contributors' Work</strong><br/>
  All those who contribute are co-creators and have ownership over their work on each project. we recognize each contributor's input in a variety of ways. Easy things to do that go a long way are shout-outs, a kind note, or sending some swag, like a T-shirt.
</p>




<p>
  <strong>4. Use Art to Visualize Your Ideas</strong><br/>
  Art has a powerful capability to communicate ideas, just like software. Take advantage of graphic design to brand your projects. Consider creating a friendly mascot (like the GitHub Octocat) to help distinguish your project for your community. In addition, use art to illustrate and teach complex ideas and instructions. By incorporating art into your project, you may also encourage artistic contributions from your new contributors.
</p>




<p>
  <strong>5. Implement Documentation to Prevent Problems</strong><br/>
  Fastidious recording of your project process can avert potential issues and confusion. Good documentation includes a FAQ section, a set of instructions for common patterns, and a set of examples. You can even make your documentation open source by asking for contributions from those working on your projects.
</p>




<p>
  So far so good, Accelerate engaging a community of volunteer software developers by making them feel welcome, giving them clear tasks, and establishing tangible ways for them to be completed. Most importantly, thank contributors when they help you. Your project will flourish because of it. See ya!!!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SaaS Cloud Computing]]></title>
    <link href="http://geekhmer.github.io/blog/2016/01/21/saas-cloud-computing/"/>
    <updated>2016-01-21T10:09:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/01/21/saas-cloud-computing</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/saas_service.png" width="600" alt="SaaS Cloud Computing" />
</p>




<p>
  SaaS (Software as a Service) describes any cloud service where consumers are able to access software applications over the internet. The applications are hosted in "the cloud" and can be used for a wide range of tasks for both individuals and organisations. Google, Twitter, Facebook and Flickr are all examples of SaaS, with users able to access the services via any internet enabled device. Enterprise users are able to use applications for a range of needs, including accounting and invoicing, tracking sales, planning, performance monitoring and communications (including webmail and instant messaging).
</p>




<p>
  SaaS is often referred to as software-on-demand and it is akin to renting software rather than buying it. With traditional software applications you would purchase the software upfront as a package and then install it onto your computer. The software's licence may also limit the number of users and/or devices where the software can be deployed. Software as a Service users, however, subscribe to the software rather than purchase it, usually on a monthly basis. Applications are purchased and used online with files saved in the cloud rather than on individual computers.
</p>




<p>
  There are a number of reasons why SaaS is beneficial to organisations and personal users alike:
</p>




<p>
  <strong>No additional hardware costs</strong><br/>
  The processing power required to run the applications is supplied by the cloud provider.
</p>




<p>
  <strong>No initial setup costs</strong><br/>
  Applications are ready to use once the user subscribes.
</p>




<p>
  <strong>Pay for what you use</strong><br/>
  If a piece of software is only needed for a limited period then it is only paid for over that period and subscriptions can usually be halted at any time.
</p>




<p>
  <strong>Usage is scalable</strong><br/>
  If a user decides they need more storage or additional services, for example, then they can access these on demand without needing to install new software or hardware.
</p>




<p>
  <strong>Updates are automated</strong><br/>
  Whenever there is an update it is available online to existing customers, often free of charge. No new software will be required as it often is with other types of applications and the updates will usually be deployed automatically by the cloud provider.
</p>




<p>
  <strong>Cross device compatibility</strong><br/>
  SaaS applications can be accessed via any internet enabled device, which makes it ideal for those who use a number of different devices, such as internet enabled phones and tablets, and those who donâ€™t always use the same computer.
</p>




<p>
  <strong>Accessible from any location</strong><br/>
  Rather than being restricted to installations on individual computers, an application can be accessed from anywhere with an internet enabled device.
</p>




<p>
  <strong>Applications can be customised and whitelabelled</strong><br/>
  With some software, customisation is available meaning it can be altered to suit the needs and branding of a particular customer.
</p>




<p>
  Office software is the best example of businesses utilising SaaS. Tasks related to accounting, invoicing, sales and planning can all be performed through Software as a Service. Businesses may wish to use one piece of software that performs all of these tasks or several that each perform different tasks. The required software can be subscribed to via the internet and then accessed online via any computer in the office using a username and password. If needs change they can easily switch to software that better meets their requirements. Everyone who needs access to a particular piece of software can be set up as a user, whether it is one or two people or every employee in a corporation that employs hundreds.
</p>




<p>
  <strong>Why SaaS?</strong><br/>
  - There are no setup costs with SaaS, as there often are with other applications.<br/>
  - SaaS is scalable with upgrades available on demand.<br/>
  - Access to Software as a Service is compatible across all internet enabled devices.<br/> 
  - As long as there is an internet connection, applications are accessible from any location.
</p>




<p>
  <strong>SaaS Market</strong>
</p>




<p>
  <img src="http://geekhmer.github.io/images/saas_market_keeps_growing.jpg" width="600" alt="SaaS Cloud Computing" />
</p>




<p>
  So far so good, GeeKhmer SaaS Solutions is an expert in SaaS Development if you have many projects or questions pls contact us via <a href="mailto:bunlong.van@gmail.com" target="_top">bunlong.van@gmail.com</a>. see ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction about Load Balancing - Failover and Shared Storage]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/10/introduction-about-load-balancing-failover-and-shared-storage/"/>
    <updated>2015-07-10T01:07:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/10/introduction-about-load-balancing-failover-and-shared-storage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/load_balancing_failover_shared_storage.jpg" width="500" alt="Introduction about Load Balancing - Failover and Shared Storage" />
</p>




<p>
  <strong>What is Load Balancing?</strong><br/>
  Load balancing lets you spread load over multiple servers. You would want to do this if you were maxing out your CPU or disk IO or network capacity on a particular server.
</p>




<p>
  Alternatives to load balancing include 'scaling' vertically. e.g. getting faster or better hardware such as quicker disks, a faster CPU or a fatter network pipe.
</p>




<p>
  <strong>Implementing Load Balancing</strong><br/>
  One simple way to implement load balancing is to split services between servers. e.g. running the web server on one server and the database server on another. This way is easy since there are no data replication issues.  e.g. all necessary files are on the web servers, all necessary database data is on the database server.
</p>




<p>
  Another common load balancing option is to have multiple front end servers.  To distribute requests to multiple servers you could setup multiple IP addresses for a particular domain.  Then clients should get all these addresses and to a random one.  Spreading the load around.
</p>




<p>
  Another way to distribute requests is to have a single virtual IP (VIP) that all clients use.  And for the computer on that 'virtual' IP to forward the request to the real servers. eg with haproxy.
</p>




<p>
  People can also implement load balancing via http balancers like mod_proxy_balancer in NGINX or Apache 2.2.
</p>




<p>
  <strong>What is Failover?</strong><br/>
  The goal of failover is to allow work that would normally be done by one server to be done by another server should the regular one fail.
</p>




<p>
  For example, Server A responds to all requests unless it has a hardware failure, or someone trips over its network cable, or the data center it is located in burns to the ground.  And if Server A cannot respond to requests, then Server B can take over.
</p>




<p>
  Or if you simply need a service to be highly available, failover allows you to perform maintenance on individual servers (nodes) without taking your service off-line.
</p>




<p>
  For failover server B would ideally be in a separate data center, or if that wasn't possible you would at least want to try and put it on a separate switch than Server A and on a separate power outlet as well. Basically the more physical separation the better.
</p>




<p>
  For failover server B would ideally be in a separate data center, or if that wasn't possible you would at least want to try and put it on a separate switch than Server A and on a separate power outlet as well. Basically the more physical separation the better.
</p>




<p>
  <strong>Implementing Failover</strong><br/>
  To implement failover you typically need to have your data replicated across multiple machines.  You could do this via rsync+cron for files/directories.  And via something like MySQL replication for databases.
</p>




<p>
  One way to trigger the failover is to change the IP address your domain points to.  IP address changes can happen within a few minutes of a DNS server update.  Though if a client PC is caching an IP then it may take a bit longer for that to notice the change.
</p>




<p>
  <strong>What about Shared Storage?</strong><br/>
  In an ideal world you would have a file system that any server could read/write to and where that filesystem was located on disks spread across multiple servers and where any of those servers or disks could fail and that would not affect the file system's availability.
</p>




<p>
  In the real world to do this you need a clustered file system.  That is a file system that knows it needs to co-ordinate any disk access between other servers in the cluster.  To do that you need to have monitoring software (to check when a device goes down) as well as locking software (e.g. DLMs) that ensure that no two servers are writing to the same place, or that one server is not reading something that another server is in the middle of writing.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Helpful Google Search Operators to Search Faster]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/09/use-helpful-google-search-operators-to-search-faster/"/>
    <updated>2015-07-09T00:25:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/09/use-helpful-google-search-operators-to-search-faster</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/google_search _operators.jpg" width="430" alt="Use Helpful Google Search Operators to Search Faster" />
</p>




<p>
  Google is working hard to improve search, and itâ€™s doing such a great job that the general public doesnâ€™t seem to be noticing. Google search operators help us to search faster, and you can use search operators and other punctuation to get more specific search results. Today we cover some of the basic search operators:
</p>




<p>
  <strong>site:</strong><br/>
  Include "site:"" to search for information within a single website, this one in particular can be a godsend when trying to match styles, specific spellings or usages to a client with a website full of already published works.<br/>
  Example: <code>site:nbc.com</code>
</p>




<p>
  <strong>define:</strong><br/>
  Include a word or phrase immediately after the operator "define:"" to find the definition of said word or phrase, just like a dictionary.<br/>
  Example: <code>define:food</code>
</p>




<p>
  <strong>related:</strong><br/>
  Type a URL after "related:"" to be presented with a list of pages that Google considers to be related to the one you've entered.<br/>
  Example: <code>related:geekhmer.github.io</code>
</p>




<p>
  <strong>OR</strong><br/>
  If you want to search for pages that may have just one of several words, include OR (must be capitalized) between the words. Without the OR, your results would typically show only pages that match both terms.<br/>
  Example: <code>olympics location 2014 OR 2018</code>
</p>




<p>
  <strong>info:</strong><br/>
  Type a URL after "info:" to be presented with a short description of the site and a list links to other information related to the site in question.<br/>
  Example: <code>info:geekhmer.github.io</code>
</p>




<p>
  <strong>"" (double quotes)</strong><br/>
  Use double quotes to search for an exact word or set of words in a specific order, without normal improvements such as spelling corrections and synonyms. Extremely useful for searching for proper nouns, expressions and examples of usage, etc.<br/>
  Example: <code>"read a book written over 100 years ago"</code>
</p>




<p>
  <strong>* (asterisk)</strong><br/>
  Use an asterisk (*) within a query as a placeholder for any unknown or "wildcard" terms.<br/>
  Example: <code>Food * Translators</code>
</p>




<p>
  <strong>â€“ (minus sign)</strong><br/>
  Add a dash (-) before a word to exclude all results that include that word. This is especially useful for synonyms like mountain lion the large cat species and mountain lion the Apple OS.<br/>
  Example: <code>mountain lion -apple</code>
</p>




<p>
  <strong>~ (tilde)</strong><br/>
  Normally, synonyms might replace some words in your original query. Add a tilde sign (~) immediately in front of a word to search for that word as well as even more synonyms.<br/>
  Example: <code>~food facts</code>
</p>




<p>
  <strong>filetype:</strong><br/>
  Include "filetype:" to search for files of a specific type, such as PDFs.<br/>
  Example: <code>filetype:pdf chicago manual of style facsimile</code>
</p>




<p>
  <strong>.. (two periods)</strong><br/>
  Separate numbers by two periods (with no spaces) to see results that contain numbers in a given range of things like dates, prices, and measurements.<br/>
  Example: <code>paralympic gold medalists 1996..2012</code>
</p>




<p>
  <strong>allintitle:</strong><br/>
  Use "allintitle" to restrict a search so that all of the keywords must appear in the page title.<br/>
  Example: <code>allintitle: books for translators</code>
</p>




<p>
  <strong>allintext:</strong><br/>
  Use "allintitle" to restrict a search so that all of the keywords must appear within the body of the text on the page, rather than in any of the titles, etc.<br/>
  Example: <code>allintext: signs and symptoms of translators dementia</code>
</p>




<p>
  <strong>time:</strong><br/>
  Promised a client that youâ€™ll have a finished piece of work with them before 3pm? Is that 3pm in their country or yours? What time is it in their country now? Or what time is it in your country for that matter? 4am? â€¦isnâ€™t it about time you went to bed?<br/>
  Example: <code>time:Phnom Penh</code>
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Reasons You Should Design and Code]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/04/10-reasons-you-should-design-and-code/"/>
    <updated>2015-07-04T00:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/04/10-reasons-you-should-design-and-code</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/design_and_code.jpg" width="430" alt="10 Reasons You Should Design and Code" />
</p>




<p>
  <strong>1. Higher Pay</strong><br/>
  By knowing how to design and code, youâ€™ll be worth more to companies. Especially startups! By not only knowing how to design a beautiful UI element, but also implement what you design, youâ€™ll be able work faster and create better work. All of which makes you more valuable and able to demand a higher salary.
</p>




<p>
  <strong>2. More Opportunities</strong><br/>
  Not only will you make more money, but you wonâ€™t have a problem getting a job. Your skill set is so rare that everyone will be trying to snatch you up! Startups especially, because they have smaller teams and less resources, a employee who is able to do more than one thing (design and code) is almost a must. Everyone will be fighting over you!
</p>




<p>
  <strong>3. Start Your Own Company</strong><br/>
  One of the reasons these designer/developer combos (Unicorns) are so rare is because theyâ€™re usually busy starting their own companies. When you have the knowledge to not only develop a application, but also make it beautiful, you have everything (almost) you need to launch any idea you have!
</p>




<p>
  <strong>4. Freedom</strong><br/>
  There is an incredible freedom that comes from not having to rely on someone else to take care of a part of your project. You can allow someone else to do the design, or the development, but by being able to design & code you have the ability to do it yourself. Freedom!
</p>




<p>
  <strong>5. Build from Start to Finish</strong><br/>
  By knowing how to do both the design and the development of a project, you have the ability to take an idea from concept to completion all by yourself. This also gives you greater control over the outcome of the project because you make every decision. This brings me to my next point:
</p>




<p>
  <strong>6. Experimentation</strong><br/>
  Since you can build both sides of any given project, you wonâ€™t need to hire someone else to do either the design or the development. This means it wonâ€™t cost you thousands of dollars, or a percentage of your project or company ownership, just to validate the idea. Putting a project out and seeing if it gains any traction costs nothing more than your timeâ€¦ Which of course means you can put out more work! Itâ€™s experimentation without the risk.
</p>




<p>
  <strong>7. Work More Efficiently</strong><br/>
  Design & code go hand in hand. Theyâ€™re so tightly integrated that itâ€™s important to know what is possible on both sides. By knowing how to design & how to code you can make smart decision about one side that would later effect the other.
</p>




<p>
  <strong>8. Higher Quality of Work</strong><br/>
  There are so many decisions that are made between the initial concept and launch. Itâ€™s very easy for things to get lost in the communication between the designer and the developer. By knowing how to design and code you can make smart decisions for both sides as you work, leading to a higher quality end product.
</p>




<p>
  <strong>9. Work Better on a Team</strong><br/>
  As I mentioned in the previous point, youâ€™ll know what both sides need. This means when you are working with another designer or another developer, you can avoid making decisions that will negatively affect the other side. For example, a designer creating a UI element that he/she thinks (wrongly assuming) will be simple to implement, but not fully understanding the effort it will take to create it. (I did this when I was only a designerâ€¦ I designed something assuming it wouldnâ€™t be too much work only to find out from he developer it was very complicated. All of which could have been avoided if I understood what it took to do the development).
</p>




<p>
  <strong>10. Make a Better Leader</strong><br/>
  So not only will you make a great team member, but youâ€™ll also make a great team leader. Youâ€™ll have the understanding and empathy you need because you know what is required to do this work. You know if a project timeline could happen quicker, but you also know if the deadline is unrealistic because youâ€™ve been there.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
