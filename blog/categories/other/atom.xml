<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-01-19T22:02:26+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips to Improve the Performance of Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/01/tips-to-improve-the-performance-of-ruby-on-rails-application/"/>
    <updated>2014-12-01T22:06:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/01/tips-to-improve-the-performance-of-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" alt="Tips to Improve the Performance of Ruby on Rails Application" />
</p>




<p>
   In this article, I will show you tips to improve performance of Ruby on Rails application. let’s dive into those.
</p>




<p>
  <strong>1. Limit Amount of Data in a Controller Method</strong><br/>
  Thin controllers are easy to test and has a good performance profile because there’s some overhead involved in passing the controller instance variable around. In short, you need to follow "Thin controller and fat model".
</p>




<p>
  <strong>2. Split View in Separate Partials</strong><br/>
  n this way, views will be easier to read and easier to cache.
</p>




<p>
  <strong>3. Choose Right Session Storage</strong><br/>
  Based on your level of need, choose your session storage carefully. Here are what rails provide:<br/>
  - CookieStore – Stores everything on the client.<br/>
  - DRbStore – Stores the data on a DRb server.<br/>
  - MemCacheStore – Stores the data in a memcache.<br/>
  - ActiveRecordStore – Stores the data in a database using Active Record.
</p>




<p>
  <strong>4. DRY (Don't Repeat Yourself)</strong><br/>
  This is the most common things programmers tend to listen and don’t follow. Here is very basic example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Bambo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It should be written by:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">listing</span> <span class="o">=</span> <span class="no">Listing</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">listing</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Bambp</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">then</span> <span class="n">listing</span> <span class="k">else</span> <span class="kp">nil</span> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>4. Eager Loading</strong><br/>
  Eager loading is a way to solve the classic N + 1 query performance problem caused by inefficient use of child objects.
</p>




<p>
  Let’s look at the following code. It will fetch zip of 10 users.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">(</span><span class="ss">:limit</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;users.each do |user|</span>
</span><span class='line'><span class="sr">  puts user.address.zip</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  11 queries will be executed, 1 for the top and 10. The solution is to rewrite it to eager load address:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:address</span><span class="p">)</span><span class="o">.</span><span class="n">limit</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;users.each do |user|</span>
</span><span class='line'><span class="sr">  puts user.address.zip</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>5. Indexing</strong><br/>
  Database indexing is one of the simplest ways to improve database performance. The insert operation will become slower but will boost up fetching data which is more frequently used in web application.
</p>




<p>
  <strong>6. Avoid Dynamism</strong><br/>
  Although find_by and find_all_by dynamic methods are really cool, the are also kind of slow because each one needs to run through method_missing and parse the filename against the list of columns in database table.
</p>




<p>
  <strong>7. Caching</strong><br/>
  This is the purest way to speed up a rails application. Here are a short example of different types of caching:<br/>
  - Page Caching<br/>
  - Action Caching<br/>
  - Fragment Caching<br/>
  - SQL Caching<br/>
  - Asset Caching<br/>
</p>




<p>
  <strong>8. Image Spriting</strong><br/>
  In websites, a significant times are consumed for loading large number of images. One way of minimizing is to sprite your images. This will reduce number of images to be served significantly.
</p>




<p>
  <strong>9. Minify and GZIP Stylesheets and Javascripts</strong><br/>
  This is the last point, but an important one. You can reduce size of the stylesheets and javascripts significantly by Minifying it and serve as GZip format. It will improve the performance significantly by reducing request/response time.
</p>




<p>
  So far so good, these are pretty basic guidelines but surely help you to improve your application. Now, the bounce rate of your site should be less and you are expected to be a happier product owner. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tools for Monitoring Performance in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/29/tools-for-monitoring-performance-in-ruby-on-rails-application/"/>
    <updated>2014-11-29T22:31:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/29/tools-for-monitoring-performance-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Tools for Monitoring Performance in Ruby on Rails Application" />
</p>




<p>
  Here are some tips for you to monitor performance in a Ruby on Rails application. Some tools and tips are equally applicable for other web applications:
</p>




<p>
  <strong>1. Rails Logger</strong><br/>
  The simplest way to get information about performance is to analyze rails log. It will provide you information of the time spent processing each request, broken down into rendering and SQL time. You can also find whether a particular part are cached or the occurrence of cache expiry.
</p>




<p>
  <strong>2. Rails Performance Test - Profiling</strong><br/>
  Profiling helps you to see the details of a performance test and provide an in-depth picture of the slow and memory hungry parts. Each test case is run 1 time in profiling mode.
</p>




<p>
  <strong>3. Rails Performance Test - Benchmarking</strong><br/>
  Through Rails performance test, source of application’s memory or speed bottleneck and can be found. Benchmarking helps find out how fast each performance test runs. Each test case is run 4 times in benchmarking mode.
</p>




<p>
  <strong>4. <a href="https://github.com/wvanbergen/request-log-analyzer" target="_blank">Rails Analyzer</a></strong><br/>
  The Rails Analyzer project contains a collection of tools (The Production Log Analyzer, The Action Profiler, Rails Analyzer Tools, The SQL Dependency Grapher) for Rails that let you discover biggest slow spots in your applications allowing you to best focus optimization efforts.
</p>




<p>
  <strong>5. <a href="https://github.com/josevalim/rails-footnotes" target="_blank">Rails Footnote</a></strong><br/>
  It is a rails plugin which displays footnotes in your application for easy debugging, such as sessions, request parameters, cookies, filter chain, routes, queries, etc. Even more, it contains links to open files directly in your editor including your backtrace lines.
</p>




<p>
  <strong>6. <a href="https://github.com/nesquena/query_reviewer" target="_blank">Query Reviewer</a></strong><br/>
  Query Reviewer is an advanced SQL query analyzer. It generates a page with explanation output of all SELECT queries, rate a page’s SQL usage, display interactive summary on page.
</p>




<p>
  <strong>7. <a href="https://github.com/sdsykes/slim_scrooge" target="_blank">Slim Scrooge</a></strong></strong><br/>
  SlimScrooge is an optimization layer to ensure your application only fetches the database content needed to minimize wire traffic, excessive SQL queries and reduce conversion overheads to native Ruby types.<br/>
  SlimScrooge implements inline query optimization, automatically restricting the columns fetched based on what was used during previous passes through the same part of your code.
</p>




<p>
  <strong>8. <a href="http://newrelic.com" target="_blank">New Relic</a></strong><br/>
  New Relic is the all-in-one web application performance tool that lets you see performance from the end user experience down to the line of application code. It will also list the errors if such occurrence occur.
</p>




<p>
  <strong>9. <a href="https://github.com/brynary/rack-bug" target="_blank">Rack-Bug</a></strong><br/>
  It is a debugging toolbar for Rack applications implemented as middleware.
</p>




<p>
  <strong>10. <a href="https://github.com/mperham/sidekiq" target="_blank">Sidekiq</a></strong><br/>
  Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with Rails 3/4 to make background processing dead simple.
</p>




<p>
  <strong>11. <a href="http://getfirebug.com" target="_blank">Firebug</a></strong><br/>
  Firebug is a firefox plugin and a very powerful tool. Apart from many outstanding features, it helps to monitor network performance. You can see the load time of each files (when they started to load and when they are completed), filter it by type (e.g. javascript or CSS) and examining http headers.
</p>




<p>
  So far so good, you can suggest more. These are a mere introduction. You can try those out and examine the health of your application. I have a plan to write another one with tips regarding enhancing performance based on the generated health report of a web application. Stay tuned for that!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Company]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/27/ruby-on-rails-company/"/>
    <updated>2014-11-27T20:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/27/ruby-on-rails-company</id>
    <content type="html"><![CDATA[<p>
  This article is about what makes a Ruby on Rails company stand out in the market. I am going to talk about what clients look for when they hire a Ruby on Rails company.
</p>




<p>
  <strong>Experience and Expertise</strong><br/>
  When hiring a Ruby on Rails company, clients generally look for expert engineers. In most job circulars you will see that they are asking for 2 to 5 or more years of expertise. There is a reason why clients prefer expertise. The biggest market for Ruby on Rails lies in startups. Startups need to do more with less. Ruby on Rails help them to quickly build software with limited budget. However, the nature of this framework is such that it takes time to master.
</p>




<p>
  <strong>Communication</strong><br/>
  Communication is extremely important for a Ruby on Rails company. It applies to both onsite and offsite developers. As a developer, if you cannot convey your message properly, no matter how expert you are, you will not impress the client. Communication is vital from the very first meeting to post delivery service.
</p>




<p>
  <strong>Development Method and Project Management Style</strong><br/>
  This is mostly applicable for remote developers. Clients want to know if the Ruby on Rails company follow any specific development method. They are also interested in the team’s project management style. You will often find clients asking about Agile, TDD etc.
</p>




<p>
  Let me share the diagram that shows how we develop software.
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/ruby_on_rails_company.jpg"><img src="http://geekhmer.github.io/images/ruby_on_rails_company.jpg" width="700" alt="Ruby on Rails Company" /></a>
</p>




<p>
  So far so good, If you are setting up a Ruby on Rails development company, these are the areas you should be concerned about. If you excel in these areas, you will definitely get more clients. Ruby on Rails clients, despite their vastly different projects, have similar technical requirements.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[9 things to be a professional programmer]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer/"/>
    <updated>2014-10-16T14:23:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/professional_programmer.jpg" width="550" alt="Professional Programmer" />
</p>




<p>
  I've been reading a lot of code, design pattern, leading and project management book for last few years and I've noted many good points how to be a Professional Programmer. Let enjoy reading and become "Go-to guy" together.
</p>




<p>
  <strong>1. Knows the domain of their project</strong><br/>
  As a professional programmer, your job is more than just reading requirement specifications and code the software. You should also know where and how the project is being used by the its users in the real world.
</p>




<p>
  This means that if you are working on an accounting software, you should at least have some basic knowledge about accounting. It is not necessary to become an expert in the subject, but a little knowledge helps a big way when solving problems and coming up with solutions.
</p>




<p>
   <strong>2. Is a team player</strong><br/>
   As a professional programmer, you should of course be polite and helpful towards other people. When other people ask for help, you should treat them in the same manner as you wish someone would treat you, if you were stuck. You should always offer help and welcome help from others.
</p>




<p>
  Also, you should not build a wall around yourself or your code. It is important to remember that you don’t own the code, but rather the team does. So instead of dismissing anyone from working in, or even seeing, the code, it should be encouraged. This will help you grow as a programmer, since it opens up for feedback, but it also greatly benefits the group and the project itself.
</p>




<p>
  Over time, teams slowly grows better and better as well, resulting in team members will eventually know each others strengths and weaknesses. When this happens the team becomes very efficient on solving issues as a group. Since it takes time to build up a solid team, when a project ends, it is smarter to give the team a new project, rather than disbanding the whole group.
</p>




<p>
  <strong>3. Takes responsibility</strong><br/>
  As a professional programmer, you take responsibility for your code. It is your job to know what your code does and know that all of the code works. When coding you should always aim to cause no harm in your project, by always aiming to get the error rate as close to zero as possible.
</p>




<p>
  This is done by simple writing tests. Tested code gives you more confident about your work, knowing the fact that what deliver is at top class and checked against errors. The QA department should never find bugs. An entire project with tested code also gives the programmer more confident to actually do something about smelly code.
</p>




<p>
  Unit and acceptance tests should be done automatically (due to it is significantly cheaper than manually testing) by using a continuous integration system. These tests should be running all the time, every time a programmer commits code to the project. If a test breaks, it should be fixed as soon as possible.
</p>




<p>
  As a professional programmer is also strongly for Test Driven Development. The TDD discipline forces the programmer to think about good design and structuring up their code to make it test-friendly, it is actually unprofessional not to use TDD.
</p>




<p>
  <strong>4. Knows patterns and disciplines</strong><br/>
  As a professional programmer, it is your responsibility to write high-quality, tested, clean code. This includes knowing design patterns, principles, methods, disciplines and artifacts.
</p>




<p>
  Since the software development industry is changing constantly with new ideas and tools around the next corner, it is also equally important that you keep yourself up to date on new disciples and techniques.
</p>




<p>
  <strong>5. Remains calm during hectic situations</strong><br/>
  As a professional developer, you should always remain calm during hectic and stressful situations. Instead, try and think out the best solution to resolve your situation and the inform your superiors about the situation and ask for their feedback and suggestions.
</p>




<p>
  Acting on panic will most likely just result in making more errors. In emergencies, you could try and pair program with a colleague. Not only will this probably decrease the number of new errors, but pair programming is also a great source of sharing knowledge between team members.
</p>




<p>
  <strong>6. Keeps practicing profession</strong><br/>
  As a professional programmer, you should spend time caring for your profession. Just like in any other profession, practice gives performance, skill and experience.
</p>




<p>
  It is your own responsibility to keep training yourself by reading, practicing and learning - actually anything that helps you grow as a software developer and helps you get on board with the constant industry changes.
</p>




<p>
  An important note is this should be done on your own time, not on your employer's. It is not their responsibility to train you, but your own. However, do not mistake this with you should be doing your job during this time. This time should be dedicated for you and your own enjoyment only. You should do anything that interests you. If you work 40 hours a week ,you should spend around 20 additional hours enhancing your own profession.
</p>




<p>
  <strong>7. Rests</strong><br/>
  As a professional programmer, you should know that being a software developer is a very intellectual and exhausting job. It is important that you don’t overwork yourself, but rather find a balance in life with your job. Being a well rested developer makes you more focused and makes you perform better.
</p>




<p>
  <strong>8. Knows the value of time</strong><br/>
  As a professional programmer, you should know the value of time. Your time is expensive and should not be wasted, meaning you should use your time wisely and know things like the the high cost of meetings. Politely decline meetings that do not benefit you, or if your present doesn’t benefit anyone.
</p>




<p>
  Meetings should also have a clear agenda and a goal. If you notice that a meeting is getting boring and does not benefit you anymore, or if the agenda gets abandoned or if the meeting simple gets high-jacked, either request a new topic or politely leave the meeting. You probably have better things to do then remain seated.
</p>




<p>
  <strong>9. Is never afraid to say no</strong><br/>
  As a professional programmer should not be afraid to say no. If you know something is unrealistic (such as an estimation, a deadline, a requirement, etc) it is expected from you to speak up. Not most of the time - but all the time.
</p>




<p>
  You shouldn’t even say you can try, as that will give a false impression to everyone that the task is doable, and maybe even worse, it turns you into a liar which can hurt your reputation among your superiors and colleagues. Instead, try and rephrase yourself and explain your concerns. Be clear and specific about the problems and dates and times.
</p>




<p>
  The definition of an estimate is interpreted by different people. For business people, estimations are commitments. For software developers, estimations are guesses, measured in probability.
</p>




<p>
  You should only do commitments, when you are certain it can be done. When professional commits to something, the provide with a hard number and makes certain the job before the deadline.
</p>




<p>
  So far so good, the more you read the more you know the more you know the more places you'll go. See you!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EngineX/Nginx Installation and Basic Usage]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage/"/>
    <updated>2014-10-07T21:52:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_installation.png" width="500" alt="Nginx plus" />
</p>




<p>
  Nginx is available in most Linux distributions. In this article, I use Ubuntu 14.10.
</p>




<p>
  <strong>Installation</strong><br/>
  Open your terminal and run the following command as root user:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now Nginx is installed, you can use the startup script to start, stop or restart the Web server:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">stop</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Most configuration changes do not require to restart, in which case you can use the reload command. It is generally a good idea to test the Nginx configuration file for errors before reloading:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nginx</span> <span class="o">-</span><span class="n">t</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Let's go ahead and start the server:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Nginx now should be running on your machine. If you open http://127.0.0.1/ or http://localhost in your browser, you should see a page with “Welcome to nginx!”.
</p>




<p>
  <strong>Main Configuration File (/etc/nginx/nginx.conf)</strong><br/>
  Now Nginx is installed, let's take a look at its config file that located at /etc/nginx/nginx.conf. This file contains the server-wide settings for Nginx, and it should look similar to this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/nginx/nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="n">www</span><span class="o">-</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="n">worker_processes</span>  <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">error_log</span>  <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="n">pid</span>  <span class="sr">/var/</span><span class="n">run</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">pid</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;events {</span>
</span><span class='line'><span class="sr">  worker_connections  1024;</span>
</span><span class='line'><span class="sr">}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">http</span> <span class="p">{</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">mime</span><span class="o">.</span><span class="n">types</span><span class="p">;</span>
</span><span class='line'>  <span class="n">default_type</span> <span class="n">application</span><span class="o">/</span><span class="n">octet</span><span class="o">-</span><span class="n">stream</span><span class="p">;</span>
</span><span class='line'>  <span class="n">access_log</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">access</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sendfile</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">keepalive_timeout</span> <span class="mi">65</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp_nodelay</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/*</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We are not going to change any of these settings, but let's talk about some of them to help us understand how Nginx works:
</p>




<p>
  worker_processes setting tells Nginx how many child processes to start. If your server has more than one processor or is performing large amounts of disk IO, you might want to try increasing this number to see if you get better performance.
</p>




<p>
  worker_connections setting limits the number of concurrent connections per worker process. To determine the maximum number of concurrent requests, you simply multiply worker_processes by worker_connections.
</p>




<p>
  error_log and access_log settings indicate the default logging locations. You also can configure these settings on a per-site basis, as you will see later in the next article. Like Apache, Nginx is configured to run as the www-data user, but you easily can change this with the user setting. The startup script for Nginx needs to know the process ID for the master process, which is stored in /var/run/nginx.pid, as indicated by the pid setting.
</p>




<p>
  sendfile setting allows Nginx to use a special Linux system call to send a file over the network in a very efficient manner. The gzip option instructs Nginx to compress each response, which uses more CPU but saves bandwidth and decreases response time. Additionally, Nginx provides another compression module called gzip precompression (available as of version 0.6.24). This module looks for a compressed copy of the file with a .gz extension in the same location and serves it to gzip-enabled clients. This prevents having to compress the file each time it's requested.
</p>




<p>
  The last setting we are concerned with is the include directive for the sites-enabled directory. Inside /etc/nginx, you'll see two other directories, /etc/nginx/sites-available and /etc/nginx/sites-enabled. For each Web site you want to host with Nginx, you should create a config file in /etc/nginx/sites-available, then create a symlink in /etc/nginx/sites-enabled that points to the config file you created. The main Nginx config file includes all the files in /etc/nginx/sites-enabled. This helps organize your configuration files and makes it very easy to enable and disable specific Web sites.
</p>




<p>
  So far so good, next article I will show you how to work with Nginx. :)
</p>

]]></content>
  </entry>
  
</feed>
