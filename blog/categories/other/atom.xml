<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2016-03-04T10:41:21+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[52 Simple Things to Be Your Best Every Day]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/25/52-simple-things-to-be-your-best-every-day/"/>
    <updated>2016-02-25T14:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/25/52-simple-things-to-be-your-best-every-day</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/52_simple _things.png" width="500" alt="52 Simple Things to Be Your Best Every Day" />
</p>




<p>
  Millions of people go to work every day, but they don't bring the best parts of themselves to the job--often because they don't know how. They may be stuck in a rut, never quite able to feel they're doing truly excellent work.
</p>




<p>
  If you like what you do and you want to take it to the next level, concentrate on these 52 simple things.
</p>




<p>
  <strong>1. Make people feel special:</strong> encourage and empower people at every chance.
</p>




<p>
  <strong>2. Find work you love and put your heart and soul into it:</strong> choose a job you love and you will never have to work another day in your life.
</p>




<p>
  <strong>3. Focus on the task at hand:</strong> do the best you can where you are with what you have.
</p>




<p>
  <strong>4. Treat every task as important:</strong> every job is a self-portrait of the person who does it.
</p>




<p>
  <strong>5. Always do the right thing, even when it's hard:</strong> don't let what you cannot do interfere with what you can.
</p>




<p>
  <strong>6. Delegate whenever you can:</strong> you get the best out of people when you believe in their talent.
</p>




<p>
  <strong>7. Take initiative:</strong> even if you're already very good at your job, do whatever you can to push your limits.
</p>




<p>
  <strong>8. Be part of the solution:</strong> don't be known as someone who is always complaining about something.
</p>




<p>
  <strong>9. Tell the truth:</strong> let people know they can count on you to be honest even when it creates difficulties.
</p>




<p>
  <strong>10. Help as many people as you can along the way:</strong> become someone people seek out for assistance.
</p>




<p>
  <strong>11. Avoid gossip always:</strong> it should go without saying, but turn a deaf ear to gossip and rumors.
</p>




<p>
  <strong>12. Maintain a positive attitude:</strong> a positive attitude is always contagious.
</p>




<p>
  <strong>13. Double your income by tripling your knowledge:</strong> don't let your knowledge and skills become outdated.
</p>




<p>
  <strong>14. Mind your emotions:</strong> when you're angry, count to 10; before you speak, count to 100.
</p>




<p>
  <strong>15. Make small daily improvements for stunning results:</strong> most of the time, success consists of a series of little daily efforts.
</p>




<p>
  <strong>16. Sharpen your skills and focus on mastering your talents:</strong> avoid boredom--and learn a new skill to keep you on top of your game.
</p>




<p>
  <strong>17. Be masterful at what you do despite the obstacles:</strong> no person fails who does their best.
</p>




<p>
  <strong>18. Don't feed your fears:</strong> have faith that you will make it through.
</p>




<p>
  <strong>19. Always be prepared:</strong> success occurs when opportunity meets preparation.
</p>




<p>
  <strong>20. Ask for help when you need it:</strong> there is no such thing as a self-made person; you will reach your goals only with the help of others.
</p>




<p>
  <strong>21. Set goals and get results:</strong> it's important to know where you are going, how you will get there, and what the outcome will be.
</p>




<p>
  <strong>22. Be all that you can be:</strong> don't settle for less than your highest potential.
</p>




<p>
  <strong>23. Don't worry about getting credit for getting things done:</strong> you can accomplish almost anything if you don't worry about who gets the credit.
</p>




<p>
  <strong>24. Preserve your integrity:</strong> make daily choices that are consistent with your values.
</p>




<p>
  <strong>25. Be a good role model:</strong> live by your values and walk your talk.
</p>




<p>
  <strong>26. Don't accept "good enough":</strong> do everything with excellence.
</p>




<p>
  <strong>27. Persevere with persistence:</strong> success is largely a matter of hanging on long after others have let go.
</p>




<p>
  <strong>28. Consider leadership something that exists wherever you are:</strong> make the most of yourself in every situation.
</p>




<p>
  <strong>29. Say please and thank you:</strong> it really does matter.
</p>




<p>
  <strong>30. Show respect:</strong> the more you give, the more you receive.
</p>




<p>
  <strong>31. Accept responsibility:</strong> take full responsibility with full confidence to get the job done well.
</p>




<p>
  <strong>32. Be determined to be your best:</strong> the difference between the impossible and the possible lies in your determination.
</p>




<p>
  <strong>33. Remember you are what you think:</strong> it is important to accentuate the positive and eliminate the negative.
</p>




<p>
  <strong>34. Erase your limitations:</strong> when you can conquer your fears, it's like lifting a hundred pounds of cement off your shoulders.
</p>




<p>
  <strong>35. Treat failure as a step toward success:</strong> failure is never fatal, but not trying is.
</p>




<p>
  <strong>36. Be trustworthy:</strong> make promises and keep your word.
</p>




<p>
  <strong>37. Become an expert:</strong> make the most of your knowledge.
</p>




<p>
  <strong>38. Respect people's time:</strong> everyone is busy. when you have someone's attention, be quick and succinct.
</p>




<p>
  <strong>39. Be an active listener:</strong> make sure you listen at least as much as you speak.
</p>




<p>
  <strong>40. Honor your commitments:</strong> when you make a promise, keep it.
</p>




<p>
  <strong>41. Be a great team player:</strong> maximize your contribution.
</p>




<p>
  <strong>42. Let go of restrictions:</strong> don't be limited by the scope of your thinking. Think big and succeed big.
</p>




<p>
  <strong>43. Deliver results:</strong> when you are given a directive, get it done well and on time.
</p>




<p>
  <strong>44. Be transparent:</strong> the more transparent you are with information, the more people will understand why you do what you do.
</p>




<p>
  <strong>45. Be kind:</strong> be unfailingly kind, polite, and gracious with everyone you meet--no matter what his or her role, and no matter how you're feeling.
</p>




<p>
  <strong>46. Manage your stress:</strong> take every action to minimize stress at work, because you don't want it to get the best of you.
</p>




<p>
  <strong>47. Be dependable:</strong> be consistent in yourself and reliable in your performance.
</p>




<p>
  <strong>48. Communicate with heart:</strong> sincerity helps you avoid many blunders and misunderstandings.
</p>




<p>
  <strong>49. Work with purpose:</strong> bring meaning to everything you do.
</p>




<p>
  <strong>50. Be true to yourself:</strong> everything you do should represent who you are.
</p>




<p>
  <strong>51. Make every moment count:</strong> we do not count years until there is nothing else to count.
</p>




<p>
  <strong>52. Lead from within:</strong> everything you need for a successful life is within you now.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Do I Do This... Why Do I Blog? Why Do I Email Every Week?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/09/why-do-i-do-this-dot-dot-dot-why-do-i-blog-why-do-i-email-every-week/"/>
    <updated>2016-02-09T14:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/09/why-do-i-do-this-dot-dot-dot-why-do-i-blog-why-do-i-email-every-week</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/keep_doing_this.png" width="600" alt="Why Do I Do This... Why Do I Blog? Why Do I Email Every Week?" />
</p>




<p>
  With all the hate, all the times I’ve been called a spammer, scammer, deceptive, and just about every other negative thing you can imagine, it would be easy for me to quit. So what keeps me going?
</p>




<p>
  It’s true. I get a lot of very negative feedback on the things I do.
</p>




<p>
  It hurts. It sucks. It makes me want to quit. But I keep going anyways. Because every now and then, I get an email from guys in USA... an email that gives me fuel for the fire that I’ve started... an email that makes me believe that what I am doing is important – not for me, not because I have anything special or unique, but because my mundane and ordinary problems and solutions are the same mundane and ordinary problems that other people need to solve. And sometimes, the impact of my solutions are far beyond anything that I ever expected.
</p>




<p>
  <strong>That One Moment Of Impact</strong><br/>
  So why do I keep going? It’s that one positive note... that tweet from some random person... that person who takes the time to reply to an email and let me know that I’ve made an impact... this is why I do what I do.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Will They Say About You When You’re Gone?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/09/what-will-they-say-about-you-when-youre-gone/"/>
    <updated>2016-02-09T10:03:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/09/what-will-they-say-about-you-when-youre-gone</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="What Will They Say About You When You’re Gone?" />
</p>




<p>
  If you’ve ever written a line of Ruby, you’ve been impacted by the work of Jim Weirich: developer, teacher, mentor, speaker. By all accounts, he was a great person. Was… Sadly, Jim died recently.
</p>




<p>
  I didn’t know Jim, personally. In fact I only recently met him in person for the first time at Reddot ruby conf 2014 in Singapor. I had the pleasure of meeting him very briefly, introducing myself. It was great to finally say "hi" to him, though. I learned a lot from his talks and I still use his ideas of "protocols" instead of "interfaces" in dynamic languages like Ruby and JavaScript. But I’m not going to go in to some lengthy soliloquy about Jim’s life and impact on me.
</p>




<p>
  What really struck me about Jim’s passing was not the impact he had on me, personally, but the impact that he had on a very large number of developers around the world. For a few days after his death, I saw a countless number of tweets and retweets about how Jim had touched people’s lives. I saw stories of how he had changed people’s perspectives on code, on mentoring, and all other aspects of software development. One tweet in particular stuck out, talking about how Jim’s knowledge and wisdom had made this person realize their own inadequacies and how Jim was the only person they had ever met who had been gracious enough to apologize for that.
</p>




<p>
  All of these tweets, the thousands of comments posted on Jim’s last commit in Github, that software development companies around the world paid tribute to him via their public websites – the stories, the lives touched – all of this has me wondering: what will they say of me, when I’m gone? And what will they say about you? Will you have made an impact on the lives of other developers? Will you have shared your knowledge, sought opportunities to teach, entertain and enrich the lives of others?
</p>




<p>
  What impact have you had on the lives of others? What will they say about you, when you’re gone?
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Should Write Bad Code More Often]]></title>
    <link href="http://geekhmer.github.io/blog/2016/02/04/i-should-write-bad-code-more-often/"/>
    <updated>2016-02-04T16:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/02/04/i-should-write-bad-code-more-often</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/code_with_me.jpg" width="500" alt="I Should Write Bad Code More Often" />
</p>




<p>
  I’ve spent most of my career writing bad code – code that is ugly, hard to read, hard to understand, darn near impossible to update and fix problem. It’s bad code, not because it didn’t satisfy the original needs, but that it did so in a way that was not maintainable.
</p>




<p>
  Most people (myself included) look at the code they just wrote and think about how great it is; how it’s so easy to read and understand, and how they will be able to use this code to do so many things. The thing that we forget, is that we are always looking at the code we just wrote through the eyes of context and short term memory. Of course I understand how that function works – I just wrote it. But in a few months, weeks, days… sometimes hours? Well…
</p>




<p>
  For most of my career, though, I’ve had this lofty ideal of writing great code all the time. Worse yet, I’ve had this delusion that my code is somehow better than the code that I was reading from other people. But as I continue to grow and learn, in invariably look back at my old code and think about how bad it is. I’ve come to realize – albeit slowly, over many years – that this is ok for a couple of reasons.
</p>




<p>
  <strong>You’re Learning</strong><br/>
  Most of the bad code that I write is because I’m learning – learning a new language, a new framework, a new tool, a new API, a new … something. When we’re learning, we don’t know the answers yet. That’s why it’s learning – to find the answers.
</p>




<p>
  To find the answers, though, we have to solve the problem at least once – and there’s a good chance that the code we write will be bad, the first time we solve it. We can’t be concerned with good abstraction, clean code, elegance, simplicity or maintainability when we’re in learning mode. We have to focus on succinct, to the point, solve the immediate problem styles of coding with little to no regard for 10 minutes from now, let alone 10 days from now. This is the nature of learning.
</p>




<p>
  <strong>You’re Ready To Learn</strong><br/>
  If you know you’re writing bad code, then you’re already one step ahead of the game. Knowing that the code you’re writing is a sign that you know you can improve. It’s a sign that you want to improve. It’s also a sign that you are ready (or almost ready) to take the next steps to improve.
</p>




<p>
  Recognizing your own code as bad code is a sign of learning. That code you wrote 3 months ago, which you are now embarrassed to look at? That’s a good sign. It means you’ve learned since then. The code you’re writing for your current project, which keeps giving you bad feelings and making you nervous? At least that is recognition of the need to learn.
</p>




<p>
  Recognizing your own code as bad is one of the best things you can do for yourself, you projects and your career because it means you want to learn and improve.
</p>




<p>
  <strong>The Learning Experience</strong><br/>
  The real problem with bad code isn’t the code itself. The real problem stems from confusing the learning experience with solving problems for production systems. Far too often, we allow code that we know is bad to become production code. Sometimes this can’t be helped. Sometimes it isn’t a bad thing, either. But most of the time, the bad code that we wrote while learning shouldn’t be put in production.
</p>




<p>
  Learning should be done in throw away projects, samples and demos. Rather than trying to learn how to use that library in your production code, build a demo app that mimics your production needs (to a minimum). Instead of deciding to use a new framework for the first time when starting a new project, take some time to play with it first. Dig in a little deeper than you think you need to, and try to understand how it works and why.
</p>




<p>
  Separating the learning process from the production code process is important. Taking the time to learn how to solve a problem will produce better code and better understanding of the problem when you get back to your production system. You’ll be better equipped to deal with edge cases, additional requirements and other issues that don’t show up the first time you solve sometime.
</p>




<p>
  <strong>Write Bad Code</strong><br/>
  You may not always have control over timelines. You might not have time to write a sample project for every idea., and sometimes you don’t have a choice but to release bad code. This is the reality in which we live. But I encourage you to to try, whenever possible, to write bad code knowing that you will be throwing it away once you start working on the production-ready solution.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Make Project Success on GitHub?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/01/29/how-to-make-project-success-on-github/"/>
    <updated>2016-01-29T16:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/01/29/how-to-make-project-success-on-github</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/how_to_make_project_success_on_github.png" width="400" alt="How to Make Project Success on GitHub?" />
</p>




<p>
  Community-driven software development is becoming the new path to brand and project success. You would be advised to pay attention to this surging trend: With more than 27 million projects currently on <a href="https://github.com/" blank="_target">GitHub</a>, the ever-increasing popularity of community-driven development is evident.
</p>




<p>
  I've come up with five concrete ways you too make your project successful on GitHub. It's all about engaging the community.
</p>




<p>
  <strong>1. Prioritize Your Community</strong><br/>
  Open source is more than a license and software development model; it's also largely about the people. Encourage both users and maintainers to collaborate to promote a surge in new ideas. You'll find that most prominent projects incorporate a community of contributors with a mailing list, GitHub project.
</p>




<p>
  <strong>2. Welcome New Contributors</strong><br/>
  Contributors often feel intimidated and self-conscious when starting a new project. Help them break out of their shell by offering a set of contribution guidelines and using an issue tracker to highlight troubleshooting that can be easily handled by new contributors. Laying out the proper groundwork is vital to the success of your project.
</p>




<p>
  <strong>3. Appreciate Contributors' Work</strong><br/>
  All those who contribute are co-creators and have ownership over their work on each project. we recognize each contributor's input in a variety of ways. Easy things to do that go a long way are shout-outs, a kind note, or sending some swag, like a T-shirt.
</p>




<p>
  <strong>4. Use Art to Visualize Your Ideas</strong><br/>
  Art has a powerful capability to communicate ideas, just like software. Take advantage of graphic design to brand your projects. Consider creating a friendly mascot (like the GitHub Octocat) to help distinguish your project for your community. In addition, use art to illustrate and teach complex ideas and instructions. By incorporating art into your project, you may also encourage artistic contributions from your new contributors.
</p>




<p>
  <strong>5. Implement Documentation to Prevent Problems</strong><br/>
  Fastidious recording of your project process can avert potential issues and confusion. Good documentation includes a FAQ section, a set of instructions for common patterns, and a set of examples. You can even make your documentation open source by asking for contributions from those working on your projects.
</p>




<p>
  So far so good, Accelerate engaging a community of volunteer software developers by making them feel welcome, giving them clear tasks, and establishing tangible ways for them to be completed. Most importantly, thank contributors when they help you. Your project will flourish because of it. See ya!!!
</p>

]]></content>
  </entry>
  
</feed>
