<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2014-11-09T22:53:13+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[9 things to be a professional programmer]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer/"/>
    <updated>2014-10-16T14:23:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/16/9-things-to-be-a-professional-programmer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/professional_programmer.jpg" width="550" alt="Professional Programmer" />
</p>




<p>
  I've been reading a lot of code, design pattern, leading and project management book for last few years and I've noted many good points how to be a Professional Programmer. Let enjoy reading and become "Go-to guy" together.
</p>




<p>
  <strong>1. Knows the domain of their project</strong><br/>
  As a professional programmer, your job is more than just reading requirement specifications and code the software. You should also know where and how the project is being used by the its users in the real world.
</p>




<p>
  This means that if you are working on an accounting software, you should at least have some basic knowledge about accounting. It is not necessary to become an expert in the subject, but a little knowledge helps a big way when solving problems and coming up with solutions.
</p>




<p>
   <strong>2. Is a team player</strong><br/>
   As a professional programmer, you should of course be polite and helpful towards other people. When other people ask for help, you should treat them in the same manner as you wish someone would treat you, if you were stuck. You should always offer help and welcome help from others.
</p>




<p>
  Also, you should not build a wall around yourself or your code. It is important to remember that you don’t own the code, but rather the team does. So instead of dismissing anyone from working in, or even seeing, the code, it should be encouraged. This will help you grow as a programmer, since it opens up for feedback, but it also greatly benefits the group and the project itself.
</p>




<p>
  Over time, teams slowly grows better and better as well, resulting in team members will eventually know each others strengths and weaknesses. When this happens the team becomes very efficient on solving issues as a group. Since it takes time to build up a solid team, when a project ends, it is smarter to give the team a new project, rather than disbanding the whole group.
</p>




<p>
  <strong>3. Takes responsibility</strong><br/>
  As a professional programmer, you take responsibility for your code. It is your job to know what your code does and know that all of the code works. When coding you should always aim to cause no harm in your project, by always aiming to get the error rate as close to zero as possible.
</p>




<p>
  This is done by simple writing tests. Tested code gives you more confident about your work, knowing the fact that what deliver is at top class and checked against errors. The QA department should never find bugs. An entire project with tested code also gives the programmer more confident to actually do something about smelly code.
</p>




<p>
  Unit and acceptance tests should be done automatically (due to it is significantly cheaper than manually testing) by using a continuous integration system. These tests should be running all the time, every time a programmer commits code to the project. If a test breaks, it should be fixed as soon as possible.
</p>




<p>
  As a professional programmer is also strongly for Test Driven Development. The TDD discipline forces the programmer to think about good design and structuring up their code to make it test-friendly, it is actually unprofessional not to use TDD.
</p>




<p>
  <strong>4. Knows patterns and disciplines</strong><br/>
  As a professional programmer, it is your responsibility to write high-quality, tested, clean code. This includes knowing design patterns, principles, methods, disciplines and artifacts.
</p>




<p>
  Since the software development industry is changing constantly with new ideas and tools around the next corner, it is also equally important that you keep yourself up to date on new disciples and techniques.
</p>




<p>
  <strong>5. Remains calm during hectic situations</strong><br/>
  As a professional developer, you should always remain calm during hectic and stressful situations. Instead, try and think out the best solution to resolve your situation and the inform your superiors about the situation and ask for their feedback and suggestions.
</p>




<p>
  Acting on panic will most likely just result in making more errors. In emergencies, you could try and pair program with a colleague. Not only will this probably decrease the number of new errors, but pair programming is also a great source of sharing knowledge between team members.
</p>




<p>
  <strong>6. Keeps practicing profession</strong><br/>
  As a professional programmer, you should spend time caring for your profession. Just like in any other profession, practice gives performance, skill and experience.
</p>




<p>
  It is your own responsibility to keep training yourself by reading, practicing and learning - actually anything that helps you grow as a software developer and helps you get on board with the constant industry changes.
</p>




<p>
  An important note is this should be done on your own time, not on your employer's. It is not their responsibility to train you, but your own. However, do not mistake this with you should be doing your job during this time. This time should be dedicated for you and your own enjoyment only. You should do anything that interests you. If you work 40 hours a week ,you should spend around 20 additional hours enhancing your own profession.
</p>




<p>
  <strong>7. Rests</strong><br/>
  As a professional programmer, you should know that being a software developer is a very intellectual and exhausting job. It is important that you don’t overwork yourself, but rather find a balance in life with your job. Being a well rested developer makes you more focused and makes you perform better.
</p>




<p>
  <strong>8. Knows the value of time</strong><br/>
  As a professional programmer, you should know the value of time. Your time is expensive and should not be wasted, meaning you should use your time wisely and know things like the the high cost of meetings. Politely decline meetings that do not benefit you, or if your present doesn’t benefit anyone.
</p>




<p>
  Meetings should also have a clear agenda and a goal. If you notice that a meeting is getting boring and does not benefit you anymore, or if the agenda gets abandoned or if the meeting simple gets high-jacked, either request a new topic or politely leave the meeting. You probably have better things to do then remain seated.
</p>




<p>
  <strong>9. Is never afraid to say no</strong><br/>
  As a professional programmer should not be afraid to say no. If you know something is unrealistic (such as an estimation, a deadline, a requirement, etc) it is expected from you to speak up. Not most of the time - but all the time.
</p>




<p>
  You shouldn’t even say you can try, as that will give a false impression to everyone that the task is doable, and maybe even worse, it turns you into a liar which can hurt your reputation among your superiors and colleagues. Instead, try and rephrase yourself and explain your concerns. Be clear and specific about the problems and dates and times.
</p>




<p>
  The definition of an estimate is interpreted by different people. For business people, estimations are commitments. For software developers, estimations are guesses, measured in probability.
</p>




<p>
  You should only do commitments, when you are certain it can be done. When professional commits to something, the provide with a hard number and makes certain the job before the deadline.
</p>




<p>
  So far so good, the more you read the more you know the more you know the more places you'll go. See you!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EngineX/Nginx Installation and Basic Usage]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage/"/>
    <updated>2014-10-07T21:52:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/07/enginex-slash-nginx-installation-and-basic-usage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_installation.png" width="500" alt="Nginx plus" />
</p>




<p>
  Nginx is available in most Linux distributions. In this article, I use Ubuntu 14.10.
</p>




<p>
  <strong>Installation</strong><br/>
  Open your terminal and run the following command as root user:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">nginx</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now Nginx is installed, you can use the startup script to start, stop or restart the Web server:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">stop</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">restart</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Most configuration changes do not require to restart, in which case you can use the reload command. It is generally a good idea to test the Nginx configuration file for errors before reloading:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nginx</span> <span class="o">-</span><span class="n">t</span>
</span><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Let's go ahead and start the server:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/etc/ini</span><span class="n">t</span><span class="o">.</span><span class="n">d</span><span class="o">/</span><span class="n">nginx</span> <span class="n">start</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Nginx now should be running on your machine. If you open http://127.0.0.1/ or http://localhost in your browser, you should see a page with “Welcome to nginx!”.
</p>




<p>
  <strong>Main Configuration File (/etc/nginx/nginx.conf)</strong><br/>
  Now Nginx is installed, let's take a look at its config file that located at /etc/nginx/nginx.conf. This file contains the server-wide settings for Nginx, and it should look similar to this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/nginx/nginx.conf </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="n">www</span><span class="o">-</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="n">worker_processes</span>  <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">error_log</span>  <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">error</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="n">pid</span>  <span class="sr">/var/</span><span class="n">run</span><span class="o">/</span><span class="n">nginx</span><span class="o">.</span><span class="n">pid</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;events {</span>
</span><span class='line'><span class="sr">  worker_connections  1024;</span>
</span><span class='line'><span class="sr">}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">http</span> <span class="p">{</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">mime</span><span class="o">.</span><span class="n">types</span><span class="p">;</span>
</span><span class='line'>  <span class="n">default_type</span> <span class="n">application</span><span class="o">/</span><span class="n">octet</span><span class="o">-</span><span class="n">stream</span><span class="p">;</span>
</span><span class='line'>  <span class="n">access_log</span> <span class="sr">/var/</span><span class="n">log</span><span class="o">/</span><span class="n">nginx</span><span class="o">/</span><span class="n">access</span><span class="o">.</span><span class="n">log</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sendfile</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">keepalive_timeout</span> <span class="mi">65</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tcp_nodelay</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="n">gzip</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>  <span class="kp">include</span> <span class="sr">/etc/n</span><span class="n">ginx</span><span class="o">/</span><span class="n">sites</span><span class="o">-</span><span class="n">enabled</span><span class="o">/*</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We are not going to change any of these settings, but let's talk about some of them to help us understand how Nginx works:
</p>




<p>
  worker_processes setting tells Nginx how many child processes to start. If your server has more than one processor or is performing large amounts of disk IO, you might want to try increasing this number to see if you get better performance.
</p>




<p>
  worker_connections setting limits the number of concurrent connections per worker process. To determine the maximum number of concurrent requests, you simply multiply worker_processes by worker_connections.
</p>




<p>
  error_log and access_log settings indicate the default logging locations. You also can configure these settings on a per-site basis, as you will see later in the next article. Like Apache, Nginx is configured to run as the www-data user, but you easily can change this with the user setting. The startup script for Nginx needs to know the process ID for the master process, which is stored in /var/run/nginx.pid, as indicated by the pid setting.
</p>




<p>
  sendfile setting allows Nginx to use a special Linux system call to send a file over the network in a very efficient manner. The gzip option instructs Nginx to compress each response, which uses more CPU but saves bandwidth and decreases response time. Additionally, Nginx provides another compression module called gzip precompression (available as of version 0.6.24). This module looks for a compressed copy of the file with a .gz extension in the same location and serves it to gzip-enabled clients. This prevents having to compress the file each time it's requested.
</p>




<p>
  The last setting we are concerned with is the include directive for the sites-enabled directory. Inside /etc/nginx, you'll see two other directories, /etc/nginx/sites-available and /etc/nginx/sites-enabled. For each Web site you want to host with Nginx, you should create a config file in /etc/nginx/sites-available, then create a symlink in /etc/nginx/sites-enabled that points to the config file you created. The main Nginx config file includes all the files in /etc/nginx/sites-enabled. This helps organize your configuration files and makes it very easy to enable and disable specific Web sites.
</p>




<p>
  So far so good, next article I will show you how to work with Nginx. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EngineX/Nginx the High-Performance Web Server and Reverse Proxy]]></title>
    <link href="http://geekhmer.github.io/blog/2014/10/06/enginex-slash-nginx-the-high-performance-web-server-and-reverse-proxy/"/>
    <updated>2014-10-06T22:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/10/06/enginex-slash-nginx-the-high-performance-web-server-and-reverse-proxy</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx-plus.png" width="500" alt="Nginx plus" />
</p>




<p>
  Apache is the most popular Web server and one of the most successful open-source projects of all time. Apache has served more Web sites than any other Web server. Many of the world's largest Web sites, including YouTube, Facebook, Wikipedia , use Apache to serve billions of page views per month. Over the years, Apache has proven itself to be a very stable, secure and configurable Web server.
</p>




<p>
  Although Apache is an excellent Web server, what if there were an alternative with the same functionality, a simpler configuration and better performance?<br/>
  A Web server exists with better performance, and it's called Engine X or Nginx.
</p>




<p>
  Nginx is a high-performance Web server and reverse proxy. Nginx is used by some of the largest Web sites in the US, including WordPress etc, and it's currently serving about 500 million requests per day. Nginx is the fourth-most-popular Web server, and it is currently serving more than two million Web sites. 
</p>




<p>
  <strong>Why Nginx?</strong><br/>
  Like Apache, Nginx has all the features you would expect from a leading Web server:<br/>
  1. Static file serving<br/>
  2. SSL/TLS support<br/>
  3. Virtual hosts<br/>
  4. Reverse proxying<br/>
  5. Load balancing<br/>
  6. Compression<br/>
  7. Access controls<br/>
  8. URL rewriting<br/>
  9. Custom logging<br/>
  10. Server-side includes<br/>
  11. Caching
</p>




<p>
   The main advantages of Nginx over Apache are performance and efficiency. Nginx is able to serve more requests per second with less resources because of its architecture. It consists of a master process, which delegates work to one or more worker processes. Each worker handles multiple requests in an event-driven or asynchronous manner using special functionality from the Linux kernel. This allows Nginx to handle a large number of concurrent requests quickly with very little overhead. Apache can be configured to use either a process per request (pre-fork) or a thread for each request (worker). Although Apache's threaded mode performs much better than its pre-fork mode, it still uses more memory and CPU than Nginx's event-driven architecture.
</p>




<p>
  So far so good, next article I will show you how to install & use it. See you!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Workshop - Learn Ruby On Rails in a Weekend]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/29/workshop-learn-ruby-on-rails-in-a-weekend/"/>
    <updated>2014-08-29T14:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/29/workshop-learn-ruby-on-rails-in-a-weekend</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" />
</p>




<h3>Let's Start</h3>




<p>
  Have you always wanted to learn Ruby on Rails but never found the time to do so?<br/>
  Have you been reading articles and watching videos on Ruby on Rails but wish that someone could be by your side to answer your burning questions?
</p>




<p>
  This weekend workshop is designed to make you feel confident about what Ruby on Rails can do for you, and you'll graduate from the class with knowledge on building web applications for fun or profit.
</p>




<p>
  In the 2 days, you'll be doing lots of coding, In the process, you'll learn about web design, application design process, database usage, and most importantly, the web application framework that Groupon, and many others were built with - Ruby on Rails.
</p>




<h3>You Will Learn</h3>




<p>
  <strong>1. Development Environment Setup</strong><br/>
  Learn to set up a 'development environment' on your machine, and be introduced to the various open source tools and online services.
</p>




<p>
  <strong>2. Application and Database Design</strong><br/>
  Learn to decompose everyday problems into conceptual models that can be coded into a web application.
</p>




<p>
  <strong>3. Web Design</strong><br/>
  Learn basic HTML, CSS using the Bootstrap library to create beautiful and functional web applications.
</p>




<p>
  <strong>4. Ruby on Rails</strong><br/>
  Learn fundamentals of Ruby on Rails and be wowed by its magic and simplicity.
</p>




<p>
  <strong>5. Your Own App</strong><br/>
  Learn to build your own social networking app using Ruby on Rails.
</p>




<p>
  <strong>6. Cloud Deployment</strong><br/>
  Learn to deploy your web application to the cloud so that your friends can use it too.
</p>




<h3>Who can join?</h3>




<p>
  - Beginners, with great attitude and a strong will for learning Ruby on Rails.<br/>
  - Experienced programmers, who are new to web development or Ruby on Rails.
</p>




<h3>What to prepare?</h3>




<p>
  - Completed exercises on tryruby.org.<br/>
  - Your laptop to be installed with Ruby 2.1 and Rails 4 (we'll get this done on Saturday).
</p>




<h3>Schedule</h3>




<p>
  <strong>First day</strong><br/>
  We'll get you setup with Ruby on Rails on your laptop in the first hour, and then we'll go through open source tools and online services like Git, Bundler, GitHub, Heroku... etc.
</p>




<p>
  <strong>Second day</strong><br/>
  We'll start the day with creating a brand new Ruby on Rails app and setting it up with a home page. Unlike most courses, we'll not be using Rails scaffold, and you'll learn how to build an app from scratch, with your bare hands.<br/>
  We'll learn:<br/>
  - Simple Web Design with Bootstrap.<br/>
  - Application Design Process.<br/>
  - Setting up of Databases.<br/>
  - User Authentication.<br/>
  - Rails Models and Forms.<br/>
  - Model Validations.<br/>
  - Ajax Updates.<br/>
  - Deploy to Cloud.
</p>




<h3>What to bring?</h3>




<p>
  - Your laptop (and charger).<br/>
  - Your 'never say die' spirit.
</p>




<h3>Terms and Conditions</h3>




<p>
  Please bring your own laptop and charger. Internet is provided.<br/>
  The instructor reserves the rights to cancel the workshop if it does not have a minimum of 6 participants. 
</p>




<p>
  See you!!!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guide to Become An Expert Ruby/Rails Developer]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/26/guide-to-become-an-expert-ruby-slash-rails-developer/"/>
    <updated>2014-08-26T09:35:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/26/guide-to-become-an-expert-ruby-slash-rails-developer</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/guide_ruby_rails_developer.png" width="170" />
</p>




<p>
  This guide is meant to help you acquire the fundamental skills you need to become a Ruby Developer. Using books, video courses, and projects, you’ll learn how to develop web applications using Ruby, HTML & CSS, jQuery, and Rails. Additionally, you will learn about best practices, design patterns and principles, and the fundamentals of visual design. The goal is to build a solid foundation that you can expand on to become an expert Ruby Developer.
</p>




<p>
  <strong>Required Reading and Courses</strong><br/>
  1. The Passionate Programmer by Chad Fowler.<br/>
  2. Online Ruby Course by Pragmatic Studios.<br/>
  3. HTML & CSS by Jon Duckett.<br/>
  4. Smashing CoffeeScript by Alex Hudson.<br/>
  5. Don’t Make Me Think by Steve Krug.<br/>
  6. Everyday Rails Testing with RSpec by Aaron Sumner.<br/>
  7. Online Ruby on Rails Course by Pragmatic Studios.<br/>
  8. Bootstrapping Design by Jarrod Drysdale.<br/>
  9. Practical Object-Oriented Design in Ruby by Sandi Metz.
</p>




<p>
  <strong>How To Use This Guide</strong><br/>
  The best way to use this guide is to start from the Ruby section and proceed towards the CoffeeScript and jQuery section. Each section has a Core Activity and an Assessment. The core activities are meant to teach you and the assessments are meant for you to practice solving problems on your own. There are additional readings for each section for the purposes of professional development. These readings can be done in-between study sessions or during your commute to work, but don’t skip them.  I encourage you to read the entire guide before you start doing anything. It’s a good idea to know where you will end up before you invest any time.
</p>




<p>
  <strong>Setup Development Environment</strong><br/>
  Follow these <a href="https://github.com/thoughtbot/laptop" target="_blank">instructions</a> to setup your development environment for either Mac OS X or Linux. Download & install <a href="http://www.sublimetext.com/3" target="_blank">Sublime Text 3</a>
</p>




<p>
  <strong>Create a GitHub Account</strong><br/>
  Make sure you create a <a href="https://github.com/" target="_blank">GitHub account</a> if you don’t have one already. You’ll need a GitHub account in order to store and share your code with the world.
</p>




<p>
  So far so good, Continuous Learning to stay marketable.<br/>
  Take your time, see you in next article. :)
</p>

]]></content>
  </entry>
  
</feed>
