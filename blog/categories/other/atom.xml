<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2017-03-27T01:23:04+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Why Is Website Maintenance Important?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/27/why-is-website-maintenance-important/"/>
    <updated>2017-03-27T00:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/27/why-is-website-maintenance-important</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/website_maintenance_important.png" width="600" alt="Why Is Website Maintenance Important?" />
</p>




<p>
  I saw it many times a company has a website delivered, with no changes, no additions, no fresh content and most important of all is no security updates. The website stays as it was delivered, sometimes for many years.
</p>




<p>
  You truly ask yourself: "If I like the design and the website just works, why would I need te be maintained?". Please go through with me and read on to learn why maintenance is very important:
</p>




<p>
  <strong>SECURITY</strong><br/>
  Probably the most important thing is: keep your site safe! Website software (Content Management Systems, plug-ins and other add-ons to the website’s functionality) are constantly updated. Partly to improve how it works or to add something new and handy, but often also to patch security holes.
</p>




<p>
  Hackers are constantly looking for outdated websites or software (and known security holes). If you don’t keep up with the latest version of the software, your website could be at risk.
</p>




<p>
  <strong>ATTRACTIVENESS</strong><br/>
  A website that is regularly updated with fresh content (blog posts, news articles, promotions, new products, etc.) attracts more visitors. And isn’t that what you want to achieve with your website: attracting visitors? Visitors get a bad impression if there is old data on your website.
</p>




<p>
  Regularly create the new content, text, or images that relate to your business to attract both new and returning visits.
</p>




<p>
  <strong>GOOGLE RANKING</strong><br/>
  Google loves websites that are regularly updated. Keeping your products and services up-to-date shows search engines that your site is fresh. A site with copyright on the bottom and the "Latest News" article years out of date will not be as attractive to Google in terms of quality or usefulness. When new content is added on a regular basis, Google values this and takes that into account with the overall ranking of your website.
</p>




<p>
  Google itself provides a useful tool called "Webmaster Tools" which essentially checks the 'health' of your website.
</p>




<p>
  <strong>YOUR CORPORATE IMAGE</strong><br/>
  Your website is an interface into your business and it can have a big impact on how visitors value your products or services. Your website should be kept relevant by regularly refreshing content. Also regularly check that contact forms work, addresses and phone numbers are updated and products, services and price lists are current and correct. This means visitors find what they are looking for quickly and easily, and are more likely to become customers.
</p>




<p>
  <img src="http://geekhmer.github.io/images/website_maintenance_important.png" width="600" alt="Why Is Website Maintenance Important?" />
</p>




<p>
  <strong>Can you do maintenance yourself?</strong><br/>
  Of course you can. The websites with Content Management Systems (like WordPress) that make it very easy to add or update content yourself. However, ask yourself: will you really do that? Will you really dedicate time every week or month to update your website’s content? And maintain those regular updates year after year? Or do you rather concentrate on your business instead of maintaining your website?
</p>




<p>
  Additionally there is one thing that's not easy for non-technical people to do software updates. An update to your website’s software can easily break your website. Because (part of) a software is not compatible with another application.
</p>




<p>
  So far so good, let technical people do website maintenance for your business to professionals.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Online Payment Gateway in Cambodia]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/24/online-payment-gateway-in-cambodia/"/>
    <updated>2017-03-24T17:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/24/online-payment-gateway-in-cambodia</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/payment_gateway.png" width="600" alt="Online Payment Gateway in Cambodia" />
</p>




<p>
  The amount of shops in Cambodia wanna sell product and service online is growing. But you truly don't know which Online Payment Gateway you consider to choose for implement and do integration right? 
</p>




<p>
  The good news is here, take it easy I will do a presentaion for you, let go through with me:
</p>




<p>
  <strong>PayPal</strong><br/>
  <a href="https://www.paypal.com" target="_blank">PayPal</a> is by far the easiest method to receive online payments made by credit card or via PayPal itself. However, the company has <a href="https://www.paypal.com/kh/cgi-bin/webscr?cmd=_display-xborder-fees-outside&countries=" target="_blank">no relations with any bank in Cambodia.</a>
</p>




<p>
  So it's not possible right? Well, the only possibility is to have a bank account in another country linked to your PayPal account.
</p>




<p>
  <strong>Cathay United Bank</strong><br/>
  <a href="http://www.cathaybk.com.kh/index.php?view=bzspgwy" target="_blank">Cathay United Bank (formerly SBC Bank)</a> in Cambodia offers an online payment gateway, which is rather easy to implement.
</p>




<p>
  Of course, you need an account with the bank and Cathay United charges a percentage fee for this service. It only can handle credit cards of MasterCard, JCB and VISA, which is a bit limited.
</p>




<p>
  <strong>ACLEDA Bank</strong><br/>
  As a well respected bank, ACLEDA is a bit late to the party, only announcing recently their <a href="http://www.acledabank.com.kh/kh/eng/ps_ebecommerce_migs" target="_blank">E-Commerce Payment Gateway</a>.
</p>




<p>
  ACLEDA uses the same MasterCard Internet Gateway Service (MiGS) as Cathay United Bank, so this is just as easy to set up on your website.
</p>




<p>
  <strong>WING</strong><br/>
  WING is primarily a phone-to-phone payment service and very popular among Cambodians. They can send and receive money nationwide, the company has a large network of agents and also offers a solution for <a href="https://www.wingmoney.com/online-payment/" target="_blank">online payments</a>. The only thing you have to do is open a free business account. Once that’s done you’ll get instructions on how to implement it on your website to receive online payments in your Wing account. This service is only available for customers within Cambodia.
</p>




<p>
  <strong>PayGo</strong><br/>
  <a href="https://www.paygo24.com/" target="_blank">PayGo</a> is a service provided by ABA Bank. To use the service, customers first have to sign up using a mobile phone number. This only works for Cambodian phone numbers, so not suitable for international customers. Although it is convenient for customers in Cambodia, we have some doubts about the security of this system. Only using a phone number as a check seems not very secure.
</p>




<p>
  My suggestion for you is that:<br/>
</p>




<p>
  Due PayPal not yet entered in Cambodian market, the services offered by Cathay United Bank and ACLEDA Bank seem the most robust, secure and comparatively easy to implement.
</p>




<p>
  And if you only or primarily target customers within Cambodia, WING and PayGo can be an alternative.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Status Code and Symbols]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/16/http-status-code-and-symbols/"/>
    <updated>2017-03-16T21:36:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/16/http-status-code-and-symbols</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/list_http.jpg" width="600" alt="HTTP Status Code and Symbols" />
</p>




<p>
  Thanks to Cody Fauser for this list of HTTP responce codes and their Ruby on Rails or other Framework symbol mappings. Let go through the status code symbol below:
</p>




<p>
  <strong>1xx Informational</strong><br/>
  100 :continue<br/>
  101 :switching_protocols<br/>
  102 :processing
</p>




<p>
  <strong>2xx Success</strong><br/>
  200 :ok<br/>
  201 :created<br/>
  202 :accepted<br/>
  203 :non_authoritative_information<br/>
  204 :no_content<br/>
  205 :reset_content<br/>
  206 :partial_content<br/>
  207 :multi_status<br/>
  226 :im_used
</p>




<p>
  <strong>3xx Redirection</strong><br/>
  300 :multiple_choices<br/>
  301 :moved_permanently<br/>
  302 :found<br/>
  303 :see_other<br/>
  304 :not_modified<br/>
  305 :use_proxy<br/>
  307 :temporary_redirect
</p>




<p>
  <strong>4xx Client Error</strong><br/>
  400 :bad_request<br/>
  401 :unauthorized<br/>
  402 :payment_required<br/>
  403 :forbidden<br/>
  404 :not_found<br/>
  405 :method_not_allowed<br/>
  406 :not_acceptable<br/>
  407 :proxy_authentication_required<br/>
  408 :request_timeout<br/>
  409 :conflict<br/>
  410 :gone<br/>
  411 :length_required<br/>
  412 :precondition_failed<br/>
  413 :request_entity_too_large<br/>
  414 :request_uri_too_long<br/>
  415 :unsupported_media_type<br/>
  416 :requested_range_not_satisfiable<br/>
  417 :expectation_failed<br/>
  422 :unprocessable_entity<br/>
  423 :locked<br/>
  424 :failed_dependency<br/>
  426 :upgrade_required
</p>




<p>
  <strong>5xx Server Error</strong><br/>
  500 :internal_server_error<br/>
  501 :not_implemented<br/>
  502 :bad_gateway<br/>
  503 :service_unavailable<br/>
  504 :gateway_timeout<br/>
  505 :http_version_not_supported<br/>
  507 :insufficient_storage<br/>
  510 :not_extended
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I do combining apache and nginx together?]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/13/why-i-do-combining-apache-and-nginx-together/"/>
    <updated>2017-03-13T10:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/13/why-i-do-combining-apache-and-nginx-together</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/nginx_apache.jpg" width="600" alt="Why I do combining apache and nginx together?" />
</p>




<p>
  Nginx and apache are powerful and effective servers by nowadays. Apache currently reigns as the number 1 server for websites and since its public release in 2006. And nginx has taken the world by storm and is now the number 2 server for active sites. 
</p>




<h3>The Reason Why I Use Nginx and Apache Together is</h3>




<p>
  <strong>Nginx</strong><br/>
  - nginx serves static files (images, css, html etc.) really fast and efficient and passes php and .htaccess requests to apache for processing.<br/>
  - nginx needs the help of php-fpm or similar modules for dynamic content.
</p>




<p>
  <strong>Apache</strong><br/>
  - apache is hard on server memory.<br/>
  - apache serves php and .htaccess (most cms site like wordpress needs it for rewrite) and if you throw in a php opcode cache like zend opcache or xcache it should serve php even faster.
</p>




<p>
  <strong>nginx + apache with php opcache = performance and server resource efficiency</strong>
</p>




<p>
  So far so good, in the next article I will show you the configurations. That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Command Line]]></title>
    <link href="http://geekhmer.github.io/blog/2016/03/25/git-command-line/"/>
    <updated>2016-03-25T15:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/03/25/git-command-line</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_git.png" alt="Git Command Line" />
</p>




<p>
  <a href="http://geekhmer.github.io/blog/2015/02/09/install-git-on-linux-slash-ubuntu/" target="_blank">How to install GIT on Linux/Ubuntu</a> -- Today, Source Version Control has gained popularity in the management of source code. Therefore, the software engineer needs to know how to use and manipulate GIT. The following common GIT command line will help you manipulate GIT:
</p>




<p>
  <strong>Set up Git Configuration</strong>
</p>


<p>{% codeblock lang:ruby %}
git config &mdash;global user.email &ldquo;<a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#121;&#x6f;&#117;&#114;&#x5f;&#x65;&#109;&#x61;&#x69;&#108;&#x40;&#x64;&#111;&#x6d;&#x61;&#105;&#x6e;&#95;&#x6e;&#97;&#x6d;&#101;&#46;&#99;&#111;&#109;">&#x79;&#x6f;&#x75;&#x72;&#95;&#x65;&#109;&#97;&#105;&#x6c;&#x40;&#100;&#111;&#109;&#97;&#x69;&#110;&#95;&#110;&#x61;&#109;&#101;&#x2e;&#99;&#111;&#x6d;</a>&rdquo; /<em> Setup email is used to commit </em>/</p>

<p>git config &mdash;global user.name &ldquo;your user name&rdquo; /<em> Setup username is used to commit </em>/</p>

<p>git config &mdash;global core.editor &ldquo;vi&rdquo; /<em> Choose editor used by GIT </em>/</p>

<p>git config &mdash;global color.ui true /<em> Setup color ui for command line </em>/</p>

<p>git config &mdash;list /<em> See Git configuration </em>/
{% endcodeblock %}</p>

<p>
  <strong>To Initialise a Local Repository</strong>
</p>


<p>{% codeblock lang:ruby %}
git init
{% endcodeblock %}</p>

<p>
  <strong>Add a File to the Repository</strong>
</p>


<p>{% codeblock lang:ruby %}
git init
{% endcodeblock %}</p>

<p>
  <strong>Commit the Change to Git</strong>
</p>


<p>{% codeblock lang:ruby %}
git commit -m &ldquo;message&rdquo;
{% endcodeblock %}</p>

<p>
  <strong>See the Commits</strong>
</p>


<p>{% codeblock lang:ruby %}
git log
{% endcodeblock %}</p>

<p>
  <strong>Basic Commands</strong>
</p>


<p>{% codeblock lang:ruby %}
git status  /<em>  The command &lsquo;git status&rsquo; tells which files are not added or committed from Working to Staging to Repository </em>/</p>

<p>git commit -m &ldquo;message&rdquo; /<em>  Commits and changes to all files that are in Staging into Repo  </em>/</p>

<p>git diff /<em>  Show changes between Working and Local Repo, no file supplied shows all files  </em>/</p>

<p>git diff &mdash;staged /<em>  Shows changes between Staged and Local Repo  </em>/</p>

<p>git rm file.txt /<em>  Will remove file from working then git commit -m &ldquo;&rdquo; to also remove from Repo </em>/</p>

<p>git rm &mdash;cached file.txt /<em> Leaves copy of file in Working but removes from Staging and Repo </em>/</p>

<p>git mv /<em> Rename or move files &ndash; then git commit -m &ldquo;&rdquo; to move to Repo </em>/</p>

<p>git commit -am &ldquo;text goes here&rdquo; /<em> Adds all files straight to Repo from Staging if they have changes &ndash; meaning they skip git add </em>/</p>

<p>git checkout &mdash; file.txt /<em> Restore Repo file to Working Directory using current branch  </em>/</p>

<p>git reset &mdash;soft HEAD^ /<em> Restore repo file to staging </em>/</p>

<p>git reset HEAD file.txt /<em>  Move a Stage file out of Stage back to Working </em>/</p>

<p>git commit &mdash;amend -m &ldquo;message&rdquo; file.txt /<em> Change last commit to Repo (only last one can change) </em>/
{% endcodeblock %}</p>

<p>
  <strong>Resetting & Reverting</strong>
</p>


<p>{% codeblock lang:ruby %}
/<em> Reverting &mdash;soft &mdash;mixed &mdash;hard will go back to previous commits</em> /</p>

<p>git log /<em> Gets the sha1s so you can see the coomits where you want revert  back to </em>/</p>

<p>git reset &mdash;soft sha /<em> Changes Repo but not Staging or Working </em>/</p>

<p>git reset &mdash;mixed sha /<em> Changes Repo and Staging but not Working </em>/</p>

<p>git reset &mdash;hard sha /<em> Changes all 3 Tiers </em>/</p>

<p>git clean -f /<em> Remove untracked files from Working  </em>/
{% endcodeblock %}</p>

<p>
  <strong>Ignore File</strong>
</p>


<p>{% codeblock lang:ruby %}
.gitignore /<em> Ignores files to track in Working / track the .gitignore file </em>/</p>

<p>Global Ignore /<em> Create in home folder  </em>/
.gitignore_global
.DS_Store
.Trashes
.Spotlight_V100
/<em> Add in  </em>/</p>

<p>git config &mdash;global core.excludesfile ~/.gitignore_global /<em> Add to gitconfig </em>/
{% endcodeblock %}</p>

<p>
  <strong>Stop Tracking Changes</strong>
</p>


<p>{% codeblock lang:ruby %}
git rm &mdash;cached file.txt /<em> Leaves copy in Repo and Working </em>/
{% endcodeblock %}</p>

<p>
  <strong>Commit Log</strong>
</p>


<p>{% codeblock lang:ruby %}
git ls-tree HEAD
git ls-tree master
git log &mdash;oneline
git log &mdash;author=&ldquo;Bunlong&rdquo;
git log &mdash;grep=&ldquo;temp&rdquo;
{% endcodeblock %}</p>

<p>
  <strong>Show Commit</strong>
</p>


<p>{% codeblock lang:ruby %}
git show dc094cb /<em>  show SHA1 </em>/
{% endcodeblock %}</p>

<p>
  <strong>Commands on Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git branch /<em> Show local branches * is the one we are on </em>/</p>

<p>git branch -r /<em> Shows remote branches </em>/</p>

<p>git branch -a /<em> Shows local and remote </em>/</p>

<p>git branch newbranch /<em> Creates a new branch </em>/</p>

<p>git checkout newbranch /<em> Switch to new branch </em>/</p>

<p>git checkout -b oldbranch /<em> Creates and switches to new branch  </em>/</p>

<p>git push origin newbranch /<em> Push new branch to remote </em>/</p>

<p>/<em> Diff in Branches </em>/</p>

<p>git diff master..otherbranch /<em> Shows diff </em>/</p>

<p>git diff &mdash;color-words master..otherbranch /<em>  Shows diff in color </em>/</p>

<p>git branch &mdash;merged /<em> Shows any merged branches </em>/</p>

<p>/<em> Rename Branch </em>/</p>

<p>git branch -m oldname newname</p>

<p>/<em> Delete  Branch </em>/</p>

<p>git branch -d nameofbranch</p>

<p>/<em> Merge Branch  </em>/</p>

<p>git merge branchname /<em> Be on the receiver branch to merge the other branch </em>/</p>

<p>/<em> Merge Conflicts between the same file on 2 branches are marked in HEAD and other branch </em>/</p>

<p>git merge &mdash;abort /<em>  Abort basically cancels the merge </em>/
{% endcodeblock %}</p>

<p>
  <strong>Manually Fix Files and Commit - The Stash</strong>
</p>


<p>{% codeblock lang:ruby %}
git stash save &ldquo;message&rdquo;</p>

<p>git stash list /<em> Shows whats in stash </em>/</p>

<p>git stash show -p stash@{0} /<em> Show the diff in the stash </em>/</p>

<p>git stash pop stash@{0} /<em> Restores the stash deletes the tash </em>/</p>

<p>git stash apply stash@{0} /<em> Restores the stash and keeps the stash </em>/</p>

<p>git stash clear /<em> Removes all stash </em>/</p>

<p>git stash drop stash@{0}
{% endcodeblock %}</p>

<p>
  <strong>Remotes Commands</strong>
</p>


<p>{% codeblock lang:ruby %}
git remote add origin <a href="https://github.com/bunlong/test.git">https://github.com/bunlong/test.git</a> /<em> Origin can be named whateve followed by the remote </em>/</p>

<p>git remote /<em> To show all remotes </em>/</p>

<p>git remote show origin /<em> To see remote URL</em>/</p>

<p>git remote remove origin /<em> To remove remote </em>/</p>

<p>git remote rm origin /<em> To remove remote </em>/
{% endcodeblock %}</p>

<p>
  <strong>Clone project. Push from local to Remote</strong>
</p>


<p>{% codeblock lang:ruby %}
/<em> Cloning a GitHub Repo &ndash; create and get the URL of a new repository from GitHub, then clone that to your local repo, example below uses local repo named &lsquo;nameoffolder&rsquo; </em>/</p>

<p>git clone <a href="https://github.com/bunlong/test.git">https://github.com/bunlong/test.git</a> nameoffolder</p>

<p>git push -u origin master /<em> Push to remote(origin) and branch(master) </em>/</p>

<p>/<em> Push to Remote from Local &ndash; more &ndash; since when we pushed the local to remote we used -u parameter then the remote branch is tracked to the local branch and we just need to use&hellip; </em>/</p>

<p>git push</p>

<p>git push origin newbranch /<em> Push a branch to a remote </em>/
{% endcodeblock %}</p>

<p>
  <strong>Fetch Changes from a Cloned Repository</strong>
</p>


<p>{% codeblock lang:ruby %}
git fetch origin /<em> Pulls down latest committs from remote origin/master not origin, also pull down any branches pushed to Repo Fetch before you work Fetch before you pull Fetch often </em>/
{% endcodeblock %}</p>

<p>
  <strong>Merge with origin/master</strong>
</p>


<p>{% codeblock lang:ruby %}
git merge origin/master
{% endcodeblock %}</p>

<p>
  <strong>Fetch + Merge data ==> Pull</strong>
</p>


<p>{% codeblock lang:ruby %}
git merge origin/master
{% endcodeblock %}</p>

<p>
  <strong>Get Remote Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git branch branch_name origin/branch_name /<em> This will bring the remote branch to local and track with the remote </em>/
{% endcodeblock %}</p>

<p>
  <strong>Delete Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git branch -d branch_name
{% endcodeblock %}</p>

<p>
  <strong>Checkout and Switch Branch and Track to Remote</strong>
</p>


<p>{% codeblock lang:ruby %}
git checkout -b nontracking origin/nontracking
{% endcodeblock %}</p>

<p>
  <strong>Remove Remote Branch</strong>
</p>


<p>{% codeblock lang:ruby %}
git push origin &mdash;delete branch
{% endcodeblock %}</p>

<p>
  <strong>Undoing Changes</strong>
</p>


<p>{% codeblock lang:ruby %}
git checkout path-to-file /<em> Restores a file before it is staged </em>/</p>

<p>git reset HEAD path-to-file /<em> If it is staged &ndash; restores a file from last commit and then git checkout path-to-file </em>/</p>

<p>git checkout HEAD^ path-to-file /<em> If is staged and committed &ndash; restores from last commit </em>/</p>

<p>git reset &mdash;hard HEAD^ /<em> Restore prior commit </em>/
{% endcodeblock %}</p>

<p>
  <strong>Tag</strong>
</p>


<p>{% codeblock lang:ruby %}
git tag -a v1.0.0 -m &ldquo;message&rdquo; /<em> Tagging a commit with a version number</em>/</p>

<p>git push &mdash;tags /<em> Pushes tag info to master remote </em>/</p>

<p>/<em> You can checkout a commit and add a tag to that commit by checking out its SHA </em>/</p>

<p>git checkout f1f4a3d /<em> Checking out a commit &ndash; see the commit SHAS by git log </em>/
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
