<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Other | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/other/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-07-03T22:36:34+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The 10 Best Project Management Tools for Freelancers]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/18/the-10-best-project-management-tools-for-freelancers/"/>
    <updated>2015-06-18T00:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/18/the-10-best-project-management-tools-for-freelancers</id>
    <content type="html"><![CDATA[<p>
  You just heard back from your Client No 1: He likes your pitch and wants a first draft within seven days. Client No 2 just sent you his comments on your piece and would like to see revisions by Friday. Client No 3 needs an invoice for the projects you’ve already completed this month. Meanwhile, you’re waiting on checks from Client Nos 4, 5, and 6. Oh, and you’re still putting together some ideas for Client No 7.
</p>




<p>
  Sound familiar?
</p>




<p>
  The nature of freelancing means you’re constantly juggling projects in different stages of completion. And you have to be keenly away of letting any accidentally drop because your reputation depends on meeting your deadlines, while your livelihood depends on making sure you get paid.
</p>




<p>
  Luckily, there are some great online tools out there that’ll allow you to carefully track the progress of every project on your docket. Check out my top 10.
</p>




<p>
  <h3><a href="https://asana.com/" target="_blank">Asana</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/asana.png" />
</p>




<p>
  Not only does Asana’s clean, simple layout make it incredibly easy on the eyes, it also makes using and mastering this app a breeze. When you create a project, which can be broken down into sub-tasks with individual deadlines, it’s really easy to monitor exactly what you’ve done and what still needs to be taken care of.
</p>




<p>
  I suggest making every assignment a separate project and using Asana’s "Highlight" feature to color-code them based on the client. Then, you can outline everything that needs to happen from pitching to getting paid.
</p>




<p>
  Asana also allows you to upload attachments and share your projects with other people—meaning you can loop in your clients or collaborators depending on the situation.
</p>




<p>
  <h3><a href="https://trello.com/" target="_blank">Trello</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/trello.png" />
</p>




<p>
  Trello is a good choice if you handle a lot of recurring projects for different clients or if you’re a very visual thinker. Its basic organizational tool is the "board". Each board is separated into lists, and each list is composed of one or more “cards”, which represent separate tasks.
</p>




<p>
  I recommend making a different board for every client. Then, depending on how each client handles submission and payment, you can make individualized lists for each step of the process. Maybe your first list is "Pitched", your next list is "Approved", and so on until a list for "Paid."
</p>




<p>
  Once you’ve made a card for each task you need to complete, you can give it a deadline, add an attachment, choose labels, make a checklist, write notes, and even share it with other Trello users.
</p>




<p>
  <h3><a href="https://www.wrike.com/" target="_blank">Wrike</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/wrike.png" />
</p>




<p>
  At first, Wrike seems pretty similar to Asana and Trello: You set up folders, create tasks, and assign task deadlines. However, Wrike has a few unique features really set it apart.
</p>




<p>
  First, it automatically tracks how much time you spend on each task, which is really helpful if you charge by the hour or need to see how long a project is taking. Second, it lets you create and share your project schedule. Once you’ve planned out a project, all you have to do is click the “Share timeline” button, and Wrike will send snapshots of your schedule to anyone you want, even if they don’t have a Wrike account. And third, Wrike integrates with a bunch of third-party apps, like Chrome, your email, cloud storage, and iCal.
</p>




<p>
  <h3><a href="http://www.thrivesolo.com/" target="_blank">Solo</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/solo.png" />
</p>




<p>
  Solo belongs on this list because it was specifically designed for freelancers. In addition to creating projects and setting due dates, you can also create a client roster, which analyzes how many returning clients you have, what sectors they’re in, and how profitable you are working with them. You can easily see which clients are your most valuable while also keeping track of basic contact info like phone numbers and emails.
</p>




<p>
  This is also cool: When you can make invoices in the app, the software tracks which clients have paid you, which clients have overdue payments, and which clients you still need to bill.
</p>




<p>
  Solo also comes with a "Quotes" feature that logs how many quotes you’ve sent out and tracks how many have been accepted.
</p>




<p>
  <h3><a href="https://www.wunderlist.com/" target="_blank">WunderList</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/wunder_list.png" />
</p>




<p>
  This tool is definitely the way to go if you want a quick and easy way to keep all your assignments organized. You start out on Wunderlist by making folders—I give each client their own—then adding “to-dos.” The program offers reminders in addition to deadlines. The reminder feature is super helpful—for example, maybe you need to interview someone for a story in the next eight days, so you can easily add a reminder at the four-day mark.
</p>




<p>
  Plus, Wunderlist pulls to-dos from emails. Let’s say you get a message from a client asking for revisions; just forward it to Wunderlist, and “make revisions on X article” will become a task.
</p>




<p>
  <h3><a href="https://podio.com/site/en" target="_blank">Podio</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/podio.png" />
</p>




<p>
  When it comes to personalization, most project management tools are fairly limited—you can adjust names and color-code, but that’s pretty much it. Not so with Podio, which lets you completely control the design of each project outline.
</p>




<p>
  You can add endless fields to each, from links or numbers to text boxes, categories, and even maps. So if your typical assignments are pretty detailed and complex (or you just want an app that gives you lots of customization power), Podio is worth checking out.
</p>




<p>
  You can also make project templates, which comes in handy if your freelance process can be replicated. Let’s say you write a similar set of articles every month for the same magazine; rather than creating a new project each time, you can use the template option to clone the first one and reuse it in the future.
</p>




<p>
  <h3><a href="https://redbooth.com/" target="_blank">RedBooth</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/red_booth.png" />
</p>




<p>
  Thanks to its email and desktop notifications, Redbooth is ideal for people juggling a lot of deadlines. Suppose you’ve created a task like “Turn in website copy for approval” and set the deadline for August 14. If you haven’t marked the task as completed by that day, Redbooth will either ping you on your browser, send you an email, or both. In other words, you’ll never miss a deadline because of forgetfulness.
</p>




<p>
  There’s also a useful "Reporting" section. This tab will show you when you’re finishing tasks, from “early” to “more than 1 week,” and record all your activity from the past seven days.
</p>




<p>
  <h3><a href="https://www.getflow.com/" target="_blank">Flow</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/flow.png" />
</p>




<p>
  Want a project management tool that’s functional without all the bells and whistles? Go with Flow. It has all the basic functionality of the others (separate workspaces for separate projects, project and task creation, work history, etc.), but without some of the busy interfaces. In fact, its design is nearly Mac-like in its minimalism and friendliness for new users.
</p>




<p>
  In addition to the computer-based platform, you can also use Flow’s iPhone and Android apps. Plus, the software also comes in a specific version for Macs so you don’t have to go through the brief hassle of opening Flow in your Internet browser.
</p>




<p>
  <h3><a href="https://quire.io/" target="_blank">Quire</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/quire.png" />
</p>




<p>
  Quire’s setup is pretty traditional: You’ve got projects composed of tasks that can be drilled down into sub-tasks. Furthermore, you can set due dates, add tags, and track your progress.
</p>




<p>
  However, Quire has a few qualities stands out. It has a ton of keyboard shortcuts, which means after a week or two of using the platform, you’ll be navigating really quickly. Also, you can make individual projects viewable by URL—so if you have a client who wants to know exactly what the status is for an assignment, you can conveniently share the project specs. This feature can also be helpful if the project scope expands and you’d like to renegotiate your price.
</p>




<p>
  And if you like looking at physical to-do lists, rather than virtual ones, Quire automatically formats your tasks for printing.
</p>




<p>
  <h3><a href="http://taskboard.matthewross.me/" target="_blank">TaskBoard</a></h3><br/>
</p>




<p>
  <img src="http://geekhmer.github.io/images/task_board.png" />
</p>




<p>
  Unlike the other tools above, Taskboard is a completely free, open-source project. You don’t make an account to access Taskboard; you just download it.
</p>




<p>
  My favorite Taskboard feature is the "automatic option." When specific criteria are met, items will automatically update. For example, you can tell Taskboard to clear the deadline if you mark a task as complete before its deadline. The automation saves you from having to constantly fiddle with all the different details to keep your board clean.
</p>




<p>
  Taskboard’s Markdown compatibility makes it even simpler to use. (If you’ve never heard of Markdown, it’s a plain text style that converts to HTML and saves you tons of time formatting your work) Thanks to this feature, you can seamlessly transition your comments, notes, and reminders from documents to Taskboard to a website, and back again.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Spend Less Time and Money on Growing Your Business?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/05/how-to-spend-less-time-and-money-on-growing-your-business/"/>
    <updated>2015-06-05T21:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/05/how-to-spend-less-time-and-money-on-growing-your-business</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/how_to_spend_less_time_and_money_on_growing_your_business.png" alt="How to Spend Less Time and Money on Growing Your Business?" />
</p>




<p>
  We all have ideas we would like to validate yesterday if possible but of course in reality that rarely happens. The constant lack of developer time makes our wishes become dreams most of which will never see the light of day.
</p>




<p>
  Being able to move fast so that you can put your ideas thru the build/measure/learn loop and iterate all the way to product market fit requires having a solid software foundation that will allow you to achieve fast release cycles.
</p>




<p>
  In this post I will show you how to:<br/>
  1. Speed up the development cycle<br/>
  2. Spend less money on developer time<br/>
  3. Build a more productive team
</p>




<p>
  <strong>We Call It Automated Testing</strong><br/>
  Testing — or automated testing — means you put the machine at work by having it test your application often and making sure everything works as expected. You can imagine someone clicking thru the buttons and links on your website, filling in forms etc. and making sure everything is in good shape.
</p>




<p>
  So by having every corner of your application checked at will and in record time, you will have the confidence that a feature you've previously built will stay functional forever — or at least until you decide to nuke it — by being notified immediately when something stopped working for whatever the reason.
</p>




<p>
  <strong>How Can Testing Help My Business?</strong><br/>
  It's less obvious until you've done software development for a while but, the most time spent by developers is not on building new and cool stuff — nor on playing video games. Actually, the most time is spent on fixing bugs (previously built features that somehow got broken in the process of increasing the complexity of your application).
</p>




<p>
  Knowing immediately when things got broken, where and why, means developers will spend a lot less time searching for the source of evil before they can actually do the work involved in fixing the issue — which usually amounts to much less then the digging, staring, guessing and searching process.
</p>




<p>
  So having to spend less and less time on fixing broken features as your app becomes more and more complex translates into improving development speed and cutting costs greatly in the long run.
</p>




<p>
  Automated testing gives you a new power; the confidence of changing existing features and adding ones with minimal overhead.
</p>




<p>
  <strong>Let’s Get the Product Managers Involved</strong><br/>
  Another very important aspect of testing is that features need to be described in great detail before the developer’s work can start so in other words, the developer knows exactly what he needs to do in order to deliver the required features to the stakeholders and match their expectations. This is also a good time for the developers to actually see the product from a different perspective.
</p>




<p>
  Instead of going back and forth about what the product manager wanted and what the developer thought he wanted and thus building the wrong feature, more time is spent communicating using a common language, the real expectations and making sure the developer's efforts are well spent.
</p>




<p>
  The automated testing language is written in plain english — or any other language of your choosing — and it requires both the product manager and the developer to sit down, think thru each step of every feature and put everything on paper before writing the first line of code.
</p>




<p>
  <strong>Planing for the Future</strong><br/>
  In the developer's world, technology changes extremely fast and thus new tools or new versions emerge with new and shiny features that your business could benefit from. But there’s one thing that stands in the way of all that goodness and that is… the fear of change. Changing a tool or upgrading one to a newer version increases the chance of breaking existing functionality.
</p>




<p>
  As you might’ve expected, this is another area where testing can save you a ton of time. By having a fully tested application, you can have your cake and eat it too — just get the new stuff, run your tests and see precisely what got broken in the process so you can start fixing. The horrible alternative would be to have your developers and QA team go over each and every feature — that they remember — and manually test it, or even worse, users discovering bugs and probably not telling you about them.
</p>




<p>
  <strong>Show Me an Example</strong><br/>
  Let’s see how an automated test might look like in real life.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Feature</span><span class="p">:</span> <span class="no">User</span> <span class="n">login</span>
</span><span class='line'>  <span class="no">In</span> <span class="n">order</span> <span class="n">to</span> <span class="n">see</span> <span class="n">history</span> <span class="n">that</span><span class="err">’</span><span class="n">s</span> <span class="n">unique</span> <span class="n">to</span> <span class="n">my</span> <span class="n">account</span>
</span><span class='line'>  <span class="no">As</span> <span class="n">a</span> <span class="n">user</span>
</span><span class='line'>  <span class="n">I</span> <span class="n">want</span> <span class="n">to</span> <span class="n">be</span> <span class="n">able</span> <span class="n">to</span> <span class="n">log</span> <span class="k">in</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Scenario: User logs in&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Given</span> <span class="n">I</span> <span class="n">have</span> <span class="n">a</span> <span class="n">user</span> <span class="n">account</span>
</span><span class='line'><span class="no">And</span> <span class="n">I</span> <span class="n">am</span> <span class="n">currently</span> <span class="n">logged</span> <span class="n">out</span>
</span><span class='line'><span class="no">When</span> <span class="n">I</span> <span class="n">log</span> <span class="k">in</span>
</span><span class='line'><span class="no">Then</span> <span class="n">I</span> <span class="n">should</span> <span class="n">see</span> <span class="n">my</span> <span class="n">dashboard</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What you see here is a valid automated test that makes sure that a user can log into your site by opening a browser, clicking on the login link, filling in the sign-in form and making sure that when the log in was successful, the user will be on his dashboard page.
</p>




<p>
  As you can see the test is very readable and thus it can be easily used as a communication tool between the product team — or the stakeholders — and the development team.
</p>




<p>
  So my advice to you is to use testing as much as possible and as early in the development process as you can. It saved me and my business countless hours and I can guarantee it will do the same for yours.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Development Stack]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/03/my-development-stack/"/>
    <updated>2015-06-03T23:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/03/my-development-stack</id>
    <content type="html"><![CDATA[<p>
  I always try to improve my development stack in order to gain productivity. And during the last few months, there has been a lot of change.
</p>




<p>
  Here is my current development stack that I use to create web apps:
</p>




<h3>
  Front-End
</h3>




<p>
  <strong>Bootstrap:</strong> A great HTML/CSS framework. It helps you build MVC very fast. Sass: A language compiled into CSS which adds many features such as variables, imports and functions.<br/>
  <strong>Sass:</strong> A language compiled into CSS which adds many features such as variables, imports and functions.<br/>
  <strong>Jquery:</strong> Good old Jquery, indeed. I may start to use angular in the next few weeks if I have enough time.
</p>




<h3>
  Back-End
</h3>




<p>
  <strong>Ruby on Rails:</strong> The most productive web framework I have ever worked with, much faster than any PHP framework, and enforcing many good software engineering practices.<br/>
  <strong>PostgreSQL:</strong> Faster and most powerful than most RDBMS (including MySQL), and free.
</p>




<h3>
  Hosting
</h3>




<p>
  <strong>Heroku:</strong> A great PaaS, and free for small apps. I also tried Google App Engine but its lack of flexibility was a problem for me.<br/>
  <strong>Cloudflare:</strong> It makes your app load faster and gives you a free SSL certificate.<br/>
  <strong>Mandrill:</strong> Very easy to use, yet powerful, EaaS (Email as a Service). I use it to send transactional emails like welcome messages and password resets.
</p>




<h3>
  Deployment
</h3>




<p>
  <strong>Git:</strong> I configured it with a pre-commit hook which automatically runs rails tests. And thanks to Heroku a simple push deploys my code. It’s very useful and now I just couldn’t go back.
</p>




<h3>
  Monitoring
</h3>




<p>
  <strong>Pingdom:</strong> A great tool to receive alerts if your app goes down (and if you add IFTTT you can receive them by SMS).
</p>




<p>
  Let’s see what it looks like (with the help of a great website I recently found):
</p>




<p>
  <img src="http://geekhmer.github.io/images/my_development_stack.png" alt="My Development Stack" />
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 8 Ruby on Rails Websites]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/21/top-8-ruby-on-rails-websites/"/>
    <updated>2015-05-21T14:44:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/21/top-8-ruby-on-rails-websites</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="How Technology Company Make Money?" />
</p>




<p>
  If you are curious to know which sites are built with Ruby on Rails, then this article is for you. In a previous blog we have mentioned that startups tend to choose Ruby on Rails for a variety of reason. Same reasons reflect here. These 8 following sites use the framework or at least these were built with Ruby on Rails initially.
</p>




<p>
  <strong><a href="https://twitter.com/" target="_blank">TWITTER</a></strong><br/>
  Twitter is the most popular micro blogging platform in the world. It was envisioned by Dorsey as the sms of the internet. Twitter was first developed in 2006 with public release in 2007. It was developed in Ruby on Rails. Later it shifted its framework due to scalability. Like we said, startups have some special interest in Ruby on Rails.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_twitter.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.shopify.com/" target="_blank">SHOPIFY</a></strong><br/>
  Shopify is SaaS e-commerce platform. Basically, the merchants subscribes and uses Shopify for selling their product online or in store. Shopify was developed by Lütke in Ruby on Rails. He spent two months to develop the e-commerce platform for their snowboarding website. Interestingly, he did it because he was very dissatisfied with the existing platforms. In 2006, Shopify opened up to merchant and began enjoying significant growth.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_shopify.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.shopify.com/" target="_blank">GROUPON</a></strong><br/>
  Groupon is a deal of the day platform that issues discounted gift certificate a buy can use at variety of stores. Groupon was initially build with Ruby on Rails. It has enjoyed significant growth and now has 3 billion+ market capitalization. However, its business model has been heavily criticized since it inception. The criticism has been further bolstered by steady decline in sales and the ousting of the Founder-CEO Mr. Andrew D. Mason.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_groupon.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.bloomberg.com/" target="_blank">BLOOMBERG</a></strong><br/>
  Bloomberg is a private software, data and media company. It currently employs 15000 employees. Bloomberg provides analytical and stock trading platform, data and news services to companies through Bloomberg terminal.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_bloomberg.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="https://soundcloud.com/" target="_blank">SOUNDCLOUD</a></strong><br/>
  SoundCloud is a social platform for sound. It is like audio youtube where anybody can upload any sound or tunes and share them publicly or privately. Today, everyone is on multiple social platform. This has added a new dimension to SoundCloud. It is growing everyday and becoming a concern for other paid platform like iTunes and Google Play.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_soundCloud.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="https://squareup.com/global/en-gb/register" target="_blank">SQUARE</a></strong><br/>
  Square is making commerce easier for both enterprises and consumers. It was co-founded by twitter.com co-founder Dorsey. It makes credit card readers and stands that are attached with phones and tables. Users swap cards through these readers and make purchases.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_square.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="https://github.com/" target="_blank">GITHUB</a></strong><br/>
  The hub is the social platform for programmers. Git works a repository where coders push codes and conduct review. It is a leading website for code share. If you are a programmer/ developer applying for a job, many times perhaps you have noticed employers asking for your Github username to see your work. Github significantly facilitates the development of web application.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_github.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  <strong><a href="http://www.slideshare.net/" target="_blank">SLIDESHARE</a></strong><br/>
  Another site built with Ruby on Rails is Slideshare. Slideshare is one of the most popular education and e-learning platform. It hosts different presentation slides and documents from users. Headed by CEO and Co-founder Ms. Rashmi Sinha, Slideshare is growing in popularity every day. It supports PowerPoint, PDF, Keynote and OpenDocument and also it hosts variety of documents from users.
</p>




<p>
  <img src="http://geekhmer.github.io/images/screen_slideshare.png" width="500" alt="How Technology Company Make Money?" />
</p>




<p>
  The article merely introduces the sites, does not go into technicalities. The purpose was to show you that there are many strong web platform that use the Ruby on Rails. If you are interested to use Ruby on Rails for your next project, you can choose Ruby on Rails and for that
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Technology Company Make Money?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/20/how-technology-company-make-money/"/>
    <updated>2015-05-20T17:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/20/how-technology-company-make-money</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/how_tech_company_make_money.png" width="400" alt="How Technology Company Make Money?" />
</p>




<p>
  Have you ever wonder how the companies that offer free services make money? Such as Instagram, Evernote, Facebook, Twitter, LinkedIn, Google Maps, so on... or if it is even profitable to keep free users using their services. We would go through several revenue models and hopefully, it will throw you some light next time you decide to roll your own startup.
</p>




<p>
  <strong>Revenues Models</strong><br/>
  Let’s start first giving some perspective what models are actually giving the most revenues. In 2013, App Store, reported that free apps brought the 71% of the revenue! Even more than paid apps... how’s that even possible?
</p>




<p>
  Ok, let’s discuss some revenue models to understand this. There are 8 main models.
</p>




<p>
  <strong>Freemium:</strong> apps are free to download and use. However, quite often some different features are sold separately (e.g. new levels, specialized functions, remove ads, more capacity, and so on). E.g. Pandora, Hulu, Google Docs.
</p>




<p>
  <strong>Premium:</strong> users paid upfront a fixed price for the application. After you pay for it, you are able to download it. Usually new software updates are free. E.g. MS Office 365.
</p>




<p>
  <strong>Subscription:</strong> users paid a fixed price which is automatically charged every certain time. Magazines in the iOS Newsstand are a good example of this subscription based model. Subscriptions have generally lower prices than premium accounts. E.g. Netfix.
</p>




<p>
  Freemium is not as "free" as it might seem in the surface, there are indirect ways of getting revenues from it.
</p>




<p>
  <strong>Advertising:</strong> the application/service is free to use, but it contains ads or interruption banners for an couple of minutes in order to raise revenue. This model is usually applied along with freemium apps and to remove the ads users have to pay a subscription. E.g. Spotify.
</p>




<p>
  <strong>Selling data:</strong> user information and behavior inside the application is sell to interested 3rd-parties. Usually used with freemium apps and specified in the terms of used.
</p>




<p>
  <strong>Transaction:</strong> the application is free to use generally and charges a percentage or fixed fee with every users’ transaction made. For example, it allows you to publish your item on their site for free but when you sell it, it charges you a fee. Or publish a project in a site and when it reaches certain goal a percentage fee is applied. E.g. eBay, Kickstarter.
</p>




<p>
  <strong>Online lead generation:</strong> collects user’s information sometimes in an exchange of a product or service and then resell the information to companies interested indirectly. It’s different from the selling data model because the information is not sold to 3rd party directly, but indirectly. Influencing users desitions based on 3rd party companies affiliated and users’ interests, likes and behaviors. E.g. Mint, LinkedIn.
</p>




<p>
  <strong>Donations:</strong> (it’s self-explanatory) Services/apps are free, but it encourages users to contribute throughout donations to support the development.
</p>




<p>
  After reading these, you might have more clues why free apps are so much win nowadays. They helped to create those million-dollar-per-day games! (remembered FlappyBird, Candycrush, Farmville…) In a market where there is enough competition, having a free option will take you to large numbers of users quicker and broader, because of the low barrier to entry. For instance, Whatsapp had at certain point 10k of daily downloads, after moving it to $1 it download rate drops 10 times, they finally opted for yearly subscriptions.
</p>




<p>
  Subscription-based revenue are also a model worth doing a special mention. It brings a steady flow of income to companies and usually comes in different tiers to fulfill users need. But, it has to be flexible enough, because it might limit hard core users which might be willing to pay more for taking the product to a new level.
</p>




<p>
  <strong>How does Instagram make money?</strong><br/>
  Freemium: Before selling to Facebook they were not making money. They are trying to incorporate Ads.
</p>




<p>
  <strong>How does Facebook make money?</strong><br/>
  Advertising & Freemium: Advertising is the main source of revenue but also some small percentage comes from payments, web apps and other sources.
</p>




<p>
  <strong>How does Whatsapp make money?</strong><br/>
  Freemium & Subscribers: The company is based on Freemium model for firt year. Later, it has a subscription of $1 per year.
</p>




<p>
  <strong>How does Twitter make money?</strong><br/>
  Advertising & Freemium: Mostly on corporate advertising and payments from 'promoted' tweets.
</p>




<p>
  <strong>How does Kickstarter make money?</strong><br/>
  Transactions/Royalties: Charges a 5% for successfully funded projects.
</p>




<p>
  <strong>How does Skype make money?</strong><br/>
  Freemium & Subscribers: Skype-to-skype calls are free, but users can buy additional features.
</p>




<p>
  <strong>How does Groupon make money?</strong><br/>
  Freemium & Transactions/Royalties: Groupon takes charges a fee to seller for every deal sold. It's one of the fastest growing company in the world. Going from $30.5 million in year one to $713.4 million in year two.
</p>




<p>
  <strong>How does Mint make money?</strong><br/>
  Lead Gen: Mint get paid a small fee when user switch to a new bank or company.
</p>




<p>
  <strong>How does Linkedin make money?</strong><br/>
  Advertising, Freemium, Subscribers & Selling Data: Sells user's data to companies and recruiters.
</p>




<p>
  <strong>How does Amazon Kindle make money?</strong><br/>
  Premium: Amazon loses money with Kindle but at the same time makes money selling digital content on it.
</p>




<p>
  <strong>How does Microsoft Xbox Kindle make money?</strong><br/>
  Advertising, Freemium, Subscribers, Premium & Transactions/Royalties: Xbox console and games cost money (premium), charges $50 annually (subscribers) in addition to ads.
</p>




<p>
  <strong>How does Stack Overflow make money?</strong><br/>
  Advertising: Ads, banners and sponsored results.
</p>




<p>
  <strong>How does Netflix make money?</strong><br/>
  Subscribers: Just subscribers.
</p>




<p>
  <strong>How does Pandora make money?</strong><br/>
  Advertising, Freemium & Subscribers: For free users presents adds, for subscribers does not.
</p>




<p>
  <strong>How does Pandora make money?</strong><br/>
  Advertising, Freemium & Subscribers: For free users presents adds, for subscribers does not.
</p>




<p>
  <strong>How does Spotify make money?</strong><br/>
  Advertising, Freemium & Subscribers: It has been reporting loses for a couple of years due to royalty payments.
</p>




<p>
  <strong>How does Firefox make money?</strong><br/>
  Transactions/Royalties: Most of the income comes from royalties from the Firefox search box. Their search partners includes Google, Bing, Yahoo, Yandex, Amazon, eBay and others. Also donations and grants.
</p>




<p>
  <strong>How does Craigslist make money?</strong><br/>
  Advertising, Freemium & Transactions/Royalties: Ads and charging users for posting in selected categories.
</p>




<p>
  <strong>How does Dropbox make money?</strong><br/>
  Freemium, Subscribers & Transactions/Royalties: A fixed capacity for free, to increase it users have to subscribe.
</p>




<p>
  <strong>How does Google make money?</strong><br/>
  Advertising: Ad products is their main source of revenue (AdSense and AdWords).
</p>




<p>
  <strong>How does Shopify make money?</strong><br/>
  Subscribers & Transactions/Royalties: Ad products is their main source of revenue (AdSense and AdWords).
</p>




<p>
  <strong>How does Airbnb make money?</strong><br/>
  Subscribers & Transactions/Royalties: Charge to travelers a fee of 6-12% and hosts pay a 3% for every booking on their site.
</p>




<p>
  <strong>How does Zynga make money?</strong><br/>
  Advertising & Freemium: Zynga makes money through people purchasing credits for games and also throught partnerships.
</p>




<p>
  <strong>How does World Of Warcraft make money?</strong><br/>
  Advertising & Subscribers: Charges $15 per month to users. They also sends expasions packs and discs.
</p>




<p>
  <strong>How does Hulu make money?</strong><br/>
  Advertising & Subscribers: Free service has Ads, limitations and restrictions, which are removed for subscribed users.
</p>




<p>
  So far so good, That it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
