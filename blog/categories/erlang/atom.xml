<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-01-25T21:38:12+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang List Comprehension]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/24/erlang-list-comprehension/"/>
    <updated>2015-01-24T21:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/24/erlang-list-comprehension</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang List Comprehension" />
</p>




<p>
  <h3>Syntax:</h3>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Expression</span> <span class="o">||</span> <span class="no">Generators1</span><span class="p">,</span> <span class="no">Guards1</span><span class="p">,</span> <span class="no">Generators2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>Expression</strong><br/>
  The expression specifies the elements of the result. Example: <code>[I || &lt;&ndash; [1, 2, 3]]</code> returns the input list element as is.
</p></p>

<p><p>
  <strong>Generators</strong><br/>
  Generators create the data used in ther filter-map operations. A generator has the &ldquo;Pattern &lt;&ndash; Data&rdquo; format, where &ldquo;Data&rdquo; is a list or an expression that results to a list and Pattern is a pattern used to match with the elements of the list. This pattern can be used to disassembly elements. Example two valid generators are <code>I &lt;&ndash; lists:seq(1, 10)</code> and <code>{X, Y} &lt;&ndash; [{&lsquo;A&rsquo;, &lsquo;Excellent&rsquo;}, {&lsquo;B&rsquo;, &lsquo;Good&rsquo;}, {&lsquo;C&rsquo;, &lsquo;Fair&rsquo;}]</code>.
</p></p>

<p><p>
  <strong>Guards</strong><br/>
  Guards are expression that return either true or false, the same as the guards we have seen in the previous posts. They apply to the variables that are on the left of the guard and the ones that are accessible to the scope where the comprehension runs. Example: <code>I &lt;&ndash; [1, 2, 3, 4], I rem 1 == 0</code> is a valid generator.
</p></p>

<p><p>
  <h3>Example:</h3>
</p></p>

<p><p>
  I will show some examples that implements some list functions. The most of them already exists in the lists module as I did in the past, I will add these functions to the module called mylists.
</p></p>

<p><p>
  <strong>map/2</strong><br/>
  The results contains the elements of the input list after applied to the input function.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% Generator: </span><span class="n">the</span> <span class="n">items</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span> <span class="n">provided</span>
</span><span class='line'><span class="sx">% Guard: </span><span class="n">no</span> <span class="n">guard</span> <span class="n">expression</span><span class="p">,</span> <span class="n">all</span> <span class="n">items</span> <span class="n">are</span> <span class="n">kept</span>
</span><span class='line'><span class="sx">% Expression: </span><span class="n">the</span> <span class="n">item</span> <span class="n">from</span> <span class="n">the</span> <span class="n">generator</span> <span class="n">after</span> <span class="n">applied</span> <span class="n">to</span> <span class="n">the</span> <span class="no">Function</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;map(Function, List) &amp;ndash;&gt;</span>
</span><span class='line'><span class="sr">  [Function(I) || I &amp;lt;&amp;ndash; List].&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">I</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">10</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>deleteall/2</strong><br/>
  Deletes all occurrences of an element from the list.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% Generator: </span><span class="n">the</span> <span class="n">items</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span> <span class="n">provided</span>
</span><span class='line'><span class="sx">% Guard: </span><span class="n">the</span> <span class="n">item</span> <span class="n">should</span> <span class="ow">not</span> <span class="n">be</span> <span class="n">equal</span> <span class="p">(</span><span class="n">both</span> <span class="n">value</span> <span class="ow">and</span> <span class="n">type</span><span class="p">)</span> <span class="n">with</span> <span class="n">the</span> <span class="no">Elem</span>
</span><span class='line'><span class="sx">% Expression: </span><span class="n">keep</span> <span class="n">the</span> <span class="n">elements</span> <span class="n">of</span> <span class="n">the</span> <span class="n">list</span> <span class="n">that</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">pass</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">the</span> <span class="n">guard</span> <span class="nb">test</span><span class="p">,</span> <span class="n">as</span> <span class="n">they</span> <span class="n">are</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;deleteall(Elem, List) &amp;ndash;&gt;</span>
</span><span class='line'><span class="sr">  [I || I &amp;lt;&amp;ndash; List, I =/</span><span class="o">=</span> <span class="no">Elem</span><span class="o">].</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;1&gt; mylists:deleteall(3, [1, 2, 3, 4, 3, 2, 1]).</span>
</span><span class='line'><span class="sr">[1,2,4,2,1]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>partition/2</strong><br/>
  Partition a list into two, according to if the elements satisfy or not a given predicate.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">partition</span><span class="p">(</span><span class="no">Pred</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="no">List</span><span class="p">,</span> <span class="no">Pred</span><span class="p">(</span><span class="n">I</span><span class="p">)</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="no">List</span><span class="p">,</span> <span class="ow">not</span><span class="p">(</span><span class="no">Pred</span><span class="p">(</span><span class="n">I</span><span class="p">))</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;% an alternative implementation</span>
</span><span class='line'><span class="sr">partition2(Pred, List) &amp;ndash;&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">Sat</span> <span class="o">=</span> <span class="n">filter</span><span class="p">(</span><span class="no">Pred</span><span class="p">,</span> <span class="no">List</span><span class="p">),</span>
</span><span class='line'><span class="p">{</span><span class="no">Sat</span><span class="p">,</span> <span class="no">List</span> <span class="o">--</span> <span class="no">Sat</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">partition</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">is_atom</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>replicated/2</strong><br/>
  Creates a list of Items of length Times.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">% Generator: </span><span class="n">only</span> <span class="n">used</span> <span class="k">for</span> <span class="n">fixing</span> <span class="n">the</span> <span class="n">length</span>
</span><span class='line'><span class="sx">% Expression: </span><span class="n">a</span> <span class="n">fixed</span> <span class="n">item</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;replicated(Item, Times) &amp;ndash;&gt;</span>
</span><span class='line'><span class="sr">  [Item || _ &amp;lt;&amp;ndash; lists:seq(1, Times)].&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">replicated</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="mi">10</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="ss">:&amp;</span><span class="n">ndash</span><span class="p">;)</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>replicate_items/2</strong><br/>
  Replicates each elements of the list Times times.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">replicate_items</span><span class="p">(</span><span class="no">Times</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="ss">mylists</span><span class="p">:</span><span class="n">flatten</span><span class="p">(</span><span class="o">[[</span><span class="no">Item</span> <span class="o">||</span> <span class="n">_</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="no">Times</span><span class="p">)</span><span class="o">]</span> <span class="o">||</span> <span class="no">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="no">List</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;% same as</span>
</span><span class='line'><span class="sr">% replicate_items(Times, List) &amp;ndash;&gt;</span>
</span><span class='line'><span class="sr">%   mylists:flatten([replicated(Item, Times) || Item &amp;lt;&amp;ndash; List]).&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">replicate_items</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">c</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>member/2</strong><br/>
  Returns true if an element is a member of the list, else returns false.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">member</span><span class="p">(</span><span class="no">Elem</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">[]</span> <span class="o">/=</span> <span class="o">[</span><span class="n">ok</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">==</span> <span class="no">Elem</span><span class="o">].</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;1&gt; mylists:member(a, [3, 2, 1, a, x, z]).</span>
</span><span class='line'><span class="sr">true</span>
</span><span class='line'><span class="sr">2&gt; mylists:member(a, [3, 2, 1, aa, x, z]).</span>
</span><span class='line'><span class="sr">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>member_times/2</strong><br/>
  Returns the number of occurences of an element in a list.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">member_times</span><span class="p">(</span><span class="no">Elem</span><span class="p">,</span> <span class="no">List</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">length</span><span class="p">(</span><span class="o">[</span><span class="n">ok</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">==</span> <span class="no">Elem</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;1&gt; mylists:member_times(a, [1, a, 2, 3, b, a, c]).</span>
</span><span class='line'><span class="sr">2</span>
</span><span class='line'><span class="sr">2&gt; mylists:member_times(a, [1, a, 2, 3, b, c]). &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">mylists</span><span class="p">:</span><span class="n">member_times</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]</span><span class="p">)</span><span class="o">.</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>quicksort/1</strong><br/>
  This is the famous Quicksort implementation that is often used to show the power and compactness of Erlang.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">qsort</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">[]</span><span class="p">;</span>
</span><span class='line'><span class="n">qsort</span><span class="p">(</span><span class="o">[</span><span class="no">Pivot</span> <span class="o">|</span> <span class="no">List</span><span class="o">]</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">qsort</span><span class="p">(</span><span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">Pivot</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="o">++</span>
</span><span class='line'>  <span class="o">[</span><span class="no">Pivot</span> <span class="o">|</span> <span class="n">qsort</span><span class="p">(</span><span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="no">List</span><span class="p">,</span> <span class="n">I</span> <span class="o">&gt;=</span> <span class="no">Pivot</span><span class="o">]</span><span class="p">)</span><span class="o">].</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;1&gt; mylists:qsort([7, 1, 3, 9, 1, 2, 0, 4, 6, 5]).</span>
</span><span class='line'><span class="sr">[0,1,1,2,3,4,5,6,7,9]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>Multiple Generators</strong><br/>
  Now I will present some examples with multiple generators.
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="p">{</span><span class="n">I</span><span class="p">,</span> <span class="n">J</span><span class="p">}</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="n">J</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">]].</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">1</span><span class="p">,</span><span class="n">c</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="mi">3</span><span class="p">,</span><span class="n">c</span><span class="p">}</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;% duplicate list</span>
</span><span class='line'><span class="sr">2&gt; [I || _ &amp;lt;&amp;ndash; [a, a], I &amp;lt;&amp;ndash; [1, 2, 3]].</span>
</span><span class='line'><span class="sr">[1,2,3,1,2,3]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="sx">% duplicate </span><span class="n">elements</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="n">J</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">a</span><span class="o">]].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;% discard elements and duplicate the others</span>
</span><span class='line'><span class="sr">4&gt; Discard = [2, 4].</span>
</span><span class='line'><span class="sr">[2,4]</span>
</span><span class='line'><span class="sr">5&gt; [I || I &amp;lt;&amp;ndash; [1, 2, 3, 4, 5, 6], not(lists:member(I, Discard)), _ &amp;lt;&amp;ndash; [a, a]].</span>
</span><span class='line'><span class="sr">[1,1,3,3,5,5,6,6]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="sx">% subsequences</span>
</span><span class='line'><span class="sx">8&gt; </span><span class="o">[[</span><span class="n">I</span> <span class="o">||</span> <span class="n">I</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">J</span><span class="p">)</span><span class="o">]</span> <span class="o">||</span> <span class="n">J</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">seq</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span><span class="o">].</span>
</span><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang List &amp; List Module]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/22/erlang-list-and-list-module/"/>
    <updated>2015-01-22T23:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/22/erlang-list-and-list-module</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Control Flow Statement" />
</p>




<p>
  List is the the most important data type in Erlang, as in every functional programming language. In this article, I will present the Erlang’s lists module and its most important functions.
</p>




<p>
  <h3>Syntax</h3>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Element1</span><span class="p">,</span> <span class="no">Element2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;,</span> <span class="no">ElementN</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  N is called the length of the list. So, [] is the empty list.
</p>




<p>
  <h3>Decomposing & Pattern Matching</h3>
</p>




<p>
  An empty list pattern matches with [].
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">=</span> <span class="o">[].</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">==</span> <span class="o">[].</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">=</span> <span class="o">[].</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">NotEmpty</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">==</span> <span class="no">NotEmpty</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="no">Empty</span> <span class="o">=</span> <span class="no">NotEmpty</span><span class="o">.</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="ss">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">value</span> <span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  A non-empty list pattern matches with [Head | Tail].
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="no">Head</span> <span class="o">|</span> <span class="no">Tail</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Head</span><span class="o">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">Tail</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="o">[</span><span class="no">Head1</span> <span class="o">|</span> <span class="no">Tail1</span><span class="o">]</span> <span class="o">=</span> <span class="no">Tail</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="no">Head1</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="no">Tail1</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="o">[</span><span class="no">Head2</span> <span class="o">|</span> <span class="no">Tail2</span><span class="o">]</span> <span class="o">=</span> <span class="o">[].</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="ss">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">value</span> <span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Normal Representation</strong><br/>
  The format [Element1, Element2, ..., ElementN] is a shorthand of [Element1 | [Element2 | ... | [ElementN | []] ... ] representation.<br/>
  Example: the list [1, 2, 3] is a shorthand of [1 | [2 | 3 | []]], that is the normal representation of a list.
</p>




<p>
  Decomposing:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span> <span class="o">|</span> <span class="o">[</span><span class="n">B</span> <span class="o">|[</span><span class="n">C</span> <span class="o">|</span> <span class="n">D</span><span class="o">]]]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">A</span><span class="o">.</span>
</span><span class='line'><span class="mi">1</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">B</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">C</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="n">D</span><span class="o">.</span>
</span><span class='line'><span class="o">[]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Composing:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">List</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">List1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span> <span class="o">|</span> <span class="no">List</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">List2</span> <span class="o">=</span> <span class="o">[-</span><span class="mi">1</span> <span class="o">|</span> <span class="o">[</span><span class="mi">0</span> <span class="o">|</span> <span class="no">List1</span><span class="o">]].</span>
</span><span class='line'><span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">List3</span> <span class="o">=</span> <span class="o">[[-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">]</span> <span class="o">|</span> <span class="no">List2</span><span class="o">].</span>
</span><span class='line'><span class="o">[[-</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span> <span class="o">%</span> <span class="n">the</span> <span class="n">head</span> <span class="n">is</span> <span class="n">just</span> <span class="mi">1</span> <span class="n">element</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Of course, since it is more readable and easier to write, the shorthand representation is usually used: 
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span> <span class="o">%</span> <span class="n">does</span> <span class="ow">not</span> <span class="n">match</span> <span class="n">cause</span>
</span><span class='line'><span class="sx">% the </span><span class="n">left</span><span class="o">-</span><span class="n">hand</span> <span class="n">side</span> <span class="n">matches</span> <span class="n">a</span> <span class="mi">4</span><span class="o">-</span><span class="n">elements</span> <span class="n">list</span>
</span><span class='line'><span class="o">**</span> <span class="n">exception</span> <span class="ss">error</span><span class="p">:</span> <span class="n">no</span> <span class="n">match</span> <span class="n">of</span> <span class="n">right</span> <span class="n">hand</span> <span class="n">side</span> <span class="n">value</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span> <span class="o">|</span> <span class="n">D</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="n">D</span><span class="o">.</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="o">[-</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">2</span> <span class="o">|</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span> <span class="o">|</span> <span class="o">[</span><span class="mi">1</span> <span class="o">|</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]]]].</span><span class="n">&lt;br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">[-</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>List Parsing</strong><br/>
  The pattern matching you saw before can be used in a function in order to parse the list:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">parse</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">parsed</span><span class="o">.</span>
</span><span class='line'><span class="n">parse</span><span class="p">(</span><span class="o">[</span><span class="no">Head</span> <span class="o">|</span> <span class="no">Tail</span><span class="o">]</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">parse</span><span class="p">(</span><span class="no">Tail</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Concatenation</strong><br/>
  Two lists can be concatenated using ++:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">L1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="no">L2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">L1</span> <span class="o">++</span> <span class="no">L2</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">L1</span> <span class="o">++</span> <span class="no">L2</span> <span class="o">++</span> <span class="no">L1</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="no">Mirror</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="no">List</span> <span class="o">++</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="k">end</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Fun&amp;lt;erl_eval .6.13229925&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">5</span><span class="o">&gt;</span> <span class="no">Mirror</span><span class="p">(</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="p">{</span><span class="n">c</span><span class="p">}</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,{</span><span class="n">c</span><span class="p">},{</span><span class="n">c</span><span class="p">},</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Difference</strong><br/>
  You can take the difference of two lists (the left-hand side one without the element of the right-hand side) using the -- operator:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">6</span><span class="o">&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">].</span>       <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="mi">7</span><span class="o">&gt;</span> <span class="no">Delete</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="no">List</span><span class="p">,</span> <span class="no">Element</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="no">List</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span> <span class="o">[</span><span class="no">Element</span><span class="o">]</span> <span class="k">end</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Fun&amp;lt;erl_eval .12.113037538&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">8</span><span class="o">&gt;</span> <span class="no">Delete</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <h3>Module Lists</h3>
</p>




<p>
  The lists module defines some commonly used list processing functions. This module is extremely useful, so it is a good idea to “remember” what functions it provides.
</p>




<p>
  <strong>all/2</strong><br/>
  Called as all(Pred, List). Returns true if Pred(Element) returns true for all lists’ elements.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">F</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">X</span> <span class="n">rem</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">all</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">true</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'><span class="n">ok</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="n">F</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">X</span> <span class="n">rem</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">end</span><span class="p">,</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">all</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>append/1|2</strong><br/>
  Concatenates the lists to one.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">append</span><span class="p">(</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">append</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Notice that the operator ++ and the function append/2 are the same.
</p>




<p>
  <strong>delete/2</strong><br/>
  Deletes an element from the list (first occurrence, if any).
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">delete</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">[</span><span class="n">d</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">d</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">d</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">d</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>concat/1</strong><br/>
  Accepts a list of items (atom, integer, float, string) and returns the concatenation of their textual representation as a list.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">concat</span><span class="p">(</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">ab</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;rsquo</span><span class="p">;,</span> <span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>   <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">ab</span><span class="o">.</span><span class="mi">1</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>filter/2</strong><br/>
  Called as filter(Pred, List). Returns a list containing only the elements that return true for the Pred.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Gt10</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">X</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="k">end</span><span class="p">,</span> <span class="ss">lists</span><span class="p">:</span><span class="n">filter</span><span class="p">(</span><span class="no">Gt10</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">66</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">22</span><span class="p">,</span><span class="mi">44</span><span class="p">,</span><span class="mi">66</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="p">{</span><span class="mi">4</span><span class="p">}</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span><span class="n">d</span><span class="p">,{</span><span class="mi">4</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">filter</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">is_number</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="k">end</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>flatten/1</strong><br/>
  Returns a flattened (no element is a list) version of the input list.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">flatten</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="o">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="o">]]]</span><span class="p">,</span> <span class="o">[[[[</span><span class="mi">8</span><span class="o">]]]]]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>key*** functions</strong><br/>
  There are several functions which their name starts with the word "key". They are all used to process lists of tuples.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Kl</span> <span class="o">=</span> <span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span> <span class="n">k1</span><span class="p">,</span> <span class="n">a</span><span class="p">},</span> <span class="p">{</span><span class="n">b</span><span class="p">,</span> <span class="n">k2</span><span class="p">,</span> <span class="n">b</span><span class="p">},</span> <span class="p">{</span><span class="n">c</span><span class="p">,</span> <span class="n">k3</span><span class="p">,</span> <span class="n">c</span><span class="p">},</span> <span class="p">{</span><span class="n">e</span><span class="p">,</span> <span class="n">k5</span><span class="p">,</span> <span class="n">e</span><span class="p">}</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span><span class="n">k1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">k2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="n">c</span><span class="p">,</span><span class="n">k3</span><span class="p">,</span><span class="n">c</span><span class="p">},{</span><span class="n">e</span><span class="p">,</span><span class="n">k5</span><span class="p">,</span><span class="n">e</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keydelete</span><span class="p">(</span><span class="n">k3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span><span class="n">k1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">k2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="n">e</span><span class="p">,</span><span class="n">k5</span><span class="p">,</span><span class="n">e</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keysearch</span><span class="p">(</span><span class="n">k3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">value</span><span class="p">,{</span><span class="n">c</span><span class="p">,</span><span class="n">k3</span><span class="p">,</span><span class="n">c</span><span class="p">}}</span>
</span><span class='line'><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keysearch</span><span class="p">(</span><span class="n">k4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="kp">false</span>
</span><span class='line'><span class="mi">5</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">keyreplace</span><span class="p">(</span><span class="n">k3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="no">Kl</span><span class="p">,</span> <span class="p">{</span><span class="kp">new</span><span class="p">,</span> <span class="n">tuple</span><span class="p">})</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="n">a</span><span class="p">,</span><span class="n">k1</span><span class="p">,</span><span class="n">a</span><span class="p">},{</span><span class="n">b</span><span class="p">,</span><span class="n">k2</span><span class="p">,</span><span class="n">b</span><span class="p">},{</span><span class="kp">new</span><span class="p">,</span><span class="n">tuple</span><span class="p">},{</span><span class="n">e</span><span class="p">,</span><span class="n">k5</span><span class="p">,</span><span class="n">e</span><span class="p">}</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>last/1</strong><br/>
  Returns the last element of the list.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">last</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>map/2</strong><br/>
  Called as map(Fun, List). Applies function Fun to every item of the list and returns the resulting list.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">I</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>partition/2</strong><br/>
  Partitions a list to two according to if the elements satisfy or not a given predicate.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">map</span><span class="p">(</span><span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">I</span> <span class="k">end</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>reverse/1|2</strong><br/>
  Returns the reverse of a list.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">d</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="o">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="n">d</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>sort/1|2</strong><br/>
  Sorts a list to increasing order or according to a given function.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">L</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="o">].</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">sort</span><span class="p">(</span><span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span> <span class="no">Gt</span> <span class="o">=</span> <span class="n">fun</span><span class="p">(</span><span class="n">I</span><span class="p">,</span> <span class="n">J</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">I</span> <span class="o">&gt;</span> <span class="n">J</span> <span class="k">end</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Fun&amp;lt;erl_eval .12.113037538&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">4</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">sort</span><span class="p">(</span><span class="no">Gt</span><span class="p">,</span> <span class="n">L</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>sum/1</strong><br/>
  Returns the sum of the elements of a list containing numbers.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">sum</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">6</span><span class="o">.</span><span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>u*** functions</strong><br/>
  There are several function which their name starts with "u" and the results they return contain no duplicates.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">usort</span><span class="p">(</span><span class="o">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Control Flow Statement]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/20/erlang-control-flow-statement/"/>
    <updated>2015-01-20T23:17:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/20/erlang-control-flow-statement</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Control Flow Statement" />
</p>




<p>
  As we saw in the previous post, pattern matching with different function clauses can be used in order to control the execution flow in Erlang. Erlang also provides the if, case, and receive control flow constructs that can be used in a function body. In this post I will only present the if and casestatements since receive is used for message passing and I will write a dedicated post about the subject. Both if and case are similar to the statements of other programming languages.
</p>




<p>
  <strong>If Statement</strong>
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span>
</span><span class='line'>  <span class="no">BoolbeanExpression1</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;IfBody1;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  BooleanExpression2 &amp;ndash;&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">IfBody2</span><span class="p">;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">true</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;BodyCathAll</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The different clauses, except the last one are like "else if" in other languages, while the last one (true ->) is like the "else"; it succeeds when all the previous clauses have failed.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">is_greater_than</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">if</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;X &amp;gt; Y -&amp;gt;</span>
</span><span class='line'><span class="sr">  true;</span>
</span><span class='line'><span class="sr">true -&amp;gt;</span>
</span><span class='line'><span class="sr">  false</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Case Statement</strong>
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="no">Expression</span> <span class="n">of</span>
</span><span class='line'>  <span class="no">Value1</span> <span class="o">[</span><span class="k">when</span> <span class="no">Guard1</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;CaseBody1;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  Value2 [when Guard2]&amp;ndash;&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">CaseBody2</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="n">_Other</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;CaseBodyCatchAll</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Notice that the last clause (_Other) is like the default clause in other programming languages. The Expression should always return a value (if it is a function call) that will be used to perform the pattern matching.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">check</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="k">when</span> <span class="n">is_list</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="k">case</span> <span class="ss">lists</span><span class="p">:</span><span class="n">reverse</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="n">of</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;List -&amp;gt;</span>
</span><span class='line'><span class="sr">  true;</span>
</span><span class='line'><span class="sr">_ -&amp;gt;</span>
</span><span class='line'><span class="sr">  false</span>
</span><span class='line'><span class="sr">end;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;check(_) &amp;ndash;&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">arg_not_list</span><span class="p">}</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Tail Recursion]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/18/erlang-tail-recursion/"/>
    <updated>2015-01-18T21:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/18/erlang-tail-recursion</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  A function is called tail recursive when the recursive call to itself happens only in the last expression of the body in every clause.
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">non_tail_recursive</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">non_tail_recursive</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;),</span>
</span><span class='line'>  <span class="n">other_expression</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span> <span class="o">.</span>
</span><span class='line'><span class="n">tail_recursive</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="n">other_expression</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'>  <span class="n">tail_recursive</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The first function is not the tail recursive as the recursive call is followed by other expression. While the second is, since the recursive call is the last statement.
</p>




<p>
  <strong>Tail Recursion & Performance</strong><br/>
  In many programming languages tails recursion is a good approach performance. But in general, it is not the case in the latest releases of Erlang. Tail recursion is not guaranteed to give you better performance.
</p>




<p>
  <strong>Tail Recursion VS Non Tail Recursion</strong><br/>
</p>




<p>
  Non Tail Recursive:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">length</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">length</span><span class="p">(</span><span class="o">[</span><span class="n">_</span> <span class="o">|</span> <span class="n">T</span><span class="o">]</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">length</span><span class="p">(</span><span class="n">T</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Tail Recursive:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">length</span><span class="p">(</span><span class="no">List</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">length</span><span class="p">(</span><span class="no">List</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;length([], L) &amp;ndash;&gt; L;</span>
</span><span class='line'><span class="sr">length([_ | T], L) &amp;ndash;&gt; length(T, L + 1).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Recursion]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/18/erlang-recursion/"/>
    <updated>2015-01-18T11:28:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/18/erlang-recursion</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  The definition of the word <strong>Recursion</strong> is "(mathematics) an expression such that each term is generated by repeating a particular mathematical operation". Recursion is one of the most powerful "tools" in a functional programming language.
</p>




<p>
  Recursion can be used to divide techniques to problem solving, where a problem is broken to smaller subproblems, the subproblems are solved, and the results are “merged” to generate the final result.
</p>




<p>
  Recursion happens when a function calls itself directly or indirectly. Recursion is used instead of the conventional loop statements of other programming languages, such as while and for in C.
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">functionA</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">Body_before_recursion</span><span class="p">,</span> <span class="sx">% optional</span>
</span><span class='line'><span class="sx"> </span> <span class="n">functionA</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;),</span>
</span><span class='line'>  <span class="no">Body_after_recursion</span><span class="o">.</span> <span class="o">%</span> <span class="n">optional</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">sum</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;sum(1) &amp;ndash;&gt; 1;</span>
</span><span class='line'><span class="sr">sum(N) &amp;ndash;&gt; N + sum_n(N &amp;ndash; 1).&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;%%</span> <span class="ss">example</span><span class="p">:</span><span class="n">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">fac</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;fac(1) &amp;ndash;&gt; 1;</span>
</span><span class='line'><span class="sr">fac(N) &amp;ndash;&gt; N * fac(N &amp;ndash; 1).&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;%%</span> <span class="ss">example</span><span class="p">:</span><span class="n">fac</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">list_sum</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;list_sum([]) &amp;ndash;&gt; 0;</span>
</span><span class='line'><span class="sr">list_sum([H|T]) &amp;ndash;&gt; H + sum_list(T).&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;%</span><span class="sx">% example:list_sum([1, </span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">list_increase_element</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;list_increase_element([]) &amp;ndash;&gt; [];</span>
</span><span class='line'><span class="sr">list_increase_element([H|T]) &amp;ndash;&gt; [H + 1|increase(T)].&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;%</span><span class="sx">% example:list_increase_element([1, </span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">list_length</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;list_length([]) &amp;ndash;&gt; 0;</span>
</span><span class='line'><span class="sr">list_length([_H|T]) &amp;ndash;&gt; 1 + list_length(T).&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;%</span><span class="sx">% example:list_length([1, </span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
