<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-01-17T22:46:13+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang Guards]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/17/erlang-guards/"/>
    <updated>2015-01-17T22:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/17/erlang-guards</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<h3>Guard structures</h3>




<p>
  Guards in Erlang are boolean functions placed after the key word, "when" and before the arrow, "->". Guards may appear as part of a function definition, 'receive', 'if', 'case' and 'try/catch' expressions.
</p>




<p>
  We use a guard in a function definition.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">compile</span><span class="p">(</span><span class="n">export_all</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;the_answer_is(N) when N =:= 42 &amp;ndash;&gt; true;</span>
</span><span class='line'><span class="sr">the_answer_is(N) &amp;ndash;&gt; false.&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="sx">% c(example).</span>
</span><span class='line'><span class="sx">% </span><span class="n">ok</span>
</span><span class='line'><span class="o">%</span>
</span><span class='line'><span class="sx">% example:the_answer_is(42).</span>
</span><span class='line'><span class="sx">% </span><span class="kp">true</span>
</span><span class='line'><span class="o">%</span>
</span><span class='line'><span class="sx">% example:the_answer_is(21).</span>
</span><span class='line'><span class="sx">% </span><span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>fun definition</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">F</span> <span class="o">=</span> <span class="n">fun</span>
</span><span class='line'>  <span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>receive expression</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">receive</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>if expression</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span>
</span><span class='line'>  <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="kp">true</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>case expression</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">L</span> <span class="n">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">L</span> <span class="n">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">node</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_AnyNode</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>try/catch</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">try</span> <span class="n">find</span><span class="p">(</span><span class="n">L</span><span class="p">)</span> <span class="n">of</span>
</span><span class='line'>  <span class="p">{</span><span class="n">answer</span><span class="p">,</span> <span class="n">N</span><span class="p">}</span> <span class="k">when</span> <span class="n">N</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="mi">42</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="kp">catch</span>
</span><span class='line'>  <span class="p">{</span><span class="n">notanumber</span><span class="p">,</span> <span class="n">R</span><span class="p">}</span> <span class="k">when</span> <span class="n">is_list</span><span class="o">&amp;</span><span class="n">reg</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">alist</span><span class="p">;</span>
</span><span class='line'>  <span class="p">{</span><span class="n">notanumber</span><span class="p">,</span> <span class="n">R</span><span class="p">}</span> <span class="k">when</span> <span class="n">is_float</span><span class="o">&amp;</span><span class="n">reg</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">afloat</span>
</span><span class='line'>  <span class="n">_</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">noidea</span>
</span><span class='line'><span class="k">end</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <h3>Multiple Guards</h3>
  It is possible to use multiple guards within the same function definition or expression. When using multiple guards, a semicolon, ";", signifies a boolean "OR", while a comma, ",", signifies boolean "AND".
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">the_answer_is</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span> <span class="o">==</span> <span class="mi">42</span><span class="p">,</span> <span class="n">is_integer</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span><span class='line'><span class="n">geq_1_or_leq_2</span><span class="p">(</span><span class="n">N</span><span class="p">)</span> <span class="k">when</span> <span class="n">N</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">N</span> <span class="o">=&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">2</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="kp">true</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <h3>Guard Functions</h3>
  There are several built-in-functions which be used in a guard.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">is_alive</span><span class="o">/</span><span class="mi">0</span>
</span><span class='line'><span class="n">is_boolean</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_builtin</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="n">is_constant</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_float</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_function</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="n">is_function</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_integer</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_list</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_number</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_pid</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_port</span><span class="o">/</span><span class="mi">1</span>                    <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="n">is_record</span><span class="o">/</span><span class="mi">3</span>
</span><span class='line'><span class="n">is_record</span><span class="o">/</span><span class="mi">2</span>
</span><span class='line'><span class="n">is_reference</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_tuple</span><span class="o">/</span><span class="mi">1</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;tuple_size/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_binary</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">is_bitstring</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">bit_size</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">byte_size</span><span class="o">/</span><span class="mi">1</span>
</span><span class='line'><span class="n">length</span><span class="p">(</span><span class="n">Z</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">N</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">A</span> <span class="o">&gt;</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">==</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">=&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">&gt;=</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">/=</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">=</span><span class="p">:</span><span class="o">=</span> <span class="n">B</span>
</span><span class='line'><span class="n">A</span> <span class="o">=</span><span class="sr">/= B</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Functions]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/17/erlang-functions/"/>
    <updated>2015-01-17T20:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/17/erlang-functions</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  As you know by now, Erlang is a functional programming language. In my point of view, different programming has different problem solving philosophy:<br/>
  - Procedural: describe the steps needed to be taken to solve the problem.<br/>
  - Logical (Declarative): describe the problem properly and let the language solve it.<br/>
  - Object-orientation: design the objects that will lead you to the solution.<br/>
  - Functional: define small and precise functions that all together solve the problem.
</p>




<p>
  <strong>Declaring a Function</strong><br/>
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function_name</span><span class="p">(</span><span class="no">Argument1</span><span class="p">,</span> <span class="no">Argument2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="no">Statement1</span><span class="p">,</span>
</span><span class='line'>  <span class="no">Statement2</span><span class="p">,</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>example.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">example</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">double</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;double(N) &amp;ndash;&gt; 2 * N.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Modules and Compiling]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/17/erlang-modules-and-compiling/"/>
    <updated>2015-01-17T11:09:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/17/erlang-modules-and-compiling</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  Erlang code is divided into modules. A module consists of a sequence of attributes and function declarations, each terminated by period (.). It provided the contained functions with a common namespace as well, You can imagine a module as a package in Java, or a header file in C. Program in Erlang spans over more than one modules.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>m.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="o">.</span>          <span class="o">%</span> <span class="k">module</span> <span class="nn">attribute</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">fact</span><span class="o">/</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>   <span class="o">%</span> <span class="k">module</span> <span class="nn">attribute</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;fact(N) when N&gt;0 &amp;ndash;&gt;  % beginning of function declaration</span>
</span><span class='line'><span class="sr">  N * fact(N-1);     %  |</span>
</span><span class='line'><span class="sr">fact(0) &amp;ndash;&gt;           %  |</span>
</span><span class='line'><span class="sr">  1.                 % end of function declaration</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <h3>Defining Modules</h3>
  Assume that we want to create a module that will contain our own implementation of list functions and name it mlists.<br/>
  First, we create a file named mlists.erl that will contain the module. The container file and the module names have to be the same.
</p>




<p>
  <h3>Calling a Module's Function</h3>
  The calling function of a module, convention in Erlang is <code>module:function(argument1, argument2, ...)</code>.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="ss">lists</span><span class="p">:</span><span class="n">max</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <h3>Calling a Module Function within the Module</h3>
  A function defined within the module file can be called either as <code>module_name:function(arguments1, argument2, ...)</code>, or <code>function(arguments1, argument2, ...)</code>, so the module name can be skipped.
</p>




<p>
  <h3>Modules Attributes</h3>
  Then we need to define the module’s attributes. An attribute is the information that we provide to the Erlang compiler. It is placed as a directive (usually) in the top of the file and has the <code>-attribute_name(attribue_value(s)).</code> format. The one attribute that we have to define is the one providing the module name.
</p>




<p>
  <strong>-module(Module).</strong><br/>
  Module declaration, defining the name of the module. The name Module, an atom, should be the same as the file name minus the extension erl. Otherwise code loading will not work as intended. 
</p>




<p>
  Example in the top of mlists.erl place:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mlists.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">mlists</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>-export(Functions).</strong><br/>
  Exported functions is used to define which functions the module exports, where "exports" means that they will be available to be called outside the module.
</p>




<p>
  All the functions that are not exported by the module are only visible within the file, similar with the private functions in Ruby, Java and the static ones in C.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mlists.erl </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">mlists</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="n">function1</span><span class="o">/</span><span class="n">arity1</span><span class="p">,</span> <span class="n">function2</span><span class="o">/</span><span class="n">arity2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>-import(Module,Functions).</strong></br>
  You can use this directive in order to import the selected exported functions of a module in the namespace of another one. It means that if you do so, you will be able to call the functions without the module prefix. Although in some cases it could be convenient, it is not recommended to use this directive, because it decreases the code’s readability.
</p>




<p>
  <strong>-compile(Options).</strong><br/>
  Compile is used to pass compilation instructions to the compiler.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">compile</span><span class="p">(</span><span class="o">[</span><span class="n">export_all</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>-on_load(Function).</strong><br/>
  Names a function that should be run automatically when a module a loaded.
</p>




<p>
  <h3>Compiling Modules</h3>
  Erlang programs must be compiled to object code. The compiler can generate a new file which contains the object code. The current abstract machine which runs the object code is called BEAM. To compile the modules start an Erlang emulator on the folder that contains your source files. In order to compile a .erl, using <code>c(Module)</code> Bult-in Function.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">mlist</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  If there is no error occurs, the compiler generates the compiled .beam file.
</p>




<p>
  <h3>Loading a Module</h3>
  The object code must be loaded into the Erlang runtime system. To load the modules start an Erlang emulator on the folder that contains your source files. In order to load a compiled module .beam, using <code>l(Module)</code> Bult-in Function.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">l</span><span class="p">(</span><span class="n">mlist</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="p">{</span><span class="n">module</span><span class="p">,</span> <span class="n">mlist</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  I promise, from now on the posts will be far more interesting. Next one, or two posts will be about defining functions in Erlang. You can imagine how important functions are for a functional programming language. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Datatypes]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/erlang-datatypes/"/>
    <updated>2015-01-16T23:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/erlang-datatypes</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  I will introduce the most datatypes that being used in Erlang such as number, atom, function, tuple, map, list, record, and boolean.
</p>




<p>
  <strong>Number</strong><br/>
  There are two datatypes of numeric are integers and floats.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="mi">42</span><span class="o">.</span>
</span><span class='line'><span class="mi">42</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="mi">2</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Atom</strong><br/>
  Atom is a literal, a constant with name. Atom should be enclosed in single quotes (') if it does not begin with a lower-case letter or if it contains other characters than alphanumeric characters, underscore (_), or @ sign.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">hi</span>
</span><span class='line'><span class="n">phone_number</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Sunday</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">phone</span> <span class="n">number</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Fun</strong><br/>
  Fun is a functional object. Funs make it possible to create an anonymous function and pass the function itself.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Fun1</span> <span class="o">=</span> <span class="n">fun</span> <span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span> <span class="n">X</span><span class="o">+</span><span class="mi">1</span> <span class="k">end</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Fun&amp;lt;erl_eval.6.39074546&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Fun1</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="mi">7</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Tuple</strong><br/>
  Tuple is a compound data type, it consists of elements of any datatypes.
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="no">Element1</span><span class="p">,</span> <span class="no">Element2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;,</span> <span class="no">ElementN</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;T = {bunlong, 27, {may, 17}}.</span>
</span><span class='line'><span class="sr">{bunlong, 27, {may, 17}}</span>
</span><span class='line'><span class="sr">element(1, T).</span>
</span><span class='line'><span class="sr">bunlong</span>
</span><span class='line'><span class="sr">T2 = setelement(2, T, 25).</span>
</span><span class='line'><span class="sr">{bunlong, 25, {may, 17}}</span>
</span><span class='line'><span class="sr">tuple_size(T).</span>
</span><span class='line'><span class="sr">3</span>
</span><span class='line'><span class="sr">tuple_size({}).</span>
</span><span class='line'><span class="sr">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>
  <string>Map</string><br/>
  Map is a compound data type with a variable number of key-value associations.
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;{Key1=&gt;Value1,&amp;hellip;,KeyN=&gt;ValueN}&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">M1</span> <span class="o">=</span> <span class="c1">#{name=&gt;bunlong,age=&gt;26,date=&gt;{may,07}}.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="n">age</span> <span class="o">=&gt;</span> <span class="mi">26</span><span class="p">,</span><span class="n">date</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="n">may</span><span class="p">,</span><span class="mo">07</span><span class="p">},</span><span class="nb">name</span> <span class="o">=&gt;</span> <span class="n">bunlong</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;2&gt; maps:get(name,M1).</span>
</span><span class='line'><span class="sr">bunlong</span>
</span><span class='line'><span class="sr">3&gt; maps:get(date,M1).</span>
</span><span class='line'><span class="sr">{may,07}</span>
</span><span class='line'><span class="sr">4&gt; M2 = maps:update(age,27,M1).&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="n">age</span> <span class="o">=&gt;</span> <span class="mi">27</span><span class="p">,</span><span class="n">date</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="n">may</span><span class="p">,</span><span class="mo">07</span><span class="p">},</span><span class="nb">name</span> <span class="o">=&gt;</span> <span class="n">bunlong</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;5&gt; map_size(M).</span>
</span><span class='line'><span class="sr">3</span>
</span><span class='line'><span class="sr">6&gt; map_size(</span><span class="si">#{}</span><span class="sr">).</span>
</span><span class='line'><span class="sr">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>List</strong><br/>
  As in all functional programming language, list is one of the most used datatyped. Again, Erlang borrows the list syntax from Prolog. Because of their importance. List is a compound data type with a variable number of terms.
</p>




<p>
  Syntax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="no">Element1</span><span class="p">,</span> <span class="no">Element2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;,</span> <span class="no">ElementN</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;L = [a, 2, {c, 4}].</span>
</span><span class='line'><span class="sr">[a, 2, {c, 4}]</span>
</span><span class='line'><span class="sr">[H|T] = L.</span>
</span><span class='line'><span class="sr">[a, 2, {c, 4}]</span>
</span><span class='line'><span class="sr">H.</span>
</span><span class='line'><span class="sr">a</span>
</span><span class='line'><span class="sr">T.</span>
</span><span class='line'><span class="sr">[2, {c, 4}]</span>
</span><span class='line'><span class="sr">L2 = [d|T].</span>
</span><span class='line'><span class="sr">[d, 2, {c, 4}]</span>
</span><span class='line'><span class="sr">length(L).</span>
</span><span class='line'><span class="sr">3</span>
</span><span class='line'><span class="sr">length([]).</span>
</span><span class='line'><span class="sr">0</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>
  <strong>Record</strong><br/>
  A record is a data structure for storing a fixed number of elements. It has named fields and is similar to a struct in C. However, record is not a true data type.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">-</span><span class="n">module</span><span class="p">(</span><span class="n">person</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">export</span><span class="p">(</span><span class="o">[</span><span class="kp">new</span><span class="o">/</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="o">-</span><span class="n">record</span><span class="p">(</span><span class="n">person</span><span class="p">,</span> <span class="p">{</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="p">})</span><span class="o">.</span>
</span><span class='line'><span class="kp">new</span><span class="p">(</span><span class="no">Name</span><span class="p">,</span> <span class="no">Age</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="c1">#person{name=Name, age=Age}.&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="sx">% &gt; </span><span class="ss">person</span><span class="p">:</span><span class="kp">new</span><span class="p">(</span><span class="n">bunlong</span><span class="p">,</span> <span class="mi">27</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'><span class="sx">% {person, </span><span class="n">bunlong</span><span class="p">,</span> <span class="mi">27</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Boolean</strong><br/>
  There is no Boolean data type in Erlang. Instead the atoms true and false are used to denote Boolean values.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;blockquote&gt;&lt;p&gt;2 =&amp;lt; 3.</span>
</span><span class='line'><span class="sr">true</span>
</span><span class='line'><span class="sr">true or false.</span>
</span><span class='line'><span class="sr">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></blockquote>

<p>
  So are so good, there are some other datatypes, such as binary, reference, Pid, etc. I will explain them when needed. see you in the next articles! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang Variables]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/erlang-variables/"/>
    <updated>2015-01-16T21:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/erlang-variables</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  <strong>Dynamic Datatyping</strong><br/>
  Erlang is a dynamic datatyping programming language. That means that when "declaring" a variable you do not need to statically specify the datatypes. For example, this is how we declare and initialize an integer in Erlang:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span> <span class="o">=</span> <span class="mi">17</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This approach has both advantages and disadvantages. Advantages: when programming, it is fast and convenient as we don't need to declare the variables datatypes. Disadvantages: In big projects it can lead to code readability problems unless well documented.
</p>




<p>
  <strong>Variables Declaration</strong><br/>
  Erlang is influenced by <a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a>. As with Prolog variables is a string consisting of letters, numbers and underscore characters, and beginning with an upper-case letter or underscore.<br/>
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span>
</span><span class='line'><span class="no">Name1</span>
</span><span class='line'><span class="no">PhoneNumber</span>
</span><span class='line'><span class="no">Phone_number</span>
</span><span class='line'><span class="n">_</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="no">Height</span>
</span><span class='line'><span class="o">[</span><span class="n">H</span><span class="o">|&lt;</span><span class="sr">/em&gt;] = [1, , 2, 3]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Variable Assignement</strong><br/>
  Another feature that Erlang inherited from Prolog is binding with pattern matching. In a nutshell, a value is not assigned to a variable but bound with pattern matching. The most important thing is that variables in Erlang are single assignement, it mean that once bound to a value, their value cannot change for their lifetime.<br/>
</p>




<p>
  Example (open terminator and try the following):
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="no">Age</span> <span class="o">=</span> <span class="mi">10</span><span class="o">.</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="no">Age</span> <span class="o">=</span> <span class="mi">11</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We will get an error:
</p>




<p>
  <code>** exception error: no match of right hand side value 11</code>
</p>




<p>
  The problem is that A is bound to the value 10, so Erlang tries to pattern match 10 with the value 11 which is impossible.
</p>

]]></content>
  </entry>
  
</feed>
