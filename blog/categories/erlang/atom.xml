<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-01-16T22:17:18+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang Variables]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/erlang-variables/"/>
    <updated>2015-01-16T21:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/erlang-variables</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Erlang Variables" />
</p>




<p>
  Erlang is a dynamic datatyping programming language. That means that when "declaring" a variable you do not need to statically specify the datatypes. For example, this is how we declare and initialize an integer in Erlang:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">I</span> <span class="o">=</span> <span class="mi">17</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This approach has both advantages and disadvantages. Advantages: when programming, it is fast and convenient as we don't need to declare the variables’ typetypes. Disadvantages: In big projects it can lead to code readability problems unless well documented.
</p>




<p>
  <strong>Variables Declaration</strong><br/>
  Erlang is influenced by <a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a>. As with Prolog variables is a string consisting of letters, numbers and underscore characters, and beginning with an upper-case letter or underscore.<br/>
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">X</span>
</span><span class='line'><span class="no">Name1</span>
</span><span class='line'><span class="no">PhoneNumber</span>
</span><span class='line'><span class="no">Phone_number</span>
</span><span class='line'><span class="n">_</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="no">Height</span>
</span><span class='line'><span class="o">[</span><span class="n">H</span><span class="o">|&lt;</span><span class="sr">/em&gt;] = [1, , 2, 3]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Variable Assignement</strong><br/>
  Another feature that Erlang inherited from Prolog is binding with pattern matching. In a nutshell, a value is not assigned to a variable but bound with pattern matching. The most important thing is that variables in Erlang are single assignement, it mean that once bound to a value, their value cannot change for their lifetime.<br/>
</p>




<p>
  Example (open terminator and try the following):
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">&gt;</span> <span class="n">A</span> <span class="o">=</span> <span class="mi">10</span><span class="o">.</span>
</span><span class='line'><span class="mi">10</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span> <span class="n">A</span> <span class="o">=</span> <span class="mi">11</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We will get an error:
</p>




<p>
  <code>** exception error: no match of right hand side value 11</code>
</p>




<p>
  The problem is that A is bound to the value 10, so Erlang tries to pattern match 10 with the value 11 which is impossible.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Erlang and Chicagoboss Framework]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/16/introduction-to-erlang-and-chicagoboss-framework/"/>
    <updated>2015-01-16T08:38:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/16/introduction-to-erlang-and-chicagoboss-framework</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Introduction to Erlang and Chicagoboss Framework" />
</p>




<p>
  <strong><a href="http://www.erlang.org/" target="_blank">Erlang</a></strong> is a programming language used to build massively scalable soft real-time systems with requirements on high availability. Some of its uses are in telecoms, banking, e-commerce, computer telephony and instant messaging. Erlang's runtime system has built-in support for concurrency, distribution and fault tolerance.
</p>




<p>
  <strong>Erlang</strong> is the most advanced open-source server platform in existence, but it seems almost no one knows about it. <strong>Erlang</strong> can handle hundreds of thousands of simultaneous connections, it can spawn millions of simultaneous processes in under a second, server code can be upgraded, in production, without any interruption of service, and errors are handled in such a way that server crashes are extremely uncommon.
</p>




<p>
  What is not to like? Why isn't the entire world programming in <strong>Erlang</strong>? Well, <strong>Erlang</strong> is a functional language, which means that to implement any algorithms, you must use recursion instead of familiar “for” and “while” loops. Unlike every major scripting language, there is no built-in syntax for dictionaries or hash maps. And to actually write a functioning server, you must learn an additional layer of magic known as OTP. These barriers, in my opinion, have prevented <strong>Erlang</strong> from gaining much traction outside of Scandinavia.
</p>




<p>
  <img src="http://geekhmer.github.io/images/logo_chicagoboss.svg" alt="Introduction to Erlang and Chicagoboss Framework" />
</p>




<p>
  But <strong><a href="http://www.chicagoboss.org/" target="_blank">Chicagoboss Framwork</a></strong> changes all that. It makes <strong>Erlang</strong> accessible to hackers
  who just want to write a reliable website in a nifty language. Boss uses code generation to get around the historic hash-map quandary, and takes care of all the OTP business so that you can focus on writing the features you need for your website. As for the supposed burdens of functional programming, I find that recursion is rarely necessary in workaday web programming; I would guess that 99% of server application code simply shuttles data to and from a database, so in the course of building a website, the pedestrian procedural programmer will hardly miss his “do/while” loops.
</p>




<p>
  If you are an experienced web programmer, you'll probably enjoy all the
  amenities that CB has to offer: an advanced ORM with support for database associations, sharding, and caching. lightning-fast templates compiled down to <strong>Erlang</strong> bytecode, automatic recompiling and in-browser error reporting, simple directives for reloads and redirects, routes for constructing URLs and handling requests, full frameworks for sending and receiving email, a built-in message queue, a framework for writing and running functional tests, and a first-of-its-kind event system for monitoring the data model.
</p>




<p>
  In the end, by combining the <strong>Erlang</strong> platform with its own innovations,
  <strong>Chicagoboss Framwork</strong> makes websites a delight to develop and a joy to deploy. Boss applications can be written in the same time or less as equivalent Rails applications, and they will almost never crash or leak memory. Since the underlying networking is all asynchronous, you can easily write concurrent services, such as chat, that previously were only possible in callback-based frameworks (such as Nginx, Node.js, Twisted, or Perlbal).
</p>




<p>
  The importance of this advancement cannot be overstated. It is now feasible for a very small team to develop and operate a database-driven, highly interactive, heavily trafficked website with very little capital outlay. Although <strong>Chicagoboss Framwork</strong> can’t tell you how to acquire users, the rest of this manual will show you everything you need to do to handle their requests and (with luck) fulfill their desires.
</p>




<p>
  Reference: <a href="http://www.erlang.org/" target="_blank">www.erlang.org</a>, <a href="http://www.chicagoboss.org/" target="_blank">www.chicagoboss.org</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Erlang Learning Sequence]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/15/the-erlang-learning-sequence/"/>
    <updated>2015-01-15T09:10:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/15/the-erlang-learning-sequence</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="The Erlang Learning Sequence" />
</p>




<p>
  While I was writing my first article (<a href="http://geekhmer.github.io/blog/2014/06/26/why-erlang/">Why Erlang?</a>). I realized that since Erlang is not a popular programming language it would be nice to start an introduction to The Erlang Learning Sequence.
</p>




<p>
  I consider Erlang as a must-know language for an engineer that works with distributed systems and parallel programming. Believe me! in several cases Erlang is a problem solver.
</p>




<p>
  I will keep posting of short and example based. The approximation of the posts that I intend to write is:
</p>




<p>
  1. Introduction to Erlang & Chicagoboss Framework<br/>
  2. Variables<br/>
  3. Datatypes<br/>
  4. Modules and Compiling<br/>
  5. Functions<br/>
  6. Recursion<br/>
  7. Predefined Module<br/>
  8. List & List Module<br/>
  9. List Comprehension<br/>
  10. Concurrency (Processes)<br/>
  11. Message Passing<br/>
</p>




<p>
  So far so good, I will keep this list updated in case that I come up with new ideas! I hope I will convince you that Erlang worths for every software engineer’s attention. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Emacs Erlang Editor/IDE]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/14/install-emacs-erlang-editor-slash-ide/"/>
    <updated>2015-01-14T23:17:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/14/install-emacs-erlang-editor-slash-ide</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Install Emacs Erlang Editor/IDE" />
</p>




<p>
  Currently I personally use Emacs for programming in Erlang. There is an Erlang editing mode in Emacs. Well, I can help you to install Emacs and set Erlang mode in Emacs. So, let's do it!
</p>




<p>
  <strong>Install Emacs</strong><br/>
  Run commands below to install Emacs:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">add</span><span class="o">-</span><span class="n">repository</span> <span class="ss">ppa</span><span class="p">:</span><span class="n">cassou</span><span class="o">/</span><span class="n">emacs</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">emacs24</span> <span class="n">emacs24</span><span class="o">-</span><span class="n">el</span> <span class="n">emacs24</span><span class="o">-</span><span class="n">common</span><span class="o">-</span><span class="n">non</span><span class="o">-</span><span class="n">dfsg</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Set Erlang Mode in Emacs</strong><br/>
  To set Erlang mode in Emacs add the following codes to file ~/.emacs:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>.emacs </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">defun</span> <span class="n">my</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="n">setq</span> <span class="n">inferior</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">machine</span><span class="o">-</span><span class="n">options</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">-</span><span class="n">sname</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">emacs</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;))</span>
</span><span class='line'>  <span class="p">(</span><span class="n">imenu</span><span class="o">-</span><span class="n">add</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">menubar</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">imenu</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">add</span><span class="o">-</span><span class="n">hook</span> <span class="s1">&#39;erlang-mode-hook &#39;</span><span class="n">my</span><span class="o">-</span><span class="n">erlang</span><span class="o">-</span><span class="n">mode</span><span class="o">-</span><span class="n">hook</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, hope the article could helped you. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Erlang Using Repository on Ubuntu]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu/"/>
    <updated>2015-01-14T21:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Install Erlang on Ubuntu" />
</p>




<p>
  <strong>1. Adding Repository Entry</strong><br/>
  To add Erlang repository to your system, pls call the following commands:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="o">.</span><span class="mi">0</span><span class="n">_all</span><span class="o">.</span><span class="n">deb</span><span class="o">&lt;</span><span class="sr">/a&gt;</span>
</span><span class='line'><span class="sr">sudo dpkg -i erlang-solutions_1.0_all.deb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Or Adding the Repository Entry Manually</strong><br/>
  Add one of the following lines to your /etc/apt/sources.list:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deb</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://packages.erlang-solutions.com/ubuntu&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="o">&lt;</span><span class="sr">/a&gt; trusty contrib</span>
</span><span class='line'><span class="sr">deb &lt;a href=&quot;http:/</span><span class="o">/</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="s2">&quot;&gt;http://packages.erlang-solutions.com/ubuntu&lt;/a&gt; saucy contrib</span>
</span><span class='line'><span class="s2">deb &lt;a href=&quot;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="s2">&quot;&gt;http://packages.erlang-solutions.com/ubuntu&lt;/a&gt; precise contrib</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  And next, add the Erlang public key for apt-secure using following commands:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="o">/</span><span class="n">erlang_solutions</span><span class="o">.</span><span class="n">asc</span><span class="o">&lt;</span><span class="sr">/a&gt;</span>
</span><span class='line'><span class="sr">sudo apt-key add erlang_solutions.asc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>2. Install Erlang</strong><br/>
  To install Erlang to your system, pls call the following commands:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">erlang</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, hope you enjoyed the article. see ya! :)
</p>

]]></content>
  </entry>
  
</feed>
