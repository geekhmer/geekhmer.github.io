<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-01-14T22:13:37+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Erlang Using Repository on Ubuntu]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu/"/>
    <updated>2015-01-14T21:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/14/install-erlang-using-repository-on-ubuntu</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Install Erlang on Ubuntu" />
</p>




<p>
  <strong>1. Adding Repository Entry</strong><br/>
  To add Erlang repository to your system, pls call the following commands:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions_1</span><span class="o">.</span><span class="mi">0</span><span class="n">_all</span><span class="o">.</span><span class="n">deb</span><span class="o">&lt;</span><span class="sr">/a&gt;</span>
</span><span class='line'><span class="sr">sudo dpkg -i erlang-solutions_1.0_all.deb</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Or Adding the Repository Entry Manually</strong><br/>
  Add one of the following lines to your /etc/apt/sources.list:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">deb</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://packages.erlang-solutions.com/ubuntu&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="o">&lt;</span><span class="sr">/a&gt; trusty contrib</span>
</span><span class='line'><span class="sr">deb &lt;a href=&quot;http:/</span><span class="o">/</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="s2">&quot;&gt;http://packages.erlang-solutions.com/ubuntu&lt;/a&gt; saucy contrib</span>
</span><span class='line'><span class="s2">deb &lt;a href=&quot;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="s2">&quot;&gt;http://packages.erlang-solutions.com/ubuntu&lt;/a&gt; precise contrib</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  And next, add the Erlang public key for apt-secure using following commands:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">wget</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">packages</span><span class="o">.</span><span class="n">erlang</span><span class="o">-</span><span class="n">solutions</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">ubuntu</span><span class="o">/</span><span class="n">erlang_solutions</span><span class="o">.</span><span class="n">asc</span><span class="o">&lt;</span><span class="sr">/a&gt;</span>
</span><span class='line'><span class="sr">sudo apt-key add erlang_solutions.asc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>2. Install Erlang</strong><br/>
  To install Erlang to your system, pls call the following commands:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">update</span>
</span><span class='line'><span class="n">sudo</span> <span class="n">apt</span><span class="o">-</span><span class="n">get</span> <span class="n">install</span> <span class="n">erlang</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, hope you enjoyed the article. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chicagoboss Publish/Subscribe]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/10/chicagoboss-publish-slash-subscribe/"/>
    <updated>2015-01-10T23:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/10/chicagoboss-publish-slash-subscribe</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" alt="Chicagoboss Publish/Subscribe" />
</p>




<p>
  In software architecture, publishâ€“subscribe is a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers. Instead, published messages are characterized into classes, without knowledge of what, if any, subscribers there may be. Similarly, subscribers express interest in one or more classes, and only receive messages that are of interest, without knowledge of what, if any, publishers there are.
</p>




<p>
  Pub/sub is a sibling of the message queue paradigm, and is typically one part of a larger message-oriented middleware system. Most messaging systems support both the pub/sub and message queue models in their API.
</p>




<p>
  Actually Chicagoboss ships with a message queue service called <strong>BossMQ</strong>. The service consists of named channels which follow a <strong>publish/subscribe</strong> architecture; any Erlang process can publish or subscribe to any channel, and Erlang term can be sent as a message. Channels need not be explicitly created or destroyed; they are created on demand for publishers or subscribers, and automatically destroyed after a certain (configurable) amount of time. <strong>BossMQ</strong> runs in clustered configurations just as well as a single-machine setup.
</p>




<p>
  <strong>Process</strong>
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/chicagoboss_publish_subscribe.png"><img src="http://geekhmer.github.io/images/chicagoboss_publish_subscribe.png" width="680" /></a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang &amp; Chicago Boss framework]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/11/erlang-and-chicago-boss-framework/"/>
    <updated>2014-12-11T21:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/11/erlang-and-chicago-boss-framework</id>
    <content type="html"><![CDATA[<h3>Erlang</h3>


<br/>




<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" />
</p>




<p>
  You may remember <a href="http://geekhmer.github.io/blog/2014/06/26/why-erlang/">my first article post about Erlang</a>. I've shared a short introduction to the Erlang programming language and it's concurrency philosophy in the article. There are some highlights of that Erlang already include:
</p>




<p>
  <strong>High Availability and Reliability</strong><br/>
  - Simple and consistent error recovery and supervision hierarchiess.<br/>
  - Built-in fault tolerance (Let it fail/crash! - Do not program defensively).<br/>
  - Hot code loading during runtime (software upgrades with zero downtime).
</p>




<p>
  <strong>Scalability and Heterogeneity</strong><br/>
  - Run on multiple platforms, HetNet support.<br/>
  - Network aware runtime, out-of-the-box distributed architectures.<br/>
  - Very light-weight processes, highly scalable transparent or explicit concurrency.<br/>
  - Awesome transparent multi-core support:
</p>




<p>
  <img src="http://geekhmer.github.io/images/concurrent.jpg" />
</p>




<p>
  <strong>Less Effort</strong><br/>
  - Functional programming language, high abstraction level, concise readable programs.<br/>
  - When compared with any imperative language, 4â€“20 times less code written for same application.<br/>
  - Suitable for rapid prototyping.<br/>
  - Impressive and powerful libraries and middleware (Open Telecom Platform - OTP).
</p>




<p>
  So, what is the "dark side" of Erlang for most developers? The correct answer is "The Erlang syntax!".
</p>




<p>
  In my first week with Erlang, I had no idea what I've been doing while coding something. Believe me, if you fall into the Erlang world from any imperative language, you'd feel like me. The problem could be good to discuss, but that's beside the point.
</p>




<h3>Chicago Boss framwork: Start small, dream big</h3>




<p>
  <img src="http://geekhmer.github.io/images/logo_chicagoboss.svg" />
</p>




<p>
  In software development, using a framework is almost a rule for fast, clean, easy readable and standardized coding. Chicago Boss (<a href="http://www.chicagoboss.org/">http://www.chicagoboss.org/</a>) is a framework that is heavily inspired by Rails. Set up and use Chicago Boss is easy as falling off a log. Chicago Boss allows you to code with the aforementioned standards in Erlang. Plus, offers conveniences of modern web development, including WebSocket and Comet. Basic features of Chicago Boss listed below:<br/>
  - 100% asynchronous I/O<br/>
  - Support for Erlang and Elixir code<br/>
  - BossDB: Database connection layer with an advanced ORM which with built-in support for Mnesia, MongoDB, MySQL, PostgreSQL, Riak and Tokyo Tyrant.<br/>
  - BossCache: Database caching layer<br/>
  - BossMQ: Clusterâ€“wide, channelâ€“based message queue<br/>
  - BossRouter: URL router<br/>
  - BossSession: Session storage layer<br/>
  - BossNews: Event listener, model event system<br/>
  - BossMail: Built-in email server<br/>
  - Django and Jade template support<br/>
  - Very clean controllers as result of pattern matching<br/>
  - Auto document generation for models<br/>
  - An useful admin interface<br/>
  - Automatic code reloading
</p>




<p>
  We'll cover almost all of features of Chicago Boss during developing an applicatioin. So far so good let enjoy in developing a simple application with Chicago Boss framwork. See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Erlang?]]></title>
    <link href="http://geekhmer.github.io/blog/2014/06/26/why-erlang/"/>
    <updated>2014-06-26T20:51:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/06/26/why-erlang</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/logo_erlang.png" />
</p>




<p>
  Erlang is a programming language traditionally used to build massively scalable soft real-time systems with requirements on high availability. Some of its uses are in telecoms, banking, e-commerce, computer telephony, realtime application and instant messaging. Erlangâ€™s runtime system has built-in support for concurrency, distribution and fault tolerance.
</p>




<p>
  <strong>High Availability/Reliability</strong><br/>
  - Simple and consistent error recovery and supervision hierarchiess.<br/>
  - Built-in fault tolerance.<br/>
  - Software upgrade (hot code loading) during runtime.
</p>




<p>
  <strong>Scalability/Heterogeneity</strong><br/>
  - Run on a variety of platforms, supports heterogeneous networks.<br/>
  - Network aware runtime, out-of-the-box distributed architectures.<br/>
  - Lightweight processes, highly scalable transparent or explicit concurrency.
</p>




<p>
  <strong>Less Effort</strong><br/>
  - Functional programming language, high abstraction level, concise readable programs.<br/>
  - 4â€“20 times less code compared to C/C++/Java.<br/>
  - Suitable for rapid prototyping.<br/>
  - Powerful middleware and libraries (OTP).
</p>




<p>
  For more information <a href="http://www.erlang.org/" target="_blank">erlang.org</a>
</p>

]]></content>
  </entry>
  
</feed>
