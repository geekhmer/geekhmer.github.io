<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-04-16T09:31:35+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Map Draggable Maker]]></title>
    <link href="http://geekhmer.github.io/blog/2014/06/06/google-map-draggable-maker/"/>
    <updated>2014-06-06T12:05:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/06/06/google-map-draggable-maker</id>
    <content type="html"><![CDATA[<p>
  Google’s Maps API offer a vast range of functionality to interact with underlying maps. As opposed to statically setting markers (pins) programmatically sometimes you might want your users to be able to interact with the map by dragging existing markers around the map. Fortunately, Google’s JavaScript API offers this functionality out of the box. Below you’ll find an example based on Google Maps API V3.
</p>




<p> 
  <a class="fancybox" href="http://geekhmer.github.io/images/google_map_draggable_maker.png"><img src="http://geekhmer.github.io/images/google_map_draggable_maker.png" /></a>
</p>




<p>
  <strong>Practice</strong>
</p>




<p>
  google_map_draggable_maker.js is a small library use to make google map draggable easily:
</p>


<p>{% codeblock google_map_draggable_maker.js lang:javascript %}
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
// @author Bunlong &lt;bunlong.van@gmail>
// Created :  6 Jun 2014 by Bunlong
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>// options = {elementh, lat, lng, zoom, coordsLenght, elementLat, elementLng}</p>

<p>MapDraggableMarker = function(options) {
  this.element = options.element;
  this.lat = options.lat;
  this.lng = options.lng;
  this.zoom = options.zoom;
  this.coordsLenght = options.coordsLenght;
  this.elementLat = options.elementLat;
  this.elementLng = options.elementLng;</p>

<p>  this.map = new google.maps.Map(this.element, {</p>

<pre><code>zoom: this.zoom,
center: new google.maps.LatLng(this.lat, this.lng),
mapTypeId: google.maps.MapTypeId.ROADMAP
</code></pre>

<p>  });</p>

<p>  this.marker = new google.maps.Marker({</p>

<pre><code>position: new google.maps.LatLng(this.lat, this.lng),
draggable: true
</code></pre>

<p>  });
}</p>

<p>MapDraggableMarker.prototype.addListenerToMarker = function() {
  var self = this;</p>

<p>  google.maps.event.addListener(this.marker, &lsquo;dragend&rsquo;, function(evt) {</p>

<pre><code>self.elementLat.val(evt.latLng.lat().toFixed(self.coordsLenght));
self.elementLng.val(evt.latLng.lng().toFixed(self.coordsLenght));
</code></pre>

<p>  });
}</p>

<p>MapDraggableMarker.prototype.init = function() {
  this.addListenerToMarker();
  this.map.setCenter(this.marker.position);
  this.marker.setMap(this.map);
}
{% endcodeblock %}</p>

<p>
  index.html is the sample google map draggable:
</p>


<p>{% codeblock index.html lang:javascript %}
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title></title>
  <link rel="stylesheet" href="styles.css" />
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
  <script type="text/javascript" src="jquery-1.11.1.min.js"></script>
  <script type="text/javascript" src="google_map_draggable_maker.js"></script>
  <script type="text/javascript"></p>

<pre><code>$(document).ready(function() {
  var lat = ($("#latitude").val() == "") ? 11.558831 : $("#latitude").val(),
      lng = ($("#longitude").val() == "") ? 104.917445 : $("#longitude").val(),
      zoom = 15,
      coordslenght = 6;

      mapDraggableMarker = new MapDraggableMarker({ element: $("#canvas")[0], 
                                                    lat: lat, 
                                                    lng: lng, 
                                                    zoom: zoom, 
                                                    coordsLenght: coordslenght, 
                                                    elementLat: $("#latitude"), 
                                                    elementLng: $("#longitude")
                                                  });

  mapDraggableMarker.init();
});
</code></pre>

<p>  </script>
</head>
<body>
  <div id="canvas" style="width: 635px; height: 300px;"></div><br />
  <label for="latitude">Latitude:</label>
  <input id="latitude" type="text" value="" />
  <label for="longitude">Longitude:</label>
  <input id="longitude" type="text" value="" />
</body>
</html>
{% endcodeblock %}</p>

<p>
  You can download the <a href="https://github.com/Bunlong/google_map_draggable_maker" target="_blank">source code</a> and try it out.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSRender]]></title>
    <link href="http://geekhmer.github.io/blog/2014/06/02/jsrender/"/>
    <updated>2014-06-02T17:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/06/02/jsrender</id>
    <content type="html"><![CDATA[<p>
  <strong>What is JsRender?</strong><br/>
  Many development platforms use templates to reduce code and simplify maintenance, and HTML5 and JavaScript are no exception. JsRender is a JavaScript library that allows you to define a boilerplate structure once and reuse it to generate HTML dynamically. JsRender brings a new templating library to HTML5 development that has a codeless tag syntax and high performance, has no dependency on jQuery nor on the Document Object Model (DOM), supports creating custom functions and uses pure string-based rendering.
</p>




<p>
  <strong>Why Templates?</strong><br/>
  Using templates with JavaScript reduces and simplifies code. Without templates, adding a series of list items and other HTML elements for a set of data might require manipulating a browser’s DOM. This is where templating using a plug-in such as JsRender can be quite useful to do the heavy lifting.
</p>




<p>
  <strong>Practice</strong>
</p>


<p>{% codeblock demo.html lang:javascript %}
&lt;!DOCTYPE html>
<html>
<head>
  <script src="js/jquery.min.js" type="text/javascript"></script>
  <script src="js/jsrender.js" type="text/javascript"></script>
  <link href="css/bootstrap.min.css" rel="stylesheet" type="text/css" /></p>

<p>  <script id="book_template" type="text/x-jsrender"></p>

<pre><code>&lt;tr&gt;
  &lt;td&gt;{ {:#index+1} } &lt;/td&gt;
  &lt;td&gt;{ {&gt;name} }&lt;/td&gt;
  &lt;td&gt;{ {&gt;releaseYear} }&lt;/td&gt;
&lt;/tr&gt;
</code></pre>

<p>  </script></p>

<p>  <script type="text/javascript"></p>

<pre><code>$(document).ready(function() {
  var books = [
    { name: "Erlang", releaseYear: "1986" },
    { name: "Ruby", releaseYear: "1998" },
    { name: "Ruby on Rails", releaseYear: "1999" },
    { name: "Javascript", releaseYear: "1976" }
  ];

  $("#book_list").html(
    $("#book_template").render(books)
  );
});
</code></pre>

<p>  </script></p>

<p></head>
<body>
  <div class="container"></p>

<pre><code>&lt;section id="fluidGridSystem"&gt;
  &lt;div class="page-header"&gt;
    &lt;h3&gt;Render template against local data&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="row-fluid show-grid"&gt;
    &lt;table class="table table-bordered"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;No&lt;/th&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Release Year&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody id="book_list"&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre>

<p>  </div>
</body>
</html>
{% endcodeblock %}</p>

<p>
  You can download the <a href="https://github.com/Bunlong/jsrender" target="_blank">source code</a> and try it out.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tokeninput Jquery Multiple Select Item]]></title>
    <link href="http://geekhmer.github.io/blog/2014/05/22/tokeninput-jquery-multiple-select-item/"/>
    <updated>2014-05-22T16:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/05/22/tokeninput-jquery-multiple-select-item</id>
    <content type="html"><![CDATA[<p>
  <strong>What is Tokeninput?</strong><br/>
  Tokeninput is a jQuery plugin which allows your users to select multiple items from a predefined list, using autocompletion as they type to find each item. You may have seen a similar type of text entry when filling in the recipients field sending messages on facebook.
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/tokeninput_jquery.png"><img src="http://geekhmer.github.io/images/tokeninput_jquery.png" alt="" width="680" /></a>
</p>




<p>
  <strong>Practice</strong>
</p>


<p>{% codeblock demo.html lang:javascript %}
<html>
<head>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>
  <script type="text/javascript" src="src/jquery.tokeninput.js"></script>
  <link rel="stylesheet" href="styles/token-input.css" type="text/css" />
  <link rel="stylesheet" href="styles/token-input-facebook.css" type="text/css" />
</head>
<body>
  <h2 id="theme">Json local</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-local" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-local").tokenInput([
        {"id":"856","name":"House"},
        {"id":"1035","name":"Desperate Housewives"}
      ], {
      theme: "facebook"
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div></p>

<p>  <h2 id="theme">Json local &ndash; no duplicates</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-local-prevent-duplicates" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-local-prevent-duplicates").tokenInput([
        {"id":"856","name":"House"},
        {"id":"1035","name":"Desperate Housewives"}
      ], {
      theme: "facebook",
      preventDuplicates: true
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div></p>

<p>  <h2 id="theme">Json server</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-server" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-server").tokenInput("http://shell.loopj.com/tokeninput/tvshows.php", {
      theme: "facebook"
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div></p>

<p>  <h2 id="prevent-duplicates">Json server &ndash; no duplicates</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-server-prevent-duplicates" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-server-prevent-duplicates").tokenInput("http://shell.loopj.com/tokeninput/tvshows.php", {
      theme: "facebook",
      preventDuplicates: true
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div>
</body>
</html>
{% endcodeblock %}</p>

<p>
  You can download the <a href="https://github.com/Bunlong/tokeninput_jquery" target="_blank">source code</a> and try it out.
</p>

]]></content>
  </entry>
  
</feed>
