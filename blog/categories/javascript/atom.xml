<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-11-21T13:36:57+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ReactJS Component Lifecycle Unmounting]]></title>
    <link href="http://geekhmer.github.io/blog/2015/11/21/reactjs-component-lifecycle-unmounting/"/>
    <updated>2015-11-21T11:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/11/21/reactjs-component-lifecycle-unmounting</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/reactjs.png" width="600" alt="ReactJS Component Lifecycle Unmounting" />
</p>




<p>
  ReactJS mounting have 1 methods:<br/>
  - <code>componentWillUnmount()</code>: is invoked immediately before a component is unmounted and destroyed. Cleanup should go here.
</p>




<p>
  Example:
</p>


<p>{% codeblock lang:javascript %}
&lt;!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title></title>
  <script type="text/javascript" src="http://fb.me/react-0.12.2.js"></script>
  <script type="text/javascript" src="http://fb.me/JSXTransformer-0.12.2.js"></script>
</head>
<body>
  <script type="text/jsx"></p>

<pre><code>var Button = React.createClass({
  getInitialState: function() {
    return {
      val: 0
    }
  },
  handleUpdate: function() {
    this.setState({val: this.state.val + 1}
    );
  },
  componentWillMount: function() {
    console.log('mounting');
  },
  render: function() {
    console.log('rendering');
    return (
      &lt;div&gt;
        &lt;button onClick={this.handleUpdate}&gt;{this.state.val}&lt;/button&gt;
      &lt;/div&gt;
    );
  },
  componentDidMount: function() {
    console.log('mounted');
  },
  componentWillUnmount: function() {
    console.log('bye!');
  }
});

var App = React.createClass({
  handleMount: function() {
    React.render(&lt;Button /&gt;, document.getElementById('app'));
  },
  handleUnmount: function() {
    React.unmountComponentAtNode(document.getElementById('app'));
  },
  render: function() {
    return(
      &lt;div&gt;
        &lt;button onClick={this.handleMount}&gt;Mount&lt;/button&gt;
        &lt;button onClick={this.handleUnmount}&gt;Unmount&lt;/button&gt;
        &lt;div id="app"&gt;&lt;/div&gt;
      &lt;/div&gt;
    );
  }
});

React.render(&lt;App /&gt;, document.body);
</code></pre>

<p>  </script>
</body>
</html>
{% endcodeblock %}</p>

<p>
  In Button component <code>getInitialState()</code> method initial <code>val: 0</code> by default.
</p>




<p>
  When you click on Mount button, <code>componentWillMount()</code> method is invoked immediately before mounting occurs, and <code>render()</code> method render button into body DOM, and then <code>componentDidMount()</code> method is invoked immediately after mounting occurs.
</p>




<p>
  When you click on Unmount button, <code>componentWillUnmount()</code> is invoked immediately before a component is unmounted and destroyed.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS Component Lifecycle Updating]]></title>
    <link href="http://geekhmer.github.io/blog/2015/11/21/reactjs-component-lifecycle-updating/"/>
    <updated>2015-11-21T11:36:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/11/21/reactjs-component-lifecycle-updating</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/reactjs.png" width="600" alt="ReactJS Component Lifecycle Updating" />
</p>




<p>
  ReactJS mounting have 4 methods:<br/>
  - <code>componentWillReceiveProps(object nextProps)</code>: is invoked when a mounted component receives new props. This method should be used to compare <code>this.props</code> and nextProps to perform state transitions using <code>this.setState()</code>.<br/>
  - <code>shouldComponentUpdate(object nextProps, object nextState): boolean</code>: is invoked when a component decides whether any changes warrant an update to the DOM. Implement this as an optimization to compare <code>this.props</code> with <code>nextProps</code> and <code>this.state</code> with <code>nextState</code> and return <code>false</code> if React should skip updating.<br/>
  - <code>componentWillUpdate(object nextProps, object nextState)</code>: is invoked immediately before updating occurs. You cannot call <code>this.setState()</code> here.<br/>
  - <code>componentDidUpdate(object prevProps, object prevState)</code>: is invoked immediately after updating occurs.
</p>




<p>
  Example:
</p>


<p>{% codeblock lang:javascript %}
&lt;!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title></title>
  <script type="text/javascript" src="http://fb.me/react-0.12.2.js"></script>
  <script type="text/javascript" src="http://fb.me/JSXTransformer-0.12.2.js"></script>
</head>
<body>
  <script type="text/jsx"></p>

<pre><code>var Button = React.createClass({
  getInitialState: function() {
    return {increasing: false}
  },
  handleUpdate: function() {
    this.setProps({val: this.props.val+1});
  },
  componentWillReceiveProps: function(nextProps) {
    this.setState({increasing: nextProps.val &gt; this.props.val});
  },
  shouldComponentUpdate: function(nextProps, nextState) {
    return nextProps.val % 5 === 0;
  },
  render: function() {
    console.log(this.state.increasing);
    return(
      &lt;div&gt;
        &lt;button onClick={this.handleUpdate}&gt;{this.props.val}&lt;/button&gt;
      &lt;/div&gt;
    );
  },
  componentDidUpdate: function(prevProps, prevState) {
    console.log('prevProps', prevProps);
  }
});

ReactDOM.render(&lt;Button val={0} /&gt;, document.body);
</code></pre>

<p>  </script>
</body>
</html>
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS Component Lifecycle Mounting]]></title>
    <link href="http://geekhmer.github.io/blog/2015/11/20/reactjs-component-lifecycle-mounting/"/>
    <updated>2015-11-20T16:59:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/11/20/reactjs-component-lifecycle-mounting</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/reactjs.png" width="600" alt="ReactJS Component Lifecycle Mounting" />
</p>




<p>
  ReactJS mounting have 3 methods:<br/>
  - <code>getInitialState()</code>: object is invoked before a component is mounted. Stateful components should implement this and return the initial state data.<br/>
  - <code>componentWillMount()</code>: is invoked immediately before mounting occurs.<br/>
  - <code>componentDidMount()</code>: is invoked immediately after mounting occurs. Initialization that requires DOM nodes should go here.
</p>




<p>
  Example:
</p>


<p>{% codeblock lang:javascript %}
&lt;!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title></title>
  <script type="text/javascript" src="http://fb.me/react-0.12.2.js"></script>
  <script type="text/javascript" src="http://fb.me/JSXTransformer-0.12.2.js"></script>
</head>
<body>
  <script type="text/jsx"></p>

<pre><code>var Button = React.createClass({
  getInitialState: function() {
    return {
      val: 0
    }
  },
  handleUpdate: function() {
    this.setState({val: this.state.val + 1}
    );
  },
  componentWillMount: function() {
    console.log('mounting');
  },
  render: function() {
    console.log('rendering');
    return (
      &lt;div&gt;
        &lt;button onClick={this.handleUpdate}&gt;{this.state.val}&lt;/button&gt;
      &lt;/div&gt;
    );
  },
  componentDidMount: function() {
    console.log('mounted');
  }
});

var App = React.createClass({
  handleMount: function() {
    React.render(&lt;Button /&gt;, document.getElementById('app'));
  },
  render: function() {
    return(
      &lt;div&gt;
        &lt;button onClick={this.handleMount}&gt;Mount&lt;/button&gt;
        &lt;button onClick={this.handleUnmount}&gt;Unmount&lt;/button&gt;
        &lt;div id="app"&gt;&lt;/div&gt;
      &lt;/div&gt;
    );
  }
});

ReactDOM.render(&lt;App /&gt;, document.body);
</code></pre>

<p>  </script>
</body>
</html>
{% endcodeblock %}</p>

<p>
  In Button component <code>getInitialState()</code> method initial <code>val: 0</code> by default.
</p>




<p>
  When you click on Mount button, <code>componentWillMount()</code> method is invoked immediately before mounting occurs, and <code>render()</code> method render button into body DOM, and then <code>componentDidMount()</code> method is invoked immediately after mounting occurs.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS Component Lifecycle]]></title>
    <link href="http://geekhmer.github.io/blog/2015/11/20/reactjs-component-lifecycle/"/>
    <updated>2015-11-20T16:49:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/11/20/reactjs-component-lifecycle</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/reactjs.png" width="600" alt="ReactJS Component Lifecycle" />
</p>




<p>
  ReactJS components have three main parts of their lifecycle:<br/>
  - <strong><a href="http://geekhmer.github.io/blog/2015/11/20/reactjs-component-lifecycle-mounting/">Mounting</a></strong>: A component is being inserted into the DOM.<br/>
  - <strong><a href="http://geekhmer.github.io/blog/2015/11/21/reactjs-component-lifecycle-updating/">Updating</a></strong>: A component is being re-rendered to determine if the DOM should be updated.<br/>
  - <strong><a href="http://geekhmer.github.io/blog/2015/11/21/reactjs-component-lifecycle-unmounting/">Unmounting</a></strong>: A component is being removed from the DOM.
</p>




<p>
  ReactJS provides lifecycle methods that you can specify to hook into this process. We provide <code>will</code> methods, which are called right before something happens, and <code>did</code> methods which are called right after something happens.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS Accessing Child Properties]]></title>
    <link href="http://geekhmer.github.io/blog/2015/11/20/reactjs-accessing-child-properties/"/>
    <updated>2015-11-20T13:18:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/11/20/reactjs-accessing-child-properties</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/reactjs.png" width="600" alt="ReactJS Accessing Child Properties" />
</p>




<p>
  When you are building your React components, you'll probably want to access child properties of the markup.
</p>




<p>
  Parent can read its children by accessing the special <code>this.props.children</code>
</p>




<p>
  Example:
</p>


<p>{% codeblock lang:javascript %}
&lt;!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title></title>
  <script type="text/javascript" src="http://fb.me/react-0.12.2.js"></script>
  <script type="text/javascript" src="http://fb.me/JSXTransformer-0.12.2.js"></script>
</head>
<body>
  <script type="text/jsx"></p>

<pre><code>var App = React.createClass({
  render: function() {
    return (
      &lt;Button&gt;React &lt;Heart /&gt;&lt;/Button&gt;
    );
  }
});

var Button = React.createClass({
  render: function() {
    return(
      &lt;button&gt;{this.props.children}&lt;/button&gt;
    );
  }
});

var Heart = React.createClass({
  render: function() {
    return (
      &lt;span&gt;Heart&lt;/span&gt;
    );
  }
});

ReactDOM.render(&lt;App /&gt;, document.body);
</code></pre>

<p>  </script>
</body>
</html>
{% endcodeblock %}</p>

<p>
  App has two children Button and Heart, all thoes children come thought from <code>{this.props.children}</code>.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
