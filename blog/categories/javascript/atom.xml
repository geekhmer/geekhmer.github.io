<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2018-04-15T21:57:32+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Progressive &amp; Lazy Loading Image with lazy-load-images.js]]></title>
    <link href="http://geekhmer.github.io/blog/2018/04/15/progressive-and-lazy-loading-image-with-lazy-load-images-dot-js/"/>
    <updated>2018-04-15T18:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2018/04/15/progressive-and-lazy-loading-image-with-lazy-load-images-dot-js</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/lazy-load-images.png" width="700" alt="Lazy load images" />
</p>




<p>
  With images making up a whopping 65% of all web content, page load time on websites can easily become an issue.
</p>




<p>
  Images can weight quite a bit. This can have a negative impact on the time visitors have to wait before they can access content on your website. they will get navigate somewhere else, unless you come up with a solution to image loading.
</p>




<p>
  <strong>What is lazy loading?</strong><br/>
  Lazy loading images means loading images on websites asynchronously that is, after the content is fully loaded, or even conditionally, only when they appear in the browser’s viewport. This means that if users don’t scroll all the way down, images placed at the bottom of the page won't be loaded.
</p>




<p>
  <strong>What reason you should care of lazy loading images?</strong><br/>
  There are many reasons you should consider of lazy loading images for your website:
</p>




<p>
  If your website uses JavaScript to display content or provide some functionality to users, loading the DOM quickly becomes critical. It’s common for scripts to wait until the DOM has completely loaded before they start running. On a site with a number of images, lazy loading or loading images asynchronously could make the difference between users staying or leaving your website.
</p>




<p>
  Since most lazy loading solutions work by loading images only if the user has scrolled to the location where images would be visible inside the viewport, those images will never be loaded if users never get to that point. This means considerable savings in bandwidth, for which most users, especially those accessing the web on mobile devices and slow-connections.
</p>




<p>
  Lazy loading images helps with website performance, but what’s the best way to go about it?
</p>




<p>
  Well, <a href="https://github.com/codefacebook/lazy-load-images.js" target="_blank">lazy-load-images.js</a> is a javascript library which could help you with the website performance.
</p>




<p>
  <strong>lazy-load-images.js is loading with blurred image effect</strong><br/>
  If you are a Medium reader, you have certainly noticed how the site loads the main image inside a post.
</p>




<p>
  The first thing you see is a blurred, low-resolution copy of the image, while its high-resversion is being lazy loaded:
</p>




<p>
  Blurred placeholder image on <a href="https://lazyloadimages.github.io/" target="_blank">lazy-load-images.js</a> website:
</p>




<p>
  <img src="http://geekhmer.github.io/images/lazy-load-images-tiny.png" width="700" alt="Lazy load images" />
</p>




<p>
  High-res, lazy loaded image on <a href="https://lazyloadimages.github.io/" target="_blank">lazy-load-images.js</a> website:
</p>




<p>
  <img src="http://geekhmer.github.io/images/lazy-load-images-full.png" width="700" alt="Lazy load images" />
</p>




<p>
  You can lazy load images with this interesting blurring effect in a number of ways.
</p>




<p>
  My favorite technique/library is using <a href="https://github.com/codefacebook/lazy-load-images.js" target="_blank">lazy-load-images.js</a>. Here’s all the features/goodness:<br/>
  - Fast loading<br/>
  - High performance<br/>
  - Supports all images type<br/>
  - Responsive images<br/>
  - Supports all modern browsers Chrome, Firefox, Safari, (IE10+), ... etc.
</p>




<p>
  You can read all details and download the lazy-load-images.js library on the project's <a href="https://github.com/codefacebook/lazy-load-images.js" target="_blank">GitHub repo</a>.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Way to Develop React App with Create React App (No Build Configuration)]]></title>
    <link href="http://geekhmer.github.io/blog/2017/05/22/new-way-to-develop-react-app-with-create-react-app-no-build-configuration/"/>
    <updated>2017-05-22T00:10:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/05/22/new-way-to-develop-react-app-with-create-react-app-no-build-configuration</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/create_react_app.png" width="600" alt="New Way to Develop React App with Create React App (No Build Configuration)" />
</p>




<p>
  Setting up Gulp, Webpack, Browserify, Babel, JSX, ES6, ES6 modules, hot reloading, ... etc. manually - forget about it and no more fuss with it. 
</p>




<p>
  Inspired by the cohesive developer experience provided by Ember.js Facebook wanted to provide an easy way to develop React apps, they created <a href="https://github.com/facebookincubator/create-react-app" target="_blank">create-react-app</a> with the targets zero configuration.
</p>




<p>
  <strong>Installation</strong><br/>
  You may need <a href="https://nodejs.org/en/download/" target="_blank">NPM</a> installed and you can use <a href="https://github.com/creationix/nvm#usage" target="_blank">NVM</a> to easily switch Node versions between different projects.
</p>




<p>
  The Node installation is only required for Create React App itself.
</p>




<p>
  To install create-react-app module, run:
</p>


<p>{% codeblock lang:ruby %}
npm install -g create-react-app
{% endcodeblock %}</p>

<p>
  <strong>Creating an App</strong><br/>
  To create a new app, run:
</p>


<p>{% codeblock lang:ruby %}
create-react-app geekhmer
{% endcodeblock %}</p>

<p>
  It will create a directory called geekhmer inside the current folder. And inside that directory, it will generate the initial project structure and install the transitive dependencies:
</p>


<p>{% codeblock lang:ruby %}
geekhmer/
  README.md
  node_modules/
  package.json
  .gitignore
  public/</p>

<pre><code>favicon.ico
index.html
</code></pre>

<p>  src/</p>

<pre><code>App.css
App.js
App.test.js
index.css
index.js
logo.svg
</code></pre>

<p>{% endcodeblock %}</p>

<p>
  No configuration or complicated folder structures, just the files you need to build your app.
</p>




<p>
  <strong>Run the App</strong><br/>
  Runs the app in development mode:
</p>


<p>{% codeblock lang:ruby %}
npm start
{% endcodeblock %}</p>

<p>
  Open http://localhost:3000 to view it in the browser.
</p>




<p>
  <strong>Run the Test</strong><br/>
  Runs the test watcher in an interactive mode:
</p>


<p>{% codeblock lang:ruby %}
npm test
{% endcodeblock %}</p>

<p>
  <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#running-tests" target="_blank">Read more about testing.</a>
</p>




<p>
  <strong>Builds the App for Production</strong><br/>
  Builds the app for production to the build folder. It correctly bundles React in production mode and optimizes the build for the best performance.
</p>




<p>
  The build is minified and the filenames include the hashes. By default, it also <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#making-a-progressive-web-app" target="_blank">includes a service worker</a> so that your app loads from local cache on future visits.
</p>


<p>{% codeblock lang:ruby %}
npm run build
{% endcodeblock %}</p>

<p>
  Your app is ready to be deployed. So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Copy to Clipboard without Flash with Clipboard.js]]></title>
    <link href="http://geekhmer.github.io/blog/2017/03/19/copy-to-clipboard-without-flash-with-clipboard-dot-js/"/>
    <updated>2017-03-19T23:34:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/03/19/copy-to-clipboard-without-flash-with-clipboard-dot-js</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/clipboardjs.png" width="400" alt="Copy to Clipboard without Flash with Clipboard.js" />
</p>




<p>
  Well, in this article I gonna show you how to easily implement the ability to copy data to the <a href="https://clipboardjs.com/" target="_blank">clipboard</a>. In order to implement it I will clipboard.js javascript library, let get started with me:
</p>




<h3>Installation</h3>




<p>
  The first thing I need to do is include the clipboard.js library file in head tag of the application: 
</p>


<p>{% codeblock lang:ruby %}</p>

<script src="https://cdn.jsdelivr.net/clipboard.js/1.5.12/clipboard.min.js"></script>


<p>{% endcodeblock %}</p>

<p>
  If you don't wish to use a CDN, you can download the clipboard in other ways:<br/>
  - Using npm, by running <code>npm install clipboard --save</code><br/>
  - Using bower, by running <code>bower install clipboard --save</code><br/>
  - By downloading a zip file from the <a href="https://github.com/zenorocha/clipboard.js/archive/master.zip" target="_blank">clipboard.js github page</a> and referencing it in your HTML.
</p>




<h3>Usage</h3>




<p>
  <strong>Copy text from another element:</strong> A pretty common use case is to copy content from another element. You can do that by adding a <code>data-clipboard-target</code> attribute in your trigger element. The value you include on this attribute needs to match another's element selector.
</p>


<p>{% codeblock lang:ruby %}</p>

<!-- Target -->


<p><input id="foo" value="https://github.com/zenorocha/clipboard.js.git"></p>

<!-- Trigger -->


<p><button class="btn" data-clipboard-target="#foo"></p>

<pre><code>&lt;img src="assets/clippy.svg" alt="Copy to clipboard"&gt;
</code></pre>

<p></button>
{% endcodeblock %}</p>

<p>
  <strong>Cut text from another element:</strong> Additionally, you can define a <code>data-clipboard-action</code> attribute to specify if you want to either <code>copy</code> or <code>cut</code> content. If you omit this attribute, <code>copy</code> will be used by default.
</p>


<p>{% codeblock lang:ruby %}</p>

<!-- Target -->


<p><textarea id="bar">Mussum ipsum cacilds&hellip;</textarea></p>

<!-- Trigger -->


<p><button class="btn" data-clipboard-action="cut" data-clipboard-target="#bar"></p>

<pre><code>Cut to clipboard
</code></pre>

<p></button>
{% endcodeblock %}</p>

<p>
  As you may expect, the cut action only works on input or textarea elements.
</p>




<p>
  <strong>Copy text from attribute:</strong> Truth is, you don't even need another element to copy its content from. You can just include a <code>data-clipboard-text</code> attribute in your trigger element.
</p>


<p>{% codeblock lang:ruby %}</p>

<!-- Trigger -->


<p><button class="btn" data-clipboard-text="Just because you can doesn't mean you should — clipboard.js"></p>

<pre><code>Copy to clipboard
</code></pre>

<p></button>
{% endcodeblock %}</p>

<h3>Events</h3>




<p>
  There are cases where you'd like to show some user feedback or capture what has been selected after a copy/cut operation.
</p>


<p></p>

<p>
  That's why we fire custom events such as success and error for you to listen and implement your custom logic.
</p>


<p>{% codeblock lang:ruby %}
var clipboard = new Clipboard(&lsquo;.btn&rsquo;);</p>

<p>clipboard.on(&lsquo;success&rsquo;, function(e) {
  console.info(&lsquo;Action:&rsquo;, e.action);
  console.info(&lsquo;Text:&rsquo;, e.text);
  console.info(&lsquo;Trigger:&rsquo;, e.trigger);</p>

<p>  e.clearSelection();
});</p>

<p>clipboard.on(&lsquo;error&rsquo;, function(e) {
  console.error(&lsquo;Action:&rsquo;, e.action);
  console.error(&lsquo;Trigger:&rsquo;, e.trigger);
});
{% endcodeblock %}</p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should I Use ReactJS?]]></title>
    <link href="http://geekhmer.github.io/blog/2016/01/09/should-i-use-reactjs/"/>
    <updated>2016-01-09T10:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/01/09/should-i-use-reactjs</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/react_flux.jpg" width="600" alt="Should I Use ReactJS?" />
</p>




<p>
  <strong>Short answer is Yes.</strong>
</p>




<p>
  <strong>Long answer is unfortunately, Yes, for most things.</strong>
</p>




<p>
  <strong>Here's why you should use ReactJS:</strong><br/>
  - Works great for teams, strongly enforcing UI and workflow patterns.<br/>
  - UI code is readable and maintainable.<br/>
  - Componentized UI is the future of web development, and you need to start doing it now.
</p>




<p>
  <strong>Here's why you should think twice before you switch:</strong><br/>
  - ReactJS will slow you down tremendously at the start. Understanding how props, state, and component communication works is not straightforward, and the docs are a maze of information. This will be countered, in theory, by a grand speed up when your whole team is on board.<br/>
  - ReactJS does not support any browser below IE8, and never will.<br/>
  - If your application / website doesn't have very much dynamic page updating, you will be implementing a lot of code for a very small benefit.<br/>
  - You will reinvent a lot of wheels. ReactJS is young, and because there's no canonical way to do events / component communication, you'll have to build large component libraries from scratch. Does your application have dropdowns, resizable windows, or lightboxes? You'll probably have to write those all from scratch.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactJS Flux in Practice]]></title>
    <link href="http://geekhmer.github.io/blog/2015/11/24/reactjs-flux-in-practice/"/>
    <updated>2015-11-24T09:40:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/11/24/reactjs-flux-in-practice</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/react_flux.jpg" width="600" alt="ReactJS Flux in Practice" />
</p>




<p>
  To build a ReactJS application with Flux I have deviced a little library called flux-react.
</p>




<p>
  <strong>Actions</strong><br/>
  Actions are what links your components (and anything else that wants to change state) with your stores. You define them just by naming them. When calling an action the arguments will be deepCloned to avoid later mutation of complex objects passed to the store.
</p>


<p>{% codeblock lang:javascript %}
var Actions = flux.createActions([
  &lsquo;addItem&rsquo;]
);
{% endcodeblock %}</p>

<p>
  <strong>Stores</strong><br/>
  Stores are where you define your application state, update it and notify components about changes.
</p>


<p>{% codeblock lang:javascript %}
var Store = flux.createStore({
  // We put the state directly on the store object
  lists: [],
  // Then we point to the actions we want to react to in this store
  actions: [</p>

<pre><code>Actions.addItem
</code></pre>

<p>  ],
  // The action maps directly to a method. So action addItem maps to the
  // method addItem()
  addItem: function (item) {</p>

<pre><code>this.lists.push(item);
this.emit('list.add');
</code></pre>

<p>  },
  // The methods that components can use to get state information
  // from the store. The context of the methods is the store itself.
  // The returned values are deepcloned, which means
  // that the state of the store is immutable
  exports: {</p>

<pre><code>getLists: function () {
  return this.lists;
}
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>
  Lets see how this is used in a component before going over the concept:
</p>


<p>{% codeblock lang:javascript %}
var ComponentList = React.createClass({
  getInitialState: function () {</p>

<pre><code>return {
  lists: Store.getLists()
};
</code></pre>

<p>  },
  triggerAction: function () {</p>

<pre><code>Actions.addItem("Item added");
</code></pre>

<p>  },
  onChange: function () {</p>

<pre><code>this.setState({
  lists: Store.getLists()
});
</code></pre>

<p>  },
  componentWillMount: function () {</p>

<pre><code>Store.on('lists.add', this.onChange);
</code></pre>

<p>  },
  componentWillUnmount: function () {</p>

<pre><code>Store.off('lists.add', this.onChange);
</code></pre>

<p>  },
  render: function () {</p>

<pre><code>return (
  &lt;div&gt;
    &lt;button onClick={this.triggerAction}&gt;Click&lt;/button&gt;
    &lt;br/&gt;&lt;br/&gt;
    {JSON.stringify(this.state.lists)}
  &lt;/div&gt;
);
</code></pre>

<p>  }
});
{% endcodeblock %}</p>

<p>
  Okay. So what I noticed was that my actions always mapped directly to a method. If the action was called "addItem", the method handling that action in my store was also called "addItem". That is why actions in "flux-react" map directly to a method.
</p>




<p>
  An other concept is the "exports". You only want to expose a set of getter methods that your components can use. Three things happens with exports:<br/>
  - The exports object is the object that is returned when creating a store.<br/>
  - All methods in exports are bound to the store, letting you use "this" to point to the state in the store.<br/>
  - Exported values are automatically deep cloned.
</p>




<p>
  Now that last part needs a bit more explenation. The state, in your store should only be changed inside the store. ex. returning a list of todos to a component should not allow that component to do changes there that is reflected in the store. This is because of debugging. If lots of different components starts to change state directly in your store you will get into trouble. So instead the "flux-react" store makes sure that any value returned from exports is deep cloned, right out of the box. The same goes for complex objects passed as arguments to an action. We do not want them to be changed later outside of the store and by doing so change the state of the store.
</p>




<p>
  How about performance? Well, the thing is that values you return from a store are not big, neither are values you pass as arguments. Yes, maybe you have a phonebook of 10.000 people in your store, but your interface will never show all 10.000 of them. You may grab the 50 first of them and the rest requires searching or pagination. In that case it is only the search result, or next page, that is deep cloned. Never all the 10.000 people.
</p>




<p>
  Full codes:
</p>


<p>{% codeblock lang:javascript %}
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;script type="text/javascript" src="http://fb.me/react-0.12.2.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="http://fb.me/JSXTransformer-0.12.2.js"&gt;&lt;/script&gt;
&lt;script src="flux-react.js"&gt;&lt;/script&gt;
</code></pre>

<p>  </head>
<body>
  <script type="text/jsx"></p>

<pre><code>var Actions = flux.createActions([
  'addItem']
);

var Store = flux.createStore({
  lists: [],
  actions: [
    Actions.addItem
  ],
  addItem: function (item) {
    this.lists.push(item);
    this.emit('lists.add');
  },
  exports: {
    getLists: function () {
      return this.lists;
    }
  }
});

var ComponentList = React.createClass({
  getInitialState: function () {
    return {
      lists: Store.getLists()
    };
  },
  triggerAction: function () {
    Actions.addItem("Item added");
  },
  onChange: function () {
    this.setState({
      lists: Store.getLists()
    });
  },
  componentWillMount: function () {
    Store.on('lists.add', this.onChange);
  },
  componentWillUnmount: function () {
    Store.off('lists.add', this.onChange);
  },
  render: function () {
    return(
      &lt;div&gt;
        &lt;button onClick={this.triggerAction}&gt;Click&lt;/button&gt;
        &lt;br/&gt;&lt;br/&gt;
        {JSON.stringify(this.state.lists)}
      &lt;/div&gt;
    );
  }
});

ReactDOM.renderComponent(&lt;ComponentList /&gt;, document.body);
</code></pre>

<p>  </script>
</body>
</html>
{% endcodeblock %}</p>

<p>
  You can download the source code <a href="https://github.com/Bunlong/reactjs_flux_in_practice" target="_blank">here</a>.
</p>




<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
