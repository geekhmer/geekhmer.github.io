<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-07-08T23:38:24+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/30/angularjs-on-rails/"/>
    <updated>2015-06-30T23:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/30/angularjs-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/angularjs_on_rails.png" width="400" alt="AngularJS on Rails" />
</p>




<p>
  AngularJS is an extremely popular JavaScript library that enables you to quickly and easily create rich web applications. In this article we will show you how to integrate AngularJS with your Rails app. We will also build a simple AngularJS application called VisitorsCenter. The VisitorsCenter application allows the user to track visitors that are coming and going from a building such as an office building. 
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  Before we begin, we will need to add a couple gems to our Gemfile. The <code>angularJs-rails</code> gem provides integration with the AngularJS library and our Rails application. The bootstrap-sass gem merely adds bootstrap support so we can focus on the code rather than the style of the app. Add these gems to your gemfile now as listed below.
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;angularjs-rails&rsquo;, &lsquo;~> 1.2.25&rsquo;
gem &lsquo;bootstrap-sass&rsquo;, &lsquo;~> 3.2.0.2&rsquo;
{% endcodeblock %}</p>

<p>
  Now run a bundle install to install the gems:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Next, we need to create a model called <code>Visitor</code>. The <code>Visitor</code> model will represent a visitor that visits. Run the command below to create the visitor model now:
</p>


<p>{% codeblock lang:ruby %}
rails g model Visitor first_name:string last_name:string reason:string
rake db:migrate
{% endcodeblock %}</p>

<p>
  Great, now we need to create a <code>Visitors</code> controller that will give us a way to interact with our model. The <code>Visitors</code> controller will have 3 different actions in this example application. The first action, <code>index</code> will return either the visitors page or a json list of visitors depending on how it is accessed. The second action, <code>create</code> will be responsible for creating the visitor. The final action, <code>destroy</code> will destroy the visitor. Run the command below to create this controller now:
</p>


<p>{% codeblock lang:ruby %}
rails g controller Visitors index create destroy
{% endcodeblock %}</p>

<p>
  Now let's modify our routes file to set up the proper paths and add a site root. Open up your routes file and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock routes.rb lang:ruby %}
Rails.application.routes.draw do
  resources :visitors, only: [:index, :create, :destroy], defaults: {format: :json}
  root to: &ldquo;visitors#index&rdquo;
end
{% endcodeblock %}</p>

<p>
  The code fragment that says <code>defaults: {format: :json}</code> tells Rails that we wish to return json by default for our actions. We do this because most of the interaction in our application will be via JSON.
</p>




<p>
  By default, AngularJS knows nothing of the cross site request forgery (CSRF) protections in our applications. We need a way to tell AngularJS how to interact with our application while obeying the CSRF protections that we have in place. Luckily we have a way to do this. Open up your <code>ApplicationController</code> and add in the code listed below.
</p>




<p>
  If you are using Rails 4.2 and up, use the code below:
</p>


<p>{% codeblock application_controller.rb lang:ruby %}
class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception</p>

<p>  after_action :set_csrf_cookie_for_ng</p>

<p>  def set_csrf_cookie_for_ng</p>

<pre><code>cookies['XSRF-TOKEN'] = form_authenticity_token if protect_against_forgery?
</code></pre>

<p>  end</p>

<p>  protected
  def verified_request?</p>

<pre><code>super || valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  If you are still using Rails 4.1, use the code below instead:
</p>


<p>{% codeblock application_controller.rb lang:ruby %}
class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception</p>

<p>  after_action :set_csrf_cookie_for_ng</p>

<p>  def set_csrf_cookie_for_ng</p>

<pre><code>cookies['XSRF-TOKEN'] = form_authenticity_token if protect_against_forgery?
</code></pre>

<p>  end</p>

<p>  protected
  def verified_request?</p>

<pre><code>super || form_authenticity_token == request.headers['X-XSRF-TOKEN']
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  The code listed above will create a cookie called <code>XSRF-TOKEN</code> that will contain our <code>form_authenticity_token</code>. Any time a request is made, AngularJS will present that token in the HTTP headers for the request.
</p>




<p>
  Now let's modify our <code>VisitorsController</code> to allow for access to the <code>Visitor</code> model. Open up your <code>VisitorsController</code> and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock visitors_controller.rb lang:ruby %}
class VisitorsController &lt; ApplicationController
  respond_to :json</p>

<p>  def index</p>

<pre><code>respond_to do |format|
  format.json { render json: Visitor.all }
  format.html
end
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>respond_with Visitor.create(visitor_params)
</code></pre>

<p>  end</p>

<p>  def destroy</p>

<pre><code>respond_with Visitor.destroy(params[:id])
</code></pre>

<p>  end</p>

<p>  private
  def visitor_params</p>

<pre><code>params.require(:visitor).permit(:first_name, :last_name, :reason)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  The code above is typical Rails code, with the exception being that we return JSON as a result. Since our application will be communicating primarily via AJAX we have no need for HTML other than the index action, which will return either html or json depending on the request type.
</p>




<p>
  Next we need to add support for both AngularJS and Bootstrap to our application.js file. Open up your application.js file and modify it so that it looks like the code listed below.
</p>


<p>{% codeblock application.js lang:ruby %}
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require angular
//= require angular-resource
//= require bootstrap-sprockets
//= require_tree .
{% endcodeblock %}</p>

<p>
  In the code above we add support for AngularJS as well as Bootstrap. We also add support for a library called <code>angular-resource</code> which allows us to easily talk to our Rails application.
</p>




<p>
  Now let's add a bit of CSS for bootstrap. Create a new file called <code>bootstrap_config</code>.scss and add in the code listed below:
</p>


<p>{% codeblock bootstrap_config.scss lang:ruby %}
@import &ldquo;bootstrap-sprockets&rdquo;;
@import &ldquo;bootstrap&rdquo;;
{% endcodeblock %}</p>

<p>
  The next thing we need to do is create our AngularJS application. AngularJS applications typically consists of JavaScript code that glues together various bits of HTML. To get started doing this, the first thing we must do is rename our <code>visitors.js.coffee</code> file to <code>visitors.js</code> and modify it so that it looks like the code listed below. You can also rewrite this in CoffeeScript, but I use JavaScript for those that haven't yet learned CoffeeScript.
</p>


<p>{% codeblock visitors.js lang:ruby %}
var visitorCenter = angular.module(&lsquo;VisitorCenter&rsquo;, [&lsquo;ngResource&rsquo;]);</p>

<p>visitorCenter.factory(&ldquo;Visitor&rdquo;, function($resource) {
  return $resource(&ldquo;visitors/:id&rdquo;, { id: &lsquo;@id&rsquo; }, {</p>

<pre><code>index:   { method: 'GET', isArray: true, responseType: 'json' },
update:  { method: 'PUT', responseType: 'json' }
</code></pre>

<p>  });
})</p>

<p>visitorCenter.controller(&ldquo;visitorsController&rdquo;, function($scope, Visitor) {
  $scope.visitors = Visitor.index()</p>

<p>  $scope.addVisitor = function() {</p>

<pre><code>visitor = Visitor.save($scope.newVisitor)

$scope.visitors.push(visitor)
$scope.newVisitor = {}
</code></pre>

<p>  }</p>

<p>  $scope.deleteVisitor = function(index) {</p>

<pre><code>visitor = $scope.visitors[index]
Visitor.delete(visitor)
$scope.visitors.splice(index, 1);
</code></pre>

<p>  }
})
{% endcodeblock %}</p>

<p>
  There is a lot going on here, so i'm going to break it down into pieces. The first line:
</p>


<p>{% codeblock lang:ruby %}
var visitorCenter = angular.module(&lsquo;VisitorCenter&rsquo;, [&lsquo;ngResource&rsquo;]);
{% endcodeblock %}</p>

<p>
  defines an AngularJS module. AngularJS modules can be thought of as individual components in your application. You'll notice we include <code>ngResource</code> as an argument. <code>ngResource</code> provides easy access to RESTful resources such as our Rails application.
</p>




<p>
  The next set of lines:
</p>


<p>{% codeblock lang:ruby %}
visitorCenter.factory(&ldquo;Visitor&rdquo;, function($resource) {
  return $resource(&ldquo;visitors/:id&rdquo;, { id: &lsquo;@id&rsquo; }, {</p>

<pre><code>index:   { method: 'GET', isArray: true, responseType: 'json' },
update:  { method: 'PUT', responseType: 'json' }
</code></pre>

<p>  });
})
{% endcodeblock %}</p>

<p>
  defines a service, in this case, it ties in the <code>ngResource</code> service mentioned earlier and tells AngularJS how to talk to our application.
</p>




<p>
  The next set of lines:
</p>


<p>{% codeblock lang:ruby %}
visitorCenter.controller(&ldquo;visitorsController&rdquo;, function($scope, Visitor) {
  $scope.visitors = Visitor.index()</p>

<p>  $scope.addVisitor = function() {</p>

<pre><code>visitor = Visitor.save($scope.newVisitor)

$scope.visitors.push(visitor)
$scope.newVisitor = {}
</code></pre>

<p>  }</p>

<p>  $scope.deleteVisitor = function(index) {</p>

<pre><code>visitor = $scope.visitors[index]
Visitor.delete(visitor)
$scope.visitors.splice(index, 1);
</code></pre>

<p>  }
})
{% endcodeblock %}</p>

<p>
  define a controller. Controllers tell AngularJS how to interact with our application similar to how Rails controllers are used to tell Rails how our views interact with our models.
</p>




<p>
  ow that we've written the JavaScript application, we need to create our view to tie everything together. Open up the index view for your <code>Visitors</code> controller and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock index.html.erb lang:ruby %}</p>

<div class="container" ng-app="VisitorCenter">
  <h1>Visitors</h1>

  <div ng-controller="visitorsController">
    <div class="well">
      <h3>Add a new Visitor</h3>
      <form ng-submit="addVisitor()">
        <div class="row">
          <div class="col-xs-6">
            <input type="text" ng-model="newVisitor.first_name" class="form-control" placeholder="First Name" />
          </div>
          <div class="col-xs-6">
            <input type="text" ng-model="newVisitor.last_name" class="form-control" placeholder="Last Name" />
          </div>
        </div>
        <div class="row">
          <div class="col-xs-12">
            <br />
            <input type="text" ng-model="newVisitor.reason" class="form-control" placeholder="Reason for Visit" />
          </div>
        </div>
        <div class="row">
          <div class="col-xs-12 text-center">
            <br />
            <input type="Submit" value="Add Visitor" class="btn btn-primary" />
          </div>
        </div>
      </form>
    </div>

    <h3>Currently Visiting</h3>
    <hr />
    <table class="table table-bordered table-striped">
      <thead>
        <tr>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Reason for Visit</th>
          <th>&nbsp;</th>
        </tr>
      </thead>
      <tbody>
        <tr ng-show="!visitors.length">
          <td colspan="4">No visitors in the building.</td>
        </tr>
        <tr ng-repeat="visitor in visitors">
          <td>{{ visitor.first_name }}</td>
          <td>{{ visitor.last_name }}</td>
          <td>{{ visitor.reason }}</td>
          <td><a class="btn btn-danger" ng-click="deleteVisitor($index)">Remove</a></td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


<p>{% endcodeblock %}</p>

<p>
  Let's break this down a bit:
</p>


<p>{% codeblock lang:ruby %}</p>

<div class="container" ng-app="VisitorCenter">
  ...
</div>


<p>{% endcodeblock %}</p>

<p>
  The outer div on the first line has an attribute called <code>ng-app</code>. The <code>ng-app</code> attribute tells AngularJS that this is part of our AngularJS application. In this case we specify the name of our AngularJS module, <code>VisitorCenter</code>.
</p>


<p>{% codeblock lang:ruby %}</p>

<div ng-controller="visitorsController">
  ...
</div>


<p>{% endcodeblock %}</p>

<p>
  The next inner div contains an attribute called <code>ng-controller</code>. This attribute tells AngularJS that we wish to use our visitorsController as the controller for this portion of the application.
</p>


<p>{% codeblock lang:ruby %}
<form ng-submit="addVisitor()">
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-6"&gt;
  &lt;input type="text" ng-model="newVisitor.first_name" class="form-control" placeholder="First Name" /&gt;
&lt;/div&gt;
&lt;div class="col-xs-6"&gt;
  &lt;input type="text" ng-model="newVisitor.last_name" class="form-control" placeholder="Last Name" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-12"&gt;
  &lt;br /&gt;
  &lt;input type="text" ng-model="newVisitor.reason" class="form-control" placeholder="Reason for Visit" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-12 text-center"&gt;
  &lt;br /&gt;
  &lt;input type="Submit" value="Add Visitor" class="btn btn-primary" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
</form>
{% endcodeblock %}</p>

<p>
  The <code>ng-submit</code> attribute on our form tells AngularJS that we wish to use the addVisitor() method on our controller to process the form request. Each of the input elements contain an <code>ng-model</code> attribute. This attribute maps the input elements to our model.
</p>


<p>{% codeblock lang:ruby %}
<tr ng-show="!visitors.length">
  <td colspan="4">No visitors in the building.</td>
</tr>
{% endcodeblock %}</p>

<p>
  The <code>ng-show</code> attribute on the first row tells AngularJS that we only want to show the row if the condition mentioned is matched. In this case we only want to show the first row if there are no visitors.
</p>


<p>{% codeblock lang:ruby %}
<tr ng-repeat="visitor in visitors">
  &hellip;
</tr>
{% endcodeblock %}</p>

<p>
  The <code>ng-repeat</code> attribute is a loop. This particular loop tells AngularJS that we want to loop through each visitor.
</p>


<p>{% codeblock lang:ruby %}
{% raw %}
<td>{{ visitor.first_name }}</td>
<td>{{ visitor.last_name }}</td>
<td>{{ visitor.reason }}</td>
{% endraw %}
{% endcodeblock %}</p>

<p>
  Text contained within {% raw %}<code>{{ .... }}</code>{% endraw %} are AngularJS expressions. In this case we are telling AngularJS to render the fields mentioned in each expression.
</p>


<p>{% codeblock lang:ruby %}
{% raw %}
<td><a class="btn btn-danger" ng-click="deleteVisitor($index)">Remove</a></td>
{% endraw %}
{% endcodeblock %}</p>

<p>
  The <code>ng-click</code> button tells AngularJS to run the specified controller function when the html tag in question is clicked. In this case we run the code to delete the specified user.
</p>




<p>
  So far so good, That's it!!! for this introduction to AngularJS and Rails. See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Awesome jQuery Tricks]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/13/awesome-jquery-tricks/"/>
    <updated>2015-05-13T12:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/13/awesome-jquery-tricks</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/jquery_logo.png" width="500" alt="Awesome jQuery Tricks" />
</p>




<p>
  As we all know, jQuery is an awesome library and has transformed the internet as we know it. In this article we will cover 5 extremely useful jQuery tricks that you can use in your sites. Let's get started.
</p>




<p>
  <strong>Gracefully Degrade Broken Images</strong><br/>
  Broken images can be a pain to deal with. They degrade the user experience and can be difficult to find without scanning your site regularly with a 3rd party tool. Luckily it's easy to substitute broken images with an image that you specify using jQuery. the <code>error</code> callback of an image gets fired any time an image can't be successfully loaded by the browser. For example:
</p>


<p>{% codeblock lang:javascript %}
$(&lsquo;img&rsquo;).error(function(){
  $(this).attr(&lsquo;src&rsquo;, &lsquo;images/missing.png’);
});
{% endcodeblock %}</p>

<p>
  The code above would replace any broken images with an image in the images folder called missing.png. You could also do something like make an AJAX request to your server to log the location of the broken image.
</p>




<p>
  <strong>Wait For an Image to Be Loaded</strong><br/>
  Sometimes you need to wait for an image to be loaded before continuing to process events. This is most often useful with libraries like the <a href="http://masonry.desandro.com/" target="_blank">jQuery Masonry library</a>, where images can affect the size of the overall content. Fortunately this is easy with the load callback. For example:
</p>


<p>{% codeblock lang:javascript %}
$(&lsquo;img&rsquo;).load(function() {
  // Do stuff here&hellip;
});
{% endcodeblock %}</p>

<p>
  The above code would wait for the image to be loaded and then execute the code specified in the callback.
</p>




<p>
  <strong>Zebra Stripe a Table</strong><br/>
  Sometimes we want our tables to alternating odd/even colors. While this is possible using CSS3, older browsers don't support most CSS3 features. Using this script allows our tables to be striped across all browsers.
</p>


<p>{% codeblock lang:javascript %}
$(&lsquo;table tr:even&rsquo;).css(&lsquo;background&rsquo;, &lsquo;#f7f7f7&rsquo;); // Strip every even row
$(&lsquo;table tr:odd&rsquo;).css(&lsquo;background&rsquo;, &lsquo;#f7f7f7&rsquo;); // Stripe every odd row
$(&lsquo;table > tbody > tr:even&rsquo;).css(&lsquo;background&rsquo;, &lsquo;#f7f7f7&rsquo;); // Only stripe the table body
{% endcodeblock %}</p>

<p>
  The above code will do striping as noted in the comments.
</p>




<p>
  <strong>Preloading Images</strong><br/>
  If your page uses a lot of images that aren't visible initially, it might be worth it to preload them. This simple script listed below does exactly that.
</p>


<p>{% codeblock lang:javascript %}
$.preloadImages = function() {
  for (var i = 0; i &lt; arguments.length; i++) {</p>

<pre><code>$("&lt;img /&gt;").attr("src", arguments[i]);
</code></pre>

<p>  }
}</p>

<p>$.preloadImages(&ldquo;images/myimage1.jpg&rdquo;,&ldquo;images/myimage2.jpg&rdquo;);
{% endcodeblock %}</p>

<p>
  <strong>Detect Mobile Devices</strong><br/>
  Sometimes we need a 'check all' checkbox for our web pages that selects every checkbox in a fieldset. The code below lets you easily accomplish this.
</p>


<p>{% codeblock lang:javascript %}
$(&lsquo;.checkall&rsquo;).click(function () {
  $(this).parents(&lsquo;fieldset:eq(0)&rsquo;).find(&lsquo;:checkbox&rsquo;).attr(&lsquo;checked&rsquo;, this.checked);
});
{% endcodeblock %}</p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Map Draggable Maker]]></title>
    <link href="http://geekhmer.github.io/blog/2014/06/06/google-map-draggable-maker/"/>
    <updated>2014-06-06T12:05:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/06/06/google-map-draggable-maker</id>
    <content type="html"><![CDATA[<p>
  Google’s Maps API offer a vast range of functionality to interact with underlying maps. As opposed to statically setting markers (pins) programmatically sometimes you might want your users to be able to interact with the map by dragging existing markers around the map. Fortunately, Google’s JavaScript API offers this functionality out of the box. Below you’ll find an example based on Google Maps API V3.
</p>




<p> 
  <a class="fancybox" href="http://geekhmer.github.io/images/google_map_draggable_maker.png"><img src="http://geekhmer.github.io/images/google_map_draggable_maker.png" /></a>
</p>




<p>
  <strong>Practice</strong>
</p>




<p>
  google_map_draggable_maker.js is a small library use to make google map draggable easily:
</p>


<p>{% codeblock google_map_draggable_maker.js lang:javascript %}
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
// @author Bunlong &lt;bunlong.van@gmail>
// Created :  6 Jun 2014 by Bunlong
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p>

<p>// options = {elementh, lat, lng, zoom, coordsLenght, elementLat, elementLng}</p>

<p>MapDraggableMarker = function(options) {
  this.element = options.element;
  this.lat = options.lat;
  this.lng = options.lng;
  this.zoom = options.zoom;
  this.coordsLenght = options.coordsLenght;
  this.elementLat = options.elementLat;
  this.elementLng = options.elementLng;</p>

<p>  this.map = new google.maps.Map(this.element, {</p>

<pre><code>zoom: this.zoom,
center: new google.maps.LatLng(this.lat, this.lng),
mapTypeId: google.maps.MapTypeId.ROADMAP
</code></pre>

<p>  });</p>

<p>  this.marker = new google.maps.Marker({</p>

<pre><code>position: new google.maps.LatLng(this.lat, this.lng),
draggable: true
</code></pre>

<p>  });
}</p>

<p>MapDraggableMarker.prototype.addListenerToMarker = function() {
  var self = this;</p>

<p>  google.maps.event.addListener(this.marker, &lsquo;dragend&rsquo;, function(evt) {</p>

<pre><code>self.elementLat.val(evt.latLng.lat().toFixed(self.coordsLenght));
self.elementLng.val(evt.latLng.lng().toFixed(self.coordsLenght));
</code></pre>

<p>  });
}</p>

<p>MapDraggableMarker.prototype.init = function() {
  this.addListenerToMarker();
  this.map.setCenter(this.marker.position);
  this.marker.setMap(this.map);
}
{% endcodeblock %}</p>

<p>
  index.html is the sample google map draggable:
</p>


<p>{% codeblock index.html lang:javascript %}
&lt;!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title></title>
  <link rel="stylesheet" href="styles.css" />
  <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
  <script type="text/javascript" src="jquery-1.11.1.min.js"></script>
  <script type="text/javascript" src="google_map_draggable_maker.js"></script>
  <script type="text/javascript"></p>

<pre><code>$(document).ready(function() {
  var lat = ($("#latitude").val() == "") ? 11.558831 : $("#latitude").val(),
      lng = ($("#longitude").val() == "") ? 104.917445 : $("#longitude").val(),
      zoom = 15,
      coordslenght = 6;

      mapDraggableMarker = new MapDraggableMarker({ element: $("#canvas")[0], 
                                                    lat: lat, 
                                                    lng: lng, 
                                                    zoom: zoom, 
                                                    coordsLenght: coordslenght, 
                                                    elementLat: $("#latitude"), 
                                                    elementLng: $("#longitude")
                                                  });

  mapDraggableMarker.init();
});
</code></pre>

<p>  </script>
</head>
<body>
  <div id="canvas" style="width: 635px; height: 300px;"></div><br />
  <label for="latitude">Latitude:</label>
  <input id="latitude" type="text" value="" />
  <label for="longitude">Longitude:</label>
  <input id="longitude" type="text" value="" />
</body>
</html>
{% endcodeblock %}</p>

<p>
  You can download the <a href="https://github.com/Bunlong/google_map_draggable_maker" target="_blank">source code</a> and try it out.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSRender]]></title>
    <link href="http://geekhmer.github.io/blog/2014/06/02/jsrender/"/>
    <updated>2014-06-02T17:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/06/02/jsrender</id>
    <content type="html"><![CDATA[<p>
  <strong>What is JsRender?</strong><br/>
  Many development platforms use templates to reduce code and simplify maintenance, and HTML5 and JavaScript are no exception. JsRender is a JavaScript library that allows you to define a boilerplate structure once and reuse it to generate HTML dynamically. JsRender brings a new templating library to HTML5 development that has a codeless tag syntax and high performance, has no dependency on jQuery nor on the Document Object Model (DOM), supports creating custom functions and uses pure string-based rendering.
</p>




<p>
  <strong>Why Templates?</strong><br/>
  Using templates with JavaScript reduces and simplifies code. Without templates, adding a series of list items and other HTML elements for a set of data might require manipulating a browser’s DOM. This is where templating using a plug-in such as JsRender can be quite useful to do the heavy lifting.
</p>




<p>
  <strong>Practice</strong>
</p>


<p>{% codeblock demo.html lang:javascript %}
&lt;!DOCTYPE html>
<html>
<head>
  <script src="js/jquery.min.js" type="text/javascript"></script>
  <script src="js/jsrender.js" type="text/javascript"></script>
  <link href="css/bootstrap.min.css" rel="stylesheet" type="text/css" /></p>

<p>  <script id="book_template" type="text/x-jsrender"></p>

<pre><code>&lt;tr&gt;
  &lt;td&gt;{ {:#index+1} } &lt;/td&gt;
  &lt;td&gt;{ {&gt;name} }&lt;/td&gt;
  &lt;td&gt;{ {&gt;releaseYear} }&lt;/td&gt;
&lt;/tr&gt;
</code></pre>

<p>  </script></p>

<p>  <script type="text/javascript"></p>

<pre><code>$(document).ready(function() {
  var books = [
    { name: "Erlang", releaseYear: "1986" },
    { name: "Ruby", releaseYear: "1998" },
    { name: "Ruby on Rails", releaseYear: "1999" },
    { name: "Javascript", releaseYear: "1976" }
  ];

  $("#book_list").html(
    $("#book_template").render(books)
  );
});
</code></pre>

<p>  </script></p>

<p></head>
<body>
  <div class="container"></p>

<pre><code>&lt;section id="fluidGridSystem"&gt;
  &lt;div class="page-header"&gt;
    &lt;h3&gt;Render template against local data&lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="row-fluid show-grid"&gt;
    &lt;table class="table table-bordered"&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;No&lt;/th&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Release Year&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody id="book_list"&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/section&gt;
</code></pre>

<p>  </div>
</body>
</html>
{% endcodeblock %}</p>

<p>
  You can download the <a href="https://github.com/Bunlong/jsrender" target="_blank">source code</a> and try it out.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tokeninput Jquery Multiple Select Item]]></title>
    <link href="http://geekhmer.github.io/blog/2014/05/22/tokeninput-jquery-multiple-select-item/"/>
    <updated>2014-05-22T16:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/05/22/tokeninput-jquery-multiple-select-item</id>
    <content type="html"><![CDATA[<p>
  <strong>What is Tokeninput?</strong><br/>
  Tokeninput is a jQuery plugin which allows your users to select multiple items from a predefined list, using autocompletion as they type to find each item. You may have seen a similar type of text entry when filling in the recipients field sending messages on facebook.
</p>




<p>
  <a class="fancybox" href="http://geekhmer.github.io/images/tokeninput_jquery.png"><img src="http://geekhmer.github.io/images/tokeninput_jquery.png" alt="" width="680" /></a>
</p>




<p>
  <strong>Practice</strong>
</p>


<p>{% codeblock demo.html lang:javascript %}
<html>
<head>
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js"></script>
  <script type="text/javascript" src="src/jquery.tokeninput.js"></script>
  <link rel="stylesheet" href="styles/token-input.css" type="text/css" />
  <link rel="stylesheet" href="styles/token-input-facebook.css" type="text/css" />
</head>
<body>
  <h2 id="theme">Json local</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-local" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-local").tokenInput([
        {"id":"856","name":"House"},
        {"id":"1035","name":"Desperate Housewives"}
      ], {
      theme: "facebook"
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div></p>

<p>  <h2 id="theme">Json local &ndash; no duplicates</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-local-prevent-duplicates" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-local-prevent-duplicates").tokenInput([
        {"id":"856","name":"House"},
        {"id":"1035","name":"Desperate Housewives"}
      ], {
      theme: "facebook",
      preventDuplicates: true
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div></p>

<p>  <h2 id="theme">Json server</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-server" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-server").tokenInput("http://shell.loopj.com/tokeninput/tvshows.php", {
      theme: "facebook"
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div></p>

<p>  <h2 id="prevent-duplicates">Json server &ndash; no duplicates</h2>
  <div></p>

<pre><code>&lt;input type="text" id="input-server-prevent-duplicates" /&gt;
&lt;script type="text/javascript"&gt;
  $(document).ready(function() {
    $("#input-server-prevent-duplicates").tokenInput("http://shell.loopj.com/tokeninput/tvshows.php", {
      theme: "facebook",
      preventDuplicates: true
    });
  });
&lt;/script&gt;
</code></pre>

<p>  </div>
</body>
</html>
{% endcodeblock %}</p>

<p>
  You can download the <a href="https://github.com/Bunlong/tokeninput_jquery" target="_blank">source code</a> and try it out.
</p>

]]></content>
  </entry>
  
</feed>
