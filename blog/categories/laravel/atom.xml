<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Laravel | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/laravel/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2017-11-05T01:35:47+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Migrations]]></title>
    <link href="http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-migrations/"/>
    <updated>2017-08-06T09:59:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-migrations</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x Migrations" />
</p>




<p>
  Laravel migrations provide mechanisms for creating and modifying database tables. Migrations are database agnostic, this means you don't have to worry about the specific SQL syntax for the database engine that you are creating tables for.
</p>




<p>
  Well, in this articles I will cover the following sections: Requirements for running migrations, Artisan migration command, Migration structure, How to create a table using a migration, Laravel migration rollback, Laravel migration how-tos, Database seeding.
</p>




<h3>Requirements for Running Migrations</h3>




<p>
  1. Create the database for Laravel project<br/>
  2. Set the database connection parameters for Laravel project<br/>
  3. Set the database connection parameters for artisan command line
</p>




<p>
  <strong>1. Create the Database for Laravel Project</strong><br/>
  Open up terminator or what ever MySQL database management tool that you are using and run the command below:
</p>


<p>{% codeblock lang:php %}
CREATE DATABASE foodie;
{% endcodeblock %}</p>

<p>
  <code>CREATE DATABASE foodie;</code> creates a database called foodie in MySQL.
</p>




<p>
  <strong>2. Set the Database Connection Parameters for Laravel Project</strong><br/>
  Open up <code>/config/database.php</code> file and modify to the following:
</p>


<p>{% codeblock database.php lang:php %}
&lsquo;mysql&rsquo; => [
  &lsquo;driver&rsquo; => &lsquo;mysql&rsquo;,
  &lsquo;host&rsquo; => env(&lsquo;DB_HOST&rsquo;, &lsquo;127.0.0.1&rsquo;),
  &lsquo;port&rsquo; => env(&lsquo;DB_PORT&rsquo;, &lsquo;3306&rsquo;),
  &lsquo;database&rsquo; => env(&lsquo;DB_DATABASE&rsquo;, &lsquo;foodie&rsquo;),
  &lsquo;username&rsquo; => env(&lsquo;DB_USERNAME&rsquo;, &lsquo;root&rsquo;),
  &lsquo;password&rsquo; => env(&lsquo;DB_PASSWORD&rsquo;, &lsquo;&rsquo;),
  &lsquo;unix_socket&rsquo; => env(&lsquo;DB_SOCKET&rsquo;, &lsquo;&rsquo;),
  &lsquo;charset&rsquo; => &lsquo;utf8mb4&rsquo;,
  &lsquo;collation&rsquo; => &lsquo;utf8mb4_unicode_ci&rsquo;,
  &lsquo;prefix&rsquo; => &lsquo;&rsquo;,
  &lsquo;strict&rsquo; => true,
  &lsquo;engine&rsquo; => null,
]
{% endcodeblock %}</p>

<p>
  <strong>3. Set the Database Connection Parameters for Artisan Command Line</strong><br/>
  One of the challenges that most developers face when working with migrations in Laravel 5.x.x from the artisan command line is the following message:
</p>


<p>{% codeblock lang:php %}
Access denied for user &lsquo;homestead&rsquo;@&lsquo; localhost&rsquo; (using password: YES)
{% endcodeblock %}</p>

<p>
  You will get the above message even you have set the correct parameters in <code>/config/database.php</code> file, because the artisan command line uses the database connection parameters specified in <code>.env</code> file.
</p>




<p>
  The solutions is go to the project open up <code>/.env</code> file and modify to the following:
</p>


<p>{% codeblock .env lang:php %}
APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:n8KivGzDCuNX1SljFb8xxQxBOPquewnAQIBa0H81nR8=
APP_DEBUG=true
APP_LOG_LEVEL=debug
APP_URL=<a href="http://localhost">http://localhost</a></p>

<p>DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=foodie
DB_USERNAME=root
DB_PASSWORD=</p>

<p>BROADCAST_DRIVER=log
CACHE_DRIVER=file
SESSION_DRIVER=file
QUEUE_DRIVER=sync</p>

<p>REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379</p>

<p>MAIL_DRIVER=smtp
MAIL_HOST=smtp.mailtrap.io
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null</p>

<p>PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
{% endcodeblock %}</p>

<p>
  The database, username and password must match the ones on your system.
</p>




<h3>Artisan Migration Command</h3>




<p>
  We will create:<br/>
  1. The migration table in our database.<br/>
  2. A migration file that we will use to create a table for hard drinks.
</p>




<p>
  When you create a migration file, Laravel will stores it in <code>/database/migrations</code> folder. You can specify a different path if you would like to but we wonâ€™t cover that in this articles. We will work with the default path.
</p>




<p>
  <strong>Create Migration Table</strong><br/>
  Open up the terminator and run the following artisan command to create a migration table:
</p>


<p>{% codeblock lang:php %}
php artisan make:migration create_drinks_table
{% endcodeblock %}</p>

<p>
  <code>php artisan make:migration</code> executes the make migration method via the artisan command.<br/>
  <code>create_drinks_table</code> specifies the name of the migration file that will be created.
</p>




<p>
  You will get the following results:
</p>


<p>{% codeblock lang:php %}
Created Migration: 2017_08_08_072434_create_drinks_table
{% endcodeblock %}</p>

<h3>Migration Structure</h3>




<p>
  You will get the following file with the contents below:
</p>


<p>{% codeblock 20170808072434createdrinkstable.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class CreateDrinksTable extends Migration {
  public function up() {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  public function down() {</p>

<pre><code>//
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  - <code>class CreateDrinksTable extends Migration</code> defines the CreateDrinksTable class that extends Migration class.
  - <code>public function up()</code> defines the function that is executed when the migration is run.<br/>
  - <code>public function down()</code> defines the function that is executed when you run migration rollback.
</p>




<h3>How to Create a Table Using a Migration</h3>




<p>
  Now that we have successfully created a migration file, we will add the table definition fields in the migration modify the contents of <code>/database/migrations/20170808072434createdrinkstable.php file.</code>
</p>


<p>{% codeblock 20170808072434createdrinkstable.php lang:php %}
&lt;?php
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class CreateDrinksTable extends Migration {
  /<em>*
  * Run the migrations.
  *
  * @return void
  </em>/
  public function up() {</p>

<pre><code>Schema::create('drinks', function (Blueprint $table) {
  $table-&gt;increments('id');
  $table-&gt;string('name', 75)-&gt;unique();
  $table-&gt;text('comments')-&gt;nullable();
  $table-&gt;integer('rating');
  $table-&gt;date('brew_date');

  $table-&gt;timestamps();
});
</code></pre>

<p>  }</p>

<p>  /<em>*
  * Reverse the migrations.
  *
  * @return void
  </em>/
  public function down() {</p>

<pre><code>Schema::drop('drinks');
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  - <code>Schema::create('drinks', function (Blueprint $table) {...}</code> calls the create function of the Schema class. The create function is responsible for creating the database table.<br/>
  - <code>(Blueprint $table)</code> is a closure function with a $table parameter.<br/>
  - <code>$table</code> parameter is used to define the structure of the database.<br/>
  - <code>$table->increments('id');</code> increments is used to define an auto increment field.<br/>
  - <code>$table->string('name', 75)->unique();</code> string is used to define varchar fields. The second parameter is the length of the field. <code>->unique()</code> is used to mark the column as unique.<br/>
  - <code>$table->text('comments')->nullable();</code> is used to define text fields. <code>->nullable()</code> is used to allow the column to accept null values.<br/>
  - <code>$table->integer('rating');</code> integer is used to define int fields.<br/>
  - <code>$table->date('brew_date');</code> is used to define date fields.<br/>
  - <code>$table->timestamps();</code>  is used to automatically create two time stamp fields namely created_at and updated_at.
</p>




<p>
  Go back to the terminator and run the command below:
</p>


<p>{% codeblock lang:php %}
php artisan migrate
{% endcodeblock %}</p>

<p>
  And then you will get many tables drinks and users, password_resets which Laravel has migrated those two tables by defaults.
</p>




<h3>Laravel Migration Rollback</h3>




<p>
  One of the advantages of migrations is that it allow you to roll back to the previous state before you run the migrations. In this section, we will roll back the creation of the tables.
</p>




<p>
  Go back to the terminator and run the command below:
</p>


<p>{% codeblock lang:php %}
php artisan migrate:rollback
{% endcodeblock %}</p>

<p>
  And then you will get the following output:
</p>


<p>{% codeblock lang:php %}
Rolled back: 2017_08_08_000000_create_users_table.php
Rolled back: 2017_08_08_100000_create_password_resets_table.php
Rolled back: 2017_08_08_090421_create_drinks_table.php
{% endcodeblock %}</p>

<h3>Laravel Migration How-tos</h3>




<p>
  This section I will show how to perform various Laravel migration tasks.
</p>




<p>
  <strong>Laravel Migration Insert Data</strong><br/>
  This "how-to" shows you how to create a migration file that inserts data into the newly created table. We will create an employees table and add 33 seed records using Faker Library.
</p>




<p>
  Open up the terminator and run the command below:
</p>


<p>{% codeblock lang:php %}
php artisan make:migration employees
{% endcodeblock %}</p>

<p>
  Open up <code>/database/migrations/xxxxxxxxx_employees.php</code> file and add the following codes:
</p>


<p>{% codeblock xxxxxxxxx_employees.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class Employees extends Migration
{
  /<em>*
   * Run the migrations.
   *
   * @return void
   </em>/
  public function up() {</p>

<pre><code>Schema::create('employees', function (Blueprint $table) {
  $table-&gt;increments('id');
  $table-&gt;string('name');
  $table-&gt;string('email')-&gt;unique();
  $table-&gt;string('contact_number');
  $table-&gt;timestamps();       
});

$faker = Faker\Factory::create();

$limit = 33;

for($i = 0; $i &lt; $limit; $i++) {
  DB::table('employees')-&gt;insert([ //,
    'name' =&gt; $faker-&gt;name,
    'email' =&gt; $faker-&gt;unique()-&gt;email,
    'contact_number' =&gt; $faker-&gt;phoneNumber,
  ]);
}
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Reverse the migrations.
   *
   * @return void
   </em>/
  public function down() {</p>

<pre><code>Schema::drop('employees');
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p><p>
  <code>$faker = Faker\Factory::create();</code> creates an instance of Faker factory.<br/>
  <code>$limit = 33;</code> sets the number of records that we want to add to the database.<br/>
  <code>for($i = 0; $i &lt; $limit; $i++) { DB::table(&lsquo;employees&rsquo;)&ndash;>insert(&hellip;); }</code> uses a for loop to add records to the database 33 times. <code>$faker->name</code> generates a faker name. <code>$faker->unique()&ndash;>email</code> generates a fake unique email address. <code>$faker->phoneNumber</code> generates a fake phone number.
</p></p>

<p><p>
  Open up the terminator and run the following command to run the migration:
</p></p>

<p>{% codeblock lang:php %}
php artisan migration
{% endcodeblock %}</p>

<p><p>
  <strong>Laravel Migration Add Column/Drop Colum</strong><br/>
  We will add a new gender column to employees table.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p>{% codeblock lang:php %}
php artisan make:migration add_gender_to_employees &mdash;table=employees
{% endcodeblock %}</p>

<p><p>
  <code>&mdash;table=employees</code> tells Laravel we want to work with an existing table called employees.
</p></p>

<p><p>
  Open up <code>/database/migration/xxxxxxx_add_gender_to_employees.php</code> and modify to the following:
</p></p>

<p>{% codeblock xxxxxxx_add_gender_to_employees.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class AddGenderToEmployees extends Migration
{
  /<em>*
   * Run the migrations.
   *
   * @return void
   </em>/
  public function up() {</p>

<pre><code>Schema::table('employees', function (Blueprint $table) {
  $table-&gt;string('gender')-&gt;after('contact_number');
});
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Reverse the migrations.
   *
   * @return void
   </em>/
  public function down() {</p>

<pre><code>Schema::table('employees', function (Blueprint $table) {
  $table-&gt;dropColumn('gender');
});
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p><p>
  <code>public function up() {&hellip;}</code> uses <code>Schema::table(&lsquo;employees&rsquo; &hellip;)</code> to add a new column gender.<br/>
  <code>public function down() {&hellip;}</code> drops the new column from the table when we reverse the command. <code>$table->dropColumn(&lsquo;gender&rsquo;);</code> is the command that drops the table.
</p></p>

<p><p>
  <strong>Laravel Migration Change Column Type</strong><br/>
</p></p>

<p><p>
  We have created the gender column with the default size of 255. We want to change it to 5 as the maximum size.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p>{% codeblock lang:php %}
php artisan make:migration modify_gender_in_employees &mdash;table=employees
{% endcodeblock %}</p>

<p><p>
  Open up <code>/database/migrations/xxxxxxx_modify_gender_in_employees.php</code> file and modify to the following:
</p></p>

<p>{% codeblock xxxxxxx_modify_gender_in_employees.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class ModifyGenderInEmployees extends Migration {
  /<em>*
   * Run the migrations.
   *
   * @return void
   </em>/
  public function up()
  {</p>

<pre><code>Schema::table('employees', function(Blueprint $table) {
  $table-&gt;string('gender', 5)-&gt;change();
});
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Reverse the migrations.
   *
   * @return void
   </em>/
  public function down() {</p>

<pre><code>Schema::table('employees', function(Blueprint $table) {
  $table-&gt;string('gender', 255)-&gt;change();
});
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p><p>
  <code>$table->string(&lsquo;gender&rsquo;, 5)&ndash;>change();</code> maintains the varchar data type and sets the character limit to 5. If we wanted to change the data type too, we would have specified a different data type.<br/>
  <code>$table->string(&lsquo;gender&rsquo;, 255)&ndash;>change();</code> rollback the migration to the previous state.
</p></p>

<p><p>
  Open up the terminator and run the following command to run the migration:
</p></p>

<p>{% codeblock lang:php %}
php artisan migrate
{% endcodeblock %}</p>

<p><p>
  <strong>Laravel Migration Nullable</strong><br/>
  By default, Laravel assumes all columns are required unless you tell it so letâ€™s assume the gender field is optional.
</p></p>

<p><p>
  Open up the terminator and run the following command to create a migration file:
</p></p>

<p>{% codeblock lang:php %}
php artisan make:migration make_gender_null_in_employees â€“table-employees
{% endcodeblock %}</p>

<p><p>
  Open up <code>/database/migrations/xxxxxxx_make_gender_null_in_employees.php</code> file and modify to the following:
</p></p>

<p>{% codeblock xxxxxxx_make_gender_null_in_employees.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class MakeGenderNullInEmployees extends Migration {
  /<em>*
   * Run the migrations.
   *
   * @return void
   </em>/
  public function up() {</p>

<pre><code>Schema::table('employees', function(Blueprint $table) {
  $table-&gt;string('gender', 5)-&gt;nullable()-&gt;change();
});
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Reverse the migrations.
   *
   * @return void
   </em>/
  public function down() {</p>

<pre><code>Schema::table('employees', function(Blueprint $table) {
  $table-&gt;string('gender', 5)-&gt;change();
});
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p><p>
  <strong>Laravel Migration Foreign Key</strong><br/>
  Letâ€™s say we want to group our employees by their departments, we can add a foreign key for the dept_id.
</p></p>

<p><p>
  Open up the terminator and run the following command to create a migration file for depts table:
</p></p>

<p>{% codeblock lang:php %}
php artisan make:migration depts
{% endcodeblock %}</p>

<p><p>
  Open up <code>/database/migrations/xxxxxxxxx_depts.php</code> file and add the following codes:
</p></p>

<p>{% codeblock xxxxxxxxx_depts.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class Depts extends Migration
{
  /<em>*
   * Run the migrations.
   *
   * @return void
   </em>/
  public function up() {</p>

<pre><code>Schema::create('depts', function(Blueprint $table) {
  $table-&gt;increments('id');
  $table-&gt;string('name');
  $table-&gt;timestamps();
});
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Reverse the migrations.
   *
   * @return void
   </em>/
  public function down() {</p>

<pre><code>Schema::drop('depts');
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p><p>
  Open up the terminator and run the following command to create the depts table:
</p></p>

<p>{% codeblock lang:php %}
php artisan migrate
{% endcodeblock %}</p>

<p><p>
  The primary and foreign key relationship requires both tables to have the same data type and length. We used Schemaâ€™s increments to define the primary key for depts id. Schemaâ€™s increments creates an unsigned integer INT(10), Schemaâ€™s integer creates signed integer INT(11).
</p></p>

<p><p>
  We need to use Schemaâ€™s unsignedInteger when creating dept_id so that both the primary and foreign keys will be INT(10).
</p></p>

<p><p>
  Open up the terminator and run the following command to create the migration for adding the dept_id to the employees table:
</p></p>

<p>{% codeblock lang:php %}
php artisan make:migration add_dept_id_in_employees &mdash;table=employees
{% endcodeblock %}</p>

<p><p>
  Open up <code>/database/migrations/xxxxxxxxx_add_dept_id_in_employees.php</code> file and add the following codes:
</p></p>

<p>{% codeblock xxxxxxxxx_add_dept_id_in_employees.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;</p>

<p>class AddDeptIdInEmployees extends Migration {
  /<em>*
   * Run the migrations.
   *
   * @return void
   </em>/
  public function up() {</p>

<pre><code>Schema::table('employees', function (Blueprint $table) {
  $table-&gt; unsignedInteger ('dept_id')-&gt;after('gender');
  $table-&gt;foreign('dept_id')
          -&gt;references('id')-&gt;on('depts')
          -&gt;onDelete('cascade');
});
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Reverse the migrations.
   *
   * @return void
   </em>/
  public function down() {</p>

<pre><code>Schema::table('employees', function (Blueprint $table) {
  $table-&gt;dropColumn('dept_id');
});
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p><p>
  Open up the terminator and run the following command to execute the migration:
</p></p>

<p>{% codeblock lang:php %}
php artisan migrate
{% endcodeblock %}</p>

<p><h3>Database Seeding</h3></p>

<p><p>
  In this section, we will add dummy data to our database. Seeding is a term that is used to describe the process of adding data to the database.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p>{% codeblock lang:php %}
php artisan make:seeder DrinksTableSeeder
{% endcodeblock %}</p>

<p><p>
  Open up <code>/database/seeds/DrinksTableSeeder.php</code> file and add the following codes:
</p></p>

<p>{% codeblock DrinksTableSeeder.php lang:php %}
&lt;?php</p>

<p>use Illuminate\Database\Seeder;</p>

<p>class DrinksTableSeeder extends Seeder {</p>

<p>  /<em>*
   * Run the database seeds.
   *
   * @return void
   </em>/
  public function run() {</p>

<pre><code>DB::table('drinks')-&gt;insert([
  'name' =&gt; 'Vodka',
  'comments' =&gt; 'Blood of creativity',
  'rating' =&gt; 9,
  'brew_date' =&gt; '1973-09-03',
]);
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p><p>
  <code>class DrinksTableSeeder extends Seeder</code> defines the table DrinksTableSeeder that extends the Seeder class.<br/>
  <code>public function run()</code> defines the function that is executed when you run the seed command from artisan.
</p></p>

<p><p>
  The above table uses an array that matches database field name to values and inserts the record into the specified table drinks. Now let&rsquo;s run the seed and add our dummy record to the database.
</p></p>

<p><p>
  Open up the terminator and run the following command:
</p></p>

<p>{% codeblock lang:php %}
php artisan db:seed &mdash;class=DrinksTableSeeder
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Template]]></title>
    <link href="http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-template/"/>
    <updated>2017-08-06T00:40:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/08/06/laravel-5-dot-x-x-template</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x Template" />
</p>




<p>
  Blade is a powerful easy to use template that comes with Laravel. Blade templates can be mixed with plain php code.
</p>




<p>
  Well, in this articles I will cover the following sections: Template inheritance, Master layout, Extending the master layout, Displaying variables, Blade conditional statements, Blade Loops and Executing PHP functions in blade template.
</p>




<p>
  <strong>Template Inheritance</strong><br/>
  In a nutshell, template inheritance allows us to define a master layout with elements that are common to all web pages. The individual pages extend the master layout. This saves us time of repeating the same elements in the individual pages.
</p>




<p>
  <strong>Master Layout</strong><br/>
  All blade templates must be saved with the .blade extension. In this section, we are going to create a master template that all pages will extend. The following is the syntax for defining a master layout.<br/>
</p>




<p>
  Create a new file named <code>master.blade.php</code> in <code>/resources/views/layouts</code> folder with the following code below:
</p>


<p>{% codeblock master.blade.php lang:php %}
<html>
  <head></p>

<pre><code>&lt;title&gt;@yield('title')&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>@section('sidebar')
  Here is the master sidebar.
@show

&lt;div class="container"&gt;
  @yield('content')
&lt;/div&gt;
</code></pre>

<p>  </body>
</html>
{% endcodeblock %}</p>

<p>
  - <code>@yield('title')</code> is used to display the value of the title.<br/>
  - <code>@section('sidebar')</code> is used to define a section named sidebar.<br/>
  - <code>@show</code> is used to display the contents of a section.<br/>
  - <code>@yield('content')</code> is used to display the contents of content.
</p>




<p>
  <strong>Extending the Master Layout</strong><br/>
  Now we will create a page that extends the master layout. Create a new page named <code>page.blade.php</code> in <code>/resources/views</code> folder with the following code below:
</p>


<p>{% codeblock page.blade.php lang:php %}
@extends(&lsquo;layouts.master&rsquo;)</p>

<p>@section(&lsquo;title&rsquo;, &lsquo;Page Title&rsquo;)</p>

<p>@section(&lsquo;sidebar&rsquo;)
  <p>Here is appended to the master sidebar.</p>
@endsection</p>

<p>@section(&lsquo;content&rsquo;)
  <p>Here is my body content.</p>
@endsection
{% endcodeblock %}</p>

<p>
  - <code>@extends('layouts.master')</code> is used to extends the master layout.<br/>
  - <code>@section('title', 'Page Title')</code> is used to sets the value of the title section.<br/>
  - <code>@section('sidebar')</code> is used to defines a sidebar section in the child page of master layout.<br/>
  - <code>@endsection</code> is used to ends the sidebar section.<br/>
  - <code>@section('content')</code> is used to defines the content section.<br/>
</p>




<p>
  And now we will add a route to tests our blade template. Open up <code>/routes/web.php</code> file and add the following route below:
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;blade&rsquo;, function () {
  return view(&lsquo;page&rsquo;);
});
{% endcodeblock %}</p>

<p>
  Load the <code>http:://localhost:8000/blade</code> URL in your web browser and you will see the paragraph.
</p>




<p>
  <strong>Displaying Variables in a Blade Template</strong><br/>
  Now we will define a variable and pass it to our blade template view. Open up <code>/routes/web.php</code> file and add the route below:
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;blade&rsquo;, function () {
  return view(&lsquo;page&rsquo;,array(&lsquo;name&rsquo; => &lsquo;The Foodie&rsquo;));
});
{% endcodeblock %}</p>

<p>
  And then update <code>pages.blade.php</code> file to display the variable. Open up <code>page.blade.php</code> file and update the contents to the following:
</p>


<p>{% codeblock page.blade.php lang:php %}
@extends(&lsquo;layouts.master&rsquo;)</p>

<p>@section(&lsquo;title&rsquo;, &lsquo;Page Title&rsquo;)</p>

<p>@section(&lsquo;sidebar&rsquo;)
  <p>Here is appended to the master sidebar.</p>
@endsection
@section(&lsquo;content&rsquo;)
  <h2>{{$name}}</h2> <br/>
  <p>Here is my body content.</p>
@endsection
{% endcodeblock %}</p>

<p>
  <code>{% raw %}{{$name}}{% endraw %}</code> double opening curly braces and double closing curly braces are used to display the value of $name variable.
</p>




<p>
  <strong>Blade Condition Statements</strong><br/>
  Blade also supports conditional statements. Conditional statements are used to determine what to display in the browser. We will pass a variable that will determine what to display in the browser.
</p>




<p>
  Open up <code>/routes/web.php</code> file and modify route as follow:
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;blade&rsquo;, function () {
  return view(&lsquo;page&rsquo;, array(&lsquo;name&rsquo; => &lsquo;The Foodie&rsquo;, &lsquo;day&rsquo; => &lsquo;Sunday&rsquo;));
});
{% endcodeblock %}</p>

<p>
  We added another variable <code>day</code> with a value of Sunday.
</p>




<p>
  And then open up <code>/resources/views/page.blade.php</code> file and modify the codes to the following:
</p>


<p>{% codeblock page.blade.php lang:php %}
@extends(&lsquo;layouts.master&rsquo;)</p>

<p>@section(&lsquo;title&rsquo;, &lsquo;Page Title&rsquo;)</p>

<p>@section(&lsquo;sidebar&rsquo;)
  <p>Here is appended to the master sidebar.</p>
@endsection</p>

<p>@section(&lsquo;content&rsquo;)
  <h2>{{$name}}</h2>  <br/>
  <p>Here is my body content.</p>
  <h2>If Statement</h2>
  @if ($day == &lsquo;Sunday&rsquo;)</p>

<pre><code>&lt;p&gt;Time to party&lt;/p&gt;
</code></pre>

<p>  @else</p>

<pre><code>&lt;p&gt;Time to make money&lt;/p&gt;
</code></pre>

<p>  @endif
@endsection
{% endcodeblock %}</p>

<p>
  - <code>@if ($day == 'Sunday')</code> starts the if statement and evaluates the condition $day == 'Sunday'.<br/>
  - <code>@else</code> is the else part of the if statement.<br/>
  - <code>@endif</code> ends the if statement.
</p>




<p>
  <strong>Blade Loop</strong><br/>
  Blade template supports all of the loops that PHP supports. We will look at how we can use the foreach loop in blade to loop through an array of items.
</p>




<p>
  Open up <code>/routes/web.php</code> file and modify the codes for the blade route to the following:
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;blade&rsquo;, function () {
  $drinks = array(&lsquo;Vodka&rsquo;, &lsquo;Gin&rsquo;, &lsquo;Brandy&rsquo;);
  return view(&lsquo;page&rsquo;, array(&lsquo;name&rsquo; => &lsquo;The Foodie&rsquo;,&lsquo;day&rsquo; => &lsquo;Sunday&rsquo;, &lsquo;drinks&rsquo; => $drinks));
});
{% endcodeblock %}</p>

<p>
  <code>$drinks = array('Vodka', 'Gin', 'Brandy');</code> defines an array variable that we are passing to the blade template.
</p>




<p>
  And then open up <code>/resources/views/page.blade.php</code> file and modify the contents to the following:
</p>


<p>{% codeblock page.blade.php lang:php %}
@extends(&lsquo;layouts.master&rsquo;)</p>

<p>@section(&lsquo;title&rsquo;, &lsquo;Page Title&rsquo;)</p>

<p>@section(&lsquo;sidebar&rsquo;)
  <p>Here is appended to the master sidebar.</p>
@endsection</p>

<p>@section(&lsquo;content&rsquo;)
  <h2>{{$name}}</h2>  <br/>
  <p>Here is my body content.</p>
  <h2>If Statement</h2>
  @if ($day == &lsquo;Sunday&rsquo;)</p>

<pre><code>&lt;p&gt;Time to party&lt;/p&gt;
</code></pre>

<p>  @else</p>

<pre><code>&lt;p&gt;Time to make money&lt;/p&gt;
</code></pre>

<p>  @endif
  <h2>Foreach Loop</h2>
  @foreach ($drinks as $drink)</p>

<pre><code>&lt;p&gt;{{$drink}}&lt;/p&gt;
</code></pre>

<p>  @endforeach
@endsection
{% endcodeblock %}</p>

<p>
  <strong>Executing php functions in Blade</strong><br/>
  We will call the php date function in the blade template. Open up <code>/resources/views/page.blade.php</code> file and modify the contents to the following:
</p>


<p>{% codeblock page.blade.php lang:php %}
@extends(&lsquo;layouts.master&rsquo;)</p>

<p>@section(&lsquo;title&rsquo;, &lsquo;Page Title&rsquo;)</p>

<p>@section(&lsquo;sidebar&rsquo;)
  <p>Here is appended to the master sidebar.</p>
@endsection</p>

<p>@section(&lsquo;content&rsquo;)
  <h2>{{$name}}</h2>  <br/>
  <p>Here is my body content.</p>
  <h2>If Statement</h2>
  @if ($day == &lsquo;Sunday&rsquo;)</p>

<pre><code>&lt;p&gt;Time to party&lt;/p&gt;
</code></pre>

<p>  @else</p>

<pre><code>&lt;p&gt;Time to make money&lt;/p&gt;
</code></pre>

<p>  @endif
  <h2>Foreach Loop</h2>
  @foreach ($drinks as $drink)</p>

<pre><code>&lt;p&gt;{{$drink}}&lt;/p&gt;
</code></pre>

<p>  @endforeach</p>

<p>  <h2>Execute PHP Function</h2>
  <p>The date is {{date(&lsquo; D M, Y&rsquo;)}}</p>
@endsection
{% endcodeblock %}</p>

<p>
  <code>{% raw %}{{date(' D M, Y')}}{% endraw %}</code> double opening and closing curly braces are used to execute the php date function.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x - 4 Steps to Prevent Browser's Back Button After User Logout]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/10/laravel-5-dot-x-x-4-steps-to-prevent-browsers-back-button-after-user-logout/"/>
    <updated>2017-07-10T23:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/10/laravel-5-dot-x-x-4-steps-to-prevent-browsers-back-button-after-user-logout</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x 4 Steps to Prevent Browser's Back Button After User Logout" />
</p>




<p>
  Well, have you found out an issue with user logout? If you observe deeply then you can found out this issue that you can logout properly after you click logout link otherwise than if you click on browser's back button you still able to see the content of the page which actually should not be seen with respect to auth middleware process.
</p>




<p>
  We can prevent this issue by using Laravel middleware. We will create one middleware and prevent back button history. So we have to create new middleware and use that middleware in the route.
</p>




<p>
  Like so, I am going to do from scratch so:
</p>




<p>
  <strong>1. Create New Middleware</strong><br/>
  Create a new middleware using following command:
</p>


<p>{% codeblock lang:php %}
php artisan make:middleware PreventBackHistory
{% endcodeblock %}</p>

<p>
  <strong>2. Middleware Configuration</strong><br/>
  Open up <code>PreventBackHistory.php</code> file in <code>app/Http/Middleware</code> folder and replace codes with the following codes below:
</p>


<p>{% codeblock PreventBackHistory.php lang:php %}
&lt;?php</p>

<p>namespace App\Http\Middleware;</p>

<p>use Closure;</p>

<p>class PreventBackHistory {
  /<em>*
   * Handle an incoming request.
   *
   * @param  \Illuminate\Http\Request  $request
   * @param  \Closure  $next
   * @return mixed
   </em>/
  public function handle($request, Closure $next) {</p>

<pre><code>$response = $next($request);

return $response-&gt;header('Cache-Control','nocache, no-store, max-age=0, must-revalidate')
        -&gt;header('Pragma','no-cache')
        -&gt;header('Expires','Sun, 02 Jan 1990 00:00:00 GMT');
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  <strong>3. Register Middleware</strong><br/>
  Open <code>Kernel.php</code> in <code>app/Http</code> folder and add a new middleware in $routeMiddleware variable array as below:
</p>


<p>{% codeblock Kernel.php lang:php %}
&lt;?php</p>

<p>namespace App\Http;</p>

<p>use Illuminate\Foundation\Http\Kernel as HttpKernel;</p>

<p>class Kernel extends HttpKernel {
  &hellip;..
  &hellip;..</p>

<p>  /<em>*
   * The application&rsquo;s route middleware.
   *
   * These middleware may be assigned to groups or used individually.
   *
   * @var array
   </em>/
  protected $routeMiddleware = [</p>

<pre><code>.....

'prevent-back-history' =&gt; \App\Http\Middleware\PreventBackHistory::class,
</code></pre>

<p>  ];</p>

<p>}
{% endcodeblock %}</p>

<p>
  <strong>4. Use Middleware in Route</strong><br/>
  Now we are ready to use "prevent-back-history" middleware in route file as below:
</p>


<p>{% codeblock web.php lang:php %}
Route::group([&lsquo;middleware&rsquo; => &lsquo;prevent-back-history&rsquo;],function(){
  Auth::routes();
  Route::get(&lsquo;/home&rsquo;, &lsquo;HomeController@index&rsquo;);
});
{% endcodeblock %}</p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Route &amp; SEO]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/09/laravel-5-dot-x-x-route-and-seo/"/>
    <updated>2017-07-09T10:49:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/09/laravel-5-dot-x-x-route-and-seo</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x Route and SEO" />
</p>




<p>
  SEO stands for "search engine optimization". URLs is an important thing in getting found on the web. In this article I will implement routes and SEO friendly URLs for Laravel project.
</p>




<p>
  <strong>Things that Affect SEO</strong><br/>
  The following are some of the things that search engines such as Google Search consider when evaluating web sites:<br/>
  1. Website speed<br/>
  - No one waiting to visit a websites that take forever to load. We all love fast websites. The goal should be to keep the load time under 2 seconds. If you can get it under a second that is even much better. You need to test your web application for speed and optimize if necessary.<br/>
  2. Responsive designs<br/>
  - Mobile devices have a market share of internet usage. Since user experience matters to search engines, you need to ensure that the web site displays properly in mobile devices, tablets and desktops as well.<br/>
  3. Keywords<br/>
  - Search engines look at keywords when querying billions of indexed websites. As a developer you have to ensure that you provide title tags, meta description and HTML H2 heading that the content writers can use to place keywords.<br/>
  4. Social media statistics<br/>
  - If you read something cool on the web, you naturally share it on social media. This is a stamp of approval to search engines. Your have to include tools on the web site that will make it easy for the visitors to share the contents.<br/>
  5. Website URLs<br/>
  - The URLs should be keyword rich and words should be separated by dashes and not underscores.
</p>




<p>
  <strong>How to Implement SEO Friendly URLS in Laravel</strong><br/>
  Now we have to cover the basics SEO and we will map routes to controllers and create a single controller for all routes. The following table shows the URLs that will be implemented:
</p>




<table>
  <thead>
    <tr>
      <th>#</th>
      <th>URLs</th>
      <th>Method</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>/</td>
      <td>index</td>
      <td>Home page</td>
    </tr>
    <tr>
      <td>2</td>
      <td>/products</td>
      <td>products</td>
      <td>Products page</td>
    </tr>
    <tr>
      <td>3</td>
      <td>/products/details/{id}</td>
      <td>product_details(id)</td>
      <td>Product detailed based on product id</td>
    </tr>
    <tr>
      <td>4</td>
      <td>/products/category</td>
      <td>product_categories</td>
      <td>Product categories</td>
    </tr>
    <tr>
      <td>5</td>
      <td>/products/brands</td>
      <td>product_brands</td>
      <td>Product brands</td>
    </tr>
    <tr>
      <td>6</td>
      <td>/blog</td>
      <td>blog</td>
      <td>Blog postings list</td>
    </tr>
    <tr>
      <td>7</td>
      <td>/blog/post/{id}</td>
      <td>blog_post{id}</td>
      <td>Blog post content</td>
    </tr>
    <tr>
      <td>8</td>
      <td>/contact-us</td>
      <td>contact_us</td>
      <td>Contact us page</td>
    </tr>
    <tr>
      <td>9</td>
      <td>/login</td>
      <td>login</td>
      <td>Login user</td>
    </tr>
    <tr>
      <td>10</td>
      <td>/logout</td>
      <td>logout</td>
      <td>Logout user</td>
    </tr>
    <tr>
      <td>11</td>
      <td>/cart</td>
      <td>cart</td>
      <td>Cart contents</td>
    </tr>
    <tr>
      <td>12</td>
      <td>/checkout</td>
      <td>checkout</td>
      <td>Checkout shopper</td>
    </tr>
    <tr>
      <td>13</td>
      <td>/search/{query}</td>
      <td>search</td>
      <td>Search results</td>
    </tr>
  </tbody>
</table>




<br/>




<p>
  For this section assumes you have created the tutorial project. If you havenâ€™t done so yet then read this <a href="http://geekhmer.github.io/blog/2017/06/30/hello-laravel-5-dot-x-x/">Laravel Hello World</a>. We use the artisan command line tool to generate the codes for ShopController.php controller.
</p>




<p>
  Then open up your terminator and run the following command to browse to the project. Assumed that you are using Laravel plugin web server. 
</p>


<p>{% codeblock lang:php %}
php artisan serve
{% endcodeblock %}</p>

<p>
  Then run the following command to generate the Shop controller:
</p>


<p>{% codeblock lang:php %}
php artisan make:controller ShopController
{% endcodeblock %}</p>

<p>
  Open up /app/Http/Controllers/ShopController.php and replace the generated codes with the following codes below:
</p>


<p>{% codeblock ShopController.php lang:php %}
&lt;?php</p>

<p>namespace App\Http\Controllers;</p>

<p>use Illuminate\Http\Request;
use App\Http\Controllers\Controller;</p>

<p>class ShopController extends Controller {</p>

<p>  public function index() {</p>

<pre><code>return 'index page';
</code></pre>

<p>  }</p>

<p>  public function products() {</p>

<pre><code>return 'products page';
</code></pre>

<p>  }</p>

<p>  public function product_details($id) {</p>

<pre><code>return 'product details page';
</code></pre>

<p>  }</p>

<p>  public function product_categories() {</p>

<pre><code>return 'product categories page';
</code></pre>

<p>  }</p>

<p>  public function product_brands() {</p>

<pre><code>return 'product brands page';
</code></pre>

<p>  }</p>

<p>  public function blog() {</p>

<pre><code>return 'blog page';
</code></pre>

<p>  }</p>

<p>  public function blog_post($id) {</p>

<pre><code>return 'blog post page';
</code></pre>

<p>  }</p>

<p>  public function contact_us() {</p>

<pre><code>return 'contact us page';
</code></pre>

<p>  }</p>

<p>  public function login() {</p>

<pre><code>return 'login page';
</code></pre>

<p>  }</p>

<p>  public function logout() {</p>

<pre><code>return 'logout page';
</code></pre>

<p>  }</p>

<p>  public function cart() {</p>

<pre><code>return 'cart page';
</code></pre>

<p>  }</p>

<p>  public function checkout() {</p>

<pre><code>return 'checkout page';
</code></pre>

<p>  }</p>

<p>  public function search($query) {</p>

<pre><code>return "$query search page";
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  The above code defines functions that will responds to the routes.
</p>




<p>
  And then we will add routes that will call the methods in the controllers.
</p>




<p>
  Open up <code>web.php</code> in /routes folder and replace the code with the following:
</p>


<p>{% codeblock web.php lang:php %}
&lt;?php</p>

<p>/<em>
|&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
| Web Routes
|&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the &ldquo;web&rdquo; middleware group. Now create something great!
|
</em>/</p>

<p>Route::get(&lsquo;/&rsquo;,&lsquo;ShopController@index&rsquo;);
Route::get(&lsquo;/products&rsquo;,&lsquo;ShopController@products&rsquo;);
Route::get(&lsquo;/products/details/{id}&rsquo;,&lsquo;ShopController@product_details&rsquo;);
Route::get(&lsquo;/products/categories&rsquo;,&lsquo;ShopController@product_categories&rsquo;);
Route::get(&lsquo;/products/brands&rsquo;,&lsquo;ShopController@product_brands&rsquo;);
Route::get(&lsquo;/blog&rsquo;,&lsquo;ShopController@blog&rsquo;);
Route::get(&lsquo;/blog/post/{id}&rsquo;,&lsquo;ShopController@blog_post&rsquo;);
Route::get(&lsquo;/contact-us&rsquo;,&lsquo;ShopController@contact_us&rsquo;);
Route::get(&lsquo;/login&rsquo;,&lsquo;ShopController@login&rsquo;);
Route::get(&lsquo;/logout&rsquo;,&lsquo;ShopController@logout&rsquo;);
Route::get(&lsquo;/cart&rsquo;,&lsquo;ShopController@cart&rsquo;);
Route::get(&lsquo;/checkout&rsquo;,&lsquo;ShopController@checkout&rsquo;);
Route::get(&lsquo;/search/{query}&rsquo;,&lsquo;ShopController@search&rsquo;);
{% endcodeblock %}</p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Create Custom Helper]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/02/laravel-5-dot-x-x-create-custom-helper/"/>
    <updated>2017-07-02T20:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/02/laravel-5-dot-x-x-create-custom-helper</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_5.jpg" width="600" alt="Laravel 5.x.x Create Custom Helper" />
</p>




<p>
  In this article I will show you how to create your own custom helpers in Laravel framework.
</p>




<p>
  <strong>Create Project</strong><br/>
  Run the following composer command to create a new Laravel project:
</p>


<p>{% codeblock lang:php %}
composer create-project laravel/laravel laravel_helper
{% endcodeblock %}</p>

<p>
  <strong>Customer Helpersâ€™ Dir</strong><br/>
  Customer helpers files will be located in the <code>app</code> dir.
</p>




<p>
  Create a new directory Helpers in <code>app/Helpers</code>
</p>




<p>
  <strong>Define Helper Class</strong><br/>
  Letâ€™s create a simple helper function that will return the user's full name format.
</p>




<p>
  Create a new file <code>UserHelper.php</code> in <code>app/Helpers</code> and add the following codes:
</p>


<p>{% codeblock UserHelper.php lang:php %}
&lt;?php</p>

<p>namespace App\Helpers;</p>

<p>class UserHelper {
  public static function full_name($first_name, $last_name) {</p>

<pre><code>return $first_name . ', '. $last_name;   
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  - <code>namespace App\Helpers;</code>: defines the Helpers namespace.<br/>
  - <code>public static function full_name($first_name, $last_name) {...}</code>: defines a static function which return the user's full name.
</p>




<p>
  <strong>Helpers Service Provider Class</strong><br/>
  Service providers are used to auto load classes in Laravel framework. 
</p>




<p>
  We will need to define a service provider that will load all of our helpers classes in <code>app/Helpers</code> directory.
</p>




<p>
  Run the following artisan command to create <code>HelperServiceProvider.php</code> in <code>app/Providers</code> directory:
</p>


<p>{% codeblock lang:php %}
php artisan make:provider HelperServiceProvider
{% endcodeblock %}</p>

<p>
  And then add the following code below in <code>HelperServiceProvider.php</code> file:
</p>


<p>{% codeblock HelperServiceProvider.php lang:php %}
&lt;?php</p>

<p>namespace App\Providers;</p>

<p>use Illuminate\Support\ServiceProvider;</p>

<p>class HelperServiceProvider extends ServiceProvider {</p>

<p>  /<em>*
   * Bootstrap the application services.
   *
   * @return void
   </em>/
  public function boot()
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Register the application services.
   *
   * @return void
   </em>/
  public function register()
  {</p>

<pre><code>foreach (glob(app_path().'/Helpers/*.php') as $filename){
  require_once($filename);
}
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  - <code>namespace App\Providers;</code>: defines the namespace provider.<br/>
  - <code>use Illuminate\Support\ServiceProvider;</code>: imports the ServiceProvider class namespace.<br/>
  - <code>class HelperServiceProvider extends ServiceProvider {...}</code>: defines a HelperServiceProvider class that extends/inherite the ServiceProvider class.
  - <code>public function register() {...}</code> is the function that is used to loads the helpers.<br/>
  - <code>foreach (glob(app_path().'/Helpers/*.php') as $filename) {...}</code>: loops through all the files in <code>app/Helpers</code> directory and loads them.
</p>




<p>
  <strong>Configure Helper Service Provider and Class Alias</strong><br/>
  We need to register the HelperServiceProvider and create an alias for the helpers.
</p>




<p>
  Open up <code>config/app.php</code> file and add the following line in providers array variable.
</p>


<p>{% codeblock app.php lang:php %}
App\Providers\HelperServiceProvider::class,
{% endcodeblock %}</p>

<p>
 And then add the following line in aliases array variable.
</p>


<p>{% codeblock app.php lang:php %}
&lsquo;UserHelper&rsquo; => App\Helpers\UserHelper::class,
{% endcodeblock %}</p>

<p>
  <strong>Using the Custom Helper</strong><br/>
  Let create a route that will the custom helper function. Open up <code>routes/web.php</code> and add the following codes:
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;/users&rsquo;, function () {
  return UserHelper::full_name(&ldquo;Bunlong&rdquo;, &ldquo;Van&rdquo;);
});
{% endcodeblock %}</p>

<p>
  - <code>return UserHelper::full_name("Bunlong", "Van");</code> calls the static function full_name in UserHelper class.
</p>




<p>
  Open up your browser and type the uri <code>http://localhost:8000/users</code> you will see "Bunlong, Van" text.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
