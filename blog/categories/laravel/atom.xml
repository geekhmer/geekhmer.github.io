<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Laravel | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/laravel/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2017-07-10T00:51:58+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Route &amp; SEO]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/09/laravel-5-dot-x-x-route-and-seo/"/>
    <updated>2017-07-09T10:49:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/09/laravel-5-dot-x-x-route-and-seo</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_news_letter.png" width="600" alt="Laravel 5.x.x Route and SEO" />
</p>




<p>
  SEO stands for "search engine optimization". URLs is an important thing in getting found on the web. In this article I will implement routes and SEO friendly URLs for Laravel project.
</p>




<p>
  <strong>Things that Affect SEO</strong><br/>
  The following are some of the things that search engines such as Google Search consider when evaluating web sites:<br/>
  1. Website speed<br/>
  - No one waiting to visit a websites that take forever to load. We all love fast websites. The goal should be to keep the load time under 2 seconds. If you can get it under a second that is even much better. You need to test your web application for speed and optimize if necessary.<br/>
  2. Responsive designs<br/>
  - Mobile devices have a market share of internet usage. Since user experience matters to search engines, you need to ensure that the web site displays properly in mobile devices, tablets and desktops as well.<br/>
  3. Keywords<br/>
  - Search engines look at keywords when querying billions of indexed websites. As a developer you have to ensure that you provide title tags, meta description and HTML H2 heading that the content writers can use to place keywords.<br/>
  4. Social media statistics<br/>
  - If you read something cool on the web, you naturally share it on social media. This is a stamp of approval to search engines. Your have to include tools on the web site that will make it easy for the visitors to share the contents.<br/>
  5. Website URLs<br/>
  - The URLs should be keyword rich and words should be separated by dashes and not underscores.
</p>




<p>
  <strong>How to Implement SEO Friendly URLS in Laravel</strong><br/>
  Now we have to cover the basics SEO and we will map routes to controllers and create a single controller for all routes. The following table shows the URLs that will be implemented:
</p>




<table>
  <thead>
    <tr>
      <th>#</th>
      <th>URLs</th>
      <th>Method</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>/</td>
      <td>index</td>
      <td>Home page</td>
    </tr>
    <tr>
      <td>2</td>
      <td>/products</td>
      <td>products</td>
      <td>Products page</td>
    </tr>
    <tr>
      <td>3</td>
      <td>/products/details/{id}</td>
      <td>product_details(id)</td>
      <td>Product detailed based on product id</td>
    </tr>
    <tr>
      <td>4</td>
      <td>/products/category</td>
      <td>product_categories</td>
      <td>Product categories</td>
    </tr>
    <tr>
      <td>5</td>
      <td>/products/brands</td>
      <td>product_brands</td>
      <td>Product brands</td>
    </tr>
    <tr>
      <td>6</td>
      <td>/blog</td>
      <td>blog</td>
      <td>Blog postings list</td>
    </tr>
    <tr>
      <td>7</td>
      <td>/blog/post/{id}</td>
      <td>blog_post{id}</td>
      <td>Blog post content</td>
    </tr>
    <tr>
      <td>8</td>
      <td>/contact-us</td>
      <td>contact_us</td>
      <td>Contact us page</td>
    </tr>
    <tr>
      <td>9</td>
      <td>/login</td>
      <td>login</td>
      <td>Login user</td>
    </tr>
    <tr>
      <td>10</td>
      <td>/logout</td>
      <td>logout</td>
      <td>Logout user</td>
    </tr>
    <tr>
      <td>11</td>
      <td>/cart</td>
      <td>cart</td>
      <td>Cart contents</td>
    </tr>
    <tr>
      <td>12</td>
      <td>/checkout</td>
      <td>checkout</td>
      <td>Checkout shopper</td>
    </tr>
    <tr>
      <td>13</td>
      <td>/search/{query}</td>
      <td>search</td>
      <td>Search results</td>
    </tr>
  </tbody>
</table>




<br/>




<p>
  For this section assumes you have created the tutorial project. If you havenâ€™t done so yet then read this <a href="http://geekhmer.github.io/blog/2017/06/30/hello-laravel-5-dot-x-x/">Laravel Hello World</a>. We use the artisan command line tool to generate the codes for ShopController.php controller.
</p>




<p>
  Then open up your terminator and run the following command to browse to the project. Assumed that you are using Laravel plugin web server. 
</p>


<p>{% codeblock lang:php %}
php artisan serve
{% endcodeblock %}</p>

<p>
  Then run the following command to generate the Shop controller:
</p>


<p>{% codeblock lang:php %}
php artisan make:controller ShopController
{% endcodeblock %}</p>

<p>
  Open up /app/Http/Controllers/ShopController.php and replace the generated codes with the following codes below:
</p>


<p>{% codeblock ShopController.php lang:php %}
&lt;?php</p>

<p>namespace App\Http\Controllers;</p>

<p>use Illuminate\Http\Request;
use App\Http\Controllers\Controller;</p>

<p>class ShopController extends Controller {</p>

<p>  public function index() {</p>

<pre><code>return 'index page';
</code></pre>

<p>  }</p>

<p>  public function products() {</p>

<pre><code>return 'products page';
</code></pre>

<p>  }</p>

<p>  public function product_details($id) {</p>

<pre><code>return 'product details page';
</code></pre>

<p>  }</p>

<p>  public function product_categories() {</p>

<pre><code>return 'product categories page';
</code></pre>

<p>  }</p>

<p>  public function product_brands() {</p>

<pre><code>return 'product brands page';
</code></pre>

<p>  }</p>

<p>  public function blog() {</p>

<pre><code>return 'blog page';
</code></pre>

<p>  }</p>

<p>  public function blog_post($id) {</p>

<pre><code>return 'blog post page';
</code></pre>

<p>  }</p>

<p>  public function contact_us() {</p>

<pre><code>return 'contact us page';
</code></pre>

<p>  }</p>

<p>  public function login() {</p>

<pre><code>return 'login page';
</code></pre>

<p>  }</p>

<p>  public function logout() {</p>

<pre><code>return 'logout page';
</code></pre>

<p>  }</p>

<p>  public function cart() {</p>

<pre><code>return 'cart page';
</code></pre>

<p>  }</p>

<p>  public function checkout() {</p>

<pre><code>return 'checkout page';
</code></pre>

<p>  }</p>

<p>  public function search($query) {</p>

<pre><code>return "$query search page";
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  The above code defines functions that will responds to the routes.
</p>




<p>
  And then we will add routes that will call the methods in the controllers.
</p>




<p>
  Open up <code>web.php</code> in /routes folder and replace the code with the following:
</p>


<p>{% codeblock web.php lang:php %}
&lt;?php</p>

<p>/<em>
|&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
| Web Routes
|&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
|
| Here is where you can register web routes for your application. These
| routes are loaded by the RouteServiceProvider within a group which
| contains the &ldquo;web&rdquo; middleware group. Now create something great!
|
</em>/</p>

<p>Route::get(&lsquo;/&rsquo;,&lsquo;ShopController@index&rsquo;);
Route::get(&lsquo;/products&rsquo;,&lsquo;ShopController@products&rsquo;);
Route::get(&lsquo;/products/details/{id}&rsquo;,&lsquo;ShopController@product_details&rsquo;);
Route::get(&lsquo;/products/categories&rsquo;,&lsquo;ShopController@product_categories&rsquo;);
Route::get(&lsquo;/products/brands&rsquo;,&lsquo;ShopController@product_brands&rsquo;);
Route::get(&lsquo;/blog&rsquo;,&lsquo;ShopController@blog&rsquo;);
Route::get(&lsquo;/blog/post/{id}&rsquo;,&lsquo;ShopController@blog_post&rsquo;);
Route::get(&lsquo;/contact-us&rsquo;,&lsquo;ShopController@contact_us&rsquo;);
Route::get(&lsquo;/login&rsquo;,&lsquo;ShopController@login&rsquo;);
Route::get(&lsquo;/logout&rsquo;,&lsquo;ShopController@logout&rsquo;);
Route::get(&lsquo;/cart&rsquo;,&lsquo;ShopController@cart&rsquo;);
Route::get(&lsquo;/checkout&rsquo;,&lsquo;ShopController@checkout&rsquo;);
Route::get(&lsquo;/search/{query}&rsquo;,&lsquo;ShopController@search&rsquo;);
{% endcodeblock %}</p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Create Custom Helper]]></title>
    <link href="http://geekhmer.github.io/blog/2017/07/02/laravel-5-dot-x-x-create-custom-helper/"/>
    <updated>2017-07-02T20:08:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/07/02/laravel-5-dot-x-x-create-custom-helper</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_5.jpg" width="600" alt="Laravel 5.x.x Create Custom Helper" />
</p>




<p>
  In this article I will show you how to create your own custom helpers in Laravel framework.
</p>




<p>
  <strong>Create Project</strong><br/>
  Run the following composer command to create a new Laravel project:
</p>


<p>{% codeblock lang:php %}
composer create-project laravel/laravel laravel_helper
{% endcodeblock %}</p>

<p>
  <strong>Customer Helpersâ€™ Dir</strong><br/>
  Customer helpers files will be located in the <code>app</code> dir.
</p>




<p>
  Create a new directory Helpers in <code>app/Helpers</code>
</p>




<p>
  <strong>Define Helper Class</strong><br/>
  Letâ€™s create a simple helper function that will return the user's full name format.
</p>




<p>
  Create a new file <code>UserHelper.php</code> in <code>app/Helpers</code> and add the following codes:
</p>


<p>{% codeblock UserHelper.php lang:php %}
&lt;?php</p>

<p>namespace App\Helpers;</p>

<p>class UserHelper {
  public static function full_name($first_name, $last_name) {</p>

<pre><code>return $first_name . ', '. $last_name;   
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  - <code>namespace App\Helpers;</code>: defines the Helpers namespace.<br/>
  - <code>public static function full_name($first_name, $last_name) {...}</code>: defines a static function which return the user's full name.
</p>




<p>
  <strong>Helpers Service Provider Class</strong><br/>
  Service providers are used to auto load classes in Laravel framework. 
</p>




<p>
  We will need to define a service provider that will load all of our helpers classes in <code>app/Helpers</code> directory.
</p>




<p>
  Run the following artisan command to create <code>HelperServiceProvider.php</code> in <code>app/Providers</code> directory:
</p>


<p>{% codeblock lang:php %}
php artisan make:provider HelperServiceProvider
{% endcodeblock %}</p>

<p>
  And then add the following code below in <code>HelperServiceProvider.php</code> file:
</p>


<p>{% codeblock HelperServiceProvider.php lang:php %}
&lt;?php</p>

<p>namespace App\Providers;</p>

<p>use Illuminate\Support\ServiceProvider;</p>

<p>class HelperServiceProvider extends ServiceProvider {</p>

<p>  /<em>*
   * Bootstrap the application services.
   *
   * @return void
   </em>/
  public function boot()
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Register the application services.
   *
   * @return void
   </em>/
  public function register()
  {</p>

<pre><code>foreach (glob(app_path().'/Helpers/*.php') as $filename){
  require_once($filename);
}
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  - <code>namespace App\Providers;</code>: defines the namespace provider.<br/>
  - <code>use Illuminate\Support\ServiceProvider;</code>: imports the ServiceProvider class namespace.<br/>
  - <code>class HelperServiceProvider extends ServiceProvider {...}</code>: defines a HelperServiceProvider class that extends/inherite the ServiceProvider class.
  - <code>public function register() {...}</code> is the function that is used to loads the helpers.<br/>
  - <code>foreach (glob(app_path().'/Helpers/*.php') as $filename) {...}</code>: loops through all the files in <code>app/Helpers</code> directory and loads them.
</p>




<p>
  <strong>Configure Helper Service Provider and Class Alias</strong><br/>
  We need to register the HelperServiceProvider and create an alias for the helpers.
</p>




<p>
  Open up <code>config/app.php</code> file and add the following line in providers array variable.
</p>


<p>{% codeblock app.php lang:php %}
App\Providers\HelperServiceProvider::class,
{% endcodeblock %}</p>

<p>
 And then add the following line in aliases array variable.
</p>


<p>{% codeblock app.php lang:php %}
&lsquo;UserHelper&rsquo; => App\Helpers\UserHelper::class,
{% endcodeblock %}</p>

<p>
  <strong>Using the Custom Helper</strong><br/>
  Let create a route that will the custom helper function. Open up <code>routes/web.php</code> and add the following codes:
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;/users&rsquo;, function () {
  return UserHelper::full_name(&ldquo;Bunlong&rdquo;, &ldquo;Van&rdquo;);
});
{% endcodeblock %}</p>

<p>
  - <code>return UserHelper::full_name("Bunlong", "Van");</code> calls the static function full_name in UserHelper class.
</p>




<p>
  Open up your browser and type the uri <code>http://localhost:8000/users</code> you will see "Bunlong, Van" text.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Laravel 5.x.x]]></title>
    <link href="http://geekhmer.github.io/blog/2017/06/30/hello-laravel-5-dot-x-x/"/>
    <updated>2017-06-30T21:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/06/30/hello-laravel-5-dot-x-x</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_5.jpg" width="600" alt="Hello Laravel 5.x.x" />
</p>




<p>
  In the previous article, We installed and configured a Laravel application. And in this article We will build on the same project to create a simple Hello Laravel application and look at the key components of Laravel framework.
</p>




<p>
  <strong>Artisan Command Line</strong><br/>
  Artisan is the command line that automates common tasks in Laravel framework. The artisan command line can be used to perform the following tasks and much more:
</p>




<p>
  - Generate boilerplate code â€“ it easily create controllers, models... etc.<br/>
  - Database migrations â€“ migrations is used to manipulate database objects and can be used to create and drop tables etc.<br/>
  - Seeding â€“ seeding is a term used to add dummy records to the database.<br/>
  - Routing<br/>
  - Run unit tests.
</p>




<p>
  <strong>The Way to Use the Artisan Command</strong><br/>
  Open the terminator and run the following command to view the list of available commands:
</p>


<p>{% codeblock lang:php %}
php artisan list
{% endcodeblock %}</p>

<p>
  <strong>Artisan Command To Generate Codes for a Controller</strong><br/>
  Open the terminator and run the following command to generate codes for Hello Laravel controller:
</p>


<p>{% codeblock lang:php %}
php artisan make:controller HelloLaravelController
{% endcodeblock %}</p>

<p>
  - <code>php artisan</code> is used to run the artisan command line.<br/>
  - <code>make:controller HelloLaravelController</code> specifies the command that the should run. This command will create codes for a controller HelloLaravelController in /app/Http/Controllers/HelloLaravelController.php.
</p>




<p>
  And then open up the file <code>HelloLaravelController.php</code> in folder <code>/app/Http/Controllers</code>.
</p>




<p>
  And you will get the following code:
</p>


<p>{% codeblock HelloLaravelController.php lang:php %}
&lt;?php</p>

<p>namespace App\Http\Controllers;</p>

<p>use Illuminate\Http\Request;</p>

<p>use App\Http\Requests;
use App\Http\Controllers\Controller;</p>

<p>class HelloLaravelController extends Controller
{
  /<em>*
   * Display a listing of the resource.
   *
   * @return Response
   </em>/
  public function index()
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Show the form for creating a new resource.
   *
   * @return Response
   </em>/
  public function create()
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Store a newly created resource in storage.
   *
   * @param  Request  $request
   * @return Response
   </em>/
  public function store(Request $request)
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Display the specified resource.
   *
   * @param  int  $id
   * @return Response
   </em>/
  public function show($id)
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Show the form for editing the specified resource.
   *
   * @param  int  $id
   * @return Response
   </em>/
  public function edit($id)
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Update the specified resource in storage.
   *
   * @param  Request  $request
   * @param  int  $id
   * @return Response
   </em>/
  public function update(Request $request, $id)
  {</p>

<pre><code>//
</code></pre>

<p>  }</p>

<p>  /<em>*
   * Remove the specified resource from storage.
   *
   * @param  int  $id
   * @return Response
   </em>/
  public function destroy($id)
  {</p>

<pre><code>//
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>
  - <code>namespace App\Http\Controllers;</code>: defines the namespace for the controller.<br/>
  - <code>use Illuminate\Http\Request;</code>: imports namespaces with the required classes to use in the controller.<br/>
  - <code>class HelloLaravelController extends Controller</code>: defines the HelloLaravelController class which extends/inherit the base controller.<br/>
  - <code>public function index(){}</code>: defines the default function for the controller.<br/>
  - <code>public function create(){}</code>: defines the function that is used to render the create form view.<br/>
  - <code>public function store(Request $request)</code>: defines the function that is used to store/save a newly recode into the table/database.<br/>
  - <code>public function show($id)</code>: defines the function that is used to retrieves a single recode/resource based on the id.<br/>
  - <code>public function edit($id)</code>: defines the function that is used to render the edit form based on the id.<br/>
  - <code>public function update(Request $request, $id)</code> defines a function that is used to update a record in the table/database base on the id.<br/>
  - <code>public function destroy($id)</code>: defines the function that is used to remove a recode based on the id.
</p>




<p>
  <strong>Routing</strong><br/>
  We will create a new route that will render Hello Laravel in the browser.
</p>




<p>
  Open up file <code>web.php</code> in folder <code>routes</code> and add the following codes below:
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;/hello_laravel&rsquo;,function(){
  return &lsquo;Hello Laravel!&rsquo;;
});
{% endcodeblock %}</p>

<p>
  <code>Route::get('/hello',function(){...});</code>: responds to the GET method of the URI hello. function() defines an anonymous function that does the actual work for the requested URI.<br/>
  <code>return 'Hello Laravel!';</code>: returns and render Hello Laravel! to the requested browser.
</p>




<p>
  And then go to ther browser and type the uri <code>http://localhost:8000/hello</code> you will get the output "Hellow Laravel!".
</p>




<p>
  <strong>Route To Controller</strong><br/>
  Add the following codes in <code>routes/web.php</code>.
</p>


<p>{% codeblock web.php lang:php %}
Route::get(&lsquo;hello&rsquo;, &lsquo;HelloLaravelController@index&rsquo;);
{% endcodeblock %}</p>

<p>
  And then open up <code>app/Http/Controllers/HelloLaravelController.php</code> file and add the following codes below:
</p>


<p>{% codeblock HelloLaravelController.php lang:php %}
public function index()
{
  return &lsquo;Hello Laravel!&rsquo;;
}
{% endcodeblock %}</p>

<p>
  And then go to ther browser and type the uri <code>http://localhost:8000/hello</code> you will get the output "Hello Laravel!".
</p>




<p>
  <strong>Loading the View from the Controller</strong><br/>
  Open up <code>app/Http/Controllers/HelloLaravelController.php</code> file and edit the following codes below:
</p>


<p>{% codeblock HelloLaravelController.php lang:php %}
public function index()
{
  return view(&lsquo;home&rsquo;);
}
{% endcodeblock %}</p>

<p>
  <code>return view('home');</code>: loads a view named hello.blade.php.
</p>




<p>
  And then create a new file <code>home.blade.php</code> in folder <code>/resources/views</code> and add the following codes below:
</p>


<p>{% codeblock home.blade.php lang:php %}
Hello Laravel!
{% endcodeblock %}</p>

<p>
  And then go to ther browser and type the uri <code>http://localhost:8000/hello</code> you will get the output "Hello Laravel!".
</p>


<p></p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel 5.x.x Installation and Configuration]]></title>
    <link href="http://geekhmer.github.io/blog/2017/06/24/laravel-5-dot-x-x-installation-and-configuration/"/>
    <updated>2017-06-24T14:42:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2017/06/24/laravel-5-dot-x-x-installation-and-configuration</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/laravel_5.jpg" width="600" alt="Laravel 5" />
</p>




<p>
  Laravel is a great PHP framework. Currently, it is the most PHP framework which a lot of companies and people all over the world use it to build amazing applications. In this tutorial, I'll show you how easy it is to build a web application with Laravel and add authentication to it.
</p>




<p>
  Laravel is a free, open-source PHP framework designed for building web applications with an expressive and elegant syntax. Laravel saves your time and effort because it come with a lot of features. 
</p>




<p>
  Well, in this article We are going to take a look on installing, configuration Laravel and explore the Laravel directories structures. And pretty sure We will work with a Ubuntu (Linux) machine.
</p>




<p>
  <strong>Pre-requisites for Installing Laravel</strong><br/>
  Before installing Laravel, ensure that you have installed: Web Server, PHP, MySQL, Composer.
</p>




<p>
  <strong>Web Server, PHP & MySQL</strong><br/>
  For this article, We will use Laravel built-in web server. or if you prefer other kind of web server i.e. XAMPP comes with Apache, MySQL and PHP. The good news is XAMPP come cross platform. If you do not have XAMPP, you can download it from this <a href="https://www.apachefriends.org/index.html" target="_blank">link</a>.
</p>




<p>
  <strong>Composer</strong><br/>
  Composer is a dependency manager for PHP. You can read more about composer from their <a href="https://getcomposer.org/" target="_blank">official website</a>. We will not cover how to install composer in this article.
</p>




<p>
  <strong>Create a New Laravel Project Using Composer</strong><br/>
  Laravel use Composer to manage its dependencies. So, before using Laravel, ensure you have Composer installed on your machine.
</p>




<p>
  We can install Laravel by issuing the Composer <code>create-project</code> command in the terminal like so:
</p>


<p>{% codeblock lang:php %}
composer create-project &mdash;prefer-dist laravel/laravel blog
{% endcodeblock %}</p>

<p>
  Wait for the installation to complete then cd into the project and run the command below for running the Laravel built-in web server:
</p>


<p>{% codeblock lang:php %}
php artisan serve
{% endcodeblock %}</p>

<p>
  Browser to the following URL <code>http://localhost:300</code> in your web browser.
</p>




<p>
  <strong>Explore Directory Structure</strong><br/>
  Laravel follow the <code>Model-View-Controller</code> design pattern.
</p>




<p>
  <img src="http://geekhmer.github.io/images/mvc-diagram.png" width="600" alt="MVC" />
</p>




<p>
  - Models: query the database and returns the data.<br/>
  - Views: displays the model data, and sends user actions (e.g. button clicks) to the controller.<br/>
  - Controllers: handle user requests from the view, retrieve data from the Models and pass them back into the views.
</p>




<p>
  The following table briefly explains the key Laravel directories that you must know about:
</p>




<table>
  <thead>
    <tr>
      <th>Directories</th>
      <th>Descriptioin</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>app</td>
      <td>contains all of your application code.</td>
    </tr>
    <tr>
      <td>app/Console</td>
      <td>contains all of your artisan commands.</td>
    </tr>
    <tr>
      <td>app/Events</td>
      <td>contains event classes.</td>
    </tr>
    <tr>
      <td>app/Exceptions</td>
      <td>contains exception handling classes.</td>
    </tr>
    <tr>
      <td>app/Http</td>
      <td>contains controllers, filters, and requests.</td>
    </tr>
    <tr>
      <td>app/Jobs</td>
      <td>contains jobs that can be queued.</td>
    </tr>
    <tr>
      <td>app/Listeners</td>
      <td>contains handler classes for events.</td>
    </tr>
    <tr>
      <td>bootstrap</td>
      <td>contains files required by the bootstrap framework.</td>
    </tr>
    <tr>
      <td>config</td>
      <td>contains the application configuration files.</td>
    </tr>
    <tr>
      <td>database</td>
      <td>contains database migrations and seeds. It is also used to store the database for SQLite.</td>
    </tr>
    <tr>
      <td>public</td>
      <td>contains the front controllers and assets such as images, CSS, JavaScript etc.</td>
    </tr>
    <tr>
      <td>storage</td>
      <td>contains compiled blade templates, filed based sessions, etc.</td>
    </tr>
    <tr>
      <td>tests</td>
      <td>contains automated unit tests.</td>
    </tr>
    <tr>
      <td>vendor</td>
      <td>contains composer dependencies.</td>
    </tr>
  </tbody>
</table>




<p>
  <br/>
  <strong>Application Configuration</strong><br/>
  The application configuration information is located in <code>config/app.php</code>. In this section, we are going to: 
</p>




<p>
  1. Set the debugging mode â€“ the debugging mode is used to determine how much information should be displayed when an error occurs.
</p>




<p>
  Open the file <code>config/app.php</code> and upate the following code:
</p>


<p>{% codeblock lang:php %}
&lsquo;debug&rsquo; => env(&lsquo;APP_DEBUG&rsquo;, false),
{% endcodeblock %}</p>

<p>
  To:
</p>


<p>{% codeblock lang:php %}
&lsquo;debug&rsquo; => env(&lsquo;APP_DEBUG&rsquo;, true),
{% endcodeblock %}</p>

<p>
  2. Set the time zone â€“ this setting is used for PHP date and date-time functions. 
</p>




<p>
  Sets the time zone to UTC. This is the default value If you would like to have a different time zone, you can replace UTC with a value of your preferred time zone.
</p>




<p>
  Locate the following code:
</p>


<p>{% codeblock lang:php %}
&lsquo;timezone&rsquo; => &lsquo;UTC&rsquo;,
{% endcodeblock %}</p>

<p>
  3. Application key â€“ this value is used for encryption purposes.
</p>




<p>
  Update following code:
</p>


<p>{% codeblock lang:php %}
&lsquo;key&rsquo; => env(&lsquo;APP_KEY&rsquo;, &lsquo;SomeRandomString&rsquo;),
{% endcodeblock %}</p>

<p>
  To:
</p>


<p>{% codeblock lang:php %}
&lsquo;key&rsquo; => env(&lsquo;APP_KEY&rsquo;, &lsquo;inesindinemwanawabambuyabakoiwe&rsquo;),
{% endcodeblock %}</p>

<p>
  <strong>Authentication Configuration</strong><br/>
  The authentication configuration file is located in /config/auth.php. We will leave the default values as they are. If you want you can change them to meet your requirements.
</p>




<p>
  <strong>Database Configuration</strong><br/>
  The database configuration file is located in <code>config/database.php</code>. By default, MySQL will be used as the database engine. You can set it to a different database management system if you want.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
