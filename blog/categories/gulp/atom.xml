<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gulp | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/gulp/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2017-04-27T14:21:08+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gulp – Markdown]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/30/gulp-markdown/"/>
    <updated>2016-10-30T11:22:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/30/gulp-markdown</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Markdown" />
</p>




<p>
  Now for someting new. We are going to use Gulp with Handlebars to create our own CMS system.
</p>




<p>
  First of all, We want to be able to process markdown files and create html files with Gulp with plugin.
</p>


<p>{% codeblock lang:ruby %}
$ npm install gulp-markdown &mdash;save-dev
{% endcodeblock %}</p>

<p>
  For more information about <code>gulp-markdown</code> check out <a href="https://www.npmjs.org/package/gulp-markdown" target="_blank">https://www.npmjs.org/package/gulp-markdown</a>
</p>




<p>
  We will read all the markdown files in the <code>contents/pages</code> folder and generate html files.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
&hellip;
var markdown = require(&lsquo;gulp-markdown&rsquo;);
&hellip;
gulp.task(&lsquo;generate_pages&rsquo;, function() {
  return gulp.src(&lsquo;content/pages/**.md&rsquo;)</p>

<pre><code>.pipe(markdown())
.pipe(gulp.dest("build/pages"));
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>
  Lets create our first page.
</p>


<p>{% codeblock ontents/pages/first_page.md lang:ruby %}
Yes, it makes a <strong>bold</strong> statement.
{% endcodeblock %}</p>

<p>
  When We run our <code>gulp generate_pages</code> task, We will take the markdown and convert it into html and place the files in the <code>build/pages</code> directory.
</p>


<p>{% codeblock lang:ruby %}
$ gulp generate_pages
Using gulpfile ~/js/gulpwalkthru/gulpfile.js
Starting &lsquo;generate_pages&rsquo;&hellip;
Finished &lsquo;generate_pages&rsquo; after 22 ms
{% endcodeblock %}</p>

<p>
  If We look in our <code>build/pages</code> directory, We should see our new html file.
</p>


<p>{% codeblock build/pages/first_page.html lang:ruby %}
p>Yes, it makes a <strong>bold</strong> statement.</p>
{% endcodeblock %}</p>

<p>
  If We visit http://localhost:8000/pages/first_page.html we should see our generated webpage.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Live Reload]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-live-reload/"/>
    <updated>2016-10-12T16:24:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-live-reload</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Live Reload" />
</p>




<p>
  So far so good, lets link our css file in <code>index.html</code>.
</p>


<p>{% codeblock /contents/index.html lang:ruby %}
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;Learning Gulp&lt;/title&gt;
&lt;link rel="stylesheet" href="http://geekhmer.github.io/styles/main.min.css" /&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;h1&gt;Hello Gulp!&lt;/h1&gt;
</code></pre>

<p>  </body>
</html>
{% endcodeblock %}</p>

<p>
  Now let's turn on live reload with our <code>gulp-webserver</code>.
</p>


<p>{% codeblock gulpefile.js lang:ruby %}
gulp.task(&lsquo;webserver&rsquo;, function() {
  return gulp.src(&lsquo;build&rsquo;)</p>

<pre><code>.pipe(webserver({ livereload: true }));
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>
  If we run <code>gulp webserver</code> in one terminator and <code>gulp watch</code> in another, we will have our webserver running and live refreshing on each build.
</p>




<p>
  terminator1:
</p>


<p>{% codeblock lang:ruby %}
$ gulp webserver
{% endcodeblock %}</p>

<p>
  terminator2:
</p>


<p>{% codeblock lang:ruby %}
$ gulp watch
{% endcodeblock %}</p>

<p>
  Update the css file to:
</p>


<p>{% codeblock /contents/styles/some_styles.css lang:ruby %}
h1 {
  color: blue;
}
{% endcodeblock %}</p>

<p>
  Go to <code>http://localhost:8000</code> to watch our webpage.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Web Server]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-web-server/"/>
    <updated>2016-10-12T16:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-web-server</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Web Server" />
</p>




<p>
  We can actually serve our webpages by using a gulp plugin.
</p>


<p>{% codeblock lang:ruby %}
$ npm install gulp-webserver &mdash;save-dev
{% endcodeblock %}</p>

<p>
  For more information about <code>gulp-webserver</code> check out <a href="https://www.npmjs.com/package/gulp-webserver" target="_blank">https://www.npmjs.com/package/gulp-webserver</a>
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
&hellip;
var webserver = require(&lsquo;gulp-webserver&rsquo;);
&hellip;
gulp.task(&lsquo;webserver&rsquo;, function() {
  return gulp.src(&lsquo;build&rsquo;)</p>

<pre><code>.pipe(webserver());
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>
  Now when we run our gulp task webserver we will have a local webserver to view our website.
</p>


<p>{% codeblock lang:ruby %}
$ gulp webserver</p>

<p>Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;webserver&rsquo;&hellip;
Webserver started at <a href="http://localhost:8000">http://localhost:8000</a>
Finished &lsquo;webserver&rsquo; after 20 ms
{% endcodeblock %}</p>

<p>
  If you go to <code>http://localhost:8000</code> in your web browser you should see our index.html page saying Hello Gulp!.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Watch]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-watch/"/>
    <updated>2016-10-12T16:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-watch</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Watch" />
</p>




<p>
  Now for something super amazing. Instead of running the gulp task explicitly, lets have gulp run our tasks when the files change.
</p>




<p>
  First reorganize some of our tasks:<br/>
  - Rename default task to css.<br/>
  - Create a new default task to run css, 'javascript', and 'homepage' tasks.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
&hellip;
gulp.task(&lsquo;css&rsquo;, [&lsquo;clean&rsquo;], function() {
  console.log(&ldquo;Concat, move, and minify all the css files in styles folder&rdquo;);
  return gulp.src(&ldquo;contents/styles/**.css&rdquo;)</p>

<pre><code>.pipe(concat('main.min.css'))
.pipe(cssmin())
.pipe(gulp.dest('build/styles'));
</code></pre>

<p>});
&hellip;
gulp.task(&lsquo;default&rsquo;, [&lsquo;css&rsquo;, &lsquo;homepage&rsquo;, &lsquo;javascript&rsquo;]);
&hellip;
{% endcodeblock %}</p>

<p>
  Next create our file watching task. Could you guess what?... there isn’t a plugin for this. It is just part of gulp.
</p>




<p>
  We will create a gulp watch task to watch our contents folder and run our default task on file change.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
&hellip;
gulp.task(&lsquo;watch&rsquo;, [], function() {
  return gulp.watch([&lsquo;contents/**&rsquo;], [&lsquo;default&rsquo;]);
});
&hellip;
{% endcodeblock %}</p>

<p>
  In the terminal type:
</p>


<p>{% codeblock lang:ruby %}
$ gulp watch</p>

<p>Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;watch&rsquo;&hellip;
Finished &lsquo;watch&rsquo; after 11 ms
{% endcodeblock %}</p>

<p>
  If you update any of the css files in the styles folder, you should see gulp run the default task.
</p>


<p>{% codeblock lang:ruby %}
Starting &lsquo;clean&rsquo;&hellip;
Clean all files in build folder
Finished &lsquo;clean&rsquo; after 21 ms
Starting &lsquo;css&rsquo;&hellip;
Concat, move, and minify all the css files in styles folder
Starting &lsquo;homepage&rsquo;&hellip;
Starting &lsquo;javascript&rsquo;&hellip;
Validate, Concat, Uglify, and Move all the javascript files
Finished &lsquo;homepage&rsquo; after 77 ms
Finished &lsquo;javascript&rsquo; after 75 ms
Finished &lsquo;css&rsquo; after 84 ms
Starting &lsquo;default&rsquo;&hellip;
Finished &lsquo;default&rsquo; after 14 μs
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Creating a Webpage]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-creating-a-webpage/"/>
    <updated>2016-10-12T09:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-creating-a-webpage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Creating a Webpage" />
</p>




<p>
  Moving CSS and JavaScript files is all well and good, but we do actually want webpages right?
</p>




<p>
  Let’s start our webpage generation by first moving the <code>index.html</code> file we created while learning more about streams.
</p>




<p>
  It should look like:
</p>


<p>{% codeblock /contents/index.html lang:ruby %}
&lt;!DOCTYPE html>
<html>
  <head></p>

<pre><code>&lt;title&gt;Learning Gulp&lt;/title&gt;
</code></pre>

<p>  </head>
  <body></p>

<pre><code>&lt;h1&gt;Hello Gulp!&lt;/h1&gt;
</code></pre>

<p>  </body>
</html>
{% endcodeblock %}</p>

<p>
  We will then create a simple homepage task to move the index.html file to our build directory.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
&hellip;
gulp.task(&ldquo;homepage&rdquo;, function() {
  return gulp.src(&ldquo;contents/index.html&rdquo;)</p>

<pre><code>.pipe(gulp.dest("build"));
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>
  Now test the task.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
$ gulp homepage</p>

<p>Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;homepage&rsquo;&hellip;
Finished &lsquo;homepage&rsquo; after 15 ms
{% endcodeblock %}</p>

<p>
  It would be nice to be able to preview our website as we generate the content. Let’s do that next.
</p>

]]></content>
  </entry>
  
</feed>
