<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gulp | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/gulp/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2016-10-03T15:57:00+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gulp – Cleaning Our Build Folder]]></title>
    <link href="http://geekhmer.github.io/blog/2016/09/26/gulp-cleaning-our-build-folder/"/>
    <updated>2016-09-26T16:56:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/09/26/gulp-cleaning-our-build-folder</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulpjs.jpg" width="600" alt="Gulp, Gulp – Cleaning Our Build Folder" />
</p>




<p>
  A normal part of a build process is a cleaning task to remove all the old files in the build folder.
</p>




<p>
For us, this means getting rid of the leftover <code>more_styles.css</code> and <code>some_styles.css</code> files in our <code>build/styles</code> folder.
</p>




<p>
  To clean files, we will need another gulp plugin:
</p>


<p>{% codeblock lang:ruby %}
$ npm install gulp-rimraf &mdash;save-dev
{% endcodeblock %}</p>

<p>
For more information on gulp-rimraf check out <a href="https://www.npmjs.com/package/gulp-rimraf" target="_blank"> https://www.npmjs.org/package/gulp-rimraf</a>.
</p>




<p>
  This task used to be handled by <code>gulp-clean</code> but has been replaced by <code>gulp-rimraf</code>.
</p>




<p>
Instead of adjusting our <code>default</code> task, lets create a new task to clean out the directory.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
var gulp = require(&lsquo;gulp&rsquo;);
var concat = require(&lsquo;gulp-concat&rsquo;);
var clean = require(&lsquo;gulp-rimraf&rsquo;);</p>

<p>gulp.task(&lsquo;clean&rsquo;, [], function() {
  console.log(&ldquo;Clean all files in build folder&rdquo;);
  return gulp.src(&ldquo;build/*&rdquo;, { read: false }).pipe(clean());
});</p>

<p>gulp.task(&lsquo;default&rsquo;, [&lsquo;clean&rsquo;], function() {
  console.log(&ldquo;Concating and moving all the css files in styles folder&rdquo;);
  return gulp.src(&ldquo;contents/styles/**.css&rdquo;)</p>

<pre><code>.pipe(concat('main.css'))
.pipe(gulp.dest('build/styles'));
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>
  So like before, we need to require <code>gulp-rimraf</code>.
</p>




<p>
  This time though, we created a new task called <code>clean</code>. We tell this task to look at all the files in the <code>build</code> folder and then pipe them to our clean operation. This will delete the files.
</p>




<p>
  You might notice that in our options we pass in <code>{ read: false }</code>. This tells the task to not read the contents of the files it is deleting. It is an easy performance gain.
</p>




<p>
  To run our clean task from the command line, we just tell gulp which task to run:
</p>


<p>{% codeblock lang:ruby %}
$ gulp clean</p>

<p>Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;clean&rsquo;&hellip;
Clean all files in build folder
Finished &lsquo;clean&rsquo; after 8.95 ms
{% endcodeblock %}</p>

<p>
  What we would like is to run our <code>clean</code> task before we run our <code>default</code> task. That way our build folder will be nice and empty before we starting moving files there.
</p>




<p>
You might have been wondering what the empty array (<code>[]</code>) was before our <code>function</code>. This is where we specify dependency tasks.
</p>




<p>
  A <strong>dependency task</strong> is a task that needs to be completed before gulp can run the current task.
</p>




<p>
  So for our scenario, our <code>clean</code> task is a dependency for <code>default</code>.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
&hellip;
gulp.task(&lsquo;default&rsquo;, [&lsquo;clean&rsquo;], function() {
  &hellip;
});
{% endcodeblock %}</p>

<p>
  Now when we run our <code>default</code> gulp task, we should see that it runs the <code>clean</code> task before <code>default</code>.
</p>


<p>{% codeblock lang:ruby %}
$ gulp</p>

<p>Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;clean&rsquo;&hellip;
Clean all files in build folder
Finished &lsquo;clean&rsquo; after 9.03 ms
Starting &lsquo;default&rsquo;&hellip;
Concating and moving all files from styles folder
Finished &lsquo;default&rsquo; after 8.42 ms
{% endcodeblock %}</p>

<p>
  So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Concat: Combining multiple files into one]]></title>
    <link href="http://geekhmer.github.io/blog/2016/09/13/gulp-concat-combining-multiple-files-into-one/"/>
    <updated>2016-09-13T09:35:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/09/13/gulp-concat-combining-multiple-files-into-one</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulp.jpg" width="600" alt="Gulp, Gulp – Concat: Combining multiple files into one" />
</p>




<p>
  Printing Hello and moving files is rather boring. Let’s do something productive.
</p>




<p>
  When we create websites, we are always trying to deliver the best experience possible.
  This includes having our webpages displaying fast. Back in the day, this meant having
  all our styles in one css file.
</p>




<p>
  While this made our webpages load faster, it made maintaining the css file a night-mare!
</p>




<p>
  These days we can use multiple css files for better organization and then concat (meaning merge or combine) the files together into one large file.
</p>




<p>
  We left our project looking like:
</p>


<p>{% codeblock lang:ruby %}
/build
  /styles</p>

<pre><code>some_styles.css
more_styles.css
</code></pre>

<p>/node_modules
/contents
  /styles</p>

<pre><code>some_styles.css
more_styles.css
</code></pre>

<p>gulpfile.js
package.json
{% endcodeblock %}</p>

<p>
  Right now, we have two separate css files in our build/styles folder. We are going to use a gulp plugin to concat all our css files in the styles folder.
</p>




<p>
  Gulp contains some basic tasks, but the power of gulp is the customization you can bring into your build process by using plugins.
</p>




<p>
  For a list of all the gulp plugins available, go to <a href="http://gulpjs.com/plugins/" target="_blank">http://gulpjs.com/plugins/</a>
</p>




<p>
  To concat the files together, we will need to install one of these plugins.
</p>


<p>{% codeblock lang:ruby %}
npm install gulp-concat &mdash;save-dev
{% endcodeblock %}</p>

<p>
  We can then update our default gulp task to concat the files.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
var gulp = require(&lsquo;gulp&rsquo;);
var concat = require(&lsquo;gulp-concat&rsquo;);</p>

<p>gulp.task(&lsquo;default&rsquo;, [], function() {
  console.log(&ldquo;Concating and moving all the css files in styles folder&rdquo;);
  gulp.src(&ldquo;contents/styles/**.css&rdquo;)</p>

<pre><code>.pipe(concat('main.css'))
.pipe(gulp.dest('build/styles'));
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>
  Couple of things have changed, can you spot them? First, we had to reference the gulp plugin with:
</p>


<p>{% codeblock lang:ruby %}
var concat = require(&lsquo;gulp-concat&rsquo;);
{% endcodeblock %}</p>

<p>
  We chose to label this <code>concat</code>. Obviously we could call it anything we want, but concat communicates what the plugin does to those reading our build script.
</p>




<p>
  Second, we added another step to our task. In between the <code>src</code> and the <code>pipe(gulp.dest...)</code> steps, we added <code>pipe(concat(...))</code>.
</p>




<p>
  Gulp works by streaming files from one process to another. This allows us to create complex build tasks out of small, simple steps. Composition == winning.
</p>




<p>
  Now run our gulp task:
</p>


<p>{% codeblock lang:ruby %}
$ gulp
Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;default&rsquo;&hellip;
Moving all the css files in styles folder
Finished &lsquo;default&rsquo; after 6.09 ms
{% endcodeblock %}</p>

<p>
  Our task will read all the css files in the <code>styles</code> folder, combine them into one <code>main.css</code> file, and then place that file in the <code>build/styles</code> folder.
</p>




<p>
  Our project should now look like:
</p>


<p>{% codeblock lang:ruby %}
/build
  /styles</p>

<pre><code>main.css
more_styles.css
some_styles.css
</code></pre>

<p>/node_modules
/styles
  more_styles.css
  some_styles.css
gulpfile.js
package.json
{% endcodeblock %}</p>

<p>
  Notice the more_styles.css and some_styles.css files are still in our build folder. :(
</p>




<p>
  We don’t want those chumps there anymore. In the next chapter we will learn how to
  get rid of those files.
</p>




<p>
  So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Moving Files]]></title>
    <link href="http://geekhmer.github.io/blog/2016/08/28/gulp-moving-files/"/>
    <updated>2016-08-28T18:35:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/08/28/gulp-moving-files</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulp.jpg" width="600" alt="Gulp – Moving Files" />
</p>




<p>
  The first thing we will learn to do with gulp is to move files.
</p>




<p>
  Let’s create simple styles files some_styles.css and more_styles.css.
</p>


<p>{% codeblock /contents/styles/some_styles.css lang:ruby %}
h1 {
  color: red;
}
{% endcodeblock %}</p>

<p>{% codeblock /contents/styles/more_styles.css lang:ruby %}
p {
  font-size: 30px;
}
{% endcodeblock %}</p>

<p>
  Our project structure should now look like:
</p>


<p>{% codeblock lang:ruby %}
/node_modules
/contents
  /styles</p>

<pre><code>more_styles.css
some_styles.css
</code></pre>

<p>gulpfile.js
package.json
{% endcodeblock %}</p>

<p>
  Update our <code>gulpfile.js</code> from the previous section and instruct gulp to move all the files found in the styles folder to our <code>build/styles</code> folder.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
var gulp = require(&lsquo;gulp&rsquo;);</p>

<p>gulp.task(&lsquo;default&rsquo;, [], function() {
  console.log(&ldquo;Moving all files in styles folder&rdquo;);
  gulp.src(&ldquo;contents/styles/<em>*.</em>&rdquo;)</p>

<pre><code>.pipe(gulp.dest('build/styles'));
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>
  Well, What do we expect will happen when we run gulp? If you guessed the files will be copied and moved to the <code>build/styles</code> folder, then give yourself a cookie.
</p>




<p>
  When we run gulp , we should see:
</p>


<p>{% codeblock lang:ruby %}
$ gulp</p>

<p>Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;default&rsquo;&hellip;
Moving all files in styles folder
Finished &lsquo;default&rsquo; after 7.27 ms
{% endcodeblock %}</p>

<p>
  Our project should now look like:
</p>


<p>{% codeblock lang:ruby %}
/build
  /styles</p>

<pre><code>some_styles.css
more_styles.css
</code></pre>

<p>/node_modules
/contents
  /styles</p>

<pre><code>some_styles.css
more_styles.css
</code></pre>

<p>gulpfile.js
package.json
{% endcodeblock %}</p>

<p>
  So far so good, That’s it!!! See ya!!! :)
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Hello World]]></title>
    <link href="http://geekhmer.github.io/blog/2016/08/28/gulp-hello-world/"/>
    <updated>2016-08-28T17:54:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/08/28/gulp-hello-world</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulp.jpg" width="600" alt="Gulp – Hello World" />
</p>




<p>
  Let’s start a new node project in our folder and add a package.json by using command below:
</p>


<p>{% codeblock lang:ruby %}
npm init
{% endcodeblock %}</p>

<p>
  Time to install gulp using npm. First globally to access the gulp command and then locally for our package.json .
</p>


<p>{% codeblock lang:ruby %}
npm install gulp -g
npm install gulp &mdash;save-dev
{% endcodeblock %}</p>

<p>
  By default gulp looks for a <code>gulpfile.js</code> to run. Let’s create a simple gulpfile.js.
</p>


<p>{% codeblock gulpfile.js lang:ruby %}
var gulp = require(&lsquo;gulp&rsquo;);</p>

<p>gulp.task(&lsquo;default&rsquo;, [], function() {
  console.log(&ldquo;Hellow World&rdquo;);
});
{% endcodeblock %}</p>

<p>
  In your terminator run the gulp command below:
</p>


<p>{% codeblock lang:ruby %}
gulp
{% endcodeblock %}</p>

<p>
  You should see:
</p>


<p>{% codeblock lang:ruby %}
Hello Gulp</p>

<p>Using gulpfile ~/YOUR_DIRECTORY/gulpfile.js
Starting &lsquo;default&rsquo;&hellip;
Hello Gulp! You are mighty fine.
Finished &lsquo;default&rsquo; after &hellip;
{% endcodeblock %}</p>

<p>
  Congratulations creating your first gulp build script. So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Installation]]></title>
    <link href="http://geekhmer.github.io/blog/2016/08/28/gulp-installation/"/>
    <updated>2016-08-28T14:06:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/08/28/gulp-installation</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/gulp.jpg" width="600" alt="Gulp – Installation" />
</p>




<p>
  This article provides a step-by-step procedure of Gulp installation.
</p>




<p>
  <strong>Node.js Installation</strong><br/>
  Run the setup to install the Node.js on your computer <a href="https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04" target="_blank">here</a>.<br/>
  Then open up the terminator in your system and enter the following command. It will display the installed Node.js version. 
</p>


<p>{% codeblock lang:ruby %}
node -v
{% endcodeblock %}</p>

<p>
  In the terminator, enter the following command to display the version of npm (Node.js package manager) which is used to install modules. It will display the installed Node.js version.
</p>


<p>{% codeblock lang:ruby %}
npm -v
{% endcodeblock %}</p>

<p>
  <strong>Gulp Installation</strong><br/>
  In the terminator, enter the following command to install Gulp. Adding “-g” flag ensures that the Gulp is globally available for any project.
</p>


<p>{% codeblock lang:ruby %}
gulp -v
{% endcodeblock %}</p>

<p>
  So far so good, That’s it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
