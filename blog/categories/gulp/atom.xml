<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gulp | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/gulp/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2016-10-12T09:23:14+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gulp – Creating a Webpage]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-creating-a-webpage/"/>
    <updated>2016-10-12T09:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-creating-a-webpage</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Creating a Webpage" />
</p>




<p>
  Moving CSS and JavaScript files is all well and good, but we do actually want webpages right?
</p>




<p>
  Let’s start our webpage generation by first moving the <code>index.html</code> file we created while learning more about streams.
</p>




<p>
  It should look like:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/contents/index.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">!</span><span class="no">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Learning Gulp&amp;lt;/</span><span class="n">title</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="sr">/head&gt;</span>
</span><span class='line'><span class="sr">  &lt;body&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">h1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Hello</span> <span class="no">Gulp</span><span class="o">!&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">h1</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="sr">/body&gt;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We will then create a simple homepage task to move the index.html file to our build directory.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">homepage</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">contents</span><span class="o">/</span><span class="n">index</span><span class="o">.</span><span class="n">html</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;.pipe(gulp.dest(&quot;build&quot;));</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now test the task.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">homepage</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Using gulpfile ~/</span><span class="no">YOUR_DIRECTORY</span><span class="o">/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">homepage</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="no">Finished</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">homepage</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">after</span> <span class="mi">15</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It would be nice to be able to preview our website as we generate the content. Let’s do that next.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Testing with Jasmine]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/12/gulp-testing-with-jasmine/"/>
    <updated>2016-10-12T09:07:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/12/gulp-testing-with-jasmine</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Testing with Jasmine" />
</p>




<p>
  You do test your JavaScript right? Well... you should and with gulp + Karma + Jasmine it is super easy.
</p>




<p>
  First if you have not installed Karma and Jasmine, then do so now.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">karma</span><span class="o">-</span><span class="n">jasmine</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Next we will install the <code>gulp-jasmine</code> plugin for gulp.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">jasmine</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We can then create a test task to run all the specs found in a specs folder we will create.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">jasmine</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">gulp</span><span class="o">-</span><span class="n">jasmine</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">specs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">specs</span><span class="o">/**.</span><span class="n">js</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;.pipe(jasmine());</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Let’s create a basic (failing) test to see that it is working.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/specs/our_test.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">OMG</span> <span class="n">a</span> <span class="no">JavaScript</span> <span class="no">Test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">should</span> <span class="n">pass</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;expect(true).toBe(false);</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  });</span>
</span><span class='line'><span class="sr">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">specs</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Using gulpfile ~/</span><span class="no">YOUR_DIRECTORY</span><span class="o">/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">specs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">F</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Failures:&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="mi">1</span><span class="p">)</span> <span class="no">OMG</span> <span class="n">a</span> <span class="no">JavaScript</span> <span class="no">Test</span> <span class="n">should</span> <span class="n">pass</span>
</span><span class='line'>  <span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span> <span class="no">Expected</span> <span class="kp">true</span> <span class="n">to</span> <span class="n">be</span> <span class="kp">false</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;1 spec, 1 failure</span>
</span><span class='line'><span class="sr">Finished in 0.004 seconds</span>
</span><span class='line'><span class="sr">&amp;lsquo;specs&amp;rsquo; errored after 39 ms Tests failed&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now it is time to refactor. We will make the extremely difficult change from false to true to make our test pass.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/specs/our_test.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">OMG</span> <span class="n">a</span> <span class="no">JavaScript</span> <span class="no">Test</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">should</span> <span class="n">pass</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;expect(true).toBe(true);</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  });</span>
</span><span class='line'><span class="sr">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  And run our test suite again.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">specs</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Using gulpfile ~/</span><span class="no">YOUR_DIRECTORY</span><span class="o">/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">specs</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="o">.</span><span class="n">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;1 spec, 0 failures</span>
</span><span class='line'><span class="sr">Finished in 0 seconds</span>
</span><span class='line'><span class="sr">Finished &amp;lsquo;specs&amp;rsquo; after 39 ms</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Next we will do is improve our testing task by adding a test-watch task to run as we edit our JavaScript files.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">gulp</span><span class="o">.</span><span class="n">task</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">spec</span><span class="o">-</span><span class="n">watch</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gulp</span><span class="o">.</span><span class="n">watch</span><span class="p">(</span><span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">specs</span><span class="o">/&lt;</span><span class="n">strong</span><span class="o">&gt;.</span><span class="n">js</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">contents</span><span class="o">/</span><span class="n">javascripts</span><span class="o">/&lt;</span><span class="sr">/strong&gt;.js&amp;rsquo;], [&amp;lsquo;test&amp;rsquo;])</span>
</span><span class='line'><span class="sr">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Uglify]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/11/gulp-uglify/"/>
    <updated>2016-10-11T22:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/11/gulp-uglify</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Uglify" />
</p>




<p>
  For JavaScript files we also want to uglify them. Uglifying JavaScript involves changing variable and function names to reduce their size. So a variable named customer might be renamed to x. JavaScript engines don’t care about descriptive names, only developers. So how do we uglify JavaScript files with gulp?
</p>




<p>
  I know what you are going to say: "Blah, blah, blah... there is a plugin." and you are correct.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">uglify</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  For more information on <code>gulp-uglify</code> check out <a href="https://www.npmjs.org/package/gulp-uglify" target="_blank">https://www.npmjs.org/package/gulp-uglify</a>.
</p>




<p>
  While we are uglifying the file, we will also concat all our JavaScript files together and move them to <code>build/javascripts</code>.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">var</span> <span class="n">uglify</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">gulp</span><span class="o">-</span><span class="n">uglify</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;gulp.task(&amp;lsquo;javascript&amp;rsquo;, function () {</span>
</span><span class='line'><span class="sr">  console.log(&amp;ldquo;Validate, Concat, Uglify, and Move all the javascript files&amp;rdquo;);&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">gulp</span><span class="o">.</span><span class="n">src</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">contents</span><span class="o">/</span><span class="n">javascripts</span><span class="o">/**.</span><span class="n">js</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;.pipe(jsValidate())</span>
</span><span class='line'><span class="sr">.on(&quot;error&quot;, notify.onError(function(error) {</span>
</span><span class='line'><span class="sr">  return error.message;</span>
</span><span class='line'><span class="sr">}))</span>
</span><span class='line'><span class="sr">.pipe(uglify())</span>
</span><span class='line'><span class="sr">.pipe(concat(&#39;main.js&#39;))</span>
</span><span class='line'><span class="sr">.pipe(gulp.dest(&#39;build/</span><span class="n">javascripts</span><span class="err">&#39;</span><span class="p">));</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  When you run our gulp javascript task now, we should see that our javascript files were uglified, concated, and moved to the build folder.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Using gulpfile ~/</span><span class="no">YOUR_DIRECTORY</span><span class="o">/</span><span class="n">gulpFile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="no">Validate</span><span class="p">,</span> <span class="no">Concat</span><span class="p">,</span> <span class="no">Uglify</span><span class="p">,</span> <span class="ow">and</span> <span class="no">Move</span> <span class="n">all</span> <span class="n">the</span> <span class="n">javascript</span> <span class="n">files</span>
</span><span class='line'><span class="no">Finished</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">after</span> <span class="mi">55</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  If you have an error here, be sure to check that your JavaScript is valid. Remember we were testing that last section.
</p>




<p>
  The build script should create our <code>/build/javascripts/main.js</code> file.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/build/javascripts/main.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">(){</span><span class="n">var</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">return</span> <span class="n">n</span><span class="o">+</span><span class="mi">10</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Notify Pop Up]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/11/gulp-notify-pop-up/"/>
    <updated>2016-10-11T21:11:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/11/gulp-notify-pop-up</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Notify Pop Up" />
</p>




<p>
  In the previous article, we used gulp to validate our JavaScript. The error message would appear in the console. While this is awesome, there is a chance we could miss it.
</p>




<p>
  Let’s use notifications to display a pop up window when we have a JavaScript error.
</p>




<p>
  There is a gulp plugin to send notifications.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">notify</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  For more information on <code>gulp-notify</code> check out <a href="https://www.npmjs.org/package/gulp-notify" target="_blank">https://www.npmjs.org/package/gulp-notify</a>
</p>




<p>
  Remember that gulp uses node’s streaming. It shouldn’t be a surprise that when <code>gulp-jsvalidate</code> finds an error, it emits an error event.
</p>




<p>
  All we need to do is handle the event and use <code>gulp-notify</code> to send a notification with the error message.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">var</span> <span class="n">notify</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">gulp</span><span class="o">-</span><span class="n">notify</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;hellip;</span>
</span><span class='line'><span class="sr">gulp.task(&amp;lsquo;javascript&amp;rsquo;, function () {</span>
</span><span class='line'><span class="sr">  console.log(&amp;ldquo;Validate JavaScript&amp;rdquo;);</span>
</span><span class='line'><span class="sr">  return gulp.src(&amp;ldquo;contents/</span><span class="n">javascripts</span><span class="o">/**.</span><span class="n">js</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;.pipe(jsValidate())</span>
</span><span class='line'><span class="sr">.on(&quot;error&quot;, notify.onError(function(error) {</span>
</span><span class='line'><span class="sr">  return error.message;</span>
</span><span class='line'><span class="sr">}));</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;});</span>
</span><span class='line'><span class="sr">&amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Since our JavaScript is now valid, we need to make it invalid so we can see the error message.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/contests/javascript/somejs.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now when we run gulp javascript we will get a notification window that an error was found.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Using gulpfile ~/</span><span class="no">YOUR_DIRECTORY</span><span class="o">/</span><span class="n">gulpFile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="no">Validate</span> <span class="no">JavaScript</span>
</span><span class='line'><span class="n">gulp</span><span class="o">-</span><span class="ss">notify</span><span class="p">:</span> <span class="o">[</span><span class="no">Error</span> <span class="n">running</span> <span class="no">Gulp</span><span class="o">]</span> <span class="no">Line</span> <span class="mi">3</span><span class="p">:</span> <span class="no">Unexpected</span> <span class="n">token</span> <span class="o">*</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">errored</span> <span class="n">after</span> <span class="mi">41</span> <span class="n">ms</span> <span class="no">Line</span> <span class="mi">3</span><span class="p">:</span> <span class="no">Unexpected</span> <span class="n">token</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gulp – Validate JavaScript]]></title>
    <link href="http://geekhmer.github.io/blog/2016/10/11/gulp-validate-javascript/"/>
    <updated>2016-10-11T11:42:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2016/10/11/gulp-validate-javascript</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bunlong_gulp.jpg" width="600" alt="Gulp, Gulp – Validate JavaScript" />
</p>




<p>
  The web runs on more than HTML and CSS, It runs on JavaScript. Let’s perform some common JavaScript build operations with gulp.
</p>




<p>
  We will first look into validating our JavaScript using gulp.
</p>




<p>
  And yes... there is a plugin for that.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">npm</span> <span class="n">install</span> <span class="n">gulp</span><span class="o">-</span><span class="n">jsvalidate</span> <span class="o">&amp;</span><span class="n">mdash</span><span class="p">;</span><span class="n">save</span><span class="o">-</span><span class="n">dev</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  For more information on <code>gulp-jsvalidate</code> check out <a href="https://github.com/sindresorhus/gulp-jsvalidate" target="_blank">https://github.com/sindresorhus/gulp-jsvalidate</a>.
</p>




<p>
  We will now create a new Javascript task in our <code>gulpfile.js</code>. At first, all we will do is validate our Javascript in a new <code>/contents/javascripts</code> folder.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/gulpfile.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="n">var</span> <span class="n">jsValidate</span> <span class="o">=</span> <span class="nb">require</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">gulp</span><span class="o">-</span><span class="n">jsvalidate</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;hellip;</span>
</span><span class='line'><span class="sr">gulp.task(&amp;lsquo;javascript&amp;rsquo;, function () {</span>
</span><span class='line'><span class="sr">  console.log(&amp;ldquo;Validate JavaScript&amp;rdquo;);</span>
</span><span class='line'><span class="sr">  return gulp.src(&amp;ldquo;contents/</span><span class="n">javascripts</span><span class="o">/**.</span><span class="n">js</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;.pipe(jsValidate());</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;});</span>
</span><span class='line'><span class="sr">&amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Time to test out our new task and plugin. Create a javascript file and make a syntax error.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/contents/javascript/somejs.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="sr">//</span> <span class="n">this</span> <span class="n">is</span> <span class="ow">not</span> <span class="n">valid!</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now when we run our javascript task, we will get an error message in the terminator:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Using gulpfile ~/</span><span class="no">YOUR_DIRECTORY</span><span class="o">/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">errored</span> <span class="n">after</span> <span class="mi">14</span> <span class="n">ms</span> <span class="no">Line</span> <span class="mi">3</span><span class="p">:</span> <span class="no">Unexpected</span> <span class="n">token</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  When we fix the error and then run our gulp task, we won’t get that error message:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/contents/javascript/somejs.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="no">OMG</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gulp</span> <span class="n">javascript</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Using gulpfile ~/</span><span class="no">YOUR_DIRECTORY</span><span class="o">/</span><span class="n">gulpfile</span><span class="o">.</span><span class="n">js</span>
</span><span class='line'><span class="no">Starting</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="no">Validate</span> <span class="no">JavaScript</span>
</span><span class='line'><span class="no">Finished</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">javascript</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">after</span> <span class="mi">14</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Sweet codes! Gulp can now check if our JavaScript is valid. But the error message in the console is rather bland, lets find a better way to tell us that we messed up.
</p>

]]></content>
  </entry>
  
</feed>
