<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-03-24T00:03:18+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Nested Form Fields]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/23/ruby-on-rails-nested-form-fields/"/>
    <updated>2015-03-23T23:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/23/ruby-on-rails-nested-form-fields</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Nested Form Fields" />
</p>




<p>
  It’s super common to want to edit records along with their has_many associations on a single page.
</p>




<p>
  This Rails gem helps creating forms for models with nested has_many associations and relies on jQuery to dynamically add and remove nested form fields without a page reload.<br/>
  - Works for arbitrarily deeply nested associations (tested up to 4 levels).<br/>
  - Works with form builders like simple_form.<br/>
  - Requires at least Ruby 1.9 and the Rails asset pipeline.
</p>




<p>
  To install, add nested_form_fields to your application’s Gemfile:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">nested_form_fields</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Run bundle intall to install the gem:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  In application.js file add:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">nested_form_fields</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  assuming that you have a User model with nested videos:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:videos</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:videos</span><span class="p">,</span> <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Use the nested_fields_for helper inside your user form to add the video fields:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">nested_fields_for</span> <span class="ss">:videos</span> <span class="k">do</span> <span class="o">|</span><span class="n">ff</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;= ff.text_field :video_title</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Links to add and remove fields can be added using the add_nested_fields_link and remove_nested_fields_link helpers:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">nested_fields_for</span> <span class="ss">:videos</span> <span class="k">do</span> <span class="o">|</span><span class="n">ff</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;= ff.remove_nested_fields_link</span>
</span><span class='line'><span class="sr">= ff.text_field :video_title</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  = f.add_nested_fields_link :videos</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Note that remove_nested_fields_link needs to be called within the nested_fields_for call and add_nested_fields_link outside of it via the parent builder.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Callback Classes]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-callback-classes/"/>
    <updated>2015-03-21T14:51:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-callback-classes</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Callback Classes" />
</p>




<p>
  If you want to reuse callback code for more than one object that Rails provides a way to write callback classes. All you have to do is pass a given callback queue an object that responds to the name of the callback and takes the model object as a parameter.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MarkDeleted</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">before_destroy</span><span class="p">(</span><span class="n">model</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;model.update_attribute(:deleted_at, Time.current)</span>
</span><span class='line'><span class="sr">false</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The behavior of MarkDeleted is stateless, so I added the callback as a class method.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_destroy</span> <span class="no">MarkDeleted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Invoice</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">before_destroy</span> <span class="no">MarkDeleted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Currency Formatting]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-currency-formatting/"/>
    <updated>2015-03-21T00:30:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/21/ruby-on-rails-currency-formatting</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Currency Formatting" />
</p>




<p>
  Well, Ruby on Rails framework provide some various ways for formatting currency. Formatting a number as currency is pretty easy thanks to the <code>number_to_currency</code> helper. This helper will take a valid number and format it as currency. It accept a number of different options that allow complete customization of the displayed value:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">number_to_currency</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<table>
<thead>
<tr>
<th>Options </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>:locale </td>
<td> The locale option allows you to specify the locale you wish to use. Defaults to the current locale.</td>
</tr>
<tr>
<td>:precision </td>
<td> Sets the level of precision. Defaults to 2. Precision is the number of decimal places after the decimal.</td>
</tr>
<tr>
<td>:unit </td>
<td> Sets the denomination of the currency. example: $ for the United States.</td>
</tr>
<tr>
<td>:separator </td>
<td> Specifies the separator to use between the units. example the &ldquo;.&rdquo; separates dollars and cents in the US.</td>
</tr>
<tr>
<td>:delimiter </td>
<td> Specifies the separator to use for the thousands delimiter. example: 123,456.</td>
</tr>
<tr>
<td>for </td>
<td> For loop.</td>
</tr>
<tr>
<td>:format </td>
<td> Sets the format for non-negative numbers. The current default is &ldquo;%u%n&rdquo;. The %u specifies the currency (&ldquo;$&rdquo;) and the %n specifies the number (&ldquo;123,456&rdquo;)</td>
</tr>
<tr>
<td>:negative_format </td>
<td> Same as format, but applies to negative numbers.</td>
</tr>
<tr>
<td>:raise </td>
<td> If raise is set to true, an exception will be raised if the number isn&rsquo;t a valid number.</td>
</tr>
</tbody>
</table>


<p>
  <br/>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">50</span>                        <span class="c1"># =&gt; $123,456.50</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">506</span>                       <span class="c1"># =&gt; $123,456.51</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">506</span><span class="p">,</span> <span class="ss">precision</span><span class="p">:</span> <span class="mi">3</span>         <span class="c1"># =&gt; $123,456.506</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">123</span><span class="n">a456</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>                        <span class="c1"># =&gt; $123a456</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">123</span><span class="n">a456</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="k">raise</span><span class="p">:</span> <span class="kp">true</span>           <span class="c1"># =&gt; ActionView::Helpers::NumberHelper::InvalidNumberError error</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="o">-</span><span class="mi">123456</span><span class="o">.</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:negative_format</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;(</span><span class="o">%</span><span class="n">u</span><span class="o">%</span><span class="n">n</span><span class="p">)</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>                               <span class="c1"># =&gt; ($123,456.50)</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">50</span><span class="p">,</span> <span class="ss">unit</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">£</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">seperator</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">delimiter</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>                    <span class="c1"># =&gt; £123456.50</span>
</span><span class='line'><span class="n">number_to_currency</span> <span class="mi">123456</span><span class="o">.</span><span class="mi">50</span><span class="p">,</span> <span class="ss">unit</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">£</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">separator</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">delimiter</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="nb">format</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">%</span><span class="n">n</span> <span class="o">%</span><span class="n">u</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>   <span class="c1"># =&gt; 123456,50 £</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Inversion Principle in Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/18/dependency-inversion-principle-in-ruby/"/>
    <updated>2015-03-18T23:54:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/18/dependency-inversion-principle-in-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Dependency Inversion Principle in Ruby" />
</p>




<p>
  Simply Dependency Inversion Principle states that: Abstractions should not depend upon details. Details should depend upon abstractions.
</p>




<p>
  Let's go back to the first example on the Open/Closed Principle and change it a bit:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;generate_reporty_stuff</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">print</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;JSONFormatter.new.format(body)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">JSONFormatter</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">format</span><span class="p">(</span><span class="n">body</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;...</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now there is a formatter class, but I've hardcoded it on the Report class, thus creating a dependency from the Report to the JSONFormatter. Since the Report is a more abstract (high-level) concept than the JSONFormatter, we're effectively breaking the DIP.
</p>




<p>
  We can solve it the exact same way with solved it on the Open/Closed Principle problem, with dependency injection:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Report</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">body</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;generate_reporty_stuff</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="ss">formatter</span><span class="p">:</span> <span class="no">JSONFormatter</span><span class="o">.</span><span class="n">new</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;formatter.format body</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, this way the Report does not depend on the JSONFormatter and can use any type of formatter that has a method called format (this is known as duck typing). That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interface Segregation Principle in Ruby]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/18/interface-segregation-principle-in-ruby/"/>
    <updated>2015-03-18T23:41:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/18/interface-segregation-principle-in-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Interface Segregation Principle" />
</p>




<p>
  Simply Interface Segregation Principle states that: When a client depends upon a class that contains interfaces that the client does not use, but that other clients do use, then that client will be affected by the changes that those other clients force upon the class.
</p>




<p>
  If you have a class that has two clients (objects using it):
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def start_engine</span>
</span><span class='line'><span class="sr">  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">change_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Driver</span>
</span><span class='line'><span class="sr">  def drive&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@car</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="vi">@car</span><span class="o">.</span><span class="n">start_engine</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Mechanic</span>
</span><span class='line'><span class="sr">  def do_stuff&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@car</span><span class="o">.</span><span class="n">change_engine</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  As you can see, our Car class has an interface that's used partially by both the Driver and the Mechanic. We can improve our interface like this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">open</span>
</span><span class='line'>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def start_engine</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">CarInternals</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_engine</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Driver</span>
</span><span class='line'><span class="sr">  def drive&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@car</span><span class="o">.</span><span class="n">open</span>
</span><span class='line'><span class="vi">@car</span><span class="o">.</span><span class="n">start_engine</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Mechanic</span>
</span><span class='line'><span class="sr">  def do_stuff&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@car_internals</span><span class="o">.</span><span class="n">change_engine</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, splitting the interface into two, we can comply to the Interface Segregation Principle. That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
