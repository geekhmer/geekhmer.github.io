<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-11-24T12:40:13+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[10 Tips to Speed Up Rails on the Front]]></title>
    <link href="http://geekhmer.github.io/blog/2015/10/26/10-tips-to-speed-up-rails-on-the-front/"/>
    <updated>2015-10-26T22:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/10/26/10-tips-to-speed-up-rails-on-the-front</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rails_artwork.jpg" alt="10 Tips to Speed Up Rails on the Front" />
</p>




<p>
  Is your Rails website performing poorly? Are clients and users complaining about 5-10 second pageloads, timeouts on mobile devices, or images that take forever to display? In some cases the solution lies on the backend — caching requests, speeding up DB queries, etc — but often, there are front-end optimizations you can look at first, that could have a huge effect on how fast a site feels. 
</p>




<p>
  <h3>Evaluating front-end Performance</h3>
  Check out <a href="http://www.webpagetest.org/" target="_blank">www.webpagetest.org</a>. For a quick glance at your site, look at the grades in the top right for immediate problems, and also check the two "Speed Index" measurements for first and repeat views. Since webpagetest saves all your tests, you can re-run after making some changes to easily see what's improved.
</p>




<p>
  <h3>Avoiding Premature Optimization</h3>
  Performance optimization takes time and resources, both of which are often in short supply. It’s hard to find the point where optimizations start to cost more than they save, and every site and team have their own unique challenges. I’ve ordered the notes in this post in order of payoff: if you want to start optimizing but don’t know where to begin, the first few ideas on this list will probably give you the biggest bang for you buck.
</p>




<p>
  <h3>GZIP</h3>
  The biggest, easiest performance you can implement is gzipping HTML/JSON/JS/CSS/font file responses. It can drastically reduce the size of transferred files, but it’s easy to forget and isn’t in most default configs.<br/>
  - <a href="https://robots.thoughtbot.com/content-compression-with-rack-deflater" target="_blank">Using Rack:Deflater</a><br/>
  - <a href="https://richonrails.com/articles/enabling-compression-for-nginx" target="_blank">Using nginx config</a><br/>
  - <a href="http://www.phpied.com/gzip-your-font-face-files/" target="_blank">Gzipping font files</a>
</p>




<p>
  <h3>keep-alive</h3>
  <a href="https://en.wikipedia.org/wiki/HTTP_persistent_connection" target="_blank">keep-alive</a> is another easy win that speeds up asset delivery by reusing the existing connection between client and server. <a href="http://www.feedthebot.com/pagespeed/keep-alive.html" target="_blank">Turning it</a> on should be a no-brainer.
</p>




<p>
  <h3>Optimize user-uploaded Images</h3>
  You generally want to convert all uploaded images to JPGs, strip metadata, and optimize them as much as you can without heavy quality loss. Without this step, an admin or user can easily tank the pagesize by uploading a 24-bit PNG or similarly uncompressed image. I recommend <a href="https://github.com/markevans/dragonfly" target="_blank">Dragonfly</a> for on-the-fly image optimization — it lets front-end developers and designers fiddle with image details without needing to go back and update all your existing images on production after the change.
</p>




<p>
  <h3>Caching and CDNs</h3>
  <strong>Cache expiration</strong><br/>
  Set all assets (JS, CSS, images, fonts) to expire in a year, using either far-future expires or max-age Cache-Control headers. There are a lot of simple instructions available for setting this on <a href="https://viget.com/extend/http:/http:/guides.rubyonrails.org/asset_pipeline.html#far-future-expires-header" target="_blank">the asset pipeline</a> and for <a href="http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html" target="_blank">CDN assets</a>.
</p>




<p>
  <strong>Fingerprinting</strong><br/>
  If you set far-future caching, you need unique, fingerprinted filenames. The asset pipeline’s precompile command will already handle this, but in most cases it won’t happen automatically for user-uploaded assets. For example, if a user edits their avatar image locally and re-uploads it to the server with the same name, and you’re serving it with far-future expires headers, you’ll have a problem. If you’re uploading files with something like <a href="https://github.com/carrierwaveuploader/carrierwave/issues/182#issuecomment-601021" target="_blank">Carrierwave</a> or <a href="https://github.com/thoughtbot/paperclip#md5-checksum--fingerprint" target="_blank">Paperclip</a>, make sure you’re taking this step.
</p>




<p>
  <strong>CDN</strong><br/>
  Migrating user-uploaded images and Rails assets to a CDN can improve download time by moving asset servers “closer” to the user. Both caching and fingerprinting rules still apply to CDNs.
</p>




<p>
  <h3>SPDY</h3>
  SPDY is a networking protocol that can speed up page performance considerably, especially on pages with a lot of assets (<a href="http://www.httpvshttps.com/" target="_blank">example</a>). It’s available in the <a href="https://viget.com/extend/http:/http:/caniuse.com/#feat=spdy" target="_blank">majority of browsers</a> and ready for production use. It requires that you set up SSL, which is admittedly a hassle, but <a href="https://bugsnag.com/blog/spdy-on-rails" target="_blank">it isn’t much work beyond that</a>.
</p>




<p>
  <h3>Inlining assets</h3>
  (Note: If you're using SPDY, it's recommended that you DON'T inline your assets — <a href="http://dev.chromium.org/spdy/spdy-best-practices" target="_blank">see SPDY best practices</a>. <a href="http://viget.com/extend/rails-front-end-performance#comment-1775457785" target="_blank">Thanks Robert Fletcher!</a>)
</p>




<p>
  <strong>JS</strong><br/>
  As a general rule, loading JS in the head is a bad idea — <a href="https://developer.yahoo.com/blogs/ydn/high-performance-sites-rule-6-move-scripts-bottom-7200.html" target="_blank">you want to move it to the bottom of the body</a>. However, in some cases moving it isn’t possible. If a design relies on Modernizr to add classes to the body as early as possible to create a consistent visual experience, Modernizr <a href="https://github.com/Modernizr/Modernizr/issues/878#issuecomment-41448059" target="_blank">needs to remain in the head</a>. In this case, try inlining the JS in a script tag instead of creating an extra, blocking request. This technique trades a faster initial pageload for slower subsequent pageloads (since subsequent loads will no longer load the file from browser cache). In a lot of cases the other pageloads are just barely slower, and it’s a good tradeoff.
</p>




<p>
  <strong>CSS</strong><br/>
  As a site grows, it becomes unreasonable to bundle all styles into a single application.css file. Users can end up viewing pages that load 100% of a site’s styles but only use 5-10%. In cases like this, you can break up page-specific styles into individual files and load them with <a href="https://gist.github.com/averyvery/45cede57d335fe0b6b55" target="_blank">a scheme that uses the controller/action to find CSS files</a>.
</p>




<p>
  Taking it further, there’s a good chance that if your view-specific CSS is small and users aren’t visiting many instances of the same view, making them request a second stylesheet isn’t necessary — just like with JS, you can inline them onto the page. <a href="https://gist.github.com/averyvery/6e4576023b395de1aaf5" target="_blank">Check out this gist for the setup I've used to inline CSS and JS assets in the past</a>.
</p>




<p>
  <strong>Images</strong><br/>
  If you have pretty small images or single unique images on a view, it could be worthwhile to inline them as base64 strings instead of sending them as separate requests, using <a href="http://ruby-doc.org/stdlib-2.2.0/libdoc/base64/rdoc/Base64.html#strict_encode64-method" target="_blank">Ruby’s Base64 module</a>. (Warning: in IE8, your base64-encoded images need to be 32kb or smaller, or they simply won’t display.)
</p>




<p>
  <h3>jQuery and UJS</h3>
  Rails ships with jQuery 1.9.x and jquery-ujs built into application.js, but jQuery is a pretty big library, and presents some optimization opportunities:<br/>
  - Switch to jQuery 2.x — it’s smaller, but means dropping support for IE8. You could also use browser conditionals to load 1.9 for IE8 and below and 2.x for above, but you still want to combine jQuery into a single file with your other scripts, so you might end up with something like application-oldjquery.js and application.js.<br/>
  - Cut UJS, or cut them both — if you’re not using any UJS features, you can remove it, which might make jQuery an unnecessary dependency.
</p>




<p>
  At the time of this writing there’s no jQuery-less alternative for UJS, but it sounds like <a href="http://www.reddit.com/r/rails/comments/2fzk5z/what_does_rails_use_jquery_for_it_is_possible_to/ckeduvo" target="_blank">the team has considered the idea</a>.
</p>




<p>
  <h3>Pagespeed</h3>
  <a href="https://developers.google.com/speed/pagespeed/module" target="_blank">Google’s pagespeed module</a> gives you a number of tools that can speed up front-end performance by making minor tweaks (trimming the domain out of local URLs, inserting DNS prefetch tags, collapsing whitespace) or major ones (lazy-loading images). I encourage you to <a href="https://viget.com/extend/http:/https:/developers.google.com/speed/pagespeed/module/download" target="_blank">install it</a> and investigate <a href="https://developers.google.com/speed/pagespeed/module/filters" target="_blank">some of the filters</a>. Each filter has documented "Risks" that are worth reading before you implement — some of them, like <a href="https://developers.google.com/speed/pagespeed/module/filter-quote-remove" target="_blank">remove quotes</a> are low-risk filters that you could probably implement today with no downside.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using reCAPTCHA in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/14/using-recaptcha-in-ruby-on-rails-application/"/>
    <updated>2015-07-14T23:44:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/14/using-recaptcha-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  For a site with lots of user generated content, fighting spammers can be a never ending battle. Luckily, we can use a service called reCAPTCHA to help keep spammers off our site. reCAPTCHA works by displaying an image on screen and asking the user to type what they see in the image. This works because, the spammer's spambots are unable to read the image and unable to proceed with filling out the form. reCAPTCHA is just one of a number of tools we can use to prevent spammers from abusing our websites.
</p>




<p>
  <strong>Setup Account</strong><br/>
  First, we need to create a reCAPTCHA account. Visit the <a href="http://www.google.com/recaptcha/intro/index.html" target="_blank">reCAPTCHA</a> website and click the button that says 'Get reCAPTCHA'.
</p>




<p>
  <img src="http://geekhmer.github.io/images/reCAPTCHA_1.png" width="600" alt="Using reCAPTCHA in Ruby on Rails Application" />
</p>




<p>
  On the next screen enter your label, domain, owners and check the box that says 'Get alerts about this site' then click the 'Register' button.
</p>




<p>
  <img src="http://geekhmer.github.io/images/reCAPTCHA_2.png" width="600" alt="Using reCAPTCHA in Ruby on Rails Application" />
</p>




<p>
  Make sure you copy the public key and private key and save it somewhere, you will need this information when adding reCAPTCHA to your Rails application.
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  Now we have an account, it's time to set up our Ruby on Rails application. The first thing we will need to do is include the recaptcha gem in our Gemfile. Add the following lines to your gemfile. Note that the bcrypt-ruby gem is used for our example user signup form. You don't have to include this in your application if you aren't using it for user authentication.
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;recaptcha&rsquo;, &lsquo;~> 0.3.5&rsquo;
gem &lsquo;bcrypt-ruby&rsquo;, &lsquo;~> 3.1.2&rsquo;
{% endcodeblock %}</p>

<p>
  Next run a bundle install to install the gem:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Next create an initializer for recaptcha that will contain the public and private keys we mentioned earlier. Create a new initializer called recaptcha.rb and add the code listed below, make sure to modify it to contain your public and private keys.
</p>


<p>{% codeblock config/initializers.rb lang:ruby %}
Recaptcha.configure do |config|
  config.public_key  = &lsquo;Replace with your public key&rsquo;
  config.private_key = &lsquo;Replace with your private key&rsquo;
end
{% endcodeblock %}</p>

<p>
  Next create a model called User that we will use to test the reCAPTCHA functionality. Run the following commands to create the user model:
</p>


<p>{% codeblock lang:ruby %}
rails g model user name email password_digest
rake db:migrate
{% endcodeblock %}</p>

<p>
  Next, open your User model and modify it:
</p>


<p>{% codeblock app/models/user.rb lang:ruby %}
class User &lt; ActiveRecord::Base
  has_secure_password
  validates_presence_of :password, on: :create
  validates :email, uniqueness: true, presence: true
end
{% endcodeblock %}</p>

<p>
  Next create a couple controllers that will handle our user input. The first controller, Home, will provide a simple landing page that contains a sign up link. The second controller, Users, will process the actual user signup request. Run the commands below to create the controllers.
</p>


<p>{% codeblock lang:ruby %}
rails g controller Home show
rails g controller Users new create
{% endcodeblock %}</p>

<p>
  Now edit our routes file to set up a few routes for the controllers we just created. Modify the routes file so that it looks like the code listed below, being sure not to overwrite your application name on the first line:
</p>


<p>{% codeblock config/routes.rb lang:ruby %}
ReCAPTCHAExample::Application.routes.draw do
  resource :home, only: [:show], controller: :home
  resource :users, only: [:new, :create]
  root to: &ldquo;home#show&rdquo;
end
{% endcodeblock %}</p>

<p>
  Next open up your home/show view and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/views/home/show.html.erb lang:ruby %}</p>

<h3>Welcome!</h3>


<p>
Click the link below to sign up for an account.
</p>


<p>&lt;%= link_to &ldquo;Sign Up!&rdquo;, new_users_path %>
{% endcodeblock %}</p>

<p>
  Next open up the users/new view and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/views/users/new.html.erb lang:ruby %}</p>

<h3>New User Sign Up</h3>


<p>&lt;% if !@user.errors.empty? %>
  <ul></p>

<pre><code>&lt;% @user.errors.full_messages.each do |message| %&gt;
  &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
&lt;% end %&gt;
</code></pre>

<p>  </ul>
&lt;% end %>
&lt;%= form_for User.new do |f| %>
  <div></p>

<pre><code>&lt;%= f.label :name %&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.label :email %&gt;
&lt;%= f.text_field :email %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.label :password %&gt;
&lt;%= f.password_field :password %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.label :password_confirmation %&gt;
&lt;%= f.password_field :password_confirmation %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= recaptcha_tags %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.submit "Sign Up" %&gt;
</code></pre>

<p>  </div>
&lt;% end %>
{% endcodeblock %}</p>

<p>
  Most of the code is self explanatory, however, you'll notice the recaptcha_tags method being called. This method is responsible for rendering the reCAPTCHA.
</p>




<p>
  Next open up our users controller and add some code to handle the request. Modify your users controller so that it looks like the code listed below.
</p>


<p>{% codeblock app/controllers/users_controller.rb lang:ruby %}
class UsersController &lt; ApplicationController
  def new</p>

<pre><code>@user = User.new
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>captcha_message = "The data you entered for the CAPTCHA wasn't correct.  Please try again"
@user = User.new(user_params)
if !verify_recaptcha(model: @user, message: captcha_message) || !@user.save
  render "new"
end
</code></pre>

<p>  end</p>

<p>  private
  def user_params</p>

<pre><code>params.require(:user).permit(:name, :email, :password, :password_confirmation)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Almost done! Now lets open up our users/create view and add the following code.
</p>


<p>{% codeblock app/views/users/create.html.erb lang:ruby %}</p>

<h3>Thank You!</h3>


<p>
Thanks for signing up!
</p>


<p>{% endcodeblock %}</p>

<p>
  Now if you start a rails server and navigate to http://localhost:3000 we will see a sign up link. if you click on the sign up link you will be presented with a sign up form, complete with a captcha to fill out. You'll notice that filling out the captcha wrongly results in a validation error message, and filling out the correct information allows the user signup to proceed.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Social Network Sharing Buttons in Rails App]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/12/social-network-sharing-buttons-in-rails-app/"/>
    <updated>2015-07-12T22:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/12/social-network-sharing-buttons-in-rails-app</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Social Network Sharing Buttons in Rails App" />
</p>




<p>
  There are many services that allow you to add social network buttons to your website. The problem with these services is that they are free because they harvest traffic statistics from your site, track your visitors, and in general are a big nuisance. They also have the disadvantage of being slow to load.
</p>




<p>
  In this article we will show you how to add social sharing buttons to your website via a gem called Social Share Button. Unlike most services, Social Share Button has buttons that are hosted locally on your site and don't go through a third party service. As a result, they are quick to load and extremely customizable.
</p>




<p>
  <strong>Setup Application</strong><br/>
  First we need to add the social-share-button gem to our Gemfile. Open up your Gemfile and add in the line listed below:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;social-share-button&rsquo;, &lsquo;~> 0.1.6&rsquo;
{% endcodeblock %}</p>

<p>
  Next, we need to run a bundle install to install the gem:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Now we need to run the <code>rails generate social_share_button:install</code> command to install some additional configuration files that the Social Sharing Button gem uses to display the buttons on your site. This includes an initializer called social_share_button.rb in your initializers folder as well as some localization files:
</p>


<p>{% codeblock lang:ruby %}
rails generate social_share_button:install
{% endcodeblock %}</p>

<p>
  Great, Next we need to do is create a simple Home controller in order to test the social sharing button functionality:
</p>


<p>{% codeblock lang:ruby %}
rails g controller homes show
{% endcodeblock %}</p>

<p>
  Now let's modify our routes file a bit:
</p>


<p>{% codeblock config/routes.rb lang:ruby %}
Rails.application.routes.draw do
  resources :homes, only: [:show]
  root to: &ldquo;homes#show&rdquo;
end
{% endcodeblock %}</p>

<p>
  Great, now we need to add some javascript and CSS includes to make things work. Open up your application.js file and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/assets/javascripts/application.js lang:ruby %}
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require social-share-button
//= require_tree .
{% endcodeblock %}</p>

<p>
  Great, now for the application.css file. Open it up and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/assets/stylesheets/application.css lang:ruby %}
/<em>
 </em>= require_tree .
 <em>= require social-share-button
 </em>= require_self
 */
{% endcodeblock %}</p>

<p>
  Excellent, now we can add the social sharing buttons to our site. Open up your homes/show view and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/views/homes/show.html.erb lang:ruby %}
&lt;%= social_share_button_tag(&ldquo;My Site&rdquo;) %>
{% endcodeblock %}</p>

<p>
  Great, now if we run rails server and visit http://localhost:3000, we will see the social sharing buttons. However, you'll notice that there is a problem. About 15 or so buttons are listed, but we only care about a couple. Luckily we can easily resolve this. Open up the social_share_button initializer and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock config/initializers/social_share_button.rb lang:ruby %}
SocialShareButton.configure do |config|
  config.allow_sites = %w(twitter facebook google_plus delicious tumblr pinterest)
end
{% endcodeblock %}</p>

<p>
  Now if you restart your rails server, you'll notice that the buttons have been limited to the sites listed above. Note that you can also specify a specific url if needed. Social Share Button detects the current URL by default, but there are times when you may want to customize this. You can do this like so:
</p>


<p>{% codeblock lang:ruby %}
&lt;%= social_share_button_tag(&ldquo;My Home Page&rdquo;, :url => &ldquo;<a href="http://mysite.com/sample">http://mysite.com/sample</a>&rdquo;) %>
{% endcodeblock %}</p>

<p>
  However, what if we want to customize the button look/feel? Luckily this is pretty easy. If you inspect the elements in chrome developer tools you'll notice that they each have a unique css class. We can override this CSS class with our own code. For example, to modify the facebook button to look different, we'd use something like the following CSS (placed into our application.css file):
</p>


<p>{% codeblock lang:ruby %}
.social-share-button-facebook {
  display: inline-block;
  width: 16px;
  height: 16px;
  background: url(&ldquo;/social/facebook.png&rdquo;) no-repeat;
}
{% endcodeblock %}</p>

<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Server Command Line Options]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options/"/>
    <updated>2015-07-11T22:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Rails Server Command Line Options" />
</p>




<p>
  Syntax:
</p>


<p>{% codeblock lang:ruby %}
rails [options]
{% endcodeblock %}</p>

<p>
  Options:<br/>
  -s, –config-script=path Uses the specified mongrel config script.<br/>
  -p, –port=port Runs Rails on the specified port. Default: 3000<br/>
  -b, –binding=ip Binds Rails to the specified ip. Default: 0.0.0.0<br/>
  -e, –environment=name Specifies the environment to run this server under (test/development/production). Default: development
</p>




<p>
  <strong>Listen on any Interface</strong><br/>
  By default versions of Rails is localhost, this prevents users on your local network from accessing your network. You may not want to do this however. You may wish to share your development site with coworker so that they can review the site. Otherwise, you may wish to test the site on other devices such as a mobile device. Fortunately you can easily open the rails server up to all interfaces using the -b argument. Simple run the rails s command below:
</p>


<p>{% codeblock lang:ruby %}
rails s -b 0.0.0.0
{% endcodeblock %}</p>

<p>
  <strong>Use a Different Port</strong><br/>
  Sometimes you want to use a port other than 3000 for your Rails server. For instance, maybe you need to run multiple Rails servers. You can easily do this with the -p argument:
</p>


<p>{% codeblock lang:ruby %}
rails s -p 3001
{% endcodeblock %}</p>

<p>
  This command line tells rails to start the server on port 3001 instead of 3000.
</p>




<p>
  <strong>Run in a Different Environment</strong><br/>
  You can start a rails server for another environment such as production or staging by using the -e argument along with the name of the environment you wish to start up in:
</p>


<p>{% codeblock lang:ruby %}
rails s -e production
{% endcodeblock %}</p>

<p>
  The code above starts the Rails server in the production environment. Very handy when you have custom environments or need to debug something.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/30/angularjs-on-rails/"/>
    <updated>2015-06-30T23:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/30/angularjs-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/angularjs_on_rails.png" width="400" alt="AngularJS on Rails" />
</p>




<p>
  AngularJS is an extremely popular JavaScript library that enables you to quickly and easily create rich web applications. In this article we will show you how to integrate AngularJS with your Rails app. We will also build a simple AngularJS application called VisitorsCenter. The VisitorsCenter application allows the user to track visitors that are coming and going from a building such as an office building. 
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  Before we begin, we will need to add a couple gems to our Gemfile. The <code>angularJs-rails</code> gem provides integration with the AngularJS library and our Rails application. The bootstrap-sass gem merely adds bootstrap support so we can focus on the code rather than the style of the app. Add these gems to your gemfile now as listed below.
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;angularjs-rails&rsquo;, &lsquo;~> 1.2.25&rsquo;
gem &lsquo;bootstrap-sass&rsquo;, &lsquo;~> 3.2.0.2&rsquo;
{% endcodeblock %}</p>

<p>
  Now run a bundle install to install the gems:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Next, we need to create a model called <code>Visitor</code>. The <code>Visitor</code> model will represent a visitor that visits. Run the command below to create the visitor model now:
</p>


<p>{% codeblock lang:ruby %}
rails g model Visitor first_name:string last_name:string reason:string
rake db:migrate
{% endcodeblock %}</p>

<p>
  Great, now we need to create a <code>Visitors</code> controller that will give us a way to interact with our model. The <code>Visitors</code> controller will have 3 different actions in this example application. The first action, <code>index</code> will return either the visitors page or a json list of visitors depending on how it is accessed. The second action, <code>create</code> will be responsible for creating the visitor. The final action, <code>destroy</code> will destroy the visitor. Run the command below to create this controller now:
</p>


<p>{% codeblock lang:ruby %}
rails g controller Visitors index create destroy
{% endcodeblock %}</p>

<p>
  Now let's modify our routes file to set up the proper paths and add a site root. Open up your routes file and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock routes.rb lang:ruby %}
Rails.application.routes.draw do
  resources :visitors, only: [:index, :create, :destroy], defaults: {format: :json}
  root to: &ldquo;visitors#index&rdquo;
end
{% endcodeblock %}</p>

<p>
  The code fragment that says <code>defaults: {format: :json}</code> tells Rails that we wish to return json by default for our actions. We do this because most of the interaction in our application will be via JSON.
</p>




<p>
  By default, AngularJS knows nothing of the cross site request forgery (CSRF) protections in our applications. We need a way to tell AngularJS how to interact with our application while obeying the CSRF protections that we have in place. Luckily we have a way to do this. Open up your <code>ApplicationController</code> and add in the code listed below.
</p>




<p>
  If you are using Rails 4.2 and up, use the code below:
</p>


<p>{% codeblock application_controller.rb lang:ruby %}
class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception</p>

<p>  after_action :set_csrf_cookie_for_ng</p>

<p>  def set_csrf_cookie_for_ng</p>

<pre><code>cookies['XSRF-TOKEN'] = form_authenticity_token if protect_against_forgery?
</code></pre>

<p>  end</p>

<p>  protected
  def verified_request?</p>

<pre><code>super || valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  If you are still using Rails 4.1, use the code below instead:
</p>


<p>{% codeblock application_controller.rb lang:ruby %}
class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception</p>

<p>  after_action :set_csrf_cookie_for_ng</p>

<p>  def set_csrf_cookie_for_ng</p>

<pre><code>cookies['XSRF-TOKEN'] = form_authenticity_token if protect_against_forgery?
</code></pre>

<p>  end</p>

<p>  protected
  def verified_request?</p>

<pre><code>super || form_authenticity_token == request.headers['X-XSRF-TOKEN']
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  The code listed above will create a cookie called <code>XSRF-TOKEN</code> that will contain our <code>form_authenticity_token</code>. Any time a request is made, AngularJS will present that token in the HTTP headers for the request.
</p>




<p>
  Now let's modify our <code>VisitorsController</code> to allow for access to the <code>Visitor</code> model. Open up your <code>VisitorsController</code> and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock visitors_controller.rb lang:ruby %}
class VisitorsController &lt; ApplicationController
  respond_to :json</p>

<p>  def index</p>

<pre><code>respond_to do |format|
  format.json { render json: Visitor.all }
  format.html
end
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>respond_with Visitor.create(visitor_params)
</code></pre>

<p>  end</p>

<p>  def destroy</p>

<pre><code>respond_with Visitor.destroy(params[:id])
</code></pre>

<p>  end</p>

<p>  private
  def visitor_params</p>

<pre><code>params.require(:visitor).permit(:first_name, :last_name, :reason)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  The code above is typical Rails code, with the exception being that we return JSON as a result. Since our application will be communicating primarily via AJAX we have no need for HTML other than the index action, which will return either html or json depending on the request type.
</p>




<p>
  Next we need to add support for both AngularJS and Bootstrap to our application.js file. Open up your application.js file and modify it so that it looks like the code listed below.
</p>


<p>{% codeblock application.js lang:ruby %}
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require angular
//= require angular-resource
//= require bootstrap-sprockets
//= require_tree .
{% endcodeblock %}</p>

<p>
  In the code above we add support for AngularJS as well as Bootstrap. We also add support for a library called <code>angular-resource</code> which allows us to easily talk to our Rails application.
</p>




<p>
  Now let's add a bit of CSS for bootstrap. Create a new file called <code>bootstrap_config</code>.scss and add in the code listed below:
</p>


<p>{% codeblock bootstrap_config.scss lang:ruby %}
@import &ldquo;bootstrap-sprockets&rdquo;;
@import &ldquo;bootstrap&rdquo;;
{% endcodeblock %}</p>

<p>
  The next thing we need to do is create our AngularJS application. AngularJS applications typically consists of JavaScript code that glues together various bits of HTML. To get started doing this, the first thing we must do is rename our <code>visitors.js.coffee</code> file to <code>visitors.js</code> and modify it so that it looks like the code listed below. You can also rewrite this in CoffeeScript, but I use JavaScript for those that haven't yet learned CoffeeScript.
</p>


<p>{% codeblock visitors.js lang:ruby %}
var visitorCenter = angular.module(&lsquo;VisitorCenter&rsquo;, [&lsquo;ngResource&rsquo;]);</p>

<p>visitorCenter.factory(&ldquo;Visitor&rdquo;, function($resource) {
  return $resource(&ldquo;visitors/:id&rdquo;, { id: &lsquo;@id&rsquo; }, {</p>

<pre><code>index:   { method: 'GET', isArray: true, responseType: 'json' },
update:  { method: 'PUT', responseType: 'json' }
</code></pre>

<p>  });
})</p>

<p>visitorCenter.controller(&ldquo;visitorsController&rdquo;, function($scope, Visitor) {
  $scope.visitors = Visitor.index()</p>

<p>  $scope.addVisitor = function() {</p>

<pre><code>visitor = Visitor.save($scope.newVisitor)

$scope.visitors.push(visitor)
$scope.newVisitor = {}
</code></pre>

<p>  }</p>

<p>  $scope.deleteVisitor = function(index) {</p>

<pre><code>visitor = $scope.visitors[index]
Visitor.delete(visitor)
$scope.visitors.splice(index, 1);
</code></pre>

<p>  }
})
{% endcodeblock %}</p>

<p>
  There is a lot going on here, so i'm going to break it down into pieces. The first line:
</p>


<p>{% codeblock lang:ruby %}
var visitorCenter = angular.module(&lsquo;VisitorCenter&rsquo;, [&lsquo;ngResource&rsquo;]);
{% endcodeblock %}</p>

<p>
  defines an AngularJS module. AngularJS modules can be thought of as individual components in your application. You'll notice we include <code>ngResource</code> as an argument. <code>ngResource</code> provides easy access to RESTful resources such as our Rails application.
</p>




<p>
  The next set of lines:
</p>


<p>{% codeblock lang:ruby %}
visitorCenter.factory(&ldquo;Visitor&rdquo;, function($resource) {
  return $resource(&ldquo;visitors/:id&rdquo;, { id: &lsquo;@id&rsquo; }, {</p>

<pre><code>index:   { method: 'GET', isArray: true, responseType: 'json' },
update:  { method: 'PUT', responseType: 'json' }
</code></pre>

<p>  });
})
{% endcodeblock %}</p>

<p>
  defines a service, in this case, it ties in the <code>ngResource</code> service mentioned earlier and tells AngularJS how to talk to our application.
</p>




<p>
  The next set of lines:
</p>


<p>{% codeblock lang:ruby %}
visitorCenter.controller(&ldquo;visitorsController&rdquo;, function($scope, Visitor) {
  $scope.visitors = Visitor.index()</p>

<p>  $scope.addVisitor = function() {</p>

<pre><code>visitor = Visitor.save($scope.newVisitor)

$scope.visitors.push(visitor)
$scope.newVisitor = {}
</code></pre>

<p>  }</p>

<p>  $scope.deleteVisitor = function(index) {</p>

<pre><code>visitor = $scope.visitors[index]
Visitor.delete(visitor)
$scope.visitors.splice(index, 1);
</code></pre>

<p>  }
})
{% endcodeblock %}</p>

<p>
  define a controller. Controllers tell AngularJS how to interact with our application similar to how Rails controllers are used to tell Rails how our views interact with our models.
</p>




<p>
  ow that we've written the JavaScript application, we need to create our view to tie everything together. Open up the index view for your <code>Visitors</code> controller and modify it so that it looks like the code listed below:
</p>


<p>{% raw %}
```</p>

<div class="container" ng-app="VisitorCenter">
  <h1>Visitors</h1>

  <div ng-controller="visitorsController">
    <div class="well">
      <h3>Add a new Visitor</h3>
      <form ng-submit="addVisitor()">
        <div class="row">
          <div class="col-xs-6">
            <input type="text" ng-model="newVisitor.first_name" class="form-control" placeholder="First Name" />
          </div>
          <div class="col-xs-6">
            <input type="text" ng-model="newVisitor.last_name" class="form-control" placeholder="Last Name" />
          </div>
        </div>
        <div class="row">
          <div class="col-xs-12">
            <br />
            <input type="text" ng-model="newVisitor.reason" class="form-control" placeholder="Reason for Visit" />
          </div>
        </div>
        <div class="row">
          <div class="col-xs-12 text-center">
            <br />
            <input type="Submit" value="Add Visitor" class="btn btn-primary" />
          </div>
        </div>
      </form>
    </div>

    <h3>Currently Visiting</h3>
    <hr />
    <table class="table table-bordered table-striped">
      <thead>
        <tr>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Reason for Visit</th>
          <th>&nbsp;</th>
        </tr>
      </thead>
      <tbody>
        <tr ng-show="!visitors.length">
          <td colspan="4">No visitors in the building.</td>
        </tr>
        <tr ng-repeat="visitor in visitors">
          <td>{{ visitor.first_name }}</td>
          <td>{{ visitor.last_name }}</td>
          <td>{{ visitor.reason }}</td>
          <td><a class="btn btn-danger" ng-click="deleteVisitor($index)">Remove</a></td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


<p>```
{% endraw %}</p>

<p>
  Let's break this down a bit:
</p>


<p>{% codeblock lang:ruby %}</p>

<div class="container" ng-app="VisitorCenter">
  ...
</div>


<p>{% endcodeblock %}</p>

<p>
  The outer div on the first line has an attribute called <code>ng-app</code>. The <code>ng-app</code> attribute tells AngularJS that this is part of our AngularJS application. In this case we specify the name of our AngularJS module, <code>VisitorCenter</code>.
</p>


<p>{% codeblock lang:ruby %}</p>

<div ng-controller="visitorsController">
  ...
</div>


<p>{% endcodeblock %}</p>

<p>
  The next inner div contains an attribute called <code>ng-controller</code>. This attribute tells AngularJS that we wish to use our visitorsController as the controller for this portion of the application.
</p>


<p>{% codeblock lang:ruby %}
<form ng-submit="addVisitor()">
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-6"&gt;
  &lt;input type="text" ng-model="newVisitor.first_name" class="form-control" placeholder="First Name" /&gt;
&lt;/div&gt;
&lt;div class="col-xs-6"&gt;
  &lt;input type="text" ng-model="newVisitor.last_name" class="form-control" placeholder="Last Name" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-12"&gt;
  &lt;br /&gt;
  &lt;input type="text" ng-model="newVisitor.reason" class="form-control" placeholder="Reason for Visit" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-12 text-center"&gt;
  &lt;br /&gt;
  &lt;input type="Submit" value="Add Visitor" class="btn btn-primary" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
</form>
{% endcodeblock %}</p>

<p>
  The <code>ng-submit</code> attribute on our form tells AngularJS that we wish to use the addVisitor() method on our controller to process the form request. Each of the input elements contain an <code>ng-model</code> attribute. This attribute maps the input elements to our model.
</p>


<p>{% codeblock lang:ruby %}
<tr ng-show="!visitors.length">
  <td colspan="4">No visitors in the building.</td>
</tr>
{% endcodeblock %}</p>

<p>
  The <code>ng-show</code> attribute on the first row tells AngularJS that we only want to show the row if the condition mentioned is matched. In this case we only want to show the first row if there are no visitors.
</p>


<p>{% codeblock lang:ruby %}
<tr ng-repeat="visitor in visitors">
  &hellip;
</tr>
{% endcodeblock %}</p>

<p>
  The <code>ng-repeat</code> attribute is a loop. This particular loop tells AngularJS that we want to loop through each visitor.
</p>


<p>{% codeblock lang:ruby %}
{% raw %}
<td>{{ visitor.first_name }}</td>
<td>{{ visitor.last_name }}</td>
<td>{{ visitor.reason }}</td>
{% endraw %}
{% endcodeblock %}</p>

<p>
  Text contained within {% raw %}<code>{{ .... }}</code>{% endraw %} are AngularJS expressions. In this case we are telling AngularJS to render the fields mentioned in each expression.
</p>


<p>{% codeblock lang:ruby %}
{% raw %}
<td><a class="btn btn-danger" ng-click="deleteVisitor($index)">Remove</a></td>
{% endraw %}
{% endcodeblock %}</p>

<p>
  The <code>ng-click</code> button tells AngularJS to run the specified controller function when the html tag in question is clicked. In this case we run the code to delete the specified user.
</p>




<p>
  So far so good, That's it!!! for this introduction to AngularJS and Rails. See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
