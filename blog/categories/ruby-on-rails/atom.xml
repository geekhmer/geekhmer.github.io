<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-05-08T16:32:30+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Pagination with Kaminari]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/08/ruby-on-rails-pagination-with-kaminari/"/>
    <updated>2015-05-08T14:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/08/ruby-on-rails-pagination-with-kaminari</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Ruby on Rails Pagination with Kaminari" />
</p>




<p>
  The <a href="https://github.com/mislav/will_paginate" target="_blank">will_paginate</a> gem has long since been the most popular gem used when it comes to pagination. However it is not the only gem out there. <a href="https://github.com/amatsuda/kaminari" target="_blank">Kaminari</a> is another very popular pagination gem. In this article we will show you how to use it in your application.
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  To begin using the kaminari gem, we must first add it to our Gemfile. Open up your Gemfile and add in the line listed below.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">kaminari</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now run a bundle install to install the gem.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Next, create a model called Post. The post model in this example will represent a blog post. Run the commands below to create the post model:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Post</span> <span class="n">title</span> <span class="ss">body</span><span class="p">:</span><span class="n">string</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We need some seed data. Open your <code>db/seeds.rb</code> file and modify it so that it looks like the code listed below:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>db/seeds.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Post</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Lipsum</span> <span class="no">Post</span> <span class="c1">#{i}&amp;rdquo;, body: %{&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="no">Nullam</span> <span class="n">hendrerit</span> <span class="n">iaculis</span> <span class="n">sodales</span><span class="o">.</span> <span class="no">Curabitur</span> <span class="n">varius</span> <span class="n">nibh</span> <span class="n">arcu</span><span class="p">,</span> <span class="nb">id</span> <span class="n">molestie</span> <span class="n">nibh</span> <span class="n">fermentum</span> <span class="n">vitae</span><span class="o">.</span> <span class="no">Cras</span> <span class="n">quis</span> <span class="n">semper</span> <span class="n">dui</span><span class="o">.</span> <span class="no">Cras</span> <span class="n">porttitor</span> <span class="n">urna</span> <span class="n">sit</span> <span class="n">amet</span> <span class="n">risus</span> <span class="n">vehicula</span> <span class="n">tempor</span><span class="o">.</span> <span class="no">Maecenas</span> <span class="n">quis</span> <span class="n">tempor</span> <span class="n">ligula</span><span class="o">.</span> <span class="no">Donec</span> <span class="n">et</span> <span class="n">nibh</span> <span class="n">eu</span> <span class="n">leo</span> <span class="n">volutpat</span> <span class="n">placerat</span><span class="o">.</span> <span class="no">Fusce</span> <span class="n">vulputate</span> <span class="n">elit</span> <span class="k">in</span> <span class="n">nisi</span> <span class="n">pretium</span><span class="p">,</span> <span class="n">vel</span> <span class="n">fermentum</span> <span class="n">mi</span> <span class="n">fermentum</span><span class="o">.</span> <span class="no">Mauris</span> <span class="n">scelerisque</span><span class="p">,</span> <span class="n">lectus</span> <span class="n">non</span> <span class="n">luctus</span> <span class="n">ultricies</span><span class="p">,</span> <span class="n">urna</span> <span class="n">eros</span> <span class="n">tincidunt</span> <span class="n">risus</span><span class="p">,</span> <span class="n">at</span> <span class="n">varius</span> <span class="n">sapien</span> <span class="n">diam</span> <span class="nb">id</span> <span class="n">erat</span><span class="o">.</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now run a rake db:seed to add the seed data:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">seed</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We need to add a controller called Posts that we will use to render the posts. Run the command below to create this controller now:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">controller</span> <span class="no">Posts</span> <span class="n">index</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Let's modify our routes file to set a site root. Open up your config/routes.rb file and modify it so that it looks like the code listed below.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">root</span> <span class="ss">to</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">posts</span><span class="c1">#index&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Open up your Posts controller and modify it so that it looks like the code listed below.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/posts_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@posts = Post.page(params[:page]).per(10)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  As you can see, the first bit of our pagination code is here. The <code>page</code> method tells kaminari what page we are on. The <code>per</code> method tells kaminari how many items we wish to have per page.
</p>




<p>
  Let's open up the <code>index</code> view for our <code>Posts</code> controller and modify it so that it looks like the code listed below:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/views/posts/index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;Posts&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">hr</span> <span class="sr">/&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;lt;% @posts.each do |post| %&gt;</span>
</span><span class='line'><span class="sr">  &lt;h2&gt;&amp;lt;%= post.title %&gt;&lt;/</span><span class="n">h2</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= post.body %&gt;</span>
</span><span class='line'><span class="sx">  &lt;/p&gt;</span>
</span><span class='line'><span class="sx">&amp;lt;% end %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;hr /&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;p&gt;&amp;lt;%=</span> <span class="n">paginate</span> <span class="vi">@posts</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&amp;lt;%= page_entries_info @posts %&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The <code>paginate</code> helper is the line actually responsible for rendering the pagination links. The <code>page_entries_info</code> helper displays a line similar to Displaying posts 1 - 10 of 100 in total. This can be extremely helpful in letting the user know how many items there are in the list.
</p>




<p>
  <strong>Global Configuration</strong><br/>
  You can also specify global defaults for Kaminari. First, run the following command to generate an initializer file for Kaminari:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="ss">kaminari</span><span class="p">:</span><span class="n">config</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  If you open up the <code>config/initializers/kaminari_config.rb</code> file you'll see something similar to the following:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>config/initializers/kaminari_config.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Kaminari</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># config.default_per_page = 25</span>
</span><span class='line'>  <span class="c1"># config.max_per_page = nil</span>
</span><span class='line'>  <span class="c1"># config.window = 4</span>
</span><span class='line'>  <span class="c1"># config.outer_window = 0</span>
</span><span class='line'>  <span class="c1"># config.left = 0</span>
</span><span class='line'>  <span class="c1"># config.right = 0</span>
</span><span class='line'>  <span class="c1"># config.page_method_name = :page</span>
</span><span class='line'>  <span class="c1"># config.param_name = :page</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  A description of these options can be found below:
</p>


<table>
<thead>
<tr>
<th>Config </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>config.default_per_page </td>
<td> Specifies the default amount of items to display per page.</td>
</tr>
<tr>
<td>config.max_per_page </td>
<td> The maximum amount of items to display per page.</td>
</tr>
<tr>
<td>config.window </td>
<td> Specifies the inner window size. The inner window is the number of items in the middle of the pagination block. e.g. « First ‹ Prev &hellip; 1 2 3 4 &hellip; Next › Last », in the previous example, 1 2 3 4 would be considered the inner window.</td>
</tr>
<tr>
<td>config.outer_window </td>
<td> Specifies how many items to display in the outer window. For example: 1 2 3 4 &hellip; 8 9 10 11, numbers visible on the outside are the outer window.</td>
</tr>
<tr>
<td>config.left </td>
<td> Specifies how many items should be displayed in the left outer window.</td>
</tr>
<tr>
<td>config.right </td>
<td> Specifies how many items should be displayed in the right outer window.</td>
</tr>
<tr>
<td>config.page_method_name </td>
<td> Changes the page method name from page to whatever you want. Can be used to avoid conflict with other gems that use page.</td>
</tr>
<tr>
<td>config.param_name </td>
<td> The default parameter to use when looking for the page number.</td>
</tr>
</tbody>
</table>


<br/>




<p>
  <strong>I18N</strong><br/>
  Kaminari can be configured via I18N. The default I18N configuration file looks like the code listed below:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">en</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">views</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;pagination:</span>
</span><span class='line'><span class="sr">  first: &quot;&amp;amp;laquo; First&quot;</span>
</span><span class='line'><span class="sr">  last: &quot;Last &amp;amp;raquo;&quot;</span>
</span><span class='line'><span class="sr">  previous: &quot;&amp;amp;lsaquo; Prev&quot;</span>
</span><span class='line'><span class="sr">  next: &quot;Next &amp;amp;rsaquo;&quot;</span>
</span><span class='line'><span class="sr">  truncate: &quot;&amp;amp;hellip;&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  helpers:&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">page_entries_info</span><span class="p">:</span>
</span><span class='line'>  <span class="n">one_page</span><span class="p">:</span>
</span><span class='line'>    <span class="n">display_entries</span><span class="p">:</span>
</span><span class='line'>      <span class="ss">zero</span><span class="p">:</span> <span class="s2">&quot;No %{entry_name} found&quot;</span>
</span><span class='line'>      <span class="ss">one</span><span class="p">:</span> <span class="s2">&quot;Displaying &amp;lt;b&amp;gt;1&amp;lt;/b&amp;gt; %{entry_name}&quot;</span>
</span><span class='line'>      <span class="ss">other</span><span class="p">:</span> <span class="s2">&quot;Displaying &amp;lt;b&amp;gt;all %{count}&amp;lt;/b&amp;gt; %{entry_name}&quot;</span>
</span><span class='line'>  <span class="n">more_pages</span><span class="p">:</span>
</span><span class='line'>    <span class="n">display_entries</span><span class="p">:</span> <span class="s2">&quot;Displaying %{entry_name} &amp;lt;b&amp;gt;%{first}&amp;amp;nbsp;-&amp;amp;nbsp;%{last}&amp;lt;/b&amp;gt; of &amp;lt;b&amp;gt;%{total}&amp;lt;/b&amp;gt; in total&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  To override it, simply modify your locale files under <code>config/locales</code>.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby/Ruby on Rails Mistakes]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/07/ruby-slash-ruby-on-rails-mistakes/"/>
    <updated>2015-05-07T21:16:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/07/ruby-slash-ruby-on-rails-mistakes</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Ruby/Ruby on Rails Mistakes" />
</p>




<p>
  Software Engineer make mistakes. Some of them are just annoying (for others to read) and some are really dangerous. Here is my selection of 10 mistakes done by Ruby / Ruby on Rails developers. These tips are easy to follow and can save you much time of later debugging.
</p>




<p>
  <strong>Double Negative and Complex Conditionals</strong><br/>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">user</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;unless user.blank?</span>
</span><span class='line'><span class="sr">  # &amp;hellip;</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">unless</span> <span class="n">user</span><span class="o">.</span><span class="n">active?</span> <span class="o">||</span> <span class="n">address</span><span class="o">.</span><span class="n">confirmed?</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Double negative is hard to read. Every time I encounter it, I spend a couple of seconds on parsing the condition. Use the API which Rails gives you  <code>user.present?</code> instead of <code>!user.blank?</code>.
</p>




<p>
  I also rarely see any usage for unless, especially with complex conditionals connected by && and ||. How fast can you decide when unless <code>user.active? || address.confirmed?</code> will fire?
</p>




<p>
  <strong>Using Save Instead of save! and Not Checking Return Value</strong><br/>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">John</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What is wrong with this piece of code? It will fail silently when user cannot be saved. There will be no single trace of this failure in your logs and you will spend time wondering: “why there are no users in the database”. If you expect that data is valid and model should be always saved successfully, then use bang versions – <code>save!</code>, <code>create!</code> and so on. Use save only when you handle the return value:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>self When It’s Not Needed</strong><br/>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:first_name</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:last_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def display_name&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  In this case writing self.first_name is completely unnecessary, because <code>first_name</code> will do. This is of course just matter of style and has no other negative consequences than overly verbose code. Please mind that you need <code>self</code> in assignments: <code>self.first_name = "John"</code>.
</p>




<p>
  <strong>N + 1 Queries</strong><br/>
  This is a vast topic, but I will try to give the simplest example. You want to display a list of posts with names of authors. Post model <code>belongs_to :user</code>. If you just do <code>Post.limit(10)</code> and then call <code>post.user.name</code> in your views, you will make a separate database query for each user. That’s because Rails has no single chance to guess that you need users when you make the first query in the controller.
</p>




<p>
  It’s easy to spot N + 1 queries problem just by looking at server’s logs:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Template</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&lt;em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>   <span class="no">ORDER</span> <span class="no">BY</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">templates</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">desc</span> <span class="no">LIMIT</span> <span class="mi">30</span> <span class="no">OFFSET</span> <span class="mi">0</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/em&gt; FROM &amp;ldquo;collections&amp;rdquo;  WHERE &amp;ldquo;collections&amp;rdquo;.&amp;ldquo;id&amp;rdquo; = ? LIMIT 1  [[&amp;ldquo;id&amp;rdquo;, 1]]</span>
</span><span class='line'><span class="sr">  Collection Load (0.1ms)  SELECT  &amp;ldquo;collections&amp;rdquo;.&lt;em&gt; FROM &amp;ldquo;collections&amp;rdquo;  WHERE &amp;ldquo;collections&amp;rdquo;.&amp;ldquo;id&amp;rdquo; = ? LIMIT 1  [[&amp;ldquo;id&amp;rdquo;, 6]]</span>
</span><span class='line'><span class="sr">  CACHE (0.0ms)  SELECT  &amp;ldquo;collections&amp;rdquo;.&lt;/em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>  <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">6</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&lt;em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>  <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">6</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/em&gt; FROM &amp;ldquo;collections&amp;rdquo;  WHERE &amp;ldquo;collections&amp;rdquo;.&amp;ldquo;id&amp;rdquo; = ? LIMIT 1  [[&amp;ldquo;id&amp;rdquo;, 3]]</span>
</span><span class='line'><span class="sr">  CACHE (0.0ms)  SELECT  &amp;ldquo;collections&amp;rdquo;.&lt;em&gt; FROM &amp;ldquo;collections&amp;rdquo;  WHERE &amp;ldquo;collections&amp;rdquo;.&amp;ldquo;id&amp;rdquo; = ? LIMIT 1  [[&amp;ldquo;id&amp;rdquo;, 3]]</span>
</span><span class='line'><span class="sr">  Collection Load (0.1ms)  SELECT  &amp;ldquo;collections&amp;rdquo;.&lt;/em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>  <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&lt;em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>  <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">2</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">CACHE</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&lt;</span><span class="sr">/em&gt; FROM &amp;ldquo;collections&amp;rdquo;  WHERE &amp;ldquo;collections&amp;rdquo;.&amp;ldquo;id&amp;rdquo; = ? LIMIT 1  [[&amp;ldquo;id&amp;rdquo;, 2]]</span>
</span><span class='line'><span class="sr">  CACHE (0.0ms)  SELECT  &amp;ldquo;collections&amp;rdquo;.&lt;em&gt; FROM &amp;ldquo;collections&amp;rdquo;  WHERE &amp;ldquo;collections&amp;rdquo;.&amp;ldquo;id&amp;rdquo; = ? LIMIT 1  [[&amp;ldquo;id&amp;rdquo;, 1]]</span>
</span><span class='line'><span class="sr">  CACHE (0.1ms)  SELECT  &amp;ldquo;collections&amp;rdquo;.&lt;/em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>  <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">1</span><span class="o">]]</span>
</span><span class='line'>  <span class="no">Collection</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>  <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">collections</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">&amp;ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=</span> <span class="p">?</span> <span class="no">LIMIT</span> <span class="mi">1</span>  <span class="o">[[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">4</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You have to be explicit at telling what you need from the database. In the easy cases Rails includes method will do. You can read more about it in Rails guides - <a href="http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations" target="_blank">Eager Loading</a>
</p>




<p>
  <strong>Boolean Field with Three Possible Values</strong><br/>
  Boolean is supposed to have two possible values – <code>true</code> and <code>false</code>, right? And how about <code>nil</code>? If you do not specify default value and null: false in your migrations, you end up with boolean field with three possible values – <code>true</code>, <code>false</code> and <code>nil</code>. This leads to nasty code like:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;post is new, not published, not rejected&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">published</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;post is published&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">post</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;post is new or rejected&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">unless</span> <span class="n">post</span><span class="o">.</span><span class="n">published</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  If you need three possible states – use string field with three <code>well-defined</code> values.
</p>




<p>
  <strong>Orphaned Records After Destroy</strong><br/>
  When you destroy a model and it is required by associated records, you should handle it. It’s easy to find such cases:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  User is required for post. Hence, we have to write:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">dependent</span><span class="p">:</span> <span class="ss">:destroy</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Leaving puts</strong><br/>
  Leaving <code>puts</code> in the code after some debugging session pollutes server logs and output of tests. Use <code>Rails.logger.debug</code> so it’s later possible to adjust the desired log level.
</p>




<p>
  <strong>Not Using map</strong><br/>
  I’ve seen such code many times:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="o">[]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;posts.each do |post|</span>
</span><span class='line'><span class="sr">  users &amp;lt;&amp;lt; post.user</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This is exactly the case for using <code>map</code>, which is shorter and more idiomatic:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">users</span> <span class="o">=</span> <span class="n">posts</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class='line'>  <span class="n">post</span><span class="o">.</span><span class="n">user</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Not Using Hash#fetch</strong><br/>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What’s wrong with this code? It will throw <code>NoMethodError: undefined method `[]' for nil:NilClass</code> if there is no user key in the hash. If you expect the key to always be present, use <code>Hash#fetch</code>:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This will give you a meaningful <code>exception – KeyError: key not found: :user</code>.
</p>




<p>
  <strong>Using Code from app/ in Migrations</strong><br/>
  Let’s say you have the following model:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="no">ACTIVE</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">after_registration</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  and you want to add points field to it. So you create a migration. But you would also like to handle existing users: 10 points for active and 0 for the rest. You add to your migration:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">status</span><span class="p">:</span> <span class="ss">User</span><span class="p">:</span><span class="ss">:ACTIVE</span><span class="p">)</span><span class="o">.</span><span class="n">update_all</span><span class="p">(</span><span class="ss">points</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It works and you are happy. Time passes by and you decide to remove <code>User::ACTIVE</code> constant. Your migrations are now broken, you cannot run them from scratch, because <code>User::ACTIVE</code> is undefined.
</p>




<p>
  Never use code from app/ directory in migrations. If you need to update existing data and do it in a few environments (development, staging, production) create a Rake task and delete it once it’s executed in every environment.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Rails API with Rails-api and Active_model_serializers]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/07/fast-rails-api-with-rails-api-and-active-model-serializers/"/>
    <updated>2015-05-07T13:50:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/07/fast-rails-api-with-rails-api-and-active-model-serializers</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Fast Rails API with Rails-api and Active_model_serializers" />
</p>




<p>
  Dealing with JSON in Rails is pretty easy and straight forward. The support is built into the framework, request data is automatically available in params hash. Then we just have to say <code>render :json</code> and we are done.
</p>




<p>
  If JSON is one of the formats which we use. For instance, we can render both JSON and HTML in the same controller action. Or we may create an action intended for AJAX call which changes some model and returns JSON with status field.
</p>




<p>
  On the other hand, we may use Ruby on Rails for building JSON API – app with the assumption that JSON is the only format we support. In such a case we know that the app won’t render HTML. There is no View layer (or you can say that JSON is your View layer). We probably won’t need cookies support and the code specific to handling browser requests.
</p>




<h3>
  Rails-API
</h3>




<p>
  Ruby on Rails has modular structure – you can opt out of the things which you don’t want to use. But if we are talking about API only Rails app already did it for us and published in the gem called <a href="https://github.com/rails-api/rails-api/blob/master/README.md" target="_blank">rails-api</a>.
</p>




<p>
  What I care is "Don’t require things which you won’t use". There might be bugs hiding there or security vulnerabilities connected with it. And of course there are other reasons:
</p>




<p>
  <strong>More Lightweight Application</strong><br/>
  I generated two fresh applications – one using <code>rails-api new</code> and the second using <code>rails new</code>. The environment was consistent – Ruby 2.1.0, Rails 4.0.2. Then I started the server with rails s and measured RAM memory taken by server process. The results are following:
</p>




<p>
  This is 15% less. Obviously when you start adding new gems the relative difference will be smaller.
</p>




<p>
  <strong>Faster Application</strong><br/>
  The same benchmarking environment as above. I created controller action which loads 100 User records from the database and renders them as JSON. I placed exactly the same code in rails-api application and regular rails application. Then I measured the server response time for a bunch of requests and took the avarage value. It looks like:
</p>




<p>
  This is 12% faster.
</p>




<p>
  <strong>Useful Generator</strong><br/>
  The controller scaffold which comes with rails-api is really cool. It disables new and edit actions (they don’t make sense because we do not display forms) and provides sensible default code inside other actions.
</p>




<p>
  <strong>Easy Installation and No Maintenance Costs</strong><br/>
  Last but not least, rails-api is super easy to install and learn. All you have to do to bootstrap new app is:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">install</span> <span class="n">rails</span><span class="o">-</span><span class="n">api</span>
</span><span class='line'><span class="n">rails</span><span class="o">-</span><span class="n">api</span> <span class="kp">new</span> <span class="n">my_app</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It’s worth to spend 10 minutes of your time for learning it. <a href="https://github.com/rails-api/rails-api/blob/master/README.md" target="_blank">Check out the docs</a>.
</p>




<h3>
  Active Model Serializers
</h3>




<p>
  If you want to build JSON API it’s good to have control over the generated JSON. And here we need the second gem is <a href="https://github.com/rails-api/active_model_serializers" target="_blank">active_model_serializers</a>.
</p>




<p>
  Let’s look at a sample serializer:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/serializers/user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">:email</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  has_one :address</span>
</span><span class='line'><span class="sr">  has_many :packages</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  As you can see UserSerializer is used to serialize User model. Using attributes we define what should be included in the generated JSON. You may think that this is repeating yourself (the fields are already defined in database schema), but in my opinion you rarely render all the fields, more often you want to hide some internals.
</p>




<p>
  As you can see we embed associated records using familiar syntax: has_one and has_many. Serializing Address and Package will be handled using AddressSerializer and PackageSerializer, respectively.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/serializers/user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="o">[&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  attributes :full_name, :email_address&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">full_name</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&quot;</span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">first_name</span><span class="si">}</span><span class="sr"> </span><span class="si">#{</span><span class="n">object</span><span class="o">.</span><span class="n">last_name</span><span class="si">}</span><span class="sr">&quot;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">email_address</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;object.email</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">[&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Serializers are just classes which inherit from ActiveModel::Serializer. You can define regular methods and the model being serialized is accessed by object method.
</p>




<p>
  How does the code inside UsersController look like?
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/users_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def index&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:address</span><span class="p">,</span> <span class="ss">:packages</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@users</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;[&amp;hellip;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Pretty simple, You just say: “I want JSON” and you have JSON rendered with proper serializer.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">users</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;[</span>
</span><span class='line'><span class="sr">  {</span>
</span><span class='line'><span class="sr">    &quot;id&quot;: 1,</span>
</span><span class='line'><span class="sr">    &quot;first_name&quot;: &quot;Some String&quot;,</span>
</span><span class='line'><span class="sr">    &quot;last_name&quot;: &quot;Another String&quot;,</span>
</span><span class='line'><span class="sr">    [...]</span>
</span><span class='line'><span class="sr">    &quot;address&quot;: { &quot;street&quot;: &quot;Yet another string&quot; },</span>
</span><span class='line'><span class="sr">    &quot;packages&quot;: [</span>
</span><span class='line'><span class="sr">      { &quot;id&quot;: 2, &quot;status&quot;: &quot;delivered&quot; },</span>
</span><span class='line'><span class="sr">      { &quot;id&quot;: 5, &quot;status&quot;: &quot;lost&quot; }</span>
</span><span class='line'><span class="sr">    ]</span>
</span><span class='line'><span class="sr">  }</span>
</span><span class='line'><span class="sr">]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>More about Associations</strong><br/>
  Let’s imagine following use case, we want to get information about a package given its id. And we want it to contain information about the owner (user).
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>package_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PackageSerializer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:status</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  has_one :user</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What’s different here from model code? Package <code>belongs_to</code> user, but here it says <code>has_one</code> user. From the point of view of serializers <code>belongs_to</code> is exactly the same as <code>has_one</code>, hence we have only has_one and has_many.
</p>




<p>
  Now let’s go back to <code>UsersController#index</code> after our changes. We hit the action again and what do we get this time?
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Failure</span><span class="o">/</span><span class="ss">Error</span><span class="p">:</span> <span class="no">Unable</span> <span class="n">to</span> <span class="n">find</span> <span class="n">matching</span> <span class="n">line</span> <span class="n">from</span> <span class="n">backtrace</span>
</span><span class='line'>  <span class="ss">SystemStackError</span><span class="p">:</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;stack level too deep</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  That’s an infinite loop: user contains package, package contains user, user contains package... How can we solve this?
</p>




<p>
  <strong>Solution 1</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="o">[&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  has_many :packages, :embed =&gt; :ids&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">[&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">users</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;[</span>
</span><span class='line'><span class="sr">  {</span>
</span><span class='line'><span class="sr">    &quot;id&quot;: 1,</span>
</span><span class='line'><span class="sr">    [...]</span>
</span><span class='line'><span class="sr">    &quot;package_ids&quot;: [2, 5]</span>
</span><span class='line'><span class="sr">  }</span>
</span><span class='line'><span class="sr">]</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We can use <code>:embed</code> option and include only ids of the packages. This has a drawback: if a client of our API wants not only id of the package, but also its status then he will have to make a separate request for each package. Certainly this is a situation which we want to avoid.
</p>




<p>
  <strong>Solution 2</strong>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="o">[&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  has_many :packages, :serializer =&gt; ShortPackageSerializer&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">[&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>short_package_serializer.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ShortPackageSerializer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:status</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We use <code>:serializer</code> option to specify different serializer than that inferred from naming conventions. We create <code>ShortPackageSerializer</code>, which doesn’t contain user embeded. What’s more you can put <code>ShortPackageSerializer</code> and <code>PackageSerializer</code> in the inheritance hierarchy so you DRY.
</p>




<p>
  In my opinion this solution is pretty clean. We have separate class for each representation and we are able to share some pieces of code by using inheritance. Of course, this may become too complex if the inheritance hierarchy grows very big. However if we limit ourselves to 2-3 serializers per model the code should stay clear and maintainable.
</p>




<p>
  Use rails-api if you are building API-only application. It’s easy to learn and maintenance won’t hit you later, because you can opt out without any problems.
</p>




<p>
  Use active_model_serializers for better control over the generated JSON.
</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Rails API]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/06/fast-rails-api/"/>
    <updated>2015-05-06T10:41:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/06/fast-rails-api</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/fast_rails_api.png" alt="Fast Rails API" />
</p>




<p>
  Rendering JSON is pretty easy in Rails.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It works well if there are small number of records to be returned. But what happens when we need to return 10,000 records at once? Things slow down dramatically and the most time-consuming parts are JSON serialization and database operations.
</p>




<p>
  <strong>Include only Required Attributes</strong><br/>
  The first obvious thing is generating JSON with only attributes that we need.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span><span class="p">,</span> <span class="nb">methods</span><span class="p">:</span> <span class="o">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:virtual_odometer</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Tidying JSON gives over 20% performance
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Select only Required Columns</strong><br/>
  Second, we should consider selecting only required columns when we don’t need all of them.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:virtual_odometer</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It’ll help us to avoid transferring a huge amount of data to the application from the database and gives 2x speed up.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span><span class='line'><span class="nb">select</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">170000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">190000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">222277</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Don’t Instantiate ActiveRecord Objects If Possible</strong><br/>
  Let’s implement a method to return “lightning” array of hashes instead of ActiveRecord instances.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">lightning</span>
</span><span class='line'>  <span class="n">connection</span><span class="o">.</span><span class="n">select_all</span><span class="p">(</span><span class="nb">select</span><span class="p">(</span><span class="o">[</span><span class="ss">:latitude</span><span class="p">,</span> <span class="ss">:longitude</span><span class="p">,</span> <span class="ss">:timestamp</span><span class="p">,</span> <span class="ss">:virtual_odometer</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">arel</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">attrs</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;attrs.each_key do |attr|</span>
</span><span class='line'><span class="sr">  attrs[attr] = type_cast_attribute(attr, attrs)</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Returns array of hashes instead of array of single column values. Invoke a new method in controller.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@statuses</span><span class="o">.</span><span class="n">lightning</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Using lightweight hashes makes JSON rendering 2x faster.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span><span class='line'><span class="nb">select</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">170000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">190000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">222277</span><span class="p">)</span>
</span><span class='line'><span class="n">lightning</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">120000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">1</span><span class="o">.</span><span class="mi">130000</span> <span class="p">(</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">148763</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>
  Fastest JSON
</h3>




<p>
  There are several JSON libraries available:<br/>
  - <a href="https://github.com/flori/json" target="_blank">JSON</a> - The default JSON gem with C-extensions (ships with Ruby 1.9).<br/>
  - <a href="https://github.com/brianmario/yajl-ruby" target="_blank">YAJL</a> - Yet Another JSON Library.<br/>
  - <a href="https://github.com/ohler55/oj" target="_blank">OJ</a> - Optimized JSON.
</p>




<p>
  It’s a good idea to use the fastest dumper of them.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">json</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">810000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">841307</span><span class="p">)</span>
</span><span class='line'><span class="n">yajl</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">760000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">780000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">809903</span><span class="p">)</span>
</span><span class='line'><span class="n">oj</span>         <span class="mi">0</span><span class="o">.</span><span class="mi">640000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">650000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">666230</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  But we prefer <a href="https://github.com/rails-api/active_model_serializers" target="_blank">active_model_serializers</a> which it run faster than OJ.
</p>




<p>
  Summarized benchmark results are:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span>     <span class="nb">system</span>      <span class="n">total</span>        <span class="n">real</span>
</span><span class='line'><span class="n">default</span>    <span class="mi">5</span><span class="o">.</span><span class="mi">940000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">080000</span>   <span class="mi">6</span><span class="o">.</span><span class="mo">020000</span> <span class="p">(</span>  <span class="mi">6</span><span class="o">.</span><span class="mi">094221</span><span class="p">)</span>
</span><span class='line'><span class="n">attrs</span>      <span class="mi">4</span><span class="o">.</span><span class="mi">820000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">4</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">4</span><span class="o">.</span><span class="mi">932337</span><span class="p">)</span>
</span><span class='line'><span class="nb">select</span>     <span class="mi">2</span><span class="o">.</span><span class="mi">170000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">2</span><span class="o">.</span><span class="mi">190000</span> <span class="p">(</span>  <span class="mi">2</span><span class="o">.</span><span class="mi">222277</span><span class="p">)</span>
</span><span class='line'><span class="n">lightning</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">120000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">1</span><span class="o">.</span><span class="mi">130000</span> <span class="p">(</span>  <span class="mi">1</span><span class="o">.</span><span class="mi">148763</span><span class="p">)</span>
</span><span class='line'><span class="n">json</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">810000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">830000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">841307</span><span class="p">)</span>
</span><span class='line'><span class="n">yajl</span>       <span class="mi">0</span><span class="o">.</span><span class="mi">760000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">020000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">780000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">809903</span><span class="p">)</span>
</span><span class='line'><span class="n">oj</span>         <span class="mi">0</span><span class="o">.</span><span class="mi">640000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">010000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">650000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">666230</span><span class="p">)</span>
</span><span class='line'><span class="n">ams</span>        <span class="mi">0</span><span class="o">.</span><span class="mi">270000</span>   <span class="mi">0</span><span class="o">.</span><span class="mo">000000</span>   <span class="mi">0</span><span class="o">.</span><span class="mi">270000</span> <span class="p">(</span>  <span class="mi">0</span><span class="o">.</span><span class="mi">272239</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preload Active Record Associations in Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/05/preload-active-record-associations-in-rails-application/"/>
    <updated>2015-05-05T16:26:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/05/preload-active-record-associations-in-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Preload Active Record Associations in Rails Application" />
</p>




<p>
  Active Record makes database querying so simple. Chain together a few methods and bam, you’ve saved your self lines and lines of T-SQL. The problem is this simplicity masks the underlying operation and it’s very easy to not realize how inefficient your database calls are.
</p>




<p>
  For example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;class Post &amp;lt; ActiveRecord::Base</span>
</span><span class='line'><span class="sr">  has_many :comments</span>
</span><span class='line'><span class="sr">  belongs_to :user</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Let’s say on a users profile page we would like to show a listing of comments from this user.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;@user.posts.each do |post|</span>
</span><span class='line'><span class="sr">   post.comments.each do |comment|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">comment</span><span class="o">.</span><span class="n">message</span> <span class="o">%&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>   <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What you end up with is something like:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;em&gt; FROM &lt;code&gt;users&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'> <span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">posts</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;/em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">blogs</span><span class="o">&lt;</span><span class="sr">/code&gt; WHERE &lt;code&gt;blogs&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;</span><span class="sr">/code&gt; = 2</span>
</span><span class='line'><span class="sr"> Comment Load (0.7ms)  SELECT &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt; WHERE &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;code</span><span class="o">&gt;</span><span class="n">post_id</span><span class="o">&lt;</span><span class="sr">/code&gt; = 43</span>
</span><span class='line'><span class="sr"> Comment Load (1.7ms)  SELECT &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;</span><span class="sr">/em&gt; FROM &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">WHERE</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;code&gt;post_id&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">55</span>
</span><span class='line'> <span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;em&gt; FROM &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">WHERE</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;code&gt;post_id&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">32</span>
</span><span class='line'> <span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">9</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;/em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt; WHERE &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;code</span><span class="o">&gt;</span><span class="n">post_id</span><span class="o">&lt;</span><span class="sr">/code&gt; = 66</span>
</span><span class='line'><span class="sr"> Comment Load (2.2ms)  SELECT &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt; WHERE &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;code</span><span class="o">&gt;</span><span class="n">post_id</span><span class="o">&lt;</span><span class="sr">/code&gt; = 56</span>
</span><span class='line'><span class="sr"> Comment Load (4.8ms)  SELECT &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;</span><span class="sr">/em&gt; FROM &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">WHERE</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;code&gt;post_id&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">65</span>
</span><span class='line'> <span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">8</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;em&gt; FROM &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">WHERE</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;code&gt;post_id&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">=</span> <span class="mi">68</span>
</span><span class='line'> <span class="no">Comment</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">8</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;/em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt; WHERE &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;code</span><span class="o">&gt;</span><span class="n">post_id</span><span class="o">&lt;</span><span class="sr">/code&gt; = 71</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The user has commented in 9 different posts, which results in 9 separate queries to the DB. This is a small scale example, but you can see how this can compound into something nasty.
</p>




<p>
  he solution is to user includes method:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">.</span><span class="n">includes</span><span class="p">(</span><span class="ss">:posts</span> <span class="o">=&gt;</span> <span class="ss">:comments</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  When using includes method, Active Record ensures that all of the specified associations are loaded using the minimum possible number of queries. The actual query executed is converted into a more optimal singular query and it is that result set that is iterated over instead of the replicated find(id) style queries.
</p>




<p>
  Our query stack list now looks like:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">users</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;em&gt; FROM &lt;code&gt;users&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="no">WHERE</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">4</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">posts</span><span class="o">&lt;</span><span class="sr">/code&gt;.&lt;/em</span><span class="o">&gt;</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">posts</span><span class="o">&lt;</span><span class="sr">/code&gt; WHERE &lt;code&gt;posts&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;code</span><span class="o">&gt;</span><span class="n">user_id</span><span class="o">&lt;</span><span class="sr">/code&gt; IN (1)</span>
</span><span class='line'><span class="sr">Comment Load (0.5ms)  SELECT &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">*</span> <span class="no">FROM</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">comments</span><span class="o">&lt;</span><span class="sr">/code&gt; WHERE &lt;code&gt;comments&lt;/</span><span class="n">code</span><span class="o">&gt;.</span><span class="n">&lt;code</span><span class="o">&gt;</span><span class="n">post_id</span><span class="o">&lt;</span><span class="sr">/code&gt; IN (43, 55, 32, 66, 56, 65, 68, 71)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
