<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2014-07-24T23:01:41+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Deploy Ruby on Rails 4 to Heroku on Ubuntu]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/21/deploy-ruby-on-rails-4-to-heroku-on-ubuntu/"/>
    <updated>2014-07-21T21:20:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/21/deploy-ruby-on-rails-4-to-heroku-on-ubuntu</id>
    <content type="html"><![CDATA[<p>
  Ruby on Rails is a popular web framework written in Ruby. In this artical covers using Rails 4 on Heroku. The many step for deploying Rails 4 to Heroku below:
</p>




<p>
  <strong>1. Installation heroku environment <a href="https://toolbelt.heroku.com/">(www.toolbelt.heroku.com)</a></strong> -- if you not yet have<br/>
  Open your terminal and type command below:<br/>
</p>




<p>
  1. <code>wget -qO- https://toolbelt.heroku.com/install.sh | sh</code><br/>
  2. <code>gem install heroku foreman</code><br/>
  3. <code>heroku login</code><br/>
</p>




<p>
  <strong>2. Installation git</strong> -- if you not yet have<br/>
  Open your terminal and type command below:<br/>
</p>




<p>
  1. <code>sudo apt-get install git-core</code><br/>
  2. <code>sudo apt-get install expat openssl zlib1g zlib1g-dev</code><br/>
</p>




<p>
  <strong>3. Create Ruby on Rails project<br/></strong>
  Open your terminal and type command below:<br/>
</p>




<p>
  <code>rails new app_name -d postgresql</code><br/>
</p>




<p>
  Go into you project, Open your terminal and type command below:<br/>
</p>




<p>
  <code>cd app_name</code><br/>
</p>




<p>
  We will first create a controller called welcome for our home page to live, Open your terminal and type command below:
</p>




<p>
  <code>rails generate controller welcome</code><br/>
</p>




<p>
   Next then add an index page in directory app/views/welcome/index.html.erb<br/>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>Hello World<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;p&gt;</span>
</span><span class='line'>  The time is now: <span class="ni">&amp;lt;</span>%= Time.now %&gt;
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  We need to have Rails route to index action. We’ll edit config/routes.rb<br/>
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>routes.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">welcome</span><span class="c1">#index&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  Let run the rails app and visiting <a href="http://localhost:3000">http://localhost:3000</a> in your browser, Open your terminal and type command below:
</p></p>

<p><p>
  <code>rails server</code><br/>
</p></p>

<p><p>
  Then open Gemfile and add gems below at the end:<br/>
</p></p>

<p><p>
  <code>gem &lsquo;heroku&rsquo;</code><br/>
  <code>gem &lsquo;thin&rsquo;</code><br/>
  <code>gem &lsquo;rails_12factor&rsquo;, group: :production</code></code>
</p></p>

<p><p>
  Then open your terminal and type command below:<br/>
</p></p>

<p><p>
  <code>bundle install</code>
</p></p>

<p><p>
  Rails 4 requires Ruby 1.9.3 or above. Heroku has a recent version of Ruby installed, however you can specify an exact version by using the ruby DSL in your Gemfile by adding ruby &ldquo;2.1.1&rdquo; at the end of Gemfile.
</p></p>

<p><p>
  <code>ruby &ldquo;2.1.1&rdquo;</code><br/>
</p></p>

<p><p>
  <strong>4. Deploy to heroku<br/></strong>
  Open your terminal and type command below:<br/>
</p></p>

<p><p>
  1. <code>cd project_name</code><br/>
  2. <code>git init</code><br/>
  3. <code>git add .</code><br/>
  4. <code>git commit -m “my first commit”</code><br/>
  5. <code>heroku create heroku_app_name</code><br/>
  6. <code>heroku git:remote -a heroku_app_name</code><br/>
  7. <code>git push heroku master</code><br/>
</p></p>

<p><p>
  <strong>Each time you wish to deploy to Heroku<br/></strong>
  Open your terminal and type command below:<br/>
</p></p>

<p><p>
  1. <code>git add -A</code><br/>
  2. <code>git commit -m “commit for deploy to heroku”</code><br/>
  3. <code>git push -f heroku</code><br/><br/>
</p></p>

<p><p>
  So far so good, You now have your first application deployed to Heroku. The next step is to deploy your own application. :)
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Best Coding in Ruby on Rails Project]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/17/useful-best-coding-in-ruby-on-rails-project/"/>
    <updated>2014-07-17T22:24:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/17/useful-best-coding-in-ruby-on-rails-project</id>
    <content type="html"><![CDATA[<p>
  While a lot of techniques and libraries have come and gone as the community's preferred way of doing something, there are some best practices that remain, and can lead to writing the clean code, most secure and maintainable Ruby on Rails code possible.<br/><br/>
  Listed here there are the most popular and useful best coding you can use as a Ruby on Rails developer:
</p>




<p>
  <strong>Fat Model - Thin Controller</strong><br/>
  The most important ways to write clear and concise cod in Ruby on Rails is "Fat Model - Thin Controller". Model and Controller are parts of MVC(Model - View - Controller), many logic should go in the Model, and Controller is a nice interface between the view and Model.<br/><br/>
  In priactice, We should move any logic that isn't about the response(setting a flash message, redirect, render view) to the model instead of the controller, anyway we can reuse it where possible and make it possible for testing outside of the Controller.
</p>




<p>
  Let look at sample example we have code in brands_controller.rb:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brands_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@brands</span> <span class="o">=</span> <span class="no">Brand</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:products</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">products</span><span class="o">.</span><span class="n">category_uuid</span> <span class="o">=</span> <span class="p">?</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">AA43D840</span><span class="o">-</span><span class="no">C70B</span><span class="o">-</span><span class="mi">11</span><span class="no">E3</span><span class="o">-</span><span class="mi">9</span><span class="no">C51</span><span class="o">-</span><span class="no">B888E33867FC</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We can refactor it like this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brands_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@brands</span> <span class="o">=</span> <span class="no">Brand</span><span class="o">.</span><span class="n">find_brands_by_category</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">AA43D840</span><span class="o">-</span><span class="no">C70B</span><span class="o">-</span><span class="mi">11</span><span class="no">E3</span><span class="o">-</span><span class="mi">9</span><span class="no">C51</span><span class="o">-</span><span class="no">B888E33867FC</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Then we can move the logic into model brand.rb:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brand.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_brands_by_category</span><span class="p">(</span><span class="n">uuid</span><span class="p">)</span>
</span><span class='line'>  <span class="no">Brand</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:products</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">products</span><span class="o">.</span><span class="n">category_uuid</span> <span class="o">=</span> <span class="p">?</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="n">uuid</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  With the methods Brand.find_brands_by_category, we’ve not only made it simpler to test our code, we’ve also made it possible to reuse that same set of conditions in another location. But as we’ll see shortly, even this is still not ideal.
</p>




<p>
  <strong>Reusable Scopes and Relations</strong><br/>
  Ruby on Rails provides a better way -- scopes to avoid duplication condition in another methods.
</p>




<p>
  Let look at sample example we have code in brands.rb:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brand.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scope</span> <span class="ss">:under_portal</span><span class="p">,</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">portal_uuid</span><span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="n">portal_uuid</span><span class="p">:</span> <span class="n">portal_uuid</span><span class="p">)</span> <span class="k">unless</span> <span class="n">portal_uuid</span><span class="o">.</span><span class="n">blank?</span> <span class="p">}</span>
</span><span class='line'><span class="n">scope</span> <span class="ss">:under_listing</span><span class="p">,</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">alias_id</span><span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="n">listing_alias_id</span><span class="p">:</span> <span class="n">alias_id</span><span class="p">)</span> <span class="k">unless</span> <span class="n">alias_id</span><span class="o">.</span><span class="n">blank?</span> <span class="p">}</span>
</span><span class='line'><span class="n">scope</span> <span class="ss">:under_category</span><span class="p">,</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">category_uuid</span><span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="n">category_uuid</span><span class="p">:</span> <span class="n">category_uuid</span><span class="p">)</span> <span class="k">unless</span> <span class="n">category_uuid</span><span class="o">.</span><span class="n">blank?</span> <span class="p">}</span>
</span><span class='line'><span class="n">scope</span> <span class="ss">:under_brand</span><span class="p">,</span> <span class="nb">lambda</span><span class="p">{</span> <span class="o">|</span><span class="n">brand_uuid</span><span class="o">|</span> <span class="n">where</span><span class="p">(</span><span class="n">brand_uuid</span><span class="p">:</span> <span class="n">brand_uuid</span><span class="p">)</span> <span class="k">unless</span> <span class="n">brand_uuid</span><span class="o">.</span><span class="n">blank?</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def self.set_scope(portal_uuid, listing_alias_id, category_uuid=nil, brand_uuid=nil)</span>
</span><span class='line'><span class="sr">  self.under_portal(portal_uuid).under_listing(listing_alias_id).under_category(category_uuid).under_brand(brand_uuid)</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Virtual Attributes</strong><br/>
  If you find that you’re manipulating data before passing it to a model (for example, converting the type of an object), it’s likely time you started structuring your code to take advantage of virtual attributes.<br/>
</p>




<p>
  Virtual attributes are a very simple idea—essentially, all you’re doing is defining your own getter and setter methods.<br/>
</p>




<p>
  Let look at sample example we have code:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brand.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="vi">@user</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="vi">@user</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:full_name</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  We could remove the second line, and instead add the following to our User model:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brand.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">full_name</span><span class="o">=</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">first_name</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">last_name</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Use the Built-in Ruby Duck Typing Methods</strong><br/>
  Ruby uses several conventions that can make development easier like implementing a to_s instance method on an object will give you a standard way of getting a string representation of your object.
</p>


<p>
  By implementing these standard type conversions—in addition to to_s, there’s also to_i for integers, let have a look at the following string interpolation:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>brand.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Hello</span> <span class="n">there</span><span class="p">,</span> <span class="c1">#{user.name}&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Use Non-database-backed Models</strong><br/>
  Although models in Rails are mostly based on ActiveRecord::Base or some other type of object mapper for a database, it’s important to remember that in MVC, the M isn’t restricted to database-backed models.
</p>




<p>
  Using non-database-backed models can help to organize logic which might otherwise become muddy. For example, there are libraries that give you anActiveRecord-like interface for contact form emails.
</p>




<p>
  When it comes time to interact with these models in your controller code, your code will be that much cleaner, as you can use the exact same approach as with database-backed models.
</p>




<p>
  <strong>Package Your Code into Gems</strong><br/>
  I you've used Ruby on Rails, you've noticed the wealth of rubygems available to Rails developers.
  When you write code you think is general enough—which usually just means you’ve written it more than once before in another application, let extract it into a gem suitable for a wider range of purposes.<br/>
</p>




<p>
  So far so good, there are hundreds of coding practices or techniques that can make your life as a Ruby on Rails developer easier, but I’ve tried to pick out some. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gems for Helping Speed Up Your Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/06/30/gems-for-helping-speed-up-your-ruby-on-rails-application/"/>
    <updated>2014-06-30T10:55:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/06/30/gems-for-helping-speed-up-your-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <strong>1. rails-footnotes</strong><br/>
  Description: This gem allows you to display footnotes in your application on pertinent information such as database queries, request parameters, etc. You can also create your own custom footnotes for objects in your application.<br/>
  Helping: It’s helpful for debugging your application and showing you how long your database query took.<br/>
  Source: <a href="https://github.com/josevalim/rails-footnotes" target="_blank">https://github.com/josevalim/rails-footnotes</a>
</p>




<p>
  <strong>2. bullet</strong><br/>
  Description: This gem watches your database queries and alerts you when it thinks you should use eager loading, when you’re using eager loading unnecessarily, and when to consider using counter cache.<br/>
  Helping: Unnecessary database queries slow down your application’s performance. Using eager loading and counter cache are two easy things you can implement for a performance boost. For high traffic websites, database queries can be the bottleneck for performance.<br/>
  Source: <a href="https://github.com/flyerhzm/bullet" target="_blank">https://github.com/flyerhzm/bullet</a>
</p>




<p>
  <strong>3. request-log-analyzer</strong><br/>
  Description: This gem outputs a performance report based on your application’s database request log file(s). It includes metrics such as average server time (the average time a server needs to respond to a user request) and cumulative server time (the sum of all the server time needed to handle all the requests for a given action on the server, i.e., the “load” on a server).<br/>
  Helping: It uses your log files to tell you how your server is responding to database requests and points you in the direction of code to optimize in your application.<br/>
  Source: <a href="https://github.com/wvanbergen/request-log-analyzer" target="_blank">https://github.com/wvanbergen/request-log-analyzer</a>
</p>




<p>
  <strong>4. ruby-prof</strong><br/>
  Description: This is a code profiling tool for MRI ruby implementations. It can generate graphical reports and gives information on call times, memory usage, and object allocation.<br/>
  Helping: It can help you figure out where your “slow code” is in your rails application.<br/>
  Source: <a href="https://github.com/ruby-prof/ruby-prof" target="_blank">https://github.com/ruby-prof/ruby-prof</a>
</p>




<p>
  <strong>5. rack-mini-profiler</strong><br/>
  Description: This is originally a .NET tool ported over to Ruby that displays a speed profile badge on each html page you navigate to.<br/>
  Helping: If a page feels “slow”, MiniProfiler can give you a good idea of where the bottleneck is. It also lets you know which “sessions” you have not seen and displays them to you the next time you access your user interface. It allows you to easily see how much time you’re spending on database queries versus other non-SQL related bottlenecks.<br/>
  Source: <a href="https://github.com/MiniProfiler/rack-mini-profiler" target="_blank">https://github.com/MiniProfiler/rack-mini-profiler</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Strong Parameters With Fields For &amp; Nested Forms in Rails 4]]></title>
    <link href="http://geekhmer.github.io/blog/2014/06/28/using-strong-parameters-with-fields-for-and-nested-forms-in-rails-4/"/>
    <updated>2014-06-28T11:48:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/06/28/using-strong-parameters-with-fields-for-and-nested-forms-in-rails-4</id>
    <content type="html"><![CDATA[<p>
  With strong_parameters becoming the standard way of handling security in Rails 4, I played around with it. It works great except the documentation isn’t clear on how to handle nested forms inside Rails, specifically with the accepts_nested_attributes_for in the model and fields_for in views.<br/>
  So far so good, let take a look a short example below.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>account.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:people</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:people</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>person.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:account</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>accounts_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AccountsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@account = Account.new</span>
</span><span class='line'><span class="sr">@account.people.build</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">create</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@account = Account.new(new_account_params)</span>
</span><span class='line'><span class="sr">if @account.save</span>
</span><span class='line'><span class="sr">  respond_to do |format|</span>
</span><span class='line'><span class="sr">    format.html {redirect_to root_path, notice: &quot;Account created successfully.&quot;}</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new_account_params</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;params.require(:account).permit(:id, :name, people_attributes: [:id, :email, :password, :password_confirmation])</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autoload All Files in Lib Directory Ruby on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/04/24/autoload-all-files-in-lib-directory-ruby-on-rails/"/>
    <updated>2014-04-24T21:59:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/04/24/autoload-all-files-in-lib-directory-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  In Ruby on Rails to create your own ruby library you have to create ruby library in /lib directory, so far so good to autoload all ruby library in /lib directory you have to add some code below in /config/application.rb.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">autoload_paths</span> <span class="o">+=</span> <span class="o">%</span><span class="nx">W</span><span class="p">(</span><span class="err">#</span><span class="p">{</span><span class="nx">config</span><span class="p">.</span><span class="nx">root</span><span class="p">}</span><span class="o">/</span><span class="nx">lib</span><span class="p">)</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">autoload_paths</span> <span class="o">+=</span> <span class="nx">Dir</span><span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">#</span><span class="p">{</span><span class="nx">config</span><span class="p">.</span><span class="nx">root</span><span class="p">}</span><span class="o">/</span><span class="nx">lib</span><span class="cm">/**/</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">config</span><span class="p">.</span><span class="nx">autoload_paths</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="err">#</span><span class="p">{</span><span class="nx">config</span><span class="p">.</span><span class="nx">root</span><span class="p">}</span><span class="o">/</span><span class="nx">lib</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
