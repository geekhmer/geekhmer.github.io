<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-07-11T22:45:00+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Server Command Line Options]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options/"/>
    <updated>2015-07-11T22:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Rails Server Command Line Options" />
</p>




<p>
  Syntax:
</p>


<p>{% codeblock lang:ruby %}
rails [options]
{% endcodeblock %}</p>

<p>
  Options:<br/>
  -s, –config-script=path Uses the specified mongrel config script.<br/>
  -p, –port=port Runs Rails on the specified port. Default: 3000<br/>
  -b, –binding=ip Binds Rails to the specified ip. Default: 0.0.0.0<br/>
  -e, –environment=name Specifies the environment to run this server under (test/development/production). Default: development
</p>




<p>
  <strong>Listen on any Interface</strong><br/>
  By default versions of Rails is localhost, this prevents users on your local network from accessing your network. You may not want to do this however. You may wish to share your development site with coworker so that they can review the site. Otherwise, you may wish to test the site on other devices such as a mobile device. Fortunately you can easily open the rails server up to all interfaces using the -b argument. Simple run the rails s command below:
</p>


<p>{% codeblock lang:ruby %}
rails s -b 0.0.0.0
{% endcodeblock %}</p>

<p>
  <strong>Use a Different Port</strong><br/>
  Sometimes you want to use a port other than 3000 for your Rails server. For instance, maybe you need to run multiple Rails servers. You can easily do this with the -p argument:
</p>


<p>{% codeblock lang:ruby %}
rails s -p 3001
{% endcodeblock %}</p>

<p>
  This command line tells rails to start the server on port 3001 instead of 3000.
</p>




<p>
  <strong>Run in a Different Environment</strong><br/>
  You can start a rails server for another environment such as production or staging by using the -e argument along with the name of the environment you wish to start up in:
</p>


<p>{% codeblock lang:ruby %}
rails s -e production
{% endcodeblock %}</p>

<p>
  The code above starts the Rails server in the production environment. Very handy when you have custom environments or need to debug something.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/30/angularjs-on-rails/"/>
    <updated>2015-06-30T23:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/30/angularjs-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/angularjs_on_rails.png" width="400" alt="AngularJS on Rails" />
</p>




<p>
  AngularJS is an extremely popular JavaScript library that enables you to quickly and easily create rich web applications. In this article we will show you how to integrate AngularJS with your Rails app. We will also build a simple AngularJS application called VisitorsCenter. The VisitorsCenter application allows the user to track visitors that are coming and going from a building such as an office building. 
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  Before we begin, we will need to add a couple gems to our Gemfile. The <code>angularJs-rails</code> gem provides integration with the AngularJS library and our Rails application. The bootstrap-sass gem merely adds bootstrap support so we can focus on the code rather than the style of the app. Add these gems to your gemfile now as listed below.
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;angularjs-rails&rsquo;, &lsquo;~> 1.2.25&rsquo;
gem &lsquo;bootstrap-sass&rsquo;, &lsquo;~> 3.2.0.2&rsquo;
{% endcodeblock %}</p>

<p>
  Now run a bundle install to install the gems:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Next, we need to create a model called <code>Visitor</code>. The <code>Visitor</code> model will represent a visitor that visits. Run the command below to create the visitor model now:
</p>


<p>{% codeblock lang:ruby %}
rails g model Visitor first_name:string last_name:string reason:string
rake db:migrate
{% endcodeblock %}</p>

<p>
  Great, now we need to create a <code>Visitors</code> controller that will give us a way to interact with our model. The <code>Visitors</code> controller will have 3 different actions in this example application. The first action, <code>index</code> will return either the visitors page or a json list of visitors depending on how it is accessed. The second action, <code>create</code> will be responsible for creating the visitor. The final action, <code>destroy</code> will destroy the visitor. Run the command below to create this controller now:
</p>


<p>{% codeblock lang:ruby %}
rails g controller Visitors index create destroy
{% endcodeblock %}</p>

<p>
  Now let's modify our routes file to set up the proper paths and add a site root. Open up your routes file and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock routes.rb lang:ruby %}
Rails.application.routes.draw do
  resources :visitors, only: [:index, :create, :destroy], defaults: {format: :json}
  root to: &ldquo;visitors#index&rdquo;
end
{% endcodeblock %}</p>

<p>
  The code fragment that says <code>defaults: {format: :json}</code> tells Rails that we wish to return json by default for our actions. We do this because most of the interaction in our application will be via JSON.
</p>




<p>
  By default, AngularJS knows nothing of the cross site request forgery (CSRF) protections in our applications. We need a way to tell AngularJS how to interact with our application while obeying the CSRF protections that we have in place. Luckily we have a way to do this. Open up your <code>ApplicationController</code> and add in the code listed below.
</p>




<p>
  If you are using Rails 4.2 and up, use the code below:
</p>


<p>{% codeblock application_controller.rb lang:ruby %}
class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception</p>

<p>  after_action :set_csrf_cookie_for_ng</p>

<p>  def set_csrf_cookie_for_ng</p>

<pre><code>cookies['XSRF-TOKEN'] = form_authenticity_token if protect_against_forgery?
</code></pre>

<p>  end</p>

<p>  protected
  def verified_request?</p>

<pre><code>super || valid_authenticity_token?(session, request.headers['X-XSRF-TOKEN'])
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  If you are still using Rails 4.1, use the code below instead:
</p>


<p>{% codeblock application_controller.rb lang:ruby %}
class ApplicationController &lt; ActionController::Base
  protect_from_forgery with: :exception</p>

<p>  after_action :set_csrf_cookie_for_ng</p>

<p>  def set_csrf_cookie_for_ng</p>

<pre><code>cookies['XSRF-TOKEN'] = form_authenticity_token if protect_against_forgery?
</code></pre>

<p>  end</p>

<p>  protected
  def verified_request?</p>

<pre><code>super || form_authenticity_token == request.headers['X-XSRF-TOKEN']
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  The code listed above will create a cookie called <code>XSRF-TOKEN</code> that will contain our <code>form_authenticity_token</code>. Any time a request is made, AngularJS will present that token in the HTTP headers for the request.
</p>




<p>
  Now let's modify our <code>VisitorsController</code> to allow for access to the <code>Visitor</code> model. Open up your <code>VisitorsController</code> and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock visitors_controller.rb lang:ruby %}
class VisitorsController &lt; ApplicationController
  respond_to :json</p>

<p>  def index</p>

<pre><code>respond_to do |format|
  format.json { render json: Visitor.all }
  format.html
end
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>respond_with Visitor.create(visitor_params)
</code></pre>

<p>  end</p>

<p>  def destroy</p>

<pre><code>respond_with Visitor.destroy(params[:id])
</code></pre>

<p>  end</p>

<p>  private
  def visitor_params</p>

<pre><code>params.require(:visitor).permit(:first_name, :last_name, :reason)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  The code above is typical Rails code, with the exception being that we return JSON as a result. Since our application will be communicating primarily via AJAX we have no need for HTML other than the index action, which will return either html or json depending on the request type.
</p>




<p>
  Next we need to add support for both AngularJS and Bootstrap to our application.js file. Open up your application.js file and modify it so that it looks like the code listed below.
</p>


<p>{% codeblock application.js lang:ruby %}
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require angular
//= require angular-resource
//= require bootstrap-sprockets
//= require_tree .
{% endcodeblock %}</p>

<p>
  In the code above we add support for AngularJS as well as Bootstrap. We also add support for a library called <code>angular-resource</code> which allows us to easily talk to our Rails application.
</p>




<p>
  Now let's add a bit of CSS for bootstrap. Create a new file called <code>bootstrap_config</code>.scss and add in the code listed below:
</p>


<p>{% codeblock bootstrap_config.scss lang:ruby %}
@import &ldquo;bootstrap-sprockets&rdquo;;
@import &ldquo;bootstrap&rdquo;;
{% endcodeblock %}</p>

<p>
  The next thing we need to do is create our AngularJS application. AngularJS applications typically consists of JavaScript code that glues together various bits of HTML. To get started doing this, the first thing we must do is rename our <code>visitors.js.coffee</code> file to <code>visitors.js</code> and modify it so that it looks like the code listed below. You can also rewrite this in CoffeeScript, but I use JavaScript for those that haven't yet learned CoffeeScript.
</p>


<p>{% codeblock visitors.js lang:ruby %}
var visitorCenter = angular.module(&lsquo;VisitorCenter&rsquo;, [&lsquo;ngResource&rsquo;]);</p>

<p>visitorCenter.factory(&ldquo;Visitor&rdquo;, function($resource) {
  return $resource(&ldquo;visitors/:id&rdquo;, { id: &lsquo;@id&rsquo; }, {</p>

<pre><code>index:   { method: 'GET', isArray: true, responseType: 'json' },
update:  { method: 'PUT', responseType: 'json' }
</code></pre>

<p>  });
})</p>

<p>visitorCenter.controller(&ldquo;visitorsController&rdquo;, function($scope, Visitor) {
  $scope.visitors = Visitor.index()</p>

<p>  $scope.addVisitor = function() {</p>

<pre><code>visitor = Visitor.save($scope.newVisitor)

$scope.visitors.push(visitor)
$scope.newVisitor = {}
</code></pre>

<p>  }</p>

<p>  $scope.deleteVisitor = function(index) {</p>

<pre><code>visitor = $scope.visitors[index]
Visitor.delete(visitor)
$scope.visitors.splice(index, 1);
</code></pre>

<p>  }
})
{% endcodeblock %}</p>

<p>
  There is a lot going on here, so i'm going to break it down into pieces. The first line:
</p>


<p>{% codeblock lang:ruby %}
var visitorCenter = angular.module(&lsquo;VisitorCenter&rsquo;, [&lsquo;ngResource&rsquo;]);
{% endcodeblock %}</p>

<p>
  defines an AngularJS module. AngularJS modules can be thought of as individual components in your application. You'll notice we include <code>ngResource</code> as an argument. <code>ngResource</code> provides easy access to RESTful resources such as our Rails application.
</p>




<p>
  The next set of lines:
</p>


<p>{% codeblock lang:ruby %}
visitorCenter.factory(&ldquo;Visitor&rdquo;, function($resource) {
  return $resource(&ldquo;visitors/:id&rdquo;, { id: &lsquo;@id&rsquo; }, {</p>

<pre><code>index:   { method: 'GET', isArray: true, responseType: 'json' },
update:  { method: 'PUT', responseType: 'json' }
</code></pre>

<p>  });
})
{% endcodeblock %}</p>

<p>
  defines a service, in this case, it ties in the <code>ngResource</code> service mentioned earlier and tells AngularJS how to talk to our application.
</p>




<p>
  The next set of lines:
</p>


<p>{% codeblock lang:ruby %}
visitorCenter.controller(&ldquo;visitorsController&rdquo;, function($scope, Visitor) {
  $scope.visitors = Visitor.index()</p>

<p>  $scope.addVisitor = function() {</p>

<pre><code>visitor = Visitor.save($scope.newVisitor)

$scope.visitors.push(visitor)
$scope.newVisitor = {}
</code></pre>

<p>  }</p>

<p>  $scope.deleteVisitor = function(index) {</p>

<pre><code>visitor = $scope.visitors[index]
Visitor.delete(visitor)
$scope.visitors.splice(index, 1);
</code></pre>

<p>  }
})
{% endcodeblock %}</p>

<p>
  define a controller. Controllers tell AngularJS how to interact with our application similar to how Rails controllers are used to tell Rails how our views interact with our models.
</p>




<p>
  ow that we've written the JavaScript application, we need to create our view to tie everything together. Open up the index view for your <code>Visitors</code> controller and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock index.html.erb lang:ruby %}</p>

<div class="container" ng-app="VisitorCenter">
  <h1>Visitors</h1>

  <div ng-controller="visitorsController">
    <div class="well">
      <h3>Add a new Visitor</h3>
      <form ng-submit="addVisitor()">
        <div class="row">
          <div class="col-xs-6">
            <input type="text" ng-model="newVisitor.first_name" class="form-control" placeholder="First Name" />
          </div>
          <div class="col-xs-6">
            <input type="text" ng-model="newVisitor.last_name" class="form-control" placeholder="Last Name" />
          </div>
        </div>
        <div class="row">
          <div class="col-xs-12">
            <br />
            <input type="text" ng-model="newVisitor.reason" class="form-control" placeholder="Reason for Visit" />
          </div>
        </div>
        <div class="row">
          <div class="col-xs-12 text-center">
            <br />
            <input type="Submit" value="Add Visitor" class="btn btn-primary" />
          </div>
        </div>
      </form>
    </div>

    <h3>Currently Visiting</h3>
    <hr />
    <table class="table table-bordered table-striped">
      <thead>
        <tr>
          <th>First Name</th>
          <th>Last Name</th>
          <th>Reason for Visit</th>
          <th>&nbsp;</th>
        </tr>
      </thead>
      <tbody>
        <tr ng-show="!visitors.length">
          <td colspan="4">No visitors in the building.</td>
        </tr>
        <tr ng-repeat="visitor in visitors">
          <td>{{ visitor.first_name }}</td>
          <td>{{ visitor.last_name }}</td>
          <td>{{ visitor.reason }}</td>
          <td><a class="btn btn-danger" ng-click="deleteVisitor($index)">Remove</a></td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


<p>{% endcodeblock %}</p>

<p>
  Let's break this down a bit:
</p>


<p>{% codeblock lang:ruby %}</p>

<div class="container" ng-app="VisitorCenter">
  ...
</div>


<p>{% endcodeblock %}</p>

<p>
  The outer div on the first line has an attribute called <code>ng-app</code>. The <code>ng-app</code> attribute tells AngularJS that this is part of our AngularJS application. In this case we specify the name of our AngularJS module, <code>VisitorCenter</code>.
</p>


<p>{% codeblock lang:ruby %}</p>

<div ng-controller="visitorsController">
  ...
</div>


<p>{% endcodeblock %}</p>

<p>
  The next inner div contains an attribute called <code>ng-controller</code>. This attribute tells AngularJS that we wish to use our visitorsController as the controller for this portion of the application.
</p>


<p>{% codeblock lang:ruby %}
<form ng-submit="addVisitor()">
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-6"&gt;
  &lt;input type="text" ng-model="newVisitor.first_name" class="form-control" placeholder="First Name" /&gt;
&lt;/div&gt;
&lt;div class="col-xs-6"&gt;
  &lt;input type="text" ng-model="newVisitor.last_name" class="form-control" placeholder="Last Name" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-12"&gt;
  &lt;br /&gt;
  &lt;input type="text" ng-model="newVisitor.reason" class="form-control" placeholder="Reason for Visit" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
  <div class="row"></p>

<pre><code>&lt;div class="col-xs-12 text-center"&gt;
  &lt;br /&gt;
  &lt;input type="Submit" value="Add Visitor" class="btn btn-primary" /&gt;
&lt;/div&gt;
</code></pre>

<p>  </div>
</form>
{% endcodeblock %}</p>

<p>
  The <code>ng-submit</code> attribute on our form tells AngularJS that we wish to use the addVisitor() method on our controller to process the form request. Each of the input elements contain an <code>ng-model</code> attribute. This attribute maps the input elements to our model.
</p>


<p>{% codeblock lang:ruby %}
<tr ng-show="!visitors.length">
  <td colspan="4">No visitors in the building.</td>
</tr>
{% endcodeblock %}</p>

<p>
  The <code>ng-show</code> attribute on the first row tells AngularJS that we only want to show the row if the condition mentioned is matched. In this case we only want to show the first row if there are no visitors.
</p>


<p>{% codeblock lang:ruby %}
<tr ng-repeat="visitor in visitors">
  &hellip;
</tr>
{% endcodeblock %}</p>

<p>
  The <code>ng-repeat</code> attribute is a loop. This particular loop tells AngularJS that we want to loop through each visitor.
</p>


<p>{% codeblock lang:ruby %}
{% raw %}
<td>{{ visitor.first_name }}</td>
<td>{{ visitor.last_name }}</td>
<td>{{ visitor.reason }}</td>
{% endraw %}
{% endcodeblock %}</p>

<p>
  Text contained within {% raw %}<code>{{ .... }}</code>{% endraw %} are AngularJS expressions. In this case we are telling AngularJS to render the fields mentioned in each expression.
</p>


<p>{% codeblock lang:ruby %}
{% raw %}
<td><a class="btn btn-danger" ng-click="deleteVisitor($index)">Remove</a></td>
{% endraw %}
{% endcodeblock %}</p>

<p>
  The <code>ng-click</code> button tells AngularJS to run the specified controller function when the html tag in question is clicked. In this case we run the code to delete the specified user.
</p>




<p>
  So far so good, That's it!!! for this introduction to AngularJS and Rails. See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mark Methods Private When You Don’t Test Them]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/25/mark-methods-private-when-you-dont-test-them/"/>
    <updated>2015-06-25T20:58:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/25/mark-methods-private-when-you-dont-test-them</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  In Ruby and many other languages, you write private methods to implement internal logic you don’t want to expose. You want the freedom to rename, repurpose or even delete them without worrying about impacting anything else. The <code>private</code> keyword signals other developers: Don’t rely on this; don’t call it; it might change. This is especially important when writing framework or library code that many other developers will use.
</p>




<p>
  But which methods should you make private? Sometimes this is obvious; sometimes it isn't. A good rule of thumb to use is: If you’re not testing a method, it should be private.
</p>




<p>
  But wait a minute! Aren't we supposed to test everything? Isn't 100% code coverage the every Ruby developer seeks? Let me clarify. You should mark methods private when you test them indirectly by calling the other, public methods in the same class. Use the <code>private</code> keyword to help organize your code, to remind yourself what you still need to test, and what you don't.
</p>




<p>
  <strong>Three Paintings</strong><br/>
  A simple example will make this clear. Suppose I have a class that describes a painting:
</p>


<p>{% codeblock lang:ruby %}
Painting = Struct.new(:name, :year)
{% endcodeblock %}</p>

<p>
  Now I can create a list of three paintings in a Minitest::Spec file like this:
</p>


<p>{% codeblock lang:ruby %}
let(:one) { Painting.new(&ldquo;Spanish Couple In Front Of Inn&rdquo;, 1900) }
let(:two) { Painting.new(&ldquo;Guernica&rdquo;, 1937) }
let(:three) { Painting.new(&ldquo;Petite Fleurs&rdquo;, 1958) }
let(:paintings) { [one, two, three] }
{% endcodeblock %}</p>

<p>
  Suppose my first requirement is to return the first painting from the list. Simple enough:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  list.first
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;should return the first element&rdquo; do
  first(paintings).must_equal one
end
{% endcodeblock %}</p>

<p>
  I just call Array#first and I’m done. Returning the rest of the list is slightly more interesting:
</p>


<p>{% codeblock lang:ruby %}
def rest(list)
  _, *rest = list
  rest
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the rest of the elements&rdquo; do
  rest(paintings).must_equal [two, three]
end
{% endcodeblock %}</p>

<p>
  Rest always returns an array even if the input list was empty or had only one element. So far, so good. I’ve written two methods and two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>A New Requirement</strong><br/>
  Now suppose my business requirement changes slightly and I instead need to return the first painting sorted alphabetically by name. Once again, it’s not hard to do:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end.first
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;should return the first element&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end
{% endcodeblock %}</p>

<p>
  And I need rest to use the same sort order, so I repeat the call to sort:
</p>


<p>{% codeblock lang:ruby %}
def rest(list)
  _, *rest = list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
  rest
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the rest of the elements&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  I’ve implemented new behavior, but still have two methods and two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>Extracting a Method</strong><br/>
  Because both of my methods are covered by tests, I’m free to refactor them. I decide to extract a new method, sorted_by_name:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  sorted_by_name(list).first
end</p>

<p>def rest(list)
  _, *rest = sorted_by_name(list)
  rest
end</p>

<p>def sorted_by_name(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the element with the first name&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end</p>

<p>it &ldquo;returns the rest after the first name&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  Here I’ve simply moved the call to sort into a utility method called sorted_by_name. Now first and rest both call sorted_by_name, making the code a bit clearer and DRY-er. But now I have three methods and only two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests_three_methods.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>Mark Methods Private When You Don’t Test Them</strong><br/>
  Notice I didn’t bother writing a test for sorted_by_name. I know it works because my other tests still pass. The existing tests are sufficient; I am testing sorted_by_name indirectly. Because I extracted sorted_by_name from first and rest, because I refactored my code without adding any new behavior, no new test were required.
</p>




<p>
  In this scenario, take the time to mark the new, untested method as private:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  sorted_by_name(list).first
end</p>

<p>def rest(list)
  _, *rest = sorted_by_name(list)
  rest
end</p>

<p>private
def sorted_by_name(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the element with the first name&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end</p>

<p>it &ldquo;returns the rest after the first name&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  The private keyword here reminds me I’ve already tested sorted_by_name, that I don’t need to write new tests for it. Now private is helping me organize my code; it’s helping me remember which methods I don’t need to test… and which methods are missing important tests.
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests_three_methods_private.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  f my tests don’t need to know about sorted_by_name, then certainly other developers don’t. It should be private. Marking it private reminds me that it is being tested indirectly, that I didn’t just forget to write a test for it. Marking it private tells other developers about what I’ve learned from my own test suite.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Message Queue in Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/21/use-message-queue-in-rails/"/>
    <updated>2015-06-21T10:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/21/use-message-queue-in-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/message_queue .png" width="400" alt="Use Message Queue in Rails" />
</p>




<p>
  This article describes the application architecture pattern which is (in general) nothing new, but (from my experience) rarely applied in the Rails world. I’m talking about the nice and simple abstraction – message queue. But let me start by describing the goals I want to achieve and some alternative solutions.
</p>




<h3>
  Goals
</h3>




<p>
  <strong>Split</strong> application into a few smaller applications<br/>
  Smaller applications are easier to reason about. You don’t have to go through 50 classes, you can just read 10, because it’s all you’ve got. When a new developer joins the team he has nice onboarding if you can tell him: “hey, start with this small piece of code, everything you need to know to implement this new feature is encapsulated here”.
</p>




<p>
  <strong>Separate</strong> code for concepts which are not logically connected<br/>
  Smaller applications are easier to reason about. You don’t have to go through 50 classes, you can just read 10, because it’s all you’ve got. When a new developer joins the team he has nice onboarding if you can tell him: "hey, start with this small piece of code, everything you need to know to implement this new feature is encapsulated here".
</p>




<p>
  Use <strong>new</strong> languages and frameworks<br/>
  We, developers, want to try and learn new languages, libraries, frameworks and technologies. If you make a small application with a shiny new tool and fail – the consequences are less severe, because you can quickly rewrite this small application. If you are going to make one big application, you will think twice before introducing a new tool. So, in some way, smaller applications minimize the risk.
</p>




<h3>
  Solution1 - One database, multiple apps
</h3>




<p>
  This is the very first idea which may come to your mind – just point multiple applications to the one shared database. Been there, done that, won’t do that again! Data is associated with validation logic. Either you duplicate this logic in every app or you extract it to Rails engine gem. Both solutions are hard to maintain (think about running migrations…) and you still have strong coupling in your system.
</p>




<p>
  One case when this approach may work – one read-write app and many read-only apps, but I haven’t tried it.
</p>




<h3>
  Solution2 - Expose REST API
</h3>




<p>
  As Rails devs we are pretty familiar with REST, so we can expose REST API in one of our apps and call this API in the other. This approach has many solid use cases so here I’m just listing some weak points to take into consideration:
</p>




<p>
  - Usually requests in Ruby are blocking – calling app has to wait for the response even if it’s not interested in it.<br/>
  - Requires authentication – we have to somehow ensure that our internal API is not used… well, externally.<br/>
  - Everything happens in server process – if you are calling your internal API you may end up using the same server process which is used for handling requests of your “real users”. You would like to give your “real users” priority.<br/>
  - Calling app has knowledge about receiving app – you have to know which endpoints should be called and which parameters be passed. This introduces coupling.<br/>
</p>




<h3>
  Solution3 - Message queue
</h3>




<p>
  Message queue is a really nice abstraction. Publisher just leaves messages at one end of the "pipe", consumer reads messages from the other end of the "pipe". It is asynchronous, because publisher does not wait for his message to be processed. Moreover, it decouples publisher from consumer, because publisher does not care what happens with his message and who will read it.
</p>




<p>
  This architecture is also resistant to outages, at least when we assume that the queue service rarely breaks. If the consumer is not processing messages, nothing prevents publisher from adding more of them to the queue. When consumer starts to function again, it will process messages from the buffer (if they didn’t take all of your memory).
</p>




<h3>
  When it shines?
</h3>




<p>
  Message queue is really useful if we have some processing which happens out of the main business flow and the main business flow does not have to wait for the results of this processing. The most common example is custom event tracking – own analytics module. We just publish an event and continue execution without slowing anything down.
</p>




<h3>
  RabbitMQ
</h3>




<p>
  RabbitMQ is a popular choice for message queue service, especially in Rails world. Honestly, I haven’t tried different implementations, because RabbitMQ really has everything I need.
</p>




<p>
  There are Ruby gems for communicating with RabbitMQ and it’s also easy to install and configure.
</p>




<p>
  <img src="http://geekhmer.github.io/images/rabbitmq_concepts.png" width="400" alt="Use Message Queue in Rails" />
</p>




<p>
  In this diagram there are presented some concepts introduced by RabbitMQ. Publisher leaves messages in the exchange. Then they are routed from the exchange to multiple queues. There are many routing algorithms available – <a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges" target="_blank">https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges</a>
</p>




<p>
  Workers grab messages from queue. If there are multiple workers connected to one queue, they will be load balanced and the message will be delivered only to one of them.
</p>




<h3>
  Easy case
</h3>




<p>
  If you feel overwhelmed – don’t worry. Here is what you should start with:
</p>




<p>
  <img src="http://geekhmer.github.io/images/rabbitmq_easy_case.png" width="400" alt="Use Message Queue in Rails" />
</p>




<h3>
  Publishing
</h3>




<p>
  Now it’s time for some code. It’s really simple, because integration with RabbitMQ is simple. We will use two gems – <code>bunny</code> and <code>sneakers</code>.
</p>


<p>{% codeblock lang:ruby %}</p>

<h1>Gemfile</h1>

<p>gem &lsquo;bunny&rsquo;</p>

<h1>an initializer</h1>

<p>connection = Bunny.new(host: &lsquo;localhost&rsquo;)
connection.start
channel = connection.create_channel</p>

<h1>a service</h1>

<p>class RabbitPublisher</p>

<p>  def initialize(channel)</p>

<pre><code>self.channel = channel
</code></pre>

<p>  end</p>

<p>  def publish(exchange_name, message)</p>

<pre><code>exchange = channel.fanout(exchange_name, durable: true)
exchange.publish(message.to_json)
</code></pre>

<p>  end</p>

<p>  private
  attr_accessor :channel
end
{% endcodeblock %}</p>

<h3>
  Receiving
</h3>


<p>{% codeblock lang:ruby %}</p>

<h1>Gemfile</h1>

<p>gem &lsquo;sneakers&rsquo;</p>

<h1>an initializer</h1>

<p>Sneakers.configure  daemonize: true,</p>

<pre><code>                amqp: "amqp://localhost",
                log: "log/sneakers.log",
                pid_path: "tmp/pids/sneakers.pid",
                threads: 1,
                workers: 1
</code></pre>

<h1>app/workers/events_worker.rb</h1>

<p>class EventsWorker
  include Sneakers::Worker
  from_queue &ldquo;events&rdquo;, env: nil</p>

<p>  def work(raw_event)</p>

<pre><code>event_params = JSON.parse(raw_event)
SomeWiseService.build.call(event_params)
ack!
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  For details refer to documentation of <a href="https://github.com/ruby-amqp/bunny" target="_blank">bunny</a> and <a href="https://github.com/jondot/sneakers" target="_blank">sneakers</a>.
</p>




<p>
  If you enjoyed this article you can consider ping me for more details.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/19/ajax-on-rails/"/>
    <updated>2015-06-19T11:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/19/ajax-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ajax_on_rails.png" width="400" alt="Ajax on Rails" />
</p>




<p>
  This is a tutorial for ajax use with Rails conventions. For illustrative purposes, we’ll build a single-page Product list app.
</p>




<p>
  <strong>About Ajax</strong><br/>
  Ajax (Asynchronous JavaScript and XML) is used as a mechanism for sending and retrieving data asynchronously (in the background). While XML can certainly be used with ajax, it is not limited to this format. The JSON format, for example, is more commonly used today, especially in the Rails community. There are significant advantages in using Ajax, which include better user interactivity. Ajax allows content on a page to be updated without having to re-render the entire page, making it a "seamless" experience.
</p>




<p>
  <strong>Create a New Product on the Index Page</strong><br/>
  Before we start, let’s take a quick look at our schema so that we know what we’re working with:
</p>


<p>{% codeblock lang:ruby %}
ActiveRecord::Schema.define(version: 20140620130316) do
  create_table &ldquo;products&rdquo;, force: true do |t|</p>

<pre><code>t.datetime "created_at",  null: false
t.datetime "updated_at",  null: false
t.string   "name",        null: false
t.string   "description", null: false
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  After creating a Product model and then create some products to play with, our Product Controller should look like this:
</p>


<p>{% codeblock products_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  def index</p>

<pre><code>@products = Product.all
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Instead of creating <code>new.html.erb</code>, let’s add a button somewhere on our <code>index.html.erb</code> that users can use to display a hidden form:
</p>


<p>{% codeblock index.html.erb lang:ruby %}
&hellip;</p>

<p>&lt;%= link_to &lsquo;New Product&rsquo;, new_product_path, remote: true %></p>

<p>&hellip;
{% endcodeblock %}</p>

<p>
  Here we pass the <code>remote: true</code> option to disable the default Rails mechanism that would have otherwise navigated us to <code>/products/new</code>.
</p>




<p>
  Before moving on, let’s quickly revisit our Product Controller and set it up to create new products with ajax:
</p>


<p>{% codeblock products_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  before_action :all_product, only: [:index, :create]</p>

<p>  # index action has been removed</p>

<p>  def new</p>

<pre><code>@product = Product.new
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@product  = Product.create(product_params)
</code></pre>

<p>  end</p>

<p>  private
  def all_products</p>

<pre><code>@products = Product.all
</code></pre>

<p>  end</p>

<p>  def product_params</p>

<pre><code>params.require(:product).permit(:name, :description)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  I have removed the index action because I created a <code>before_action</code> filter that creates the <code>@products</code> instance variable for us automatically. Because we no longer have any logic in our index action, it is not necessary. Rails will automatically render the correct template, even without the presence of the action.
</p>




<p>
  Noteworthy here is the <code>respond_to</code> method invoked near the top that will allow us to render both html and javascript responses with all of our controller actions. The respond_to method provides the ability to respond to the requests with many formats(i.e. csv, xml, etc…). This can be done for one or all actions in a controller. If we wanted to provide json only in our index action, we would write something like this:
</p>


<p>{% codeblock lang:ruby %}
def index
  @products = Product.all</p>

<p>  respond_to do |format|</p>

<pre><code>format.html
format.json
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Now, choose a place on the index page to hide your form by passing a style attribute with the following:
</p>


<p>{% codeblock index.html.erb lang:ruby %}
&hellip;</p>

<div id="product-form" style="display:none;"></div>


<p>&hellip;
{% endcodeblock %}</p>

<p>
  which will hide our form when the page is initially visited.
</p>




<p>
  Next, create <code>new.js.erb</code>:
</p>


<p>{% codeblock new.js.erb lang:ruby %}
$(&lsquo;#product-form&rsquo;).html(&ldquo;&lt;%= j (render &lsquo;form&rsquo;) %>&rdquo;);
$(&lsquo;#product-form&rsquo;).slideDown(350);
{% endcodeblock %}</p>

<p>
  This is just an ERB template that generates Javascript instead of the HTML we’re used to. It basically translates to: "Find the element with an id attribute of product-form and at that point render the html in the form partial." We typically do this in <code>new.html.erb</code> with:
</p>


<p>{% codeblock new.html.erb lang:ruby %}
&lt;%= render &lsquo;form&rsquo; %>
{% endcodeblock %}</p>

<p><p>
  Since render is a Rails method, JavaScript doesn’t understand it and it has to be interpreted with ERB. The &lsquo;j&rsquo; is syntactic sugar for <code>&lt;%= escape_javascript (render &lsquo;form&rsquo;) %></code>
</p></p>

<p>{% codeblock _form.html.erb lang:ruby %}
&lt;%= simple_form_for @product, remote: true do |f| %>
  &lt;%= f.input  :description %>
  &lt;%= f.input  :deadline %>
  &lt;%= f.button :submit %>
&lt;% end %>
{% endcodeblock %}</p>

<p><p>
  This is the &lsquo;form&rsquo; being rendered in <code>new.js.erb</code> with a <code>remote: true</code> option being passed in. In our form partial, we also pass the <code>remote: true</code> option that will execute an ajax POST request.
</p></p>

<p><p>
  Finally, we can wrap things up by rendering our new Product list and hiding our form. This final step includes identifying where to render our list. Using the rai-jax app as an example, let’s look at what our final <code>index.html.erb</code> should look like at this stage:
</p></p>

<p>{% codeblock index.html.erb lang:ruby %}
<div class="row">
  <div class="col-md-5 col-md-offset-1"></p>

<pre><code>&lt;h2&gt;Products&lt;/h2&gt;
</code></pre>

<p>  </div></p>

<p>  <div class="col-md-2 col-md-offset-4"></p>

<pre><code>&lt;%= link_to new_product_path, remote: true do %&gt;
  &lt;button class="btn btn-default"&gt;New&lt;/button&gt;
&lt;% end %&gt;
</code></pre>

<p>  </div>
</div></p>

<p><div class="row">
  <div class="col-md-6 col-md-offset-2" id="product-form" style="display:none;"></div>
</div></p>

<p><div class="row">
  <div class="col-md-7 col-md-offset-1" id="products">&lt;%= render @products %></div>
</div>
{% endcodeblock %}</p>

<p><p>
  And we update our product list and hide our form with <code>create.js.erb</code>:
</p></p>

<p>{% codeblock create.js.erb lang:ruby %}
$(&lsquo;#products&rsquo;).html(&ldquo;&lt;%= j (render @products) %>&rdquo;);
$(&lsquo;#product-form&rsquo;).slideUp(350);
{% endcodeblock %}</p>

<p><p>
  <strong>Update a Product on the Index Page</strong><br/>
  As in Part One, let’s start by visiting our Product Controller and setting it up for updates:
</p></p>

<p>{% codeblock products_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  before_action :all_products, only: [:index, :create, :update]
  before_action :set_products, only: [:edit, :update]</p>

<p>  &hellip;</p>

<p>  def update</p>

<pre><code>@product.update_attributes(product_params)
</code></pre>

<p>  end</p>

<p>  &hellip;</p>

<p>  private
  &hellip;</p>

<p>  def set_products</p>

<pre><code>@product = Product.find(params[:id])
</code></pre>

<p>  end</p>

<p>  def product_params</p>

<pre><code>params.require(:product).permit(:name, :description)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p><p>
  Similar to Part One, we add an edit button with a <code>remote:</code> true option:
</p></p>

<p>{% codeblock _product.html.erb lang:ruby %}
&hellip;</p>

<p>  &lt;%= link_to edit_product_path(product), remote: true do %></p>

<pre><code>&lt;button&gt;Edit&lt;/button&gt;
</code></pre>

<p>  &lt;% end %></p>

<p>&hellip;
{% endcodeblock %}</p>

<p><p>
  And, finally, our <code>edit.js.erb</code> and <code>update.js.erb</code> are the same as our new and update templates: <code>edit.js.erb</code> corresponds to <code>new.js.erb</code> and <code>create.js.erb</code> corresponds to <code>update.js.erb</code>.
</p></p>

<p><p>
  <strong>Delete a Product on the Index Page</strong><br/>
  Our final updates to our Product Controller involves us providing the destroy action:
</p></p>

<p>{% codeblock product_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  before_action :all_products, only: [:index, :create, :update, :destroy]
  before_action :set_products, only: [:edit, :update, :destroy]</p>

<p>  &hellip;</p>

<p>  def destroy</p>

<pre><code>@product.destroy
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p><p>
  When adding our delete button, two additional steps are required:
</p></p>

<p>{% codeblock _product.html.erb lang:ruby %}
&hellip;</p>

<p>&lt;%= link_to product, remote: true, method: :delete,  data: { confirm: &lsquo;Are you sure?&rsquo; } do %>
  <button>Delete!</button>
&lt;% end %></p>

<p>&hellip;
{% endcodeblock %}</p>

<p><p>
  First, we pass in a <code>method: :delete</code> option; Second, we provide a courtesy confirmation to the user making sure they don’t delete anything by accident.
</p></p>

<p><p>
  The last file we’ll create is <code>destroy.js.erb</code> and it will contain one line:
</p></p>

<p>{% codeblock destroy.js.erb lang:ruby %}
$(&lsquo;#products&rsquo;).html(&ldquo;&lt;%= j (render @products) %>&rdquo;);
{% endcodeblock %}</p>

<p><p>
  Seriously, Rails makes ajax easy. As I mentioned above.
</p></p>

<p><p>
  So far so good, That&rsquo;s it!!! See ya!!! :)
</p></p>
]]></content>
  </entry>
  
</feed>
