<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-02-09T22:27:42+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails connect to Multiple Databases And Migrations]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/07/ruby-on-rails-connect-to-multiple-databases-and-migrations/"/>
    <updated>2015-02-07T23:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/07/ruby-on-rails-connect-to-multiple-databases-and-migrations</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails connect to Multiple Databases And Migrations" />
</p>




<p>
  Ruby on Rails connect to Multiple Databases and using ActiveRecord with multiple databases, it’s really simple take it easy. Let’s run through this.
</p>




<p>
  <strong>Rake Tasks</strong><br/>
   Well, I want to handle migrations for two databases, so I need two separate Rake tasks to handle that:
</p>


<p>{% codeblock lang:ruby %}
desc &ldquo;Migrate the database through scripts in db/migrate directory.&rdquo;</p>

<p>namespace :db do
  task :migrate do</p>

<pre><code>Rake::Task["db:migrate_db1"].invoke
Rake::Task["db:migrate_db2"].invoke
</code></pre>

<p>  end</p>

<p>  task :migrate_db1 do</p>

<pre><code>ActiveRecord::Base.establish_connection DB1_CONF
ActiveRecord::Migrator.migrate("db/migrate/db1/")
</code></pre>

<p>  end</p>

<p>  task :migrate_db2 do</p>

<pre><code>ActiveRecord::Base.establish_connection DB2_CONF
ActiveRecord::Migrator.migrate("db/migrate/db2/")
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  My first task is <code>db:migrate</code> that delegates out to <code>db:migrate_db1</code> & <code>db:migrate_db2</code>.
</p>




<p>
  Each of those establish a connection to the database and then runs the migrations from their own separate folders. This allows you to store migrations in separate folders so you can easily manage them.
</p>




<p>
  The migrations are exactly the same as normal.
</p>




<p>
  <strong>Database Connections</strong><br/>
  In order to get those migrations to work, I need to configure the database connections. I'm going to define everything in the <code>database.yml</code> just like normal, but with a different naming convention:
</p>


<p>{% codeblock database.yml lang:ruby %}
defaults: &amp;defaults
  username: root
  password: 1234567
  adapter: mysql2
  encoding: utf8
  collation: utf8_unicode_ci</p>

<p>db1:
  development:</p>

<pre><code>database: db1_development
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>  test:</p>

<pre><code>database: db1_test
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>  staging:</p>

<pre><code>database: db1_staging
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>  production:</p>

<pre><code>database: db1_production
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>db2:
  development:</p>

<pre><code>database: db2_development
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>  test:</p>

<pre><code>database: db2_test
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>  staging:</p>

<pre><code>database: db2_staging
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>  production:</p>

<pre><code>database: db2_production
host: localhost
&lt;&lt;: *defaults
</code></pre>

<p>{% endcodeblock %}</p>

<p>
  I configure two separate databases db1 & db2.
</p>




<p>
  Then I need to configure the app to load these now. I open <code>application.rb</code> or environment file(s):
</p>


<p>{% codeblock application.rb lang:ruby %}
ENV[&lsquo;ENV&rsquo;] ||= &lsquo;development&rsquo;</p>

<p>db_conf = YAML::load(File.open(File.join(APP_PATH,&lsquo;config&rsquo;,&lsquo;database.yml&rsquo;)))</p>

<p>DB1_CONF = db_conf[&ldquo;db1&rdquo;][ENV[&lsquo;ENV&rsquo;]]
DB2_CONF = db_conf[&ldquo;db2&rdquo;][ENV[&lsquo;ENV&rsquo;]]
{% endcodeblock %}</p>

<p>
  Take a look at what's going on:<br/>
  - I set the database configuration to use. You can just use Rails.env here instead of ENV['ENV'].<br/>
  - I load up the database.yml config and parse it with YAML.<br/>
  - I grab the configuration from the file for each db and the correct environment that I'm running in.<br/>
</p>




<p>
  <strong>Connecting Models</strong><br/>
  When I'm working with multiple databases, I like to explicitly setup the connections inside the models themselves instead of inheriting from ActiveRecord::Base and using subclasses.
</p>


<p>{% codeblock user.rb lang:ruby %}
class User &lt; ActiveRecord::Base
  establish_connection DB1_CONF
end
{% endcodeblock %}</p>

<p>{% codeblock product.rb lang:ruby %}
class Product &lt; ActiveRecord::Base
  establish_connection DB2_CONF
end
{% endcodeblock %}</p>

<p>
  Well, All you really need to do is load the configurations, establish the database connections, and setup the migrations to load from a specific directory for each database.
</p>




<p>
  So far so good, See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Develop Your Own Gem and Gemify Your Own Assets Using Rails Engine]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/02/develop-your-own-gem-and-gemify-your-own-assets-using-rails-engine/"/>
    <updated>2015-01-02T23:32:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/02/develop-your-own-gem-and-gemify-your-own-assets-using-rails-engine</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rubygems_logo.png" alt="Develop Your Own Gem and Gemify Your Own Assets Using Rails Engine" />
</p>




<p>
  The Rails asset pipeline, powered by sprockets, compiles (sass, coffeescript, others), aggregates (combines multiple source files into one file for performance purposes), and post-processes (minimization, gzip’ing) your assets. And which make it easy to include versioned external assets as application dependencies as well.
</p>




<p>
  External assets are made available in Rails via Rails engines. When the engine is loaded into your Rails application, the engine's asset paths are added to your application's load paths. This makes them available for require in your manifest files. An asset gem is just an absurdly simple engine.
</p>




<p>
  You will find almost any JS or CSS library you want, already Gemified, but, if it is not the case, you can Gemify those libraries by your own, and I can help you with it. So, let's do it!
</p>




<p>
  <strong>Create a bare-bones Gem:</strong><br/>
  Bundler makes it simple to create the files and directories necessary for creating a gem. Run the following command to create and initialize a Git repository along with several template files for the gem:
</p>


<p>{% codeblock lang:ruby %}
bundle gem timeago-rails
{% endcodeblock %}</p>

<p>
  This command will create basically the following tree:
</p>


<p>{% codeblock lang:ruby %}
├── Gemfile
├── lib
│   ├── timeago
│   │   └── rails
│   │           └── version.rb
│   └── rails.rb
├── LICENSE.txt
├── Rakefile
├── README.md
└── timeago-rails.gemspec
{% endcodeblock %}</p>

<p>
  <strong>Versioning</strong><br/>
  timeago-rails is a gem packaged version of the timeago.js library. Its version should track the version of JavaScript library. Open /lib/timeago/rails/version.rb and set the version:
</p>


<p>{% codeblock version.rb lang:ruby %}
module Timeago
  module Rails</p>

<pre><code>VERSION = "1.4.1"
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  <strong>Turn the Gem into an Engine</strong><br/>
  Bundler created the gem as a standard Ruby module, but we want it to be a Rails Engine.
</p>


<p>{% codeblock rails.rb lang:ruby %}
require &ldquo;timeago/rails/version&rdquo;</p>

<p>module Timeago
  module Rails</p>

<pre><code>class Engine &lt; ::Rails::Engine
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Well, the module is empty. All we're doing here is declaring the gem as a Rails Engine. This will cause Rails to add its directories to the load path when the Gem is required.
</p>




<p>
  <strong>Add the Assets (Javascript library, CSS, Image) in the Gem</strong><br/>
  We're going to create the directory /vendor/images/, /vendor/javascripts/, vendor/stylesheets/ and place the source for the timeago.js plugin there:
</p>


<p>{% codeblock lang:ruby %}
├── Gemfile
├── lib
│   ├── timeago
│   │   └── rails
│   │           └── version.rb
│   └── rails.rb
├── LICENSE.txt
├── Rakefile
├── README.md
├── timeago-rails.gemspec
└── vendor</p>

<pre><code>     └── assets
              ├── images
              ├── javascripts                
              │             └── timeago.js
              └── stylesheets
</code></pre>

<p>{% endcodeblock %}</p>

<p>
  <strong>Test</strong><br/>
  Moving to a sample Rails application, we can include the gem in our host application by adding it to the Gemfile using the path option:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &ldquo;timeago-rails&rdquo;, path: &ldquo;../timeago-rails&rdquo;
{% endcodeblock %}</p>

<p>
  Since we included an asset that needs to be included in the Rails assets, we have to take one more step and instruct the user to add the following to their app/assets/javascripts/application.js file:
</p>


<p>{% codeblock application.js lang:ruby %}
//= require timeago-rails
{% endcodeblock %}</p>

<p>
  This directive actually refers to the app/assets/javascripts/timeago.js file we included in our gem.
</p>




<p>
  Type command below to make sure timeago.js is included in sample Rails application:
</p>


<p>{% codeblock lang:ruby %}
curl <a href="http://localhost:3000/assets/timeago.js">http://localhost:3000/assets/timeago.js</a>
{% endcodeblock %}</p>

<p>
  The curl command should return the contents of the timeago.js file if everything is correctly.
</p>




<p>
  <strong>README.md</strong><br/>
  Make a simple readme file with the Gem as documentation.
</p>




<p>
  <strong>Push to GitHub & RubyGems</strong><br/>
  Create a GitHub repository for the Gem, stage all of your commits, commit, and push the code to GitHub.
</p>




<p>
  If you've never published a gem on RubyGems before, you'll need to sign up for an account there. Your account settings will contain an API key that should be copied to ~/.gem/credentials.
</p>




<p>
  Publishing your gem is as simple as:
</p>


<p>{% codeblock lang:ruby %}
rake release
{% endcodeblock %}</p>

<p>
  So far so good, hope you enjoyed the article. see ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Ruby on Rails Application to a Ubuntu Server]]></title>
    <link href="http://geekhmer.github.io/blog/2015/01/01/deploy-ruby-on-rails-application-to-a-ubuntu-server/"/>
    <updated>2015-01-01T00:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/01/01/deploy-ruby-on-rails-application-to-a-ubuntu-server</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Tools for Monitoring Performance in Ruby on Rails Application" />
</p>




<p>
  Assumes you have Ruby on Rails application already.
</p>




<p>
  <strong>Setup Ruby Version, Unicorn and Capistrano</strong><br/>
  Specifiy a ruby version for your app by creating a new file in the root of your app called ".ruby-version" that includes:
</p>


<p>{% codeblock .ruby-version lang:ruby %}
2.1.4
{% endcodeblock %}</p>

<p>
  Make the following changes to the Gemfile:
</p>


<p>{% codeblock Gemfile lang:ruby %}
ruby &lsquo;2.1.4&rsquo;</p>

<p>gem &lsquo;unicorn&rsquo;
gem &lsquo;capistrano-rails&rsquo;, group: :development
{% endcodeblock %}</p>

<p>
  Type command below to install gems:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Type command below to install binstubs for capistrano:
</p>


<p>{% codeblock lang:ruby %}
bundle binstubs capistrano
{% endcodeblock %}</p>

<p>
  <strong>Configure Capistrano</strong><br/>
  Type command below to initialize capistrano:
</p>


<p>{% codeblock lang:ruby %}
bin/cap install
{% endcodeblock %}</p>

<p>
  Add the following below require 'capistrano/deploy' in the Capfile in the root of your app:
</p>


<p>{% codeblock Capfile lang:ruby %}
require &lsquo;capistrano/rails&rsquo;
{% endcodeblock %}</p>

<p>
  Add or Replace this configuration in config/deploy.rb file:
</p>


<p>{% codeblock deploy.rb lang:ruby %}
set :application, &lsquo;myapp&rsquo;
set :repo_url, &lsquo;git@github.com:bunlong/myapp.git&rsquo;
set :deploy_to, &lsquo;/opt/www/myapp&rsquo;
set :user, &lsquo;deploy&rsquo;
set :linked_dirs, %w{log tmp/pids tmp/cache tmp/sockets}</p>

<p>namespace :deploy do
  %w[start stop restart].each do |command|</p>

<pre><code>desc 'Manage Unicorn'

task command do
  on roles(:app), in: :sequence, wait: 1 do
    execute "/etc/init.d/unicorn_#{fetch(:application)} #{command}"
  end
end
</code></pre>

<p>  end</p>

<p>  after :publishing, :restart
end
{% endcodeblock %}</p>

<p>
  After the configuration in /config/deploy/production.rb with your server ip or domain name:
</p>


<p>{% codeblock production.rb lang:ruby %}
role :app, %w{<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#58;&#x64;&#x65;&#112;&#108;&#x6f;&#121;&#x40;&#48;&#x2e;&#x30;&#46;&#x30;&#46;&#48;">&#x64;&#x65;&#112;&#108;&#x6f;&#x79;&#64;&#x30;&#x2e;&#48;&#x2e;&#x30;&#46;&#48;</a>}
role :web, %w{<a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#100;&#x65;&#112;&#108;&#111;&#x79;&#64;&#x30;&#x2e;&#48;&#x2e;&#48;&#46;&#x30;">&#x64;&#x65;&#x70;&#x6c;&#x6f;&#x79;&#64;&#48;&#x2e;&#x30;&#x2e;&#x30;&#x2e;&#x30;</a>}
role :db,  %w{<a href="&#109;&#97;&#x69;&#108;&#x74;&#x6f;&#58;&#x64;&#101;&#112;&#x6c;&#x6f;&#x79;&#64;&#48;&#x2e;&#x30;&#x2e;&#x30;&#x2e;&#48;">&#100;&#101;&#x70;&#108;&#111;&#121;&#x40;&#x30;&#x2e;&#48;&#x2e;&#48;&#46;&#x30;</a>}
{% endcodeblock %}</p>

<p>
  <strong>Configure Unicorn</strong><br/>
  Create a new file config/unicorn.rb with the following contents:
</p>


<p>{% codeblock unicorn.rb lang:ruby %}
root = &ldquo;/opt/www/myapp/current&rdquo;
working_directory root
pid &ldquo;#{root}/tmp/pids/unicorn.pid&rdquo;
stderr_path &ldquo;#{root}/log/unicorn.log&rdquo;
stdout_path &ldquo;#{root}/log/unicorn.log&rdquo;</p>

<p>listen &ldquo;/tmp/unicorn.myapp.sock&rdquo;
worker_processes 1
timeout 30
{% endcodeblock %}</p>

<p>
  Comment out production username and password from config/database.yml:
</p>


<p>{% codeblock database.yml lang:ruby %}
production:
  &lt;&lt;: *default
  database: myapp_production
{% endcodeblock %}</p>

<p>
  Type command below to push changes to git:
</p>


<p>{% codeblock lang:ruby %}
git add .
git commit -m &lsquo;Added settings to deploy app&rsquo;
git push origin master
{% endcodeblock %}</p>

<p>
  Type command below to create a secret to be used on the server:
</p>


<p>{% codeblock lang:ruby %}
bin/rake secret
{% endcodeblock %}</p>

<p>
  On the server setup the secret by modify /home/deploy/.bashrc with the following contents:
</p>


<p>{% codeblock .bashrc lang:ruby %}
export SECRET_KEY_BASE=[REPLACE WITH YOUR SECRET]
{% endcodeblock %}</p>

<p>
  On the server restart nginx, type command below:
</p>


<p>{% codeblock lang:ruby %}
sudo service nginx restart
{% endcodeblock %}</p>

<p>
  <strong>Deploy</strong><br/>
  Type command below to make sure capistrano is connected to the server:
</p>


<p>{% codeblock lang:ruby %}
bin/cap production git:check
{% endcodeblock %}</p>

<p>
  Type command below to make sure can deploy or not:
</p>


<p>{% codeblock lang:ruby %}
bin/cap production deploy:check
{% endcodeblock %}</p>

<p>
  Type command below for deploying:
</p>


<p>{% codeblock lang:ruby %}
bin/cap production deploy
{% endcodeblock %}</p>

<p>
  If you need to run db:seed, log into server as the deploy user and run following:
</p>


<p>{% codeblock lang:ruby %}
cd /opt/www/myapp/current ; bin/rake RAILS_ENV=production db:seed
{% endcodeblock %}</p>

<p>
  If you are having problems, try running a console on the server, log in as deploy user and run the following:
</p>


<p>{% codeblock lang:ruby %}
cd /opt/www/myapp/current ; bin/rails c production
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using UUID as Primary Key in Ruby on Rails with MySQL Guide]]></title>
    <link href="http://geekhmer.github.io/blog/2014/12/06/using-uuid-as-primary-key-in-ruby-on-rails-with-mysql-guide/"/>
    <updated>2014-12-06T22:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/12/06/using-uuid-as-primary-key-in-ruby-on-rails-with-mysql-guide</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails MySQL UUID Primary Key Guide" />
</p>




<p>
  A UUID (universally unique identifier) is an identifier standard used in software construction. A UUID is simply a 128-bit value. The meaning of each bit is defined by any of several variants.
</p>




<p>
  For human-readable display, many systems use a canonical format using hexadecimal text with inserted hyphen characters. For example: de305d54-75b4-431b-adb2-eb6b9e546013.
</p>




<p>
  The intent of UUIDs is to enable distributed systems to uniquely identify information without significant central coordination.
</p>




<p>
  <strong>Installation</strong><br/>
  To use UUID as Primary Key you need to add uuidtools gem to your app's Gemfile:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;uuidtools&rsquo;
{% endcodeblock %}</p>

<p>
  <strong>Setting up UUID as Primary Key</strong><br/>
  To set UUID as Primary Key, you need to set id to false and the new UUID column as Primary Key in migration file:
</p>


<p>{% codeblock *_create_products.rb lang:ruby %}
class CreateProducts &lt; ActiveRecord::Migration
  def change</p>

<pre><code>create_table :products, id: false do |t|
  t.string :uuid, limit: 36, primary: true, null: false
  t.string :name, limit: 50, null: false

  t.timestamps
end
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  <strong>Inserting UUID Value into UUID Column</strong><br/>
  Create UUID helper library in app/lib directory:
</p>


<p>{% codeblock uuid_helper.rb lang:ruby %}
module UuidHelper
  def self.included(base)</p>

<pre><code>base.primary_key = 'uuid'
base.before_create :assign_uuid
</code></pre>

<p>  end</p>

<p>  private
  def assign_uuid</p>

<pre><code>self.uuid = UUIDTools::UUID.timestamp_create().to_s.upcase if uuid.blank?
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  And then include UuidHelper library in Model file:
</p>


<p>{% codeblock product.rb lang:ruby %}
class Product &lt; ActiveRecord::Base
  include UuidHelper
end
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add Progress Bar in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/14/add-progress-bar-in-ruby-on-rails-application/"/>
    <updated>2014-11-14T22:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/14/add-progress-bar-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/youtube_progress_bar.png" width="700" alt="Add Progress Bar in Ruby on Rails Application" />
</p>




<p>
  Okay, today I would like to show how to add progress bar in Ruby on Rails application. For add progress bar in Ruby on Rails application I use nprogress-rails ruby gem.
</p>




<p>
  <strong>Installation</strong><br/>
  Add nprogress-rails ruby gem to Gemfile:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;nprogress-rails&rsquo;
{% endcodeblock %}</p>

<p>
  And then open terminal type:
</p>


<p>{% codeblock lang:ruby %}
$ bundle
{% endcodeblock %}</p>

<p>
  <strong>Usage</strong><br/>
  Add the requires to the application.js:
</p>


<p>{% codeblock application.js lang:ruby %}
//= require nprogress
//= require nprogress-turbolinks
{% endcodeblock %}</p>

<p>
  Also, into the application.css.scss:
</p>


<p>{% codeblock application.css.scss lang:ruby %}
<em>= require nprogress
</em>= require nprogress-bootstrap
{% endcodeblock %}</p>

<p>
  And then, add NProgress.start(); to application.js for loading progress bar whenever you load each pages:
</p>


<p>{% codeblock application.js lang:ruby %}
$(document).ready(function() {
  NProgress.start();
});
{% endcodeblock %}</p>

<p>
  So far so good, let enjoy the progress bar in your application. Thank for reading :)
</p>

]]></content>
  </entry>
  
</feed>
