<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Websocket | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/websocket/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2016-04-06T14:29:32+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby websocket and real-time app tutorial]]></title>
    <link href="http://geekhmer.github.io/blog/2014/02/04/ruby-websocket-and-real-time-app-tutorial/"/>
    <updated>2014-02-04T21:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/02/04/ruby-websocket-and-real-time-app-tutorial</id>
    <content type="html"><![CDATA[<p>
  In this post I would like to present a small tutorial, I hope it will serve as a good introduction to web-socket api.
</p>




<p>
  <strong>Websocket Server</strong><br/>
  In the part we focus on server part. In ruby we use eventmachine, em-websocket gem to install websocket server.<br/>
  To install eventmachine run <code>gem install eventmachine</code><br/>
  To install em-websocket run <code>gem install em-websocket</code><br/>
  Make a file server.rb and implement codes below:
</p>


<p>{% codeblock server.rb lang:ruby %}
require &lsquo;eventmachine&rsquo;
require &lsquo;em-websocket&rsquo;</p>

<p>EventMachine.run {
  EventMachine::WebSocket.start(:host => &ldquo;0.0.0.0&rdquo;, :port => 8080) do |ws|</p>

<pre><code>ws.onopen {
  puts "WebSocket connection open"
}

ws.onmessage { |msg|
  puts msg
  ws.send(msg)
}

ws.onclose {
  puts "WebSocket connection closed"
}
</code></pre>

<p>  end
}
{% endcodeblock %}</p>

<p>
  What the code does is creates a websocket-server which listens at localhost:8080. Callbacks have been provided for open and close events, so when a client creates a connection or a connection gets closed the associated callbacks print an appropriate message to the terminal. And callbacks have been provided for message event when a client send the message.<br/><br/>
  To run websocket server run <code>ruby sever.rb</code>
</p>




<p>
  <strong>Websocket Client</strong><br/>
  So far, so good. But the main purpose of a websocket server is to get the message from client and relay data to the client. How do we do that? Turns out that is pretty simple too.<br/>
  Make a file index.html and implement codes below:
</p>


<p>{% codeblock index.html lang:html %}
<html>
<head>
  <title>Websocket GeeKhmer</title>
  <script type="text/javascript"></p>

<pre><code>var ws = null;
function init() {
  ws = new WebSocket("ws://localhost:8080");
  ws.onopen = function() {
    console.log("Connection is opened");
  }

  ws.onclose = function() {
    console.log("Connection is closed");
  }

  ws.onmessage = function(msg) {
    document.getElementById("display").innerHTML = msg.data;
  }
}

function send() {
  ws.send(document.getElementById("txt").value);
}
</code></pre>

<p>  </script>
</head>
<body onload="init();">
  <h2>WebSocket GeeKhmer</h2>
  <input type="text" id="txt">
  <input type="button" onclick="send();" value="Send">
  <p id="display"></p>
</body>
</html>
{% endcodeblock %}</p>

<p>
  Feel free to provide your suggestions and to point out errors.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Websocket?]]></title>
    <link href="http://geekhmer.github.io/blog/2014/01/31/what-is-websocket/"/>
    <updated>2014-01-31T13:05:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/01/31/what-is-websocket</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/websocket_ajax_.gif" /><br/>
  WebSocket is a new standard for realtime communication for the Web & Mobile apps.
</p>




<p>
  <strong>Websocket Benefit</strong><br/>
  - Websocket enables the server to push data to the connected clients.<br/>
  - Reduce unnecessary network traffic and latency using full-duplex through a single connection (instead of two).<br/>
  - Streaming through proxies and firewalls, supporting simultaneously upstream and downstream communication.<br/>
  - Backward compatible with the pre-WebSocket world by switching from an HTTP connection to WebSockets.
</p>




<p>
  <strong>Apps that should use Websocket</strong><br/>
  - Multi-User Apps.<br/>
  - Real-Time Apps.<br/>
  - Apps where live data is needed, like a stock market app...
</p>




<p>
  <strong>Websocket Client</strong><br/>
  On web, websocket support in browsers such as Google Chrome, Firefox, Opera.<br/>
  On mobile, websocket support in iOS & Android.<br/>
  Websocket client on Web use javascript for requesting to Websocket Server. Let try <a href="http://www.w3schools.com/html/html5_webworkers.asp" target="_blank">w3schools</a>, <a href="http://www.tutorialspoint.com/html5/html5_websocket.htm" target="_blank">tutorialspoint</a>
</p>




<p>
  <strong>Websocket Server</strong><br/>
  On Server, websocket support in Ruby, Java, Objective-C, PHP, .NET, node.js, ActionScript and many other languages. Let try <a href="https://github.com/igrigorik/em-websocket" target="_blank">Ruby</a>, <a href="https://github.com/Atmosphere/atmosphere" target="_blank">Java</a>, <a href="https://github.com/square/SocketRocket" target="_blank">Objective-C(iOS)</a>, <a href="https://github.com/hoaproject/Websocket" target="_blank">PHP</a>, <a href="http://xsockets.net/" target="_blank">.NET</a>, <a href="https://github.com/Worlize/WebSocket-Node" target="_blank">node.js</a>
</p>




<p>
  <strong>Processing</strong><br/><br/>
  <a class="fancybox" href="http://geekhmer.github.io/images/websocket_processing.png"><img src="http://geekhmer.github.io/images/websocket_processing.png" width="680" /></a>
</p>

]]></content>
  </entry>
  
</feed>
