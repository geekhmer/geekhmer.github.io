<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: testing | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2014-08-14T09:48:18+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What We Should Test with RSpec in Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/04/what-we-should-test-with-rspec-in-rails/"/>
    <updated>2014-08-04T22:27:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/04/what-we-should-test-with-rspec-in-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" />
</p>




<p>
  Well, what is takes to begin testing Rails applications. The hardest part of being a beginner is that you often don't know what you should test with RSpec in Rails.
</p>




<p>
  Here is the most important thing is that you are testing: Feature specs, Model specs, Controller specs, View specs, Route specs.
</p>




<p>
  <strong>Feature specs</strong><br/>
  Feature specs is a kind of acceptance test, the tests that walk through your entire application ensuring that each of the components work together.<br/>
  They are written from the perspective of a user clicking around the application and filling in forms on the page.<br/>
  While Feature specs are great for testing high level functionality, keep in mind that feature specs is slow to run.
</p>




<p>
  <strong>Model specs</strong><br/>
  Model specs are similar to unit tests in that they are used to test smaller parts of the system, such as classes or methods, and they interact with the database too.
</p>




<p>
  <strong>Controller specs</strong><br/>
  When testing multiple paths through a controller is necessary, we favor using controller specs over feature specs, as they are faster to run and often easier to write.
</p>




<p>
  <strong>View specs</strong><br/>
  View specs is great for testing the conditional display of information in the templates. Most developers forget about these tests and use feature specs instead.<br/>
  While you can cover each view conditional with a feature specs, I prefer to user view specs.
</p>




<p>
  <strong>Route specs</strong><br/>
  Most Ruby on Rails developers don’t test their routes, If you ever need to test an abstract base controller independently from any subclass, you will like need to add route specs for your testing.
</p>




<p>
  So far so good, this was just an overview of what we should get started testing Rails. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test Routes with RSpec in Ruby on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/07/30/test-routes-with-rspec-in-ruby-on-rails/"/>
    <updated>2014-07-30T22:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/07/30/test-routes-with-rspec-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  Most Ruby on Rails developers don’t test their routes, they focus on Model testing, Controller testing, Features or View testing, Helper testing, and try to catch every possible scenarios.<br/>I would like to show how to test route separately. 
</p>




<p>
  Sample routes.rb:
</p>


<p>{% codeblock routes.rb lang:ruby %}
resources :products
{% endcodeblock %}</p>

<p>
  Here is routes lists thats have been created:
</p>


<p>{% codeblock lang:ruby %}</p>

<pre><code> root        /                            products#index
posts GET    /products(.:format)          products#index
      POST   /products(.:format)          products#create
</code></pre>

<p> new_post GET    /products/new(.:format)      products#new
edit_post GET    /products/:id/edit(.:format) products#edit</p>

<pre><code> post GET    /products/:id(.:format)      products#show
      PUT    /products/:id(.:format)      products#update
      DELETE /products/:id(.:format)      products#destroy
</code></pre>

<p>{% endcodeblock %}</p>

<p>
  Testing for each routes in routing/products_routing_spec.rb:
</p>


<p>{% codeblock products_routing_spec.rb lang:ruby %}
require &lsquo;spec_helper&rsquo;</p>

<p>describe &ldquo;routing to products&rdquo; do
  it &ldquo;routes /products to products#index&rdquo; do</p>

<pre><code>expect(get: "/products").to route_to(
  controller: "products",
  action: "index"
)
</code></pre>

<p>  end</p>

<p>  it &ldquo;routes /products/1 to products#show&rdquo; do</p>

<pre><code>expect(get: "/products/1").to route_to(
  controller: "products",
  action: "show",
  id: "1"
)
</code></pre>

<p>  end</p>

<p>  it &ldquo;routes /products/new to products#new&rdquo; do</p>

<pre><code>expect(get: "/products/new").to route_to(
  controller: "products",
  action: "new"
)
</code></pre>

<p>  end</p>

<p>  it &ldquo;routes /products to products#create&rdquo; do</p>

<pre><code>expect(post: "/products").to route_to(
  controller: "products",
  action: "create"
)
</code></pre>

<p>  end</p>

<p>  it &ldquo;routes /products/1/edit to products#edit&rdquo; do</p>

<pre><code>expect(get: "/products/1/edit").to route_to(
  controller: "products",
  action: "edit",
  id: "1"
)
</code></pre>

<p>  end</p>

<p>  it &ldquo;routes /products/1 to products#update&rdquo; do</p>

<pre><code>expect(put: "/products/1").to route_to(
  controller: "products",
  action: "update",
  id: "1"
)
</code></pre>

<p>  end</p>

<p>  it &ldquo;routes /products/1 to products#destroy&rdquo; do</p>

<pre><code>expect(delete: "/products/1").to route_to(
  controller: "products",
  action: "destroy",
  id: "1"
)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Testing unroutable:
</p>


<p>{% codeblock routes.rb lang:ruby %}
resources :products, except: [:show]
{% endcodeblock %}</p>

<p>{% codeblock products_routing_spec.rb lang:ruby %}
it &ldquo;does not routes /products/1 to products#show&rdquo; do
  expect(:get => &ldquo;posts/1&rdquo;).not_to be_routable
end
{% endcodeblock %}</p>

<p>
  So far so good, Let enjoy the routes testing in your Ruby on Rails application. :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acceptance/Feature test, Integration test, Unit test, Smoke test, Regression test]]></title>
    <link href="http://geekhmer.github.io/blog/2013/10/14/acceptance-slash-feature-test-integration-test-unit-test-smoke-test-regression-test/"/>
    <updated>2013-10-14T21:12:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2013/10/14/acceptance-slash-feature-test-integration-test-unit-test-smoke-test-regression-test</id>
    <content type="html"><![CDATA[<p>
  <strong>1. What is Acceptance/Feature test?</strong><br/>
  Is the testing use to test the customer's specific scenarios when a user story has been correctly implemented. A story can have one or many acceptance tests, whatever it takes to ensure the functionality works.
</p>




<p>
  <strong>2. What is Integration test?</strong><br/>
  Is the testing use to expose defects in the interfaces and interaction between integrated components (modules).
</p>




<p>
  <strong>3. What is Unit test?</strong><br/>
   Also known as component testing, refers to tests that verify the functionality of a specific section of code, usually at the function level. In an object-oriented environment, this is usually at the class level.
   These types of tests is used to ensure that the specific function is working as expected. One function might have multiple tests.
</p>




<p>
  <strong>4. What is Smoke test?</strong><br/>
  Is the quick testing to make sure everything looks okay before you get involved in the more testing.
</p>




<p>
  <strong>5. What is Regression test?</strong><br/>
  Is the testing to make sure you haven't broken anything. Everything that used to work should still work.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test and Behaviour Driven Development (TDD/BDD)]]></title>
    <link href="http://geekhmer.github.io/blog/2013/10/12/test-and-behaviour-driven-development-tdd-slash-bdd/"/>
    <updated>2013-10-12T00:36:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2013/10/12/test-and-behaviour-driven-development-tdd-slash-bdd</id>
    <content type="html"><![CDATA[<p>
  <strong>1. What is TDD/BDD?</strong><br/>
  Express expected behaviour before writing code.
</p>




<p>
  <strong>2. Why is TDD/BDD a good thing?</strong><br/>
  - Enjoy more efficient and predictable course of development.<br/>
  - Find and fix bugs faster.<br/>
  - Prevent bugs from reappearing.<br/>
  - Improve the design of our software.<br/>
  - Reliable document.
</p>




<p>
  <strong>3. How do we do TDD/BDD?</strong><br/>
  - Write test programs.<br/>
  - Run the tests automatically.
</p>




<p>
  <strong>Workflow/Processing</strong>
</p>




<p> 
  TDD<br/>
  <a class="fancybox" href="http://geekhmer.github.io/images/tdd.png"><img src="http://geekhmer.github.io/images/tdd.png" /></a>
</p>




<p>
  BDD<br/>
  <a class="fancybox" href="http://geekhmer.github.io/images/tdd.png"><img src="http://geekhmer.github.io/images/bdd.png" /></a>
</p>

]]></content>
  </entry>
  
</feed>
