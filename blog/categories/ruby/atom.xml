<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-02-21T22:37:38+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Liquid Template Engine]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/21/liquid-template-engine/"/>
    <updated>2015-02-21T15:00:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/21/liquid-template-engine</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Liquid Template Engine" />
</p>




<p>
  Liquid is a templating engine that allows you to enable your users to quickly and easily customize your views at run-time while maintaining the safety, security, and integrity of your servers.
</p>




<p>
  <strong>Liquid Syntax</strong><br/>
  In liquid, there are two different types of markup.
</p>




<p>
  The first type of markup is output markup, is denoted by double sets of curly braces.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Hi</span> <span class="p">{{</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The second type of markup is tag markup, is typically used for logic and control structures such as loops.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;ul&gt;</span>
</span><span class='line'><span class="sr">  {% for user in users %}</span>
</span><span class='line'><span class="sr">    &lt;li&gt;{{ user.name }}&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="p">{</span><span class="o">%</span> <span class="n">endfor</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can do basic if statements as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">!=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Rich</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="sx">%}</span>
</span><span class='line'><span class="sx">  Hi Rich!</span>
</span><span class='line'><span class="sx">{% elsif user.name == &amp;lsquo;Bob&amp;rsquo; %}</span>
</span><span class='line'>  <span class="no">Hey</span> <span class="no">Bob</span><span class="o">!!!!</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="k">else</span> <span class="sx">%}</span>
</span><span class='line'><span class="sx">  Hello {{ user.name }</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endif</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>List of All of the Tags Available in Liquid</strong><br/>
</p>


<table>
<thead>
<tr>
<th>Tag </th>
<th> Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>assign </td>
<td> Assigns some value to a variable.</td>
</tr>
<tr>
<td>capture </td>
<td> Block tag that captures text into a variable.</td>
</tr>
<tr>
<td>case </td>
<td> Block tag, its the standard case&hellip;when block.</td>
</tr>
<tr>
<td>comment </td>
<td> Block tag, comments out the text in the block.</td>
</tr>
<tr>
<td>cycle </td>
<td> Cycle is usually used within a loop to alternate between values, like colors or DOM classes.</td>
</tr>
<tr>
<td>for </td>
<td> For loop.</td>
</tr>
<tr>
<td>if </td>
<td> Standard if/else block.</td>
</tr>
<tr>
<td>include </td>
<td> Includes another template; useful for partials.</td>
</tr>
<tr>
<td>raw </td>
<td> Temporarily disable tag processing to avoid syntax conflicts.</td>
</tr>
<tr>
<td>unless </td>
<td> Mirror of if statement.</td>
</tr>
</tbody>
</table>


<p>
  <br/>
  So far so good, Thatâ€™s it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Difference Between Path and URL in Ruby on Rails?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/21/what-is-difference-between-path-and-url-in-ruby-on-rails/"/>
    <updated>2015-02-21T11:23:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/21/what-is-difference-between-path-and-url-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="What is Difference Between Path and URL in Ruby on Rails?" />
</p>




<p>
  Have you ever wondered what is difference between <code>_path</code> and <code>_url</code> in Ruby on Rails?
</p>




<p>
  For example <code>root_path</code> and <code>root_url</code>. As it turns out, <code>_path</code> only returns the url relative to your domain. 
</p>




<p>
  For instance, <code>root_path</code> returns <code>/</code> while <code>root_url</code> returns <code>http://mydomain.com/</code>.
</p>




<p>
  You should always use <code>_url</code> for redirects and <code>_path</code> for hyperlinks unless you have a good reason not to do so.
</p>




<p>
  So far so good, That's it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secrets.yml File in Ruby on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/20/secrets-dot-yml-file-in-ruby-on-rails/"/>
    <updated>2015-02-20T00:40:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/20/secrets-dot-yml-file-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Secrets.yml File in Ruby on Rails" />
</p>




<p>
  You maybe have noticed a file called <code>secrets.yml</code> in the config directory of a Ruby on Rails 4.1 project. This feature was added as part of Rails 4.1 in order to have a common storage location for the keys and credentials for various services. You can use the secrets.yml for everything from AWS credentials to your secret_key_base (the default in Rails 4.1).
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>secrets.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="n">secret_key_base</span><span class="p">:</span> <span class="n">super_long_secret_key_for_development</span>
</span><span class='line'>  <span class="n">active_merchant_login</span><span class="p">:</span> <span class="mi">112233</span>
</span><span class='line'>  <span class="n">active_merchant_password</span><span class="p">:</span> <span class="n">super_secret_password</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;test:</span>
</span><span class='line'><span class="sr">  secret_key_base: super_long_secret_key_for_test</span>
</span><span class='line'><span class="sr">  active_merchant_login: 112233</span>
</span><span class='line'><span class="sr">  active_merchant_password: super_secret_password&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="n">secret_key_base</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= ENV[&amp;ldquo;SECRET_KEY_BASE&amp;rdquo;] %&gt;</span>
</span><span class='line'><span class="sx">  active_merchant_login: &amp;lt;%=</span> <span class="no">ENV</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">AM_LOGIN</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  active_merchant_password: &amp;lt;%= ENV[&amp;ldquo;AM_PASSWORD&amp;rdquo;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You have add this file to your <code>.gitignore</code> file to avoid accidently pushing your keys to git. You can also store your production keys in this file if you wish.
</p>




<p>
  To access the various keys in the secrets.yml file:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">secrets</span><span class="o">.</span><span class="n">key_name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Example: The following code will returns the merchant login.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">secrets</span><span class="o">.</span><span class="n">active_merchant_login</span> <span class="c1"># returns 112233 on development/test</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it! See ya! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Model Change Tracking with ActiveModel::Dirty]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/19/ruby-on-rails-model-change-tracking-with-activemodel-dirty/"/>
    <updated>2015-02-19T09:09:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/19/ruby-on-rails-model-change-tracking-with-activemodel-dirty</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/move_to_rails.png" alt="Ruby on Rails Model Change Tracking with ActiveModel::Dirty" />
</p>




<p>
  ActiveModel::Dirty is a library that is built into Ruby on Rails that allows you to quickly and easily track what attributes on a model have changed. This article will show you how to use it.
</p>




<p>
  <strong>Checking Whenever the Model Has Changed</strong><br/>
  Checking whether the model has changed using the <code>changed?</code> method:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed?</span>  <span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  If you change an attribute on the model, the <code>changed?</code> method will returns true:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Mac</span> <span class="no">Pro</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed?</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Tracking the Change</strong><br/>
  You can track what the change by using the <code>attr_change</code> method:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">name_change</span> <span class="c1"># =&gt; [&amp;ldquo;Mac Pro&amp;rdquo;, &amp;ldquo;IBM ThinkPad&amp;rdquo;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can get a list of all of the changed attributes on the model as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed</span> <span class="c1"># =&gt; [&amp;ldquo;name&amp;rdquo;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can get the original value using the <code>attr_was</code> method as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">name_was</span> <span class="c1">#=&gt; &amp;ldquo;IBM ThinkPad&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can view a list of all of the original values using the <code>changed_attributes</code> method as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changed_attributes</span> <span class="c1"># =&gt; {&amp;ldquo;name&amp;rdquo; =&gt; &amp;ldquo;IBM ThinkPad&amp;rdquo;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can list all of the changes on the model using the <code>changes</code> method as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">changes</span> <span class="c1"># =&gt; {&amp;ldquo;name&amp;rdquo; =&gt; [&amp;ldquo;IBM ThinkPad&amp;rdquo;, &amp;ldquo;Mac Pro&amp;rdquo;]}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can view changes that were made even after the model was saved using the <code>previous_changes</code> method as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre class=&quot;prettyprint&quot;&gt;</span>
</span><span class='line'><span class="sr">  product.save</span>
</span><span class='line'><span class="sr">  product.changes # =&gt; {}</span>
</span><span class='line'><span class="sr">  product.previous_changes # =&gt; {&quot;name&quot; =&gt; [&quot;IBM ThinkPad&quot;, &quot;Mac Pro&quot;]}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can view changes that were made even after the model was saved using the <code>previous_changes</code> method as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre class=&quot;prettyprint&quot;&gt;</span>
</span><span class='line'><span class="sr">  product.save</span>
</span><span class='line'><span class="sr">  product.changes # =&gt; {}</span>
</span><span class='line'><span class="sr">  product.previous_changes # =&gt; {&quot;name&quot; =&gt; [&quot;IBM ThinkPad&quot;, &quot;Mac Pro&quot;]}</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can reset the model using the reload! method as well:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">reload!</span>
</span><span class='line'><span class="n">product</span><span class="o">.</span><span class="n">previous_changes</span> <span class="c1"># =&gt; {}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, for more detail <a href="http://api.rubyonrails.org/classes/ActiveModel/Dirty.html" target="_blank">Ruby on Rails API</a>. That's it! See ya!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Download File via FTP]]></title>
    <link href="http://geekhmer.github.io/blog/2015/02/18/ruby-download-file-via-ftp/"/>
    <updated>2015-02-18T23:24:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/02/18/ruby-download-file-via-ftp</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Ruby Download File via FTP" />
</p>




<p>
  Download files from FTP server is quite easy using Ruby.
</p>




<p>
  Example:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">net</span><span class="o">/</span><span class="n">ftp</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;ftp = Net::FTP.new</span>
</span><span class='line'><span class="sr">ftp.connect(&amp;ldquo;your_host_name.com&amp;rdquo;, 21)</span>
</span><span class='line'><span class="sr">ftp.login(&amp;ldquo;your_username&amp;rdquo;,&amp;ldquo;your_password&amp;rdquo;)</span>
</span><span class='line'><span class="sr">ftp.chdir(&amp;ldquo;/</span><span class="n">your_directory</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">passive</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">ftp</span><span class="o">.</span><span class="n">getbinaryfile</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">your_source_file</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">your_dest_file</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it! See ya! :)
</p>

]]></content>
  </entry>
  
</feed>
