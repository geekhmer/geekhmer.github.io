<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-07-15T22:25:30+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using reCAPTCHA in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/14/using-recaptcha-in-ruby-on-rails-application/"/>
    <updated>2015-07-14T23:44:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/14/using-recaptcha-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  For a site with lots of user generated content, fighting spammers can be a never ending battle. Luckily, we can use a service called reCAPTCHA to help keep spammers off our site. reCAPTCHA works by displaying an image on screen and asking the user to type what they see in the image. This works because, the spammer's spambots are unable to read the image and unable to proceed with filling out the form. reCAPTCHA is just one of a number of tools we can use to prevent spammers from abusing our websites.
</p>




<p>
  <strong>Setup Account</strong><br/>
  First, we need to create a reCAPTCHA account. Visit the <a href="http://www.google.com/recaptcha/intro/index.html" target="_blank">reCAPTCHA</a> website and click the button that says 'Get reCAPTCHA'.
</p>




<p>
  <img src="http://geekhmer.github.io/images/reCAPTCHA_1.png" width="600" alt="Using reCAPTCHA in Ruby on Rails Application" />
</p>




<p>
  On the next screen enter your label, domain, owners and check the box that says 'Get alerts about this site' then click the 'Register' button.
</p>




<p>
  <img src="http://geekhmer.github.io/images/reCAPTCHA_2.png" width="600" alt="Using reCAPTCHA in Ruby on Rails Application" />
</p>




<p>
  Make sure you copy the public key and private key and save it somewhere, you will need this information when adding reCAPTCHA to your Rails application.
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  Now we have an account, it's time to set up our Ruby on Rails application. The first thing we will need to do is include the recaptcha gem in our Gemfile. Add the following lines to your gemfile. Note that the bcrypt-ruby gem is used for our example user signup form. You don't have to include this in your application if you aren't using it for user authentication.
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;recaptcha&rsquo;, &lsquo;~> 0.3.5&rsquo;
gem &lsquo;bcrypt-ruby&rsquo;, &lsquo;~> 3.1.2&rsquo;
{% endcodeblock %}</p>

<p>
  Next run a bundle install to install the gem:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Next create an initializer for recaptcha that will contain the public and private keys we mentioned earlier. Create a new initializer called recaptcha.rb and add the code listed below, make sure to modify it to contain your public and private keys.
</p>


<p>{% codeblock config/initializers.rb lang:ruby %}
Recaptcha.configure do |config|
  config.public_key  = &lsquo;Replace with your public key&rsquo;
  config.private_key = &lsquo;Replace with your private key&rsquo;
end
{% endcodeblock %}</p>

<p>
  Next create a model called User that we will use to test the reCAPTCHA functionality. Run the following commands to create the user model:
</p>


<p>{% codeblock lang:ruby %}
rails g model user name email password_digest
rake db:migrate
{% endcodeblock %}</p>

<p>
  Next, open your User model and modify it:
</p>


<p>{% codeblock app/models/user.rb lang:ruby %}
class User &lt; ActiveRecord::Base
  has_secure_password
  validates_presence_of :password, on: :create
  validates :email, uniqueness: true, presence: true
end
{% endcodeblock %}</p>

<p>
  Next create a couple controllers that will handle our user input. The first controller, Home, will provide a simple landing page that contains a sign up link. The second controller, Users, will process the actual user signup request. Run the commands below to create the controllers.
</p>


<p>{% codeblock lang:ruby %}
rails g controller Home show
rails g controller Users new create
{% endcodeblock %}</p>

<p>
  Now edit our routes file to set up a few routes for the controllers we just created. Modify the routes file so that it looks like the code listed below, being sure not to overwrite your application name on the first line:
</p>


<p>{% codeblock config/routes.rb lang:ruby %}
ReCAPTCHAExample::Application.routes.draw do
  resource :home, only: [:show], controller: :home
  resource :users, only: [:new, :create]
  root to: &ldquo;home#show&rdquo;
end
{% endcodeblock %}</p>

<p>
  Next open up your home/show view and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/views/home/show.html.erb lang:ruby %}</p>

<h3>Welcome!</h3>


<p>
Click the link below to sign up for an account.
</p>


<p>&lt;%= link_to &ldquo;Sign Up!&rdquo;, new_users_path %>
{% endcodeblock %}</p>

<p>
  Next open up the users/new view and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/views/users/new.html.erb lang:ruby %}</p>

<h3>New User Sign Up</h3>


<p>&lt;% if !@user.errors.empty? %>
  <ul></p>

<pre><code>&lt;% @user.errors.full_messages.each do |message| %&gt;
  &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
&lt;% end %&gt;
</code></pre>

<p>  </ul>
&lt;% end %>
&lt;%= form_for User.new do |f| %>
  <div></p>

<pre><code>&lt;%= f.label :name %&gt;
&lt;%= f.text_field :name %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.label :email %&gt;
&lt;%= f.text_field :email %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.label :password %&gt;
&lt;%= f.password_field :password %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.label :password_confirmation %&gt;
&lt;%= f.password_field :password_confirmation %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= recaptcha_tags %&gt;
</code></pre>

<p>  </div>
  <div></p>

<pre><code>&lt;%= f.submit "Sign Up" %&gt;
</code></pre>

<p>  </div>
&lt;% end %>
{% endcodeblock %}</p>

<p>
  Most of the code is self explanatory, however, you'll notice the recaptcha_tags method being called. This method is responsible for rendering the reCAPTCHA.
</p>




<p>
  Next open up our users controller and add some code to handle the request. Modify your users controller so that it looks like the code listed below.
</p>


<p>{% codeblock app/controllers/users_controller.rb lang:ruby %}
class UsersController &lt; ApplicationController
  def new</p>

<pre><code>@user = User.new
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>captcha_message = "The data you entered for the CAPTCHA wasn't correct.  Please try again"
@user = User.new(user_params)
if !verify_recaptcha(model: @user, message: captcha_message) || !@user.save
  render "new"
end
</code></pre>

<p>  end</p>

<p>  private
  def user_params</p>

<pre><code>params.require(:user).permit(:name, :email, :password, :password_confirmation)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Almost done! Now lets open up our users/create view and add the following code.
</p>


<p>{% codeblock app/views/users/create.html.erb lang:ruby %}</p>

<h3>Thank You!</h3>


<p>
Thanks for signing up!
</p>


<p>{% endcodeblock %}</p>

<p>
  Now if you start a rails server and navigate to http://localhost:3000 we will see a sign up link. if you click on the sign up link you will be presented with a sign up form, complete with a captcha to fill out. You'll notice that filling out the captcha wrongly results in a validation error message, and filling out the correct information allows the user signup to proceed.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Social Network Sharing Buttons in Rails App]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/12/social-network-sharing-buttons-in-rails-app/"/>
    <updated>2015-07-12T22:46:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/12/social-network-sharing-buttons-in-rails-app</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Social Network Sharing Buttons in Rails App" />
</p>




<p>
  There are many services that allow you to add social network buttons to your website. The problem with these services is that they are free because they harvest traffic statistics from your site, track your visitors, and in general are a big nuisance. They also have the disadvantage of being slow to load.
</p>




<p>
  In this article we will show you how to add social sharing buttons to your website via a gem called Social Share Button. Unlike most services, Social Share Button has buttons that are hosted locally on your site and don't go through a third party service. As a result, they are quick to load and extremely customizable.
</p>




<p>
  <strong>Setup Application</strong><br/>
  First we need to add the social-share-button gem to our Gemfile. Open up your Gemfile and add in the line listed below:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;social-share-button&rsquo;, &lsquo;~> 0.1.6&rsquo;
{% endcodeblock %}</p>

<p>
  Next, we need to run a bundle install to install the gem:
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Now we need to run the <code>rails generate social_share_button:install</code> command to install some additional configuration files that the Social Sharing Button gem uses to display the buttons on your site. This includes an initializer called social_share_button.rb in your initializers folder as well as some localization files:
</p>


<p>{% codeblock lang:ruby %}
rails generate social_share_button:install
{% endcodeblock %}</p>

<p>
  Great, Next we need to do is create a simple Home controller in order to test the social sharing button functionality:
</p>


<p>{% codeblock lang:ruby %}
rails g controller homes show
{% endcodeblock %}</p>

<p>
  Now let's modify our routes file a bit:
</p>


<p>{% codeblock config/routes.rb lang:ruby %}
Rails.application.routes.draw do
  resources :homes, only: [:show]
  root to: &ldquo;homes#show&rdquo;
end
{% endcodeblock %}</p>

<p>
  Great, now we need to add some javascript and CSS includes to make things work. Open up your application.js file and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/assets/javascripts/application.js lang:ruby %}
//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require social-share-button
//= require_tree .
{% endcodeblock %}</p>

<p>
  Great, now for the application.css file. Open it up and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/assets/stylesheets/application.css lang:ruby %}
/<em>
 </em>= require_tree .
 <em>= require social-share-button
 </em>= require_self
 */
{% endcodeblock %}</p>

<p>
  Excellent, now we can add the social sharing buttons to our site. Open up your homes/show view and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/views/homes/show.html.erb lang:ruby %}
&lt;%= social_share_button_tag(&ldquo;My Site&rdquo;) %>
{% endcodeblock %}</p>

<p>
  Great, now if we run rails server and visit http://localhost:3000, we will see the social sharing buttons. However, you'll notice that there is a problem. About 15 or so buttons are listed, but we only care about a couple. Luckily we can easily resolve this. Open up the social_share_button initializer and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock config/initializers/social_share_button.rb lang:ruby %}
SocialShareButton.configure do |config|
  config.allow_sites = %w(twitter facebook google_plus delicious tumblr pinterest)
end
{% endcodeblock %}</p>

<p>
  Now if you restart your rails server, you'll notice that the buttons have been limited to the sites listed above. Note that you can also specify a specific url if needed. Social Share Button detects the current URL by default, but there are times when you may want to customize this. You can do this like so:
</p>


<p>{% codeblock lang:ruby %}
&lt;%= social_share_button_tag(&ldquo;My Home Page&rdquo;, :url => &ldquo;<a href="http://mysite.com/sample">http://mysite.com/sample</a>&rdquo;) %>
{% endcodeblock %}</p>

<p>
  However, what if we want to customize the button look/feel? Luckily this is pretty easy. If you inspect the elements in chrome developer tools you'll notice that they each have a unique css class. We can override this CSS class with our own code. For example, to modify the facebook button to look different, we'd use something like the following CSS (placed into our application.css file):
</p>


<p>{% codeblock lang:ruby %}
.social-share-button-facebook {
  display: inline-block;
  width: 16px;
  height: 16px;
  background: url(&ldquo;/social/facebook.png&rdquo;) no-repeat;
}
{% endcodeblock %}</p>

<p>
  So far go good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Server Command Line Options]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options/"/>
    <updated>2015-07-11T22:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Rails Server Command Line Options" />
</p>




<p>
  Syntax:
</p>


<p>{% codeblock lang:ruby %}
rails [options]
{% endcodeblock %}</p>

<p>
  Options:<br/>
  -s, –config-script=path Uses the specified mongrel config script.<br/>
  -p, –port=port Runs Rails on the specified port. Default: 3000<br/>
  -b, –binding=ip Binds Rails to the specified ip. Default: 0.0.0.0<br/>
  -e, –environment=name Specifies the environment to run this server under (test/development/production). Default: development
</p>




<p>
  <strong>Listen on any Interface</strong><br/>
  By default versions of Rails is localhost, this prevents users on your local network from accessing your network. You may not want to do this however. You may wish to share your development site with coworker so that they can review the site. Otherwise, you may wish to test the site on other devices such as a mobile device. Fortunately you can easily open the rails server up to all interfaces using the -b argument. Simple run the rails s command below:
</p>


<p>{% codeblock lang:ruby %}
rails s -b 0.0.0.0
{% endcodeblock %}</p>

<p>
  <strong>Use a Different Port</strong><br/>
  Sometimes you want to use a port other than 3000 for your Rails server. For instance, maybe you need to run multiple Rails servers. You can easily do this with the -p argument:
</p>


<p>{% codeblock lang:ruby %}
rails s -p 3001
{% endcodeblock %}</p>

<p>
  This command line tells rails to start the server on port 3001 instead of 3000.
</p>




<p>
  <strong>Run in a Different Environment</strong><br/>
  You can start a rails server for another environment such as production or staging by using the -e argument along with the name of the environment you wish to start up in:
</p>


<p>{% codeblock lang:ruby %}
rails s -e production
{% endcodeblock %}</p>

<p>
  The code above starts the Rails server in the production environment. Very handy when you have custom environments or need to debug something.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mark Methods Private When You Don’t Test Them]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/25/mark-methods-private-when-you-dont-test-them/"/>
    <updated>2015-06-25T20:58:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/25/mark-methods-private-when-you-dont-test-them</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  In Ruby and many other languages, you write private methods to implement internal logic you don’t want to expose. You want the freedom to rename, repurpose or even delete them without worrying about impacting anything else. The <code>private</code> keyword signals other developers: Don’t rely on this; don’t call it; it might change. This is especially important when writing framework or library code that many other developers will use.
</p>




<p>
  But which methods should you make private? Sometimes this is obvious; sometimes it isn't. A good rule of thumb to use is: If you’re not testing a method, it should be private.
</p>




<p>
  But wait a minute! Aren't we supposed to test everything? Isn't 100% code coverage the every Ruby developer seeks? Let me clarify. You should mark methods private when you test them indirectly by calling the other, public methods in the same class. Use the <code>private</code> keyword to help organize your code, to remind yourself what you still need to test, and what you don't.
</p>




<p>
  <strong>Three Paintings</strong><br/>
  A simple example will make this clear. Suppose I have a class that describes a painting:
</p>


<p>{% codeblock lang:ruby %}
Painting = Struct.new(:name, :year)
{% endcodeblock %}</p>

<p>
  Now I can create a list of three paintings in a Minitest::Spec file like this:
</p>


<p>{% codeblock lang:ruby %}
let(:one) { Painting.new(&ldquo;Spanish Couple In Front Of Inn&rdquo;, 1900) }
let(:two) { Painting.new(&ldquo;Guernica&rdquo;, 1937) }
let(:three) { Painting.new(&ldquo;Petite Fleurs&rdquo;, 1958) }
let(:paintings) { [one, two, three] }
{% endcodeblock %}</p>

<p>
  Suppose my first requirement is to return the first painting from the list. Simple enough:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  list.first
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;should return the first element&rdquo; do
  first(paintings).must_equal one
end
{% endcodeblock %}</p>

<p>
  I just call Array#first and I’m done. Returning the rest of the list is slightly more interesting:
</p>


<p>{% codeblock lang:ruby %}
def rest(list)
  _, *rest = list
  rest
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the rest of the elements&rdquo; do
  rest(paintings).must_equal [two, three]
end
{% endcodeblock %}</p>

<p>
  Rest always returns an array even if the input list was empty or had only one element. So far, so good. I’ve written two methods and two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>A New Requirement</strong><br/>
  Now suppose my business requirement changes slightly and I instead need to return the first painting sorted alphabetically by name. Once again, it’s not hard to do:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end.first
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;should return the first element&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end
{% endcodeblock %}</p>

<p>
  And I need rest to use the same sort order, so I repeat the call to sort:
</p>


<p>{% codeblock lang:ruby %}
def rest(list)
  _, *rest = list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
  rest
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the rest of the elements&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  I’ve implemented new behavior, but still have two methods and two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>Extracting a Method</strong><br/>
  Because both of my methods are covered by tests, I’m free to refactor them. I decide to extract a new method, sorted_by_name:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  sorted_by_name(list).first
end</p>

<p>def rest(list)
  _, *rest = sorted_by_name(list)
  rest
end</p>

<p>def sorted_by_name(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the element with the first name&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end</p>

<p>it &ldquo;returns the rest after the first name&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  Here I’ve simply moved the call to sort into a utility method called sorted_by_name. Now first and rest both call sorted_by_name, making the code a bit clearer and DRY-er. But now I have three methods and only two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests_three_methods.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>Mark Methods Private When You Don’t Test Them</strong><br/>
  Notice I didn’t bother writing a test for sorted_by_name. I know it works because my other tests still pass. The existing tests are sufficient; I am testing sorted_by_name indirectly. Because I extracted sorted_by_name from first and rest, because I refactored my code without adding any new behavior, no new test were required.
</p>




<p>
  In this scenario, take the time to mark the new, untested method as private:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  sorted_by_name(list).first
end</p>

<p>def rest(list)
  _, *rest = sorted_by_name(list)
  rest
end</p>

<p>private
def sorted_by_name(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the element with the first name&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end</p>

<p>it &ldquo;returns the rest after the first name&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  The private keyword here reminds me I’ve already tested sorted_by_name, that I don’t need to write new tests for it. Now private is helping me organize my code; it’s helping me remember which methods I don’t need to test… and which methods are missing important tests.
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests_three_methods_private.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  f my tests don’t need to know about sorted_by_name, then certainly other developers don’t. It should be private. Marking it private reminds me that it is being tested indirectly, that I didn’t just forget to write a test for it. Marking it private tells other developers about what I’ve learned from my own test suite.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Message Queue in Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/21/use-message-queue-in-rails/"/>
    <updated>2015-06-21T10:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/21/use-message-queue-in-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/message_queue .png" width="400" alt="Use Message Queue in Rails" />
</p>




<p>
  This article describes the application architecture pattern which is (in general) nothing new, but (from my experience) rarely applied in the Rails world. I’m talking about the nice and simple abstraction – message queue. But let me start by describing the goals I want to achieve and some alternative solutions.
</p>




<h3>
  Goals
</h3>




<p>
  <strong>Split</strong> application into a few smaller applications<br/>
  Smaller applications are easier to reason about. You don’t have to go through 50 classes, you can just read 10, because it’s all you’ve got. When a new developer joins the team he has nice onboarding if you can tell him: “hey, start with this small piece of code, everything you need to know to implement this new feature is encapsulated here”.
</p>




<p>
  <strong>Separate</strong> code for concepts which are not logically connected<br/>
  Smaller applications are easier to reason about. You don’t have to go through 50 classes, you can just read 10, because it’s all you’ve got. When a new developer joins the team he has nice onboarding if you can tell him: "hey, start with this small piece of code, everything you need to know to implement this new feature is encapsulated here".
</p>




<p>
  Use <strong>new</strong> languages and frameworks<br/>
  We, developers, want to try and learn new languages, libraries, frameworks and technologies. If you make a small application with a shiny new tool and fail – the consequences are less severe, because you can quickly rewrite this small application. If you are going to make one big application, you will think twice before introducing a new tool. So, in some way, smaller applications minimize the risk.
</p>




<h3>
  Solution1 - One database, multiple apps
</h3>




<p>
  This is the very first idea which may come to your mind – just point multiple applications to the one shared database. Been there, done that, won’t do that again! Data is associated with validation logic. Either you duplicate this logic in every app or you extract it to Rails engine gem. Both solutions are hard to maintain (think about running migrations…) and you still have strong coupling in your system.
</p>




<p>
  One case when this approach may work – one read-write app and many read-only apps, but I haven’t tried it.
</p>




<h3>
  Solution2 - Expose REST API
</h3>




<p>
  As Rails devs we are pretty familiar with REST, so we can expose REST API in one of our apps and call this API in the other. This approach has many solid use cases so here I’m just listing some weak points to take into consideration:
</p>




<p>
  - Usually requests in Ruby are blocking – calling app has to wait for the response even if it’s not interested in it.<br/>
  - Requires authentication – we have to somehow ensure that our internal API is not used… well, externally.<br/>
  - Everything happens in server process – if you are calling your internal API you may end up using the same server process which is used for handling requests of your “real users”. You would like to give your “real users” priority.<br/>
  - Calling app has knowledge about receiving app – you have to know which endpoints should be called and which parameters be passed. This introduces coupling.<br/>
</p>




<h3>
  Solution3 - Message queue
</h3>




<p>
  Message queue is a really nice abstraction. Publisher just leaves messages at one end of the "pipe", consumer reads messages from the other end of the "pipe". It is asynchronous, because publisher does not wait for his message to be processed. Moreover, it decouples publisher from consumer, because publisher does not care what happens with his message and who will read it.
</p>




<p>
  This architecture is also resistant to outages, at least when we assume that the queue service rarely breaks. If the consumer is not processing messages, nothing prevents publisher from adding more of them to the queue. When consumer starts to function again, it will process messages from the buffer (if they didn’t take all of your memory).
</p>




<h3>
  When it shines?
</h3>




<p>
  Message queue is really useful if we have some processing which happens out of the main business flow and the main business flow does not have to wait for the results of this processing. The most common example is custom event tracking – own analytics module. We just publish an event and continue execution without slowing anything down.
</p>




<h3>
  RabbitMQ
</h3>




<p>
  RabbitMQ is a popular choice for message queue service, especially in Rails world. Honestly, I haven’t tried different implementations, because RabbitMQ really has everything I need.
</p>




<p>
  There are Ruby gems for communicating with RabbitMQ and it’s also easy to install and configure.
</p>




<p>
  <img src="http://geekhmer.github.io/images/rabbitmq_concepts.png" width="400" alt="Use Message Queue in Rails" />
</p>




<p>
  In this diagram there are presented some concepts introduced by RabbitMQ. Publisher leaves messages in the exchange. Then they are routed from the exchange to multiple queues. There are many routing algorithms available – <a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges" target="_blank">https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges</a>
</p>




<p>
  Workers grab messages from queue. If there are multiple workers connected to one queue, they will be load balanced and the message will be delivered only to one of them.
</p>




<h3>
  Easy case
</h3>




<p>
  If you feel overwhelmed – don’t worry. Here is what you should start with:
</p>




<p>
  <img src="http://geekhmer.github.io/images/rabbitmq_easy_case.png" width="400" alt="Use Message Queue in Rails" />
</p>




<h3>
  Publishing
</h3>




<p>
  Now it’s time for some code. It’s really simple, because integration with RabbitMQ is simple. We will use two gems – <code>bunny</code> and <code>sneakers</code>.
</p>


<p>{% codeblock lang:ruby %}</p>

<h1>Gemfile</h1>

<p>gem &lsquo;bunny&rsquo;</p>

<h1>an initializer</h1>

<p>connection = Bunny.new(host: &lsquo;localhost&rsquo;)
connection.start
channel = connection.create_channel</p>

<h1>a service</h1>

<p>class RabbitPublisher</p>

<p>  def initialize(channel)</p>

<pre><code>self.channel = channel
</code></pre>

<p>  end</p>

<p>  def publish(exchange_name, message)</p>

<pre><code>exchange = channel.fanout(exchange_name, durable: true)
exchange.publish(message.to_json)
</code></pre>

<p>  end</p>

<p>  private
  attr_accessor :channel
end
{% endcodeblock %}</p>

<h3>
  Receiving
</h3>


<p>{% codeblock lang:ruby %}</p>

<h1>Gemfile</h1>

<p>gem &lsquo;sneakers&rsquo;</p>

<h1>an initializer</h1>

<p>Sneakers.configure  daemonize: true,</p>

<pre><code>                amqp: "amqp://localhost",
                log: "log/sneakers.log",
                pid_path: "tmp/pids/sneakers.pid",
                threads: 1,
                workers: 1
</code></pre>

<h1>app/workers/events_worker.rb</h1>

<p>class EventsWorker
  include Sneakers::Worker
  from_queue &ldquo;events&rdquo;, env: nil</p>

<p>  def work(raw_event)</p>

<pre><code>event_params = JSON.parse(raw_event)
SomeWiseService.build.call(event_params)
ack!
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  For details refer to documentation of <a href="https://github.com/ruby-amqp/bunny" target="_blank">bunny</a> and <a href="https://github.com/jondot/sneakers" target="_blank">sneakers</a>.
</p>




<p>
  If you enjoyed this article you can consider ping me for more details.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
