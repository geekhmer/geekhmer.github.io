<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-06-19T12:49:34+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ajax on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/19/ajax-on-rails/"/>
    <updated>2015-06-19T11:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/19/ajax-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ajax_on_rails.png" width="400" alt="Ajax on Rails" />
</p>




<p>
  This is a tutorial for ajax use with Rails conventions. For illustrative purposes, we’ll build a single-page Product list app.
</p>




<p>
  <strong>About Ajax</strong><br/>
  Ajax (Asynchronous JavaScript and XML) is used as a mechanism for sending and retrieving data asynchronously (in the background). While XML can certainly be used with ajax, it is not limited to this format. The JSON format, for example, is more commonly used today, especially in the Rails community. There are significant advantages in using Ajax, which include better user interactivity. Ajax allows content on a page to be updated without having to re-render the entire page, making it a "seamless" experience.
</p>




<p>
  <strong>Create a New Product on the Index Page</strong><br/>
  Before we start, let’s take a quick look at our schema so that we know what we’re working with:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Schema</span><span class="o">.</span><span class="n">define</span><span class="p">(</span><span class="ss">version</span><span class="p">:</span> <span class="mi">20140620130316</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">create_table</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">products</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">force</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;t.datetime &quot;created_at&quot;,  null: false</span>
</span><span class='line'><span class="sr">t.datetime &quot;updated_at&quot;,  null: false</span>
</span><span class='line'><span class="sr">t.string   &quot;name&quot;,        null: false</span>
</span><span class='line'><span class="sr">t.string   &quot;description&quot;, null: false</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  After creating a Product model and then create some products to play with, our Product Controller should look like this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>products_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@products = Product.all</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Instead of creating <code>new.html.erb</code>, let’s add a button somewhere on our <code>index.html.erb</code> that users can use to display a hidden form:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;lt;%= link_to &amp;lsquo;New Product&amp;rsquo;, new_product_path, remote: true %&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Here we pass the <code>remote: true</code> option to disable the default Rails mechanism that would have otherwise navigated us to <code>/products/new</code>.
</p>




<p>
  Before moving on, let’s quickly revisit our Product Controller and set it up to create new products with ajax:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>products_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:all_product</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  # index action has been removed&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@product = Product.new</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">create</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@product  = Product.create(product_params)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">all_products</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@products = Product.all</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">product_params</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;params.require(:product).permit(:name, :description)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  I have removed the index action because I created a <code>before_action</code> filter that creates the <code>@products</code> instance variable for us automatically. Because we no longer have any logic in our index action, it is not necessary. Rails will automatically render the correct template, even without the presence of the action.
</p>




<p>
  Noteworthy here is the <code>respond_to</code> method invoked near the top that will allow us to render both html and javascript responses with all of our controller actions. The respond_to method provides the ability to respond to the requests with many formats(i.e. csv, xml, etc…). This can be done for one or all actions in a controller. If we wanted to provide json only in our index action, we would write something like this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@products</span> <span class="o">=</span> <span class="no">Product</span><span class="o">.</span><span class="n">all</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  respond_to do |format|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'><span class="nb">format</span><span class="o">.</span><span class="n">json</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now, choose a place on the index page to hide your form by passing a style attribute with the following:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;div id=&quot;product-form&quot; style=&quot;display:none;&quot;&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  which will hide our form when the page is initially visited.
</p>




<p>
  Next, create <code>new.js.erb</code>:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>new.js.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#product-form&amp;rsquo;).html(&amp;ldquo;&amp;lt;%= j (render &amp;lsquo;form&amp;rsquo;) %&gt;&amp;rdquo;);</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#product-form&amp;rsquo;).slideDown(350);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This is just an ERB template that generates Javascript instead of the HTML we’re used to. It basically translates to: "Find the element with an id attribute of product-form and at that point render the html in the form partial." We typically do this in <code>new.html.erb</code> with:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>new.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">render</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">form</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  Since render is a Rails method, JavaScript doesn’t understand it and it has to be interpreted with ERB. The &lsquo;j&rsquo; is syntactic sugar for <code>&lt;%= escape_javascript (render &lsquo;form&rsquo;) %></code>
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_form.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= simple_form_for @product, remote: true do |f| %&gt;</span>
</span><span class='line'><span class="sx">  &amp;lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span>  <span class="ss">:description</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &amp;lt;%= f.input  :deadline %&gt;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">f</span><span class="o">.</span><span class="n">button</span> <span class="ss">:submit</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&amp;lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  This is the &lsquo;form&rsquo; being rendered in <code>new.js.erb</code> with a <code>remote: true</code> option being passed in. In our form partial, we also pass the <code>remote: true</code> option that will execute an ajax POST request.
</p></p>

<p><p>
  Finally, we can wrap things up by rendering our new Product list and hiding our form. This final step includes identifying where to render our list. Using the rai-jax app as an example, let’s look at what our final <code>index.html.erb</code> should look like at this stage:
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;row&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-md-5 col-md-offset-1&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&amp;lt;h2&amp;gt;Products&amp;lt;/</span><span class="n">h2</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="sr">/div&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;col-md-2 col-md-offset-4&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;&amp;lt;%= link_to new_product_path, remote: true do %&amp;gt;</span>
</span><span class='line'><span class="sr">  &amp;lt;button class=&quot;btn btn-default&quot;&amp;gt;New&amp;lt;/</span><span class="n">button</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">end</span> <span class="sx">%&amp;gt;</span>
</span><span class='line'><span class="sx">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;p&gt;  &lt;/div&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;p&gt;&lt;div class=&quot;row&quot;&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=&quot;col-md-6 col-md-offset-2&quot; id=&quot;product-form&quot; style=&quot;display:none;&quot;&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="sx">&lt;/div&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;p&gt;&lt;div class=&quot;row&quot;&gt;</span>
</span><span class='line'><span class="sx">  &lt;div class=&quot;col-md-7 col-md-offset-1&quot; id=&quot;products&quot;&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">render</span> <span class="vi">@products</span> <span class="sx">%&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/div&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  And we update our product list and hide our form with <code>create.js.erb</code>:
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>create.js.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#products&amp;rsquo;).html(&amp;ldquo;&amp;lt;%= j (render @products) %&gt;&amp;rdquo;);</span>
</span><span class='line'><span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#product-form&amp;rsquo;).slideUp(350);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  <strong>Update a Product on the Index Page</strong><br/>
  As in Part One, let’s start by visiting our Product Controller and setting it up for updates:
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>products_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:all_products</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_products</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  &amp;hellip;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">update</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@product.update_attributes(product_params)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private</span>
</span><span class='line'><span class="sr">  &amp;hellip;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">set_products</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@product = Product.find(params[:id])</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">product_params</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;params.require(:product).permit(:name, :description)</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  Similar to Part One, we add an edit button with a <code>remote:</code> true option:
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_product.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  &amp;lt;%= link_to edit_product_path(product), remote: true do %&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">button</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="no">Edit</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">/</span><span class="n">button</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">end</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  And, finally, our <code>edit.js.erb</code> and <code>update.js.erb</code> are the same as our new and update templates: <code>edit.js.erb</code> corresponds to <code>new.js.erb</code> and <code>create.js.erb</code> corresponds to <code>update.js.erb</code>.
</p></p>

<p><p>
  <strong>Delete a Product on the Index Page</strong><br/>
  Our final updates to our Product Controller involves us providing the destroy action:
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>product_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ProductsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:all_products</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:set_products</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:edit</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  &amp;hellip;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">destroy</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;@product.destroy</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  When adding our delete button, two additional steps are required:
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_product.html.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;lt;%= link_to product, remote: true, method: :delete,  data: { confirm: &amp;lsquo;Are you sure?&amp;rsquo; } do %&gt;</span>
</span><span class='line'><span class="sr">  &lt;button&gt;Delete!&lt;/</span><span class="n">button</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="k">end</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  First, we pass in a <code>method: :delete</code> option; Second, we provide a courtesy confirmation to the user making sure they don’t delete anything by accident.
</p></p>

<p><p>
  The last file we’ll create is <code>destroy.js.erb</code> and it will contain one line:
</p></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>destroy.js.erb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="c1">#products&amp;rsquo;).html(&amp;ldquo;&amp;lt;%= j (render @products) %&gt;&amp;rdquo;);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  Seriously, Rails makes ajax easy. As I mentioned above.
</p></p>

<p><p>
  So far so good, That&rsquo;s it!!! See ya!!! :)
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Ruby Interpreted or Compiled?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/17/is-ruby-interpreted-or-compiled/"/>
    <updated>2015-06-17T12:14:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/17/is-ruby-interpreted-or-compiled</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" />
</p>




<p>
  Ever since I started to work with Ruby in 2012, I’ve always assumed that it was an interpreted language like PHP or Javascript – in other words, that Ruby read in, parsed and executed my code all at runtime, at the moment my program was run. This seemed especially obvious since the default and most popular implementation of Ruby is called “MRI,” short for “Matz’s Ruby Interpreter.” I always thought it was necessary to use an interpreter to make all of the dynamic features of the language possible.
</p>




<p>
  However, it turns out that both JRuby and Rubinius, two other popular implementations of Ruby, support using a compiler the same way you would with a statically typed language like C or Java. Both JRuby and Rubinius first compile your Ruby code to byte code into machine language, and later execute it.
</p>




<p>
  Today I’m going to show you how to use these Ruby compilers, and I’ll also take a peek under the hood to see what they produce internally. Possibly you’ll rethink some of your assumptions about how Ruby works along the way.
</p>




<p>
  <strong>Use the Rubinius Compiler</strong><br/>
  Using the Rubinius compiler is as simple as running any Ruby script. Here’s a very silly but simple Ruby program I’ll use as an example today:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Adder</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_two</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;x+2</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="no">Adder</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">add_two</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now if I save that into a file called “simple.rb,” switch to Rubinius using RVM, and run the script I’ll get the number “5” as expected:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rvm</span> <span class="n">rbx</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">4</span><span class="o">-</span><span class="mi">20110705</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">simple</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Not very interesting, I know. But what is interesting is that when I ran simple.rb Rubinius created a new, hidden directory called “.rbx” with a strange, cryptically named file in it:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">a</span>
</span><span class='line'><span class="o">.</span>         <span class="o">.</span><span class="n">.</span>        <span class="o">.</span><span class="n">rbx</span>      <span class="n">simple</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">$</span> <span class="n">find</span> <span class="o">.</span><span class="n">rbx</span>
</span><span class='line'><span class="o">.</span><span class="n">rbx</span>
</span><span class='line'><span class="o">.</span><span class="n">rbx</span><span class="o">/</span><span class="n">a7</span>
</span><span class='line'><span class="o">.</span><span class="n">rbx</span><span class="o">/</span><span class="n">a7</span><span class="o">/</span><span class="n">a7fc1eb2edc84efed8db760d37bee43753483f41</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This vaguely reminds me of how git saves the git repository data in a hidden folder called “.git,” also using cryptic hexadecimal names. What we are looking at here is a compiled version of simple.rb: the “a7fc1eb2e…” file contains my Ruby code converted into Rubinius byte code.
</p>




<p>
  Whenever you run a Ruby script, Rubinius uses a two step process to compile and run your code:
</p>




<p>
  <img src="http://geekhmer.github.io/images/rubinius_diagram.png" />
</p>




<p>
  On the top you can see that first Rubinius compiles your code into byte code, and then below later executes it using the Rubinius Virtual Machine, which can compile the byte code into native machine language. Rubinius also caches the byte code using the hexadecimal naming scheme I showed above, avoiding the need for the compile step entirely if the Ruby source code file didn’t change.
</p>




<p>
  You can actually run the Rubinius compiler directly like this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rbx</span> <span class="n">compile</span> <span class="n">simple</span><span class="o">.</span><span class="n">rb</span> <span class="o">-</span><span class="n">o</span> <span class="n">simple</span><span class="o">.</span><span class="n">bytecode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This compiles my Ruby code and saves the byte code in the specified file. If we look at the simple.bytecode file, we’ll see a series of alphanumeric tokens that don’t make any sense. But if you run the compiler using the “-B” option you can see an annotated version of the Rubinius byte code:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rbx</span> <span class="n">compile</span> <span class="n">simple</span><span class="o">.</span><span class="n">rb</span> <span class="o">-</span><span class="n">o</span> <span class="n">simple</span><span class="o">.</span><span class="n">bytecode</span> <span class="o">-</span><span class="n">B</span>
</span><span class='line'><span class="o">=============</span> <span class="p">:</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">script</span><span class="o">&lt;</span><span class="sr">/strong&gt; ==============</span>
</span><span class='line'><span class="sr">Arguments:   0 required, 0 post, 0 total</span>
</span><span class='line'><span class="sr">Arity:       0</span>
</span><span class='line'><span class="sr">Locals:      0</span>
</span><span class='line'><span class="sr">Stack size:  6</span>
</span><span class='line'><span class="sr">Lines to IP: 1: 0..26, 7: 27..63&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="mo">0000</span><span class="p">:</span>  <span class="n">push_rubinius</span>            <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mo">0001</span><span class="p">:</span>  <span class="n">push_literal</span>               <span class="ss">:Adder</span>
</span><span class='line'><span class="mo">0003</span><span class="p">:</span>  <span class="n">push_nil</span>                 <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mo">0004</span><span class="p">:</span>  <span class="n">push_scope</span>               <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="mo">0005</span><span class="p">:</span>  <span class="n">send_stack</span>                 <span class="ss">:open_class</span><span class="p">,</span> <span class="mi">3</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;hellip; etc &amp;hellip;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;===============</span> <span class="ss">:add_two</span> <span class="o">===============</span>
</span><span class='line'><span class="ss">Arguments</span><span class="p">:</span>   <span class="mi">1</span> <span class="n">required</span><span class="p">,</span> <span class="mi">0</span> <span class="n">post</span><span class="p">,</span> <span class="mi">1</span> <span class="n">total</span>
</span><span class='line'><span class="ss">Arity</span><span class="p">:</span>       <span class="mi">1</span>
</span><span class='line'><span class="ss">Locals</span><span class="p">:</span>      <span class="mi">1</span><span class="p">:</span> <span class="n">x</span>
</span><span class='line'><span class="no">Stack</span> <span class="ss">size</span><span class="p">:</span>  <span class="mi">3</span>
</span><span class='line'><span class="no">Lines</span> <span class="n">to</span> <span class="ss">IP</span><span class="p">:</span> <span class="mi">2</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;0000:  push_local                 0    # x</span>
</span><span class='line'><span class="sr">0002:  meta_push_2              &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'><span class="mo">0003</span><span class="p">:</span>  <span class="n">meta_send_op_plus</span>          <span class="ss">:+</span>
</span><span class='line'><span class="mo">0005</span><span class="p">:</span>  <span class="n">ret</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&amp;hellip; etc &amp;hellip;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  At the bottom here we can see the compiled version of my silly add_two method. It’s actually somewhat easy to understand the byte code, since it’s annotated so well:
</p>




<p>
  - First “push_local” saves the value of the “x” parameter on the virtual machine stack.<br/>
  - Then it pushes the literal value 2.<br/>
  - Then it executes the + operation.<br/>
  - And finally it returns.
</p>




<p>
  The Rubinius virtual machine reminds me of those old “reverse polish” calculators from the 1980s, in which you would enter values on a stack in a similar way. The Rubinius source code is actually quite easy to understand since a large portion of it is actually written in Ruby, while the rest is written in well documented C++. The Rubinius compiler is no exception: it’s actually written in Ruby too! If you’re interested, you can see how the Rubinius compiler works without having to understand C++ at all. To get started take a look in the “lib/compiler” directory.
</p>




<p>
  The Rubinius virtual machine, which runs the Rubinius byte code, is implemented in C++ and leverages an open source project called LLVM. Like JRuby, it uses a “Just In Time” compiler to convert the byte code to machine language at runtime. This means that your Ruby code, for example the add_two method above, ends up being converted into native machine language and run directly by your computer’s hardware.
</p>




<p>
  <strong>Use the JRuby Compiler</strong><br/>
  Now let’s take a look at how JRuby compiles Ruby code; I’ll start by using RVM to switch over to JRuby, and then I’ll run the same simple.rb script:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rvm</span> <span class="n">jruby</span><span class="o">-</span><span class="n">head</span>
</span><span class='line'><span class="err">$</span> <span class="n">ruby</span> <span class="n">simple</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  No surprise, we get the same result. At a high level, JRuby uses the same two step process to run your script – first it compiles the Ruby code into byte code, and then executes the byte code using the Java Virtual Machine (JVM).
</p>




<p>
  Here’s another diagram showing the two step process, this time for JRuby:
</p>




<p>
  <img src="http://geekhmer.github.io/images/jruby_diagram.png" />
</p>




<p>
  Like with Rubinius, it’s possible to run the JRuby compiler directly using the "jrubyc" command… following the Java executable naming pattern ("java" –> "javac"). Running "jrubyc" will create a Java .class file, which we can inspect using the Java decompiler like I did last week:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">jrubyc</span> <span class="n">simple</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">$</span> <span class="n">ls</span>
</span><span class='line'><span class="n">simple</span><span class="o">.</span><span class="n">class</span> <span class="n">simple</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'><span class="err">$</span> <span class="n">javap</span> <span class="o">-</span><span class="n">c</span> <span class="n">simple</span><span class="o">.</span><span class="n">class</span> <span class="o">&gt;</span> <span class="n">simple</span><span class="o">.</span><span class="n">bytecode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Now the simple.bytecode file will contain an annotated version of the Java byte code the JVM will execute. Unlike Rubinius, which creates byte code that is fairly clean, simple and easy to understand, Java byte code is much more cryptic and confusing. Searching through the simple.bytecode file for my method add_two, I found the following snippet of byte code:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="kp">public</span> <span class="n">static</span> <span class="n">org</span><span class="o">.</span><span class="n">jruby</span><span class="o">.</span><span class="n">runtime</span><span class="o">.</span><span class="n">builtin</span><span class="o">.</span><span class="n">IRubyObject</span> <span class="n">method__1</span><span class="vg">$RUBY$add_two</span><span class="p">(</span><span class="n">simple</span><span class="p">,</span> <span class="n">org</span><span class="o">.</span><span class="n">jruby</span><span class="o">.</span><span class="n">runtime</span><span class="o">.</span><span class="n">Thread</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Code:</span>
</span><span class='line'><span class="sr">   0: aload_3       </span>
</span><span class='line'><span class="sr">   1: astore        9</span>
</span><span class='line'><span class="sr">   3: aload_1       </span>
</span><span class='line'><span class="sr">   4: aload_2       </span>
</span><span class='line'><span class="sr">   5: aload         9</span>
</span><span class='line'><span class="sr">   7: invokedynamic #80,  0             /</span><span class="o">/</span> <span class="no">InvokeDynamic</span> <span class="c1">#1:&quot;fixnumOperator:+&quot;:(Lorg/jruby/runtime/Thread...</span>
</span><span class='line'>  <span class="mi">12</span><span class="p">:</span> <span class="n">areturn</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Although quite difficult to understand, there are a couple of important details to notice:
</p>




<p>
  First, JRuby has compiled my Ruby add_two method into a byte code method called method__1$RUBY$add_two. This proves that my Ruby script has been compiled! That is, when JRuby ran simple.rb above, it did not read the Ruby code, interpret it and just follow the instructions like the MRI interpreter would do. Instead, it converted my Ruby script into byte code, and specifically my add_two method into the byte code snippet above.
</p>




<p>
  Second, notice the use of the “invokedynamic” byte code instruction. This is a new innovation of the Java Virtual Machine, making it easier for the JVM to support dynamic languages like Ruby. Here you can see it’s used by the add_two method to call the + operator of the Ruby Fixnum class, for my x+2 Ruby code. This use of invokedynamic is actually new for Java 1.7 and JRuby 1.7, so if you’re using the current release version of JRuby (1.6.4) or earlier you won’t see it appear in the byte code.
</p>




<p>
  All of the byte code you see above – in other words my Ruby script including the add_two method – will be compiled directly into native machine language if the JVM notices that it is called enough times, that it’s in a "hotspot".
</p>




<p>
  <strong>Who cares how Ruby works?</strong><br/>
  Today I’ve shown you some of the internal, technical details of Rubinius and JRuby. Many of you might find this boring and unimportant: who cares how Ruby works internally? All I care about is that my Ruby program works. And from one point of view that is all that really matters.
</p>




<p>
  However, I find Ruby internals to be fascinating… I really do like having at least a small understanding of what’s going on inside of Ruby while it’s running my code. I also believe it will help me to become a more effective and knowledgeable Ruby developer, even if I never contribute a line of internal code to Rubinius, JRuby or MRI. And studying Ruby internals has definitely lead me to a number of surprising discoveries, and forced me to rethink the mental model I have always had of the Ruby interpreter… or should I say, the Ruby compiler!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How the Hash Works in Ruby?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/16/how-the-hash-works-in-ruby/"/>
    <updated>2015-06-16T23:43:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/16/how-the-hash-works-in-ruby</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="How the Hash Works in Ruby?" />
</p>




<p>
  A brief overview of the hash data structure, how it is implemented in Ruby and a peek at the history of changes made to the hash in MRI Ruby.
</p>




<p>
  <strong>What is a Hash?</strong><br/>
  A Hash is a data structure that organizes data in key-value pairs. It is also referred to as a dictionary or associative array. It stores these key-value pairs of associated data in a way that enables efficient insertion and lookup, in constant O(1) time. These properties of a hash make it is one of the most useful tools in a programmer’s toolbox and it is available in the core libraries of most if not all, programming languages.
</p>




<p>
  In Ruby a hash can be declared literally as:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="ss">color</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">black</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">font</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Monaco</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span>
</span><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:color</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">black</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">:font</span><span class="o">=&gt;&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Monaco</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Or declaratively with the new method:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">h</span><span class="o">[</span><span class="ss">:color</span><span class="o">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">black</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="n">h</span><span class="o">[</span><span class="ss">:font</span><span class="o">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Monoco</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>How does a Hash store data and why is it efficient?</strong><br/>
  o understand how data is stored in a hash and why it is efficient, let’s revisit the basic linear data structure, the array. An array allows us to randomly access any element that it stores if we know the index of that element beforehand.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">a</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>  <span class="c1"># =&gt; 4</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  If the key-value pairs we were trying to store were integers within a limited range such as 1-20 or 1-100, we would simply use an array and our key would be the integer.
</p>




<p>
  For example, given that:<br/>
  - we need to store the names of the students in a classroom with 20 students<br/>
  - each student has a student id between 1 and 20<br/>
  - no two students have the same student id.
</p>




<p>
  We could simply store their names represented by the table below in an array:
</p>


<table>
<thead>
<tr>
<th>Key </th>
<th> Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>1 </td>
<td> Bunlong</td>
</tr>
<tr>
<td>2 </td>
<td> Jinglong</td>
</tr>
<tr>
<td>3 </td>
<td> Mickey Mouse</td>
</tr>
</tbody>
</table>


<br/>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">students</span><span class="o">=</span> <span class="o">[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Belle</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Ariel</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Peter</span> <span class="no">Pan</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Mickey</span> <span class="no">Mouse</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  But, what if the student id was a 4-digit number? Then we would have to assign a 10000 element table to access the names by the id. To solve this we simplify the key to the last 2 digits of the 4 digit number and use that as the location inside the table, so we can get random access to the record. Now, if we have another student with id “3221”, also ending in “21”, we would have to save two values at that location resulting in a collision.
</p>


<table>
<thead>
<tr>
<th>Key </th>
<th> Hash(key) = last 2 digits </th>
<th> Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>4221, 3221</td>
<td> 21 </td>
<td> Bunlong</td>
</tr>
<tr>
<td>1357 </td>
<td> 57 </td>
<td> Jinglong</td>
</tr>
<tr>
<td>4612 </td>
<td> 12 </td>
<td> Mickey Mouse </td>
</tr>
</tbody>
</table>


<br/>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">students</span><span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">students</span><span class="o">[</span><span class="mi">21</span><span class="o">]=[&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Belle</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Sofia</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">]</span>
</span><span class='line'><span class="n">students</span><span class="o">[</span><span class="mi">57</span><span class="o">]=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Ariel</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">students</span><span class="o">[</span><span class="mi">12</span><span class="o">]=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Peter</span> <span class="no">Pan</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="n">students</span><span class="o">[</span><span class="mi">14</span><span class="o">]=&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Mickey</span> <span class="no">Mouse</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What if the id was a 10-digit number or an alphanumeric string? This gets inefficient and unwieldy quickly. Unfortunately, too simple a hashing strategy can lead to problems.
</p>




<p>
  <strong>How Ruby’s hash function works?</strong><br/>
  So, now we have an understanding that the purpose of a hash function is to convert a given a key into an integer of limited range. In order to reduce the range, a commonly used technique is the division method. In the division method, the key is divided by the size of the storage or table and the remainder is the location inside that table where a record can be stored. Therefore, in the example above, if the table size was 20, the locations would be 1, 17, 12, 14 derived from the computation below.
</p>




<p>
  <code>4221 % 20 = 1</code><br/>
  <code>1357 % 20 = 17</code><br/>
  <code>4612 % 20 = 12</code><br/>
  <code>1514 % 20 = 14</code><br/>
</p>




<p>
  But in real life programming the keys are not always nice integers, they are strings, objects, or some other data type. This is solved by using a one-way hash function(digest) over the key and then applying the division method to get the location. The hash function is a mathematical function that takes a string of any length and produces a fixed length integer value. The hash data structure derives it’s name from this hashing mechanism. Ruby uses the <a href="https://en.wikipedia.org/wiki/MurmurHash" target="_blank">murmur hash function</a> and then applies the division method with a prime number M, which Ruby determines based on the table size that is needed for storage.
</p>




<p>
  <code>murmur_hash(key) % M</code>
</p>




<p>
  The code for this can be found in Ruby language’s source code in <a href="https://github.com/ruby/ruby/blob/1b5acebef2d447a3dbed6cf5e146fda74b81f10d/st.c" target="_blank">st.c file</a>.
</p>




<p>
  In case two keys return the same number, also known as a hash collision, the value is chained on to the same location or bucket in the table.
</p>




<p>
  <strong>How Ruby handles hash collisons and growth?</strong><br/>
  One of the problems faced by hash functions is distribution. What if most remainders fall into the same bucket? We would have to first find the bucket in the table from computing over the key, and then look through all the chained data in the location to find the matching record. That would defeat the purpose of creating a hash data structure for random access and O(1) time, because now we have to iterate over all these values to find the record which puts us back to O(n) time.
</p>




<p>
  It has been found that if divisor M is prime, the results are not as biased and more evenly distributed. But, even with the best divisor, collisions will occur as the number of records being added increases. Ruby adjusts the value of M based the density. Density is the number of records chained at a location in the table. In the above example, the density is 2, since we have 2 records that have the index/location 1.
</p>




<p>
  Ruby sets the maximum allowed density value to 5.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;define ST_DEFAULT_MAX_DENSITY 5&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  When the density of the records reaches 5, then Ruby adjusts the value of M, re-computes and adjust the hash for all the records that are in that hash. “The algorithm that computes M is one that generates prime numbers near powers of 2”, from <a href="http://www.amazon.com/Data-Structures-Using-Aaron-Tenenbaum/dp/0131997467" target="_blank">Data Structures using C</a>. Look at the function new_size in <a href="https://github.com/ruby/ruby/blob/1b5acebef2d447a3dbed6cf5e146fda74b81f10d/st.c" target="_blank">st.c</a> at line 158. This is where the size of the new hash is computed.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_size</span><span class="p">(</span><span class="n">st_index_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">st_index_t</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="mi">31</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;if ((st_index_t)(1&amp;lt;&amp;lt;i) &amp;gt; size) return 1&amp;lt;&amp;lt;i;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  }</span>
</span><span class='line'><span class="sr">  return -1;</span>
</span><span class='line'><span class="sr">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This is easier to read in the <a href="https://github.com/jruby/jruby/blob/master/core/src/main/java/org/jruby/RubyHash.java" target="_blank">JRuby’s</a> implementation of Hash where the prepared prime number values are statically used from an int array. As you can see the next values are 11, 19 and so on.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="no">MRI_PRIMES</span><span class="o">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="mi">8</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">16</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">32</span> <span class="o">+</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">128</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">256</span> <span class="o">+</span> <span class="mi">27</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span><span class="o">.</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This rehashing as the data grows larger causes a spike in the performance when the hash reaches certain specific sizes.
</p>




<p>
  <strong>Ruby hashes are unique for each process</strong><br/>
  One interesting thing to note is hashes are unique for each Ruby process. The murmur hash seeds it with a random value, which results in a different hash for a particular key for each Ruby process.
</p>




<p>
  <strong>Ruby has packed hashes for up to 6 entries since Ruby 2.0</strong><br/>
  Another interesting thing to note is that Ruby hashes that are very small(less than or equal to 6) are saved in one bucket and not spread over several buckets based on computed hash of the key. Instead, they are simply an array of values. This was added recently and is referred to as a packed entry in the code in st.c. On the <a href="https://github.com/ruby/ruby/pull/84" target="_blank">pull request</a> in which this change was submitted, the commiter has made the following comment.
</p>




<p>
  “Investigation shows, that typical rails application allocates tons of small hashes. Up to 40% of whole allocated hashes never grows bigger than 1 element size.”
</p>




<p>
  <strong>Ruby hash keys are ordered</strong><br/>
  Starting with Ruby 1.9.3, a property of the hash is that the keys are ordered based on how they are inserted into the hash. An interesting question was posted on the <a href="https://www.ruby-forum.com/topic/166075" target="_blank">Ruby-forum</a> questioning the reasoning behind it and how it would effect performance. The reply by Matz, creator of Ruby, on that thread, which explains the change is below.
</p>




<p>
  Could anybody explain why this feature was added?
</p>




<p>
  "Useful for some cases, especially for keyword arguments."
</p>




<p>
  Isn’t it going to slow down the operations on the Hash?
</p>




<p>
  "No. hash reference operation does not touch order information, only for iteration. Memory consumption increased a bit."
</p>




<p>
  Note: Keyword arguments were added to Ruby in 2.0, and an example is below:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">books</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Programming</span> <span class="no">Ruby</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">title</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;books # =&gt; &amp;lsquo;Programming Ruby&amp;rsquo;</span>
</span><span class='line'><span class="sr">books(title: &amp;lsquo;Eloquent Ruby&amp;rsquo;) # =&gt; &amp;lsquo;Eloquent Ruby&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Two potential upcoming changes in Hash</strong><br/>
  1- The next version of Ruby, will most likely introduce syntax sugar for a literal declaration of the hash that will allow spaces in symbols. Take a look at this commit on <a href="https://bugs.ruby-lang.org/issues/4276" target="_blank">ruby-trunk</a>. You may recall, that the first change from hashrocket to colon was introduced in Ruby 1.9 bringing the syntax closer to JSON’s syntax. With this upcoming change the hash will looks even more so like <a href="https://en.wikipedia.org/wiki/JSON" target="_blank">JSON</a>.
</p>




<p>
  Currently we need to declare a symbol with a space using a hash rocket:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">a</span> <span class="n">perfect</span> <span class="n">color</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">vermilion</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span> <span class="c1">#=&gt; {:&amp;ldquo;a perfect color&amp;rdquo;=&gt;&amp;ldquo;vermilion&amp;rdquo;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  With the change it will simply be the symbol within quotes followed by a colon:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">a</span> <span class="n">perfect</span> <span class="n">color</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">vermilion</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  2- Another interesting change that is in the works is a method that will allow returning <a href="https://bugs.ruby-lang.org/issues/10017" target="_blank">default values for missing keys in a hash</a>.
</p>




<p>
  Currently you can return the default value of only one key using <code>hash.fetch</code>, however the <code>hash.values_at</code> method allows returning multiple values for keys:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span> <span class="o">=</span> <span class="p">{</span><span class="ss">color</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">black</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">font</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">monaco</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:fontsize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">12</span><span class="n">pt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="c1">#=&gt; &amp;ldquo;12pt&amp;rdquo;</span>
</span><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:color</span><span class="p">,</span> <span class="ss">:font</span><span class="p">)</span> <span class="c1">#=&gt; [&amp;ldquo;black&amp;rdquo;, &amp;ldquo;monaco&amp;rdquo;]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The change proposed is to combine these two methods into one. It might work something like the <code>fetch_values</code> method shown below. Please note the new method name is still being voted on and the example is hypothetical.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">h</span><span class="o">.</span><span class="n">fetch_values</span><span class="p">(</span><span class="ss">:color</span><span class="p">,</span> <span class="ss">:font</span><span class="p">,</span> <span class="ss">:fontsize</span><span class="p">,</span> <span class="ss">:border</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span>
</span><span class='line'><span class="n">k</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">fontsize</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">?</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">12</span><span class="n">pt</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{k} is missing&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; [&amp;ldquo;black&amp;rdquo;, &amp;ldquo;monaco&amp;rdquo;, &amp;ldquo;12pt&amp;rdquo;, &amp;ldquo;border is missing&amp;rdquo;]&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Master Ruby Blocks]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/08/master-ruby-blocks/"/>
    <updated>2015-06-08T20:29:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/08/master-ruby-blocks</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Master Ruby Blocks" />
</p>




<p>
  Blocks are one of the most powerful and often overlooked feature of ruby. I must confess that it took me a while to figure out how ruby blocks work and how they can be useful in practice.
</p>




<p>
  There is something about <code>yield</code> that makes blocks very hard to understand at first. I'm going to talk about some of the concepts and provide a few examples so by the end of this post you'll have a solid understanding of ruby blocks.
</p>




<p>
  <strong>The basics: What are ruby blocks?</strong><br/>
  1. What are ruby blocks?<br/>
  2. How yield works?<br/>
  3. What does <code>&block</code> mean?<br/>
  4. Return value<br/>
  5. How does <code>.map(&:something)</code> work?<br/>
  6. Iterators and how to build one yourself<br/>
  7. Initialize objects with default values using blocks<br/>
  8. Ruby block examples
</p>




<p>
  <strong>What are ruby blocks?</strong><br/>
  A block is basically just code that you put inside <code>do</code> and <code>end</code>. That's it. "But where's the magic?" you might ask. We'll get there in just a minute but first things first.
</p>




<p>
  You can write the block in two ways:<br/>
  1. Multi-line, between <code>do</code> and <code>end</code><br/>
  2. Inline, between <code>{</code> and <code>}</code>
</p>




<p>
  Both versions will do the exact same thing so it's up to you which one you choose. As a general style-guide, it's better to use the multi-line version if your code has more than one line, just to make it easier to read.
</p>




<p>
  Here's a basic example of a multi-line block:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Number</span> <span class="c1">#{n}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  It's called a multi-line block because it's not inline, not because it's got more than one line of code (which is not the case here). The same example can be written with an inline block:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Number</span> <span class="c1">#{n}&amp;rdquo;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Both versions will print numbers 1, 2 and 3 in order. The little n letter you see between the pipes (<code>|n|</code>) is called a block parameter and it's value in this case is going to be each of the numbers in turn, in the order they are listed inside the array. So for the first iteration, the value of n will be 1, then for the second iteration, the value will be 2, and then 3.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Number</span> <span class="mi">1</span>
</span><span class='line'><span class="no">Number</span> <span class="mi">2</span>
</span><span class='line'><span class="no">Number</span> <span class="mi">3</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>How yield works?</strong><br/>
  Here's the bad wolf. This guy is responsible for all the confusion and magic around ruby blocks. I think most of the confusion comes from the way it calls the block and how it's passing parameters to it. We'll be looking at both scenarios in this section.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">reached</span> <span class="n">the</span> <span class="n">top</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">reached</span> <span class="n">the</span> <span class="n">bottom</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;my_method do</span>
</span><span class='line'><span class="sr">  puts &amp;ldquo;reached yield&amp;rdquo;</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">reached</span> <span class="n">the</span> <span class="n">top</span>
</span><span class='line'><span class="n">reached</span> <span class="k">yield</span>
</span><span class='line'><span class="n">reached</span> <span class="n">the</span> <span class="n">bottom</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So basically when the execution of <code>my_method</code> reaches the line with the call to <code>yield</code>, the code inside the block gets executed. Then, when the code inside the block finishes, the execution of <code>my_method</code> continues.
</p>




<p>
  <img src="http://geekhmer.github.io/images/ruby_block_flow.png" alt="Ruby Block Flow" />
</p>




<p>
  <strong>Passing blocks to methods</strong><br/>
  A method doesn't need to specify the block in it's signature in order to receive a block parameter. You can just pass a block to any function but unless that function calls <code>yield</code>, the block won't get executed.
</p>




<p>
  On the other hand, if you do call <code>yield</code> in your method, then the block parameter becomes mandatory and the method will raise an exception if it doesn't receive a block.
</p>




<p>
  If you want to make the block an optional parameter, you can use the <code>block_given?</code> method which will return either true or false depending on if a block was passed in to the method or not.
</p>




<p>
  <strong>Yield takes parameters too</strong><br/>
  Any parameter passed to <code>yield</code> will serve as a parameter to the block. So when the block runs, it can use the parameters passed in from the original method. Those parameters can be variables local to the method in which <code>yield</code> lives in.
</p>




<p>
  The order of the arguments is important because the order you use to pass in the parameters is the order in which the block receives them.
</p>




<p>
  <img src="http://geekhmer.github.io/images/ruby_block_arguments.png" alt="Ruby Block Arguments" />
</p>




<p>
  One thing to note here is that the parameters inside the block are local to the block (unlike those passed in from the method to the block).
</p>




<p>
  <strong>What does &block (ampersand parameter) mean?</strong><br/>
  You've probably seen this <code>&block</code> all over the place in ruby code. It's how you can pass a reference to the block (instead of a local variable) to a method. In fact, ruby allows you to pass any object to a method as if it were a block. The method will try to use the passed in object if it's already a block but if it's not a block it will call to_proc on it in an attempt to convert it to a block.
</p>




<p>
  Also note that the <code>block</code> part (without the ampersand) is just a name for the reference, you can use whatever name you like if it makes more sense to you.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">block</span>
</span><span class='line'>  <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;my_method { puts &amp;ldquo;Hello!&amp;rdquo; }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;&amp;lt;Proc:0x0000010124e5a8@tmp/ex</span><span class="n">ample</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">6</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Hello!</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Return value</strong><br/>
  <code>yield</code> returns the last evaluated expression (from inside the block). So in other words, the value that <code>yield</code> returns is the value the block returns.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="k">yield</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">value</span> <span class="ss">is</span><span class="p">:</span> <span class="c1">#{value}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;my_method do</span>
</span><span class='line'><span class="sr">  2</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="n">is</span> <span class="mi">2</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>How does .map(&:something) work?</strong><br/>
  You've probably used shortcuts like <code>.map(&:capitalize)</code> a lot, especially if you've done any Rails coding. It's a very clean shortcut to <code>.map { |title| title.capitalize }</code>.
</p>




<p>
  But how does it really work?
</p>




<p>
  It turns out that the Symbol class implements the to_proc method which will unwrap the short version into it's longer variant. Nice right?
</p>




<p>
  <strong>Iterators and how to build one yourself</strong><br/>
  You can call yield as many times as you want inside a method. That's basically how iterators work. Calling <code>yield</code> for each of the elements in the array mimics the behavior of the built in ruby iterators.
</p>




<p>
  Let's see how we can write a method similar to the map method in ruby.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_map</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">new_array</span> <span class="o">=</span> <span class="o">[]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  for element in array&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">new_array</span><span class="o">.</span><span class="n">push</span> <span class="k">yield</span> <span class="n">element</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  new_array</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">my_map</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
</span><span class='line'>  <span class="n">number</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="mi">4</span>
</span><span class='line'><span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Initialize objects with default values</strong><br/>
  A cool pattern we can use with ruby blocks is to initialize an object with default values. You've probably seen this pattern if you've ever ventured into a .gemspec file from any ruby gem.
</p>




<p>
  The way it works is, you have an initializer that calls <code>yield(self)</code>. In the context of the <code>initialize</code> method, <code>self</code> is the object being initialized.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Car</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:color</span><span class="p">,</span> <span class="ss">:doors</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">yield</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;car = Car.new do |c|</span>
</span><span class='line'><span class="sr">  c.color = &amp;ldquo;Red&amp;rdquo;</span>
</span><span class='line'><span class="sr">  c.doors = 4</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">My</span> <span class="n">car</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">color</span> <span class="n">is</span> <span class="c1">#{car.color} and it&amp;rsquo;s got #{car.doors} doors.&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">My</span> <span class="n">car</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">color</span> <span class="n">is</span> <span class="no">Red</span> <span class="ow">and</span> <span class="n">it</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">got</span> <span class="mi">4</span> <span class="n">doors</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Ruby blocks examples</strong><br/>
  Examples are all the rage these days so let's try to find a few interesting ways of using blocks in real world (or as close to real world as possible) scenarios.
</p>




<p>
  <strong>Wrap text in html tags</strong><br/>
  Blocks are the perfect candidate whenever you need to wrap a chunk of dynamic code within some static code. So for example if you want to generate an html tag for some text. The text is the dynamic part (cause you never know what you'll want to wrap) and the tags are the static part, they never change.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">wrap_in_h1</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="c1">#{yield}&lt;/h1&gt;&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;wrap_in_h1 { &amp;ldquo;Here&amp;rsquo;s my heading&amp;rdquo; }&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="no">Here</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="n">s</span> <span class="n">my</span> <span class="n">heading</span><span class="o">&lt;</span><span class="sr">/h1&gt;&amp;rdquo;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">wrap_in_h1</span> <span class="p">{</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Ha</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">*</span> <span class="mi">3</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; &amp;ldquo;&lt;h1&gt;HaHaHa&lt;/</span><span class="n">h1</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Note that the power of using blocks over methods is when you need to reuse some of the behavior but do something slightly different with it. So let's say we have a string we want to wrap inside html tags and then do something different with it.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">wrap_in_tags</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
</span><span class='line'>  <span class="n">html</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="c1">#{tag}&gt;#{text}&amp;lt;/#{tag}&gt;&amp;rdquo;</span>
</span><span class='line'>  <span class="k">yield</span> <span class="n">html</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;wrap_in_tags(&amp;ldquo;title&amp;rdquo;, &amp;ldquo;Hello&amp;rdquo;) { |html| Mailer.send(html) }</span>
</span><span class='line'><span class="sr">wrap_in_tags(&amp;ldquo;title&amp;rdquo;, &amp;ldquo;Hello&amp;rdquo;) { |html| Page.create(:body =&gt; html) }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  In the first case we're sending the <title>Hello</title> string via email and in the second case we're creating a Page record. Both cases use the same method but they do different things.
</p>




<p>
  <strong>Take a note</strong><br/>
  Let's say we want to build a way to quickly store ideas into a database table. For that to work we want to pass in the note and have the method deal with the database connections. Ideally we'd like to call <code>Note.create { "Nice day today" }</code> and not worry about opening and closing database connections. So let's do this.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Note</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:note</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize(note=nil)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@note</span> <span class="o">=</span> <span class="n">note</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;@note is </span><span class="si">#{</span><span class="vi">@note</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def self.create&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">self</span><span class="o">.</span><span class="n">connect</span>
</span><span class='line'><span class="n">note</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'><span class="n">note</span><span class="o">.</span><span class="n">write</span>
</span><span class='line'><span class="nb">self</span><span class="o">.</span><span class="n">disconnect</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def write&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Writing </span><span class="se">\&quot;</span><span class="si">#{</span><span class="vi">@note</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2"> to the database.&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  private</span>
</span><span class='line'><span class="sr">  def self.connect&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Connecting to the database...&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def self.disconnect&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="s2">&quot;Disconnecting from the database...&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;Note.create { &amp;ldquo;Foo&amp;rdquo; }</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Connecting</span> <span class="n">to</span> <span class="n">the</span> <span class="n">database</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="vi">@note</span> <span class="n">is</span> <span class="no">Foo</span>
</span><span class='line'><span class="no">Writing</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Foo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="n">to</span> <span class="n">the</span> <span class="n">database</span><span class="o">.</span>
</span><span class='line'><span class="no">Disconnecting</span> <span class="n">from</span> <span class="n">the</span> <span class="n">database</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The implementation details of connecting, writing and disconnecting to and from the database were left out since they're out of the scope of this article.
</p>




<p>
  <strong>Find divisible elements of an array</strong><br/>
  It seems like I'm getting further and further away from "the real world scenario" but anyways, I'm gonna shoot one last example. So let's say you want to get every element of an array that is divisible by 3 (or any number you choose), how would you do that with ruby blocks?
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_proc</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;Proc.new do |obj, *args|</span>
</span><span class='line'><span class="sr">  obj % self == 0</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="o">].</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">numbers</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">3</span>
</span><span class='line'><span class="mi">6</span>
</span><span class='line'><span class="mi">9</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can think of blocks as simply a chunk of code, and yield allows you to inject that code at some place into a method. That means you can have one method work in different ways, you don't have to write multiple methods (you can reuse one method to do different things).
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Use link_to in Ruby on Rails?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/06/how-to-use-link-to-in-ruby-on-rails/"/>
    <updated>2015-06-06T21:39:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/06/how-to-use-link-to-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="How to Use link_to in Ruby on Rails?" />
</p>




<p>
  Even after many years of using Ruby on Rails I still have trouble remembering how to properly use all those options available for the link_to helper. Three out of five times I have to fire up the docs and search for the examples (cause that's how I like to read the docs).
</p>




<p>
  <strong>Having Documentation in Hand</strong><br/>
  Using documentation locally is helpful, especially if you can integrate it into your editor. Personally I'm using the <code>ri</code> docs with Vim but I guess all those other editors can be configured to access it. If not you can always use ri in your terminal of choice.
</p>




<p>
  Another favourite of mine is the awesome ApiDock. You can even see other people's comments on the docs and in many cases there you can find examples that are not present in the official docs.
</p>




<p>
  Another very good option (if you're on a mac) is to use Dash. It's easy to integrate in your editor or you can just fire it up with a system shortcut whenever you need to access the docs.
</p>




<p>
  That being said, I'm gonna list out a few of the more common examples I use in hopes that they will be useful for both you and me whenever I need to revisit <code>link_to</code>'s docs again.
</p>




<p>
  <strong>The Simplest Form</strong><br/>
  The most common and straightforward way of using <code>link_to</code> is to create a barebones (no magic) link. So, assuming your root route points to '/', the way you would use the helper is:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Home&amp;rdquo;, root_path %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;h1&gt;=</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span><span class="o">&gt;</span><span class="no">Home</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Link-ing to a Resource</strong><br/>
  Another common variant is linking to a resource (a user's profile for example). Let's say the user's model is called User and that a @user ivar points to the user record who's id is 1. Creating a link to the user's profile will look like the following:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Profile&amp;rdquo;, user_path(@user) %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;h1&gt;=</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/users/1&quot;</span><span class="o">&gt;</span><span class="no">Profile</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  There's also a shorter version that will do the same thing. It's got some magic to it (like most things in Rails) but it also looks prettier and there's less to type (two stones with one bird).
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Profile&amp;rdquo;, @user %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;h1&gt;=</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/users/1&quot;</span><span class="o">&gt;</span><span class="no">Profile</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Using link_to with a Block</strong><br/>
  This is somewhat of a lesser known/used option of <code>link_to</code> but it's useful nonetheless and it also makes the code more readable. So in those cases where the link text is long and/or ugly, or it doesn't really fit on a 80 chars line, you can pass the link text inside a block.
</p>




<p>
  To make the example more obvious, I'm gonna do a before and after kind of thing.
</p>




<p>
  Before:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;&lt;span class=</span><span class="s1">&#39;home-link&#39;</span><span class="o">&gt;</span><span class="no">Home</span><span class="o">&lt;</span><span class="sr">/span&gt;&amp;rdquo;.html_safe, root_path %&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span><span class="o">&gt;&lt;</span><span class="n">span</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;home-link&quot;</span><span class="o">&gt;</span><span class="no">Home</span><span class="o">&lt;</span><span class="sr">/span&gt;&lt;/</span><span class="n">a</span><span class="o">&gt;&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  After:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to root_path do %&gt;</span>
</span><span class='line'><span class="sx">  &amp;lt;%=</span> <span class="n">content_tag</span> <span class="ss">:span</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Home</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">home</span><span class="o">-</span><span class="n">link</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&amp;lt;% end %&gt;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; &lt;a href=&quot;http:/</span><span class="o">/</span><span class="n">geekhmer</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="s2">&quot;&gt;&lt;span class=&quot;</span><span class="n">home</span><span class="o">-</span><span class="n">link</span><span class="s2">&quot;&gt;Home&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  In this case I've purposely chosen a less uglier link text, but usually the link text will be something like an image tag or a span with an icon inside it (or any other ugly html code you can think of).
</p>




<p>
  <strong>Adding html classes and/or id to Your Link</strong><br/>
  Another very common task you'll use is to add a html class or id to your links.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Section&amp;rdquo;, root_path, :class =</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my</span><span class="o">-</span><span class="n">class</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my</span><span class="o">-</span><span class="nb">id</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span> <span class="n">class</span><span class="o">=</span><span class="s2">&quot;my-class&quot;</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;my-id&quot;</span><span class="o">&gt;</span><span class="no">Section</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>How to Delete a Record with link_to</strong><br/>
  Calling the <code>destroy</code> action of a REST-ful controller requires a <code>DELETE</code> request and that can be easily achieved by passing the <code>:method => :delete</code> hash as an option to the <code>link_to</code> helper.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Remove&amp;rdquo;, @user, :method =</span><span class="o">&gt;</span> <span class="ss">:delete</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">rel</span><span class="o">=</span><span class="s2">&quot;nofollow&quot;</span> <span class="n">data</span><span class="o">-</span><span class="nb">method</span><span class="o">=</span><span class="s2">&quot;delete&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/users/1&quot;</span><span class="o">&gt;</span><span class="no">Remove</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Note that the <code>rel="nofollow"</code> is auto-magically added by Rails as an SEO bonus.
</p>




<p>
  <strong>Require Confirmation for Deleting a Record</strong><br/>
  You will probably want some sort of confirmation when removing objects to prevent accidental deletes. The easiest way to add that is with a simple javascript alert box that will ask the user to confirm his delete request.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Remove&amp;rdquo;, @user, :method =</span><span class="o">&gt;</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:confirm</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">You</span> <span class="no">Sure</span><span class="p">?</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">data</span><span class="o">-</span><span class="n">confirm</span><span class="o">=</span><span class="s2">&quot;You Sure?&quot;</span> <span class="n">rel</span><span class="o">=</span><span class="s2">&quot;nofollow&quot;</span> <span class="n">data</span><span class="o">-</span><span class="nb">method</span><span class="o">=</span><span class="s2">&quot;delete&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/users/1&quot;</span><span class="o">&gt;</span><span class="no">Remove</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Link-ing to an Image with link_to</strong><br/>
  It might be that you want to make your links prettier or that you want to have some nice buttons, or even a logo click-able or whatever the reason for using click-able images is, you'll want to add your image inside the link. Making an image link-able is pretty straight forward. Just add the <code>image_tag</code> where the link text would go and you're done.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to image_tag(&amp;lsquo;logo.png&amp;rsquo;), root_path %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;h1&gt;=</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/assets/logo-c88948e05e11587af2c23747862ca433.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s2">&quot;Logo&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  You can also pass the image in a block if you like that style better.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to root_path do %&gt;</span>
</span><span class='line'><span class="sx">  &amp;lt;%=</span> <span class="n">image_tag</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">logo</span><span class="o">.</span><span class="n">png</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&amp;lt;% end %&gt;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; &lt;a href=&quot;http:/</span><span class="o">/</span><span class="n">geekhmer</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="s2">&quot;&gt;&lt;img src=&quot;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">geekhmer</span><span class="o">.</span><span class="n">github</span><span class="o">.</span><span class="n">io</span><span class="o">/</span><span class="n">assets</span><span class="o">/</span><span class="n">logo</span><span class="o">-</span><span class="n">c88948e05e11587af2c23747862ca433</span><span class="o">.</span><span class="n">png</span><span class="s2">&quot; alt=&quot;</span><span class="no">Logo</span><span class="s2">&quot;&gt;&lt;/a&gt;&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  A nice side-effect of using the <code>image_tag</code> helper is that it will add the asset digest to your image.
</p>




<p>
  <strong>Adding an alt Attribute to the Image</strong><br/>
  As you've seen in the previous example, I didn't specify an alt attribute but the link_to helper generated one. The generated alt tag is just the name of the image file, capitalized. In case you want (and you should want) to override the alt attribute, it's very easy to do; just add your own alt attribute like so:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to image_tag(&amp;lsquo;logo.png&amp;rsquo;), root_path, :alt =</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">MyLogo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span><span class="o">&gt;&lt;</span><span class="n">img</span> <span class="n">src</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/assets/logo-c88948e05e11587af2c23747862ca433.png&quot;</span> <span class="n">alt</span><span class="o">=</span><span class="s2">&quot;MyLogo&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Alt attributes are beneficial for SEO purposes and they also aid those visitors who use text readers or non graphical browsers.
</p>




<p>
  <strong>Link-ing to an Image</strong><br/>
  There are times when you might want to link to an image (not necessarily with an image). This can be confusing because you need your image to contain the image digest generated by the asset pipeline. There's a helper that provides just that and it's called <code>image_path</code>.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Logo&amp;rdquo;, image_path(&amp;lsquo;logo.png&amp;rsquo;) %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">&lt;h1&gt;=</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/assets/logo-c88948e05e11587af2c23747862ca433.png&quot;</span><span class="o">&gt;</span><span class="no">Logo</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Anchors with link_to</strong><br/>
  You might need to point to a specific section (anchor) in the page which you can identify by it's dom ID. So let's say on the target page we have a section that has the <code>id="interesting-section"</code>. In order to point our link to that section, we'll need to add the anchor to the generated link.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Section&amp;rdquo;, root_path(:anchor =</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">interesting</span><span class="o">-</span><span class="n">section</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/#interesting-section&quot;</span><span class="o">&gt;</span><span class="no">Section</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Ajax Links with link_to Remote</strong><br/>
  You can add the <code>:remote => true</code> option to the link to tell Rails that you want to handle the link via javascript. This option will automatically send an ajax request (handled via the jQuery UJS adapter).
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Ajax&amp;rdquo;, root_path, :remote =</span><span class="o">&gt;</span> <span class="kp">true</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">data</span><span class="o">-</span><span class="n">remote</span><span class="o">=</span><span class="s2">&quot;true&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span><span class="o">&gt;</span><span class="no">Ajax</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Opening the link in a new tab or window</strong><br/>
  For a good user experience and because you'll want your user not to leave your website if possible, you should make all your external links open in a separate tab or window. You can achieve this by using the <code>target="_blank"</code> html attribute which in Rails speak will look like this:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Google&amp;rdquo;, &amp;ldquo;&lt;a href=</span><span class="s2">&quot;http://google.com&quot;</span><span class="o">&gt;</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">google</span><span class="o">.</span><span class="n">com</span><span class="o">&lt;</span><span class="sr">/a&gt;&amp;rdquo;, :target =&gt; &amp;ldquo;_blank&amp;rdquo; %&gt;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">target</span><span class="o">=</span><span class="s2">&quot;_blank&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://google.com&quot;</span><span class="o">&gt;</span><span class="no">Google</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>POST-ing Using link_to</strong><br/>
  Sending a post request via a link is something that the html cannot do. You can only use it to make <code>GET</code> requests, not <code>POST</code>. That being said, Rails has some magic tricks for you.
</p>




<p>
  By providing the <code>:method => :post</code> option, Rails will create a form and submit it via javascript. Note that you need the <code>jquery-rails</code> gem for this to work, if you don't have it, there won't be any magic happening and your links will default to a GET request.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Post&amp;rdquo;, root_path, :method =</span><span class="o">&gt;</span> <span class="ss">:post</span> <span class="sx">%&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">rel</span><span class="o">=</span><span class="s2">&quot;nofollow&quot;</span> <span class="n">data</span><span class="o">-</span><span class="nb">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/&quot;</span><span class="o">&gt;</span><span class="no">Post</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Adding More Params to the POST Request</strong><br/>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="sx">%= link_to &amp;ldquo;Create User&amp;rdquo;, users_path(:email =</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">a</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#x6f;&amp;#58;&amp;#x6a;&amp;#100;&amp;#x6f;&amp;#x65;&amp;#x40;&amp;#101;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&quot;</span><span class="o">&gt;&amp;</span><span class="c1">#106;&amp;#100;&amp;#x6f;&amp;#x65;&amp;#64;&amp;#101;&amp;#109;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#111;&amp;#x6d;&lt;/a&gt;&amp;rdquo;, :password =&gt; &amp;ldquo;secret&amp;rdquo;), :method =&gt; :post %&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="o">&lt;</span><span class="n">a</span> <span class="n">rel</span><span class="o">=</span><span class="s2">&quot;nofollow&quot;</span> <span class="n">data</span><span class="o">-</span><span class="nb">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="n">href</span><span class="o">=</span><span class="s2">&quot;http://geekhmer.github.io/users?email=jdoe%40email.com&amp;amp;password=secret&quot;</span><span class="o">&gt;</span><span class="no">Create</span> <span class="no">User</span><span class="o">&lt;</span><span class="sr">/a&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  These are some of the more common ways I've used link_to but I'm sure there are many others. So if you have any other examples I could add to the article.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
</feed>
