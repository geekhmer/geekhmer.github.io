<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-07-11T22:45:00+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Server Command Line Options]]></title>
    <link href="http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options/"/>
    <updated>2015-07-11T22:19:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/07/11/rails-server-command-line-options</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Rails Server Command Line Options" />
</p>




<p>
  Syntax:
</p>


<p>{% codeblock lang:ruby %}
rails [options]
{% endcodeblock %}</p>

<p>
  Options:<br/>
  -s, –config-script=path Uses the specified mongrel config script.<br/>
  -p, –port=port Runs Rails on the specified port. Default: 3000<br/>
  -b, –binding=ip Binds Rails to the specified ip. Default: 0.0.0.0<br/>
  -e, –environment=name Specifies the environment to run this server under (test/development/production). Default: development
</p>




<p>
  <strong>Listen on any Interface</strong><br/>
  By default versions of Rails is localhost, this prevents users on your local network from accessing your network. You may not want to do this however. You may wish to share your development site with coworker so that they can review the site. Otherwise, you may wish to test the site on other devices such as a mobile device. Fortunately you can easily open the rails server up to all interfaces using the -b argument. Simple run the rails s command below:
</p>


<p>{% codeblock lang:ruby %}
rails s -b 0.0.0.0
{% endcodeblock %}</p>

<p>
  <strong>Use a Different Port</strong><br/>
  Sometimes you want to use a port other than 3000 for your Rails server. For instance, maybe you need to run multiple Rails servers. You can easily do this with the -p argument:
</p>


<p>{% codeblock lang:ruby %}
rails s -p 3001
{% endcodeblock %}</p>

<p>
  This command line tells rails to start the server on port 3001 instead of 3000.
</p>




<p>
  <strong>Run in a Different Environment</strong><br/>
  You can start a rails server for another environment such as production or staging by using the -e argument along with the name of the environment you wish to start up in:
</p>


<p>{% codeblock lang:ruby %}
rails s -e production
{% endcodeblock %}</p>

<p>
  The code above starts the Rails server in the production environment. Very handy when you have custom environments or need to debug something.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mark Methods Private When You Don’t Test Them]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/25/mark-methods-private-when-you-dont-test-them/"/>
    <updated>2015-06-25T20:58:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/25/mark-methods-private-when-you-dont-test-them</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  In Ruby and many other languages, you write private methods to implement internal logic you don’t want to expose. You want the freedom to rename, repurpose or even delete them without worrying about impacting anything else. The <code>private</code> keyword signals other developers: Don’t rely on this; don’t call it; it might change. This is especially important when writing framework or library code that many other developers will use.
</p>




<p>
  But which methods should you make private? Sometimes this is obvious; sometimes it isn't. A good rule of thumb to use is: If you’re not testing a method, it should be private.
</p>




<p>
  But wait a minute! Aren't we supposed to test everything? Isn't 100% code coverage the every Ruby developer seeks? Let me clarify. You should mark methods private when you test them indirectly by calling the other, public methods in the same class. Use the <code>private</code> keyword to help organize your code, to remind yourself what you still need to test, and what you don't.
</p>




<p>
  <strong>Three Paintings</strong><br/>
  A simple example will make this clear. Suppose I have a class that describes a painting:
</p>


<p>{% codeblock lang:ruby %}
Painting = Struct.new(:name, :year)
{% endcodeblock %}</p>

<p>
  Now I can create a list of three paintings in a Minitest::Spec file like this:
</p>


<p>{% codeblock lang:ruby %}
let(:one) { Painting.new(&ldquo;Spanish Couple In Front Of Inn&rdquo;, 1900) }
let(:two) { Painting.new(&ldquo;Guernica&rdquo;, 1937) }
let(:three) { Painting.new(&ldquo;Petite Fleurs&rdquo;, 1958) }
let(:paintings) { [one, two, three] }
{% endcodeblock %}</p>

<p>
  Suppose my first requirement is to return the first painting from the list. Simple enough:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  list.first
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;should return the first element&rdquo; do
  first(paintings).must_equal one
end
{% endcodeblock %}</p>

<p>
  I just call Array#first and I’m done. Returning the rest of the list is slightly more interesting:
</p>


<p>{% codeblock lang:ruby %}
def rest(list)
  _, *rest = list
  rest
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the rest of the elements&rdquo; do
  rest(paintings).must_equal [two, three]
end
{% endcodeblock %}</p>

<p>
  Rest always returns an array even if the input list was empty or had only one element. So far, so good. I’ve written two methods and two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>A New Requirement</strong><br/>
  Now suppose my business requirement changes slightly and I instead need to return the first painting sorted alphabetically by name. Once again, it’s not hard to do:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end.first
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;should return the first element&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end
{% endcodeblock %}</p>

<p>
  And I need rest to use the same sort order, so I repeat the call to sort:
</p>


<p>{% codeblock lang:ruby %}
def rest(list)
  _, *rest = list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
  rest
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the rest of the elements&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  I’ve implemented new behavior, but still have two methods and two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>Extracting a Method</strong><br/>
  Because both of my methods are covered by tests, I’m free to refactor them. I decide to extract a new method, sorted_by_name:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  sorted_by_name(list).first
end</p>

<p>def rest(list)
  _, *rest = sorted_by_name(list)
  rest
end</p>

<p>def sorted_by_name(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the element with the first name&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end</p>

<p>it &ldquo;returns the rest after the first name&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  Here I’ve simply moved the call to sort into a utility method called sorted_by_name. Now first and rest both call sorted_by_name, making the code a bit clearer and DRY-er. But now I have three methods and only two tests:
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests_three_methods.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  <strong>Mark Methods Private When You Don’t Test Them</strong><br/>
  Notice I didn’t bother writing a test for sorted_by_name. I know it works because my other tests still pass. The existing tests are sufficient; I am testing sorted_by_name indirectly. Because I extracted sorted_by_name from first and rest, because I refactored my code without adding any new behavior, no new test were required.
</p>




<p>
  In this scenario, take the time to mark the new, untested method as private:
</p>


<p>{% codeblock lang:ruby %}
def first(list)
  sorted_by_name(list).first
end</p>

<p>def rest(list)
  _, *rest = sorted_by_name(list)
  rest
end</p>

<p>private
def sorted_by_name(list)
  list.sort do |p1, p2|</p>

<pre><code>p1.name &lt;=&gt; p2.name
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>{% codeblock lang:ruby %}
it &ldquo;returns the element with the first name&rdquo; do
  first(paintings).name.must_equal &ldquo;Guernica&rdquo;
end</p>

<p>it &ldquo;returns the rest after the first name&rdquo; do
  rest(paintings).map(&amp;:name).must_equal [</p>

<pre><code>"Petite Fleurs",
"Spanish Couple In Front Of Inn"
</code></pre>

<p>  ]
end
{% endcodeblock %}</p>

<p>
  The private keyword here reminds me I’ve already tested sorted_by_name, that I don’t need to write new tests for it. Now private is helping me organize my code; it’s helping me remember which methods I don’t need to test… and which methods are missing important tests.
</p>




<p>
  <img src="http://geekhmer.github.io/images/two_tests_three_methods_private.png" width="400" alt="Mark Methods Private When You Don’t Test Them" />
</p>




<p>
  f my tests don’t need to know about sorted_by_name, then certainly other developers don’t. It should be private. Marking it private reminds me that it is being tested indirectly, that I didn’t just forget to write a test for it. Marking it private tells other developers about what I’ve learned from my own test suite.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Message Queue in Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/21/use-message-queue-in-rails/"/>
    <updated>2015-06-21T10:53:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/21/use-message-queue-in-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/message_queue .png" width="400" alt="Use Message Queue in Rails" />
</p>




<p>
  This article describes the application architecture pattern which is (in general) nothing new, but (from my experience) rarely applied in the Rails world. I’m talking about the nice and simple abstraction – message queue. But let me start by describing the goals I want to achieve and some alternative solutions.
</p>




<h3>
  Goals
</h3>




<p>
  <strong>Split</strong> application into a few smaller applications<br/>
  Smaller applications are easier to reason about. You don’t have to go through 50 classes, you can just read 10, because it’s all you’ve got. When a new developer joins the team he has nice onboarding if you can tell him: “hey, start with this small piece of code, everything you need to know to implement this new feature is encapsulated here”.
</p>




<p>
  <strong>Separate</strong> code for concepts which are not logically connected<br/>
  Smaller applications are easier to reason about. You don’t have to go through 50 classes, you can just read 10, because it’s all you’ve got. When a new developer joins the team he has nice onboarding if you can tell him: "hey, start with this small piece of code, everything you need to know to implement this new feature is encapsulated here".
</p>




<p>
  Use <strong>new</strong> languages and frameworks<br/>
  We, developers, want to try and learn new languages, libraries, frameworks and technologies. If you make a small application with a shiny new tool and fail – the consequences are less severe, because you can quickly rewrite this small application. If you are going to make one big application, you will think twice before introducing a new tool. So, in some way, smaller applications minimize the risk.
</p>




<h3>
  Solution1 - One database, multiple apps
</h3>




<p>
  This is the very first idea which may come to your mind – just point multiple applications to the one shared database. Been there, done that, won’t do that again! Data is associated with validation logic. Either you duplicate this logic in every app or you extract it to Rails engine gem. Both solutions are hard to maintain (think about running migrations…) and you still have strong coupling in your system.
</p>




<p>
  One case when this approach may work – one read-write app and many read-only apps, but I haven’t tried it.
</p>




<h3>
  Solution2 - Expose REST API
</h3>




<p>
  As Rails devs we are pretty familiar with REST, so we can expose REST API in one of our apps and call this API in the other. This approach has many solid use cases so here I’m just listing some weak points to take into consideration:
</p>




<p>
  - Usually requests in Ruby are blocking – calling app has to wait for the response even if it’s not interested in it.<br/>
  - Requires authentication – we have to somehow ensure that our internal API is not used… well, externally.<br/>
  - Everything happens in server process – if you are calling your internal API you may end up using the same server process which is used for handling requests of your “real users”. You would like to give your “real users” priority.<br/>
  - Calling app has knowledge about receiving app – you have to know which endpoints should be called and which parameters be passed. This introduces coupling.<br/>
</p>




<h3>
  Solution3 - Message queue
</h3>




<p>
  Message queue is a really nice abstraction. Publisher just leaves messages at one end of the "pipe", consumer reads messages from the other end of the "pipe". It is asynchronous, because publisher does not wait for his message to be processed. Moreover, it decouples publisher from consumer, because publisher does not care what happens with his message and who will read it.
</p>




<p>
  This architecture is also resistant to outages, at least when we assume that the queue service rarely breaks. If the consumer is not processing messages, nothing prevents publisher from adding more of them to the queue. When consumer starts to function again, it will process messages from the buffer (if they didn’t take all of your memory).
</p>




<h3>
  When it shines?
</h3>




<p>
  Message queue is really useful if we have some processing which happens out of the main business flow and the main business flow does not have to wait for the results of this processing. The most common example is custom event tracking – own analytics module. We just publish an event and continue execution without slowing anything down.
</p>




<h3>
  RabbitMQ
</h3>




<p>
  RabbitMQ is a popular choice for message queue service, especially in Rails world. Honestly, I haven’t tried different implementations, because RabbitMQ really has everything I need.
</p>




<p>
  There are Ruby gems for communicating with RabbitMQ and it’s also easy to install and configure.
</p>




<p>
  <img src="http://geekhmer.github.io/images/rabbitmq_concepts.png" width="400" alt="Use Message Queue in Rails" />
</p>




<p>
  In this diagram there are presented some concepts introduced by RabbitMQ. Publisher leaves messages in the exchange. Then they are routed from the exchange to multiple queues. There are many routing algorithms available – <a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges" target="_blank">https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchanges</a>
</p>




<p>
  Workers grab messages from queue. If there are multiple workers connected to one queue, they will be load balanced and the message will be delivered only to one of them.
</p>




<h3>
  Easy case
</h3>




<p>
  If you feel overwhelmed – don’t worry. Here is what you should start with:
</p>




<p>
  <img src="http://geekhmer.github.io/images/rabbitmq_easy_case.png" width="400" alt="Use Message Queue in Rails" />
</p>




<h3>
  Publishing
</h3>




<p>
  Now it’s time for some code. It’s really simple, because integration with RabbitMQ is simple. We will use two gems – <code>bunny</code> and <code>sneakers</code>.
</p>


<p>{% codeblock lang:ruby %}</p>

<h1>Gemfile</h1>

<p>gem &lsquo;bunny&rsquo;</p>

<h1>an initializer</h1>

<p>connection = Bunny.new(host: &lsquo;localhost&rsquo;)
connection.start
channel = connection.create_channel</p>

<h1>a service</h1>

<p>class RabbitPublisher</p>

<p>  def initialize(channel)</p>

<pre><code>self.channel = channel
</code></pre>

<p>  end</p>

<p>  def publish(exchange_name, message)</p>

<pre><code>exchange = channel.fanout(exchange_name, durable: true)
exchange.publish(message.to_json)
</code></pre>

<p>  end</p>

<p>  private
  attr_accessor :channel
end
{% endcodeblock %}</p>

<h3>
  Receiving
</h3>


<p>{% codeblock lang:ruby %}</p>

<h1>Gemfile</h1>

<p>gem &lsquo;sneakers&rsquo;</p>

<h1>an initializer</h1>

<p>Sneakers.configure  daemonize: true,</p>

<pre><code>                amqp: "amqp://localhost",
                log: "log/sneakers.log",
                pid_path: "tmp/pids/sneakers.pid",
                threads: 1,
                workers: 1
</code></pre>

<h1>app/workers/events_worker.rb</h1>

<p>class EventsWorker
  include Sneakers::Worker
  from_queue &ldquo;events&rdquo;, env: nil</p>

<p>  def work(raw_event)</p>

<pre><code>event_params = JSON.parse(raw_event)
SomeWiseService.build.call(event_params)
ack!
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  For details refer to documentation of <a href="https://github.com/ruby-amqp/bunny" target="_blank">bunny</a> and <a href="https://github.com/jondot/sneakers" target="_blank">sneakers</a>.
</p>




<p>
  If you enjoyed this article you can consider ping me for more details.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ajax on Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/19/ajax-on-rails/"/>
    <updated>2015-06-19T11:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/19/ajax-on-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ajax_on_rails.png" width="400" alt="Ajax on Rails" />
</p>




<p>
  This is a tutorial for ajax use with Rails conventions. For illustrative purposes, we’ll build a single-page Product list app.
</p>




<p>
  <strong>About Ajax</strong><br/>
  Ajax (Asynchronous JavaScript and XML) is used as a mechanism for sending and retrieving data asynchronously (in the background). While XML can certainly be used with ajax, it is not limited to this format. The JSON format, for example, is more commonly used today, especially in the Rails community. There are significant advantages in using Ajax, which include better user interactivity. Ajax allows content on a page to be updated without having to re-render the entire page, making it a "seamless" experience.
</p>




<p>
  <strong>Create a New Product on the Index Page</strong><br/>
  Before we start, let’s take a quick look at our schema so that we know what we’re working with:
</p>


<p>{% codeblock lang:ruby %}
ActiveRecord::Schema.define(version: 20140620130316) do
  create_table &ldquo;products&rdquo;, force: true do |t|</p>

<pre><code>t.datetime "created_at",  null: false
t.datetime "updated_at",  null: false
t.string   "name",        null: false
t.string   "description", null: false
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  After creating a Product model and then create some products to play with, our Product Controller should look like this:
</p>


<p>{% codeblock products_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  def index</p>

<pre><code>@products = Product.all
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Instead of creating <code>new.html.erb</code>, let’s add a button somewhere on our <code>index.html.erb</code> that users can use to display a hidden form:
</p>


<p>{% codeblock index.html.erb lang:ruby %}
&hellip;</p>

<p>&lt;%= link_to &lsquo;New Product&rsquo;, new_product_path, remote: true %></p>

<p>&hellip;
{% endcodeblock %}</p>

<p>
  Here we pass the <code>remote: true</code> option to disable the default Rails mechanism that would have otherwise navigated us to <code>/products/new</code>.
</p>




<p>
  Before moving on, let’s quickly revisit our Product Controller and set it up to create new products with ajax:
</p>


<p>{% codeblock products_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  before_action :all_product, only: [:index, :create]</p>

<p>  # index action has been removed</p>

<p>  def new</p>

<pre><code>@product = Product.new
</code></pre>

<p>  end</p>

<p>  def create</p>

<pre><code>@product  = Product.create(product_params)
</code></pre>

<p>  end</p>

<p>  private
  def all_products</p>

<pre><code>@products = Product.all
</code></pre>

<p>  end</p>

<p>  def product_params</p>

<pre><code>params.require(:product).permit(:name, :description)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  I have removed the index action because I created a <code>before_action</code> filter that creates the <code>@products</code> instance variable for us automatically. Because we no longer have any logic in our index action, it is not necessary. Rails will automatically render the correct template, even without the presence of the action.
</p>




<p>
  Noteworthy here is the <code>respond_to</code> method invoked near the top that will allow us to render both html and javascript responses with all of our controller actions. The respond_to method provides the ability to respond to the requests with many formats(i.e. csv, xml, etc…). This can be done for one or all actions in a controller. If we wanted to provide json only in our index action, we would write something like this:
</p>


<p>{% codeblock lang:ruby %}
def index
  @products = Product.all</p>

<p>  respond_to do |format|</p>

<pre><code>format.html
format.json
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Now, choose a place on the index page to hide your form by passing a style attribute with the following:
</p>


<p>{% codeblock index.html.erb lang:ruby %}
&hellip;</p>

<div id="product-form" style="display:none;"></div>


<p>&hellip;
{% endcodeblock %}</p>

<p>
  which will hide our form when the page is initially visited.
</p>




<p>
  Next, create <code>new.js.erb</code>:
</p>


<p>{% codeblock new.js.erb lang:ruby %}
$(&lsquo;#product-form&rsquo;).html(&ldquo;&lt;%= j (render &lsquo;form&rsquo;) %>&rdquo;);
$(&lsquo;#product-form&rsquo;).slideDown(350);
{% endcodeblock %}</p>

<p>
  This is just an ERB template that generates Javascript instead of the HTML we’re used to. It basically translates to: "Find the element with an id attribute of product-form and at that point render the html in the form partial." We typically do this in <code>new.html.erb</code> with:
</p>


<p>{% codeblock new.html.erb lang:ruby %}
&lt;%= render &lsquo;form&rsquo; %>
{% endcodeblock %}</p>

<p><p>
  Since render is a Rails method, JavaScript doesn’t understand it and it has to be interpreted with ERB. The &lsquo;j&rsquo; is syntactic sugar for <code>&lt;%= escape_javascript (render &lsquo;form&rsquo;) %></code>
</p></p>

<p>{% codeblock _form.html.erb lang:ruby %}
&lt;%= simple_form_for @product, remote: true do |f| %>
  &lt;%= f.input  :description %>
  &lt;%= f.input  :deadline %>
  &lt;%= f.button :submit %>
&lt;% end %>
{% endcodeblock %}</p>

<p><p>
  This is the &lsquo;form&rsquo; being rendered in <code>new.js.erb</code> with a <code>remote: true</code> option being passed in. In our form partial, we also pass the <code>remote: true</code> option that will execute an ajax POST request.
</p></p>

<p><p>
  Finally, we can wrap things up by rendering our new Product list and hiding our form. This final step includes identifying where to render our list. Using the rai-jax app as an example, let’s look at what our final <code>index.html.erb</code> should look like at this stage:
</p></p>

<p>{% codeblock index.html.erb lang:ruby %}
<div class="row">
  <div class="col-md-5 col-md-offset-1"></p>

<pre><code>&lt;h2&gt;Products&lt;/h2&gt;
</code></pre>

<p>  </div></p>

<p>  <div class="col-md-2 col-md-offset-4"></p>

<pre><code>&lt;%= link_to new_product_path, remote: true do %&gt;
  &lt;button class="btn btn-default"&gt;New&lt;/button&gt;
&lt;% end %&gt;
</code></pre>

<p>  </div>
</div></p>

<p><div class="row">
  <div class="col-md-6 col-md-offset-2" id="product-form" style="display:none;"></div>
</div></p>

<p><div class="row">
  <div class="col-md-7 col-md-offset-1" id="products">&lt;%= render @products %></div>
</div>
{% endcodeblock %}</p>

<p><p>
  And we update our product list and hide our form with <code>create.js.erb</code>:
</p></p>

<p>{% codeblock create.js.erb lang:ruby %}
$(&lsquo;#products&rsquo;).html(&ldquo;&lt;%= j (render @products) %>&rdquo;);
$(&lsquo;#product-form&rsquo;).slideUp(350);
{% endcodeblock %}</p>

<p><p>
  <strong>Update a Product on the Index Page</strong><br/>
  As in Part One, let’s start by visiting our Product Controller and setting it up for updates:
</p></p>

<p>{% codeblock products_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  before_action :all_products, only: [:index, :create, :update]
  before_action :set_products, only: [:edit, :update]</p>

<p>  &hellip;</p>

<p>  def update</p>

<pre><code>@product.update_attributes(product_params)
</code></pre>

<p>  end</p>

<p>  &hellip;</p>

<p>  private
  &hellip;</p>

<p>  def set_products</p>

<pre><code>@product = Product.find(params[:id])
</code></pre>

<p>  end</p>

<p>  def product_params</p>

<pre><code>params.require(:product).permit(:name, :description)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p><p>
  Similar to Part One, we add an edit button with a <code>remote:</code> true option:
</p></p>

<p>{% codeblock _product.html.erb lang:ruby %}
&hellip;</p>

<p>  &lt;%= link_to edit_product_path(product), remote: true do %></p>

<pre><code>&lt;button&gt;Edit&lt;/button&gt;
</code></pre>

<p>  &lt;% end %></p>

<p>&hellip;
{% endcodeblock %}</p>

<p><p>
  And, finally, our <code>edit.js.erb</code> and <code>update.js.erb</code> are the same as our new and update templates: <code>edit.js.erb</code> corresponds to <code>new.js.erb</code> and <code>create.js.erb</code> corresponds to <code>update.js.erb</code>.
</p></p>

<p><p>
  <strong>Delete a Product on the Index Page</strong><br/>
  Our final updates to our Product Controller involves us providing the destroy action:
</p></p>

<p>{% codeblock product_controller.rb lang:ruby %}
class ProductsController &lt; ApplicationController
  before_action :all_products, only: [:index, :create, :update, :destroy]
  before_action :set_products, only: [:edit, :update, :destroy]</p>

<p>  &hellip;</p>

<p>  def destroy</p>

<pre><code>@product.destroy
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p><p>
  When adding our delete button, two additional steps are required:
</p></p>

<p>{% codeblock _product.html.erb lang:ruby %}
&hellip;</p>

<p>&lt;%= link_to product, remote: true, method: :delete,  data: { confirm: &lsquo;Are you sure?&rsquo; } do %>
  <button>Delete!</button>
&lt;% end %></p>

<p>&hellip;
{% endcodeblock %}</p>

<p><p>
  First, we pass in a <code>method: :delete</code> option; Second, we provide a courtesy confirmation to the user making sure they don’t delete anything by accident.
</p></p>

<p><p>
  The last file we’ll create is <code>destroy.js.erb</code> and it will contain one line:
</p></p>

<p>{% codeblock destroy.js.erb lang:ruby %}
$(&lsquo;#products&rsquo;).html(&ldquo;&lt;%= j (render @products) %>&rdquo;);
{% endcodeblock %}</p>

<p><p>
  Seriously, Rails makes ajax easy. As I mentioned above.
</p></p>

<p><p>
  So far so good, That&rsquo;s it!!! See ya!!! :)
</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Ruby Interpreted or Compiled?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/06/17/is-ruby-interpreted-or-compiled/"/>
    <updated>2015-06-17T12:14:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/06/17/is-ruby-interpreted-or-compiled</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" />
</p>




<p>
  Ever since I started to work with Ruby in 2012, I’ve always assumed that it was an interpreted language like PHP or Javascript – in other words, that Ruby read in, parsed and executed my code all at runtime, at the moment my program was run. This seemed especially obvious since the default and most popular implementation of Ruby is called “MRI,” short for “Matz’s Ruby Interpreter.” I always thought it was necessary to use an interpreter to make all of the dynamic features of the language possible.
</p>




<p>
  However, it turns out that both JRuby and Rubinius, two other popular implementations of Ruby, support using a compiler the same way you would with a statically typed language like C or Java. Both JRuby and Rubinius first compile your Ruby code to byte code into machine language, and later execute it.
</p>




<p>
  Today I’m going to show you how to use these Ruby compilers, and I’ll also take a peek under the hood to see what they produce internally. Possibly you’ll rethink some of your assumptions about how Ruby works along the way.
</p>




<p>
  <strong>Use the Rubinius Compiler</strong><br/>
  Using the Rubinius compiler is as simple as running any Ruby script. Here’s a very silly but simple Ruby program I’ll use as an example today:
</p>


<p>{% codeblock lang:ruby %}
class Adder
  def add_two(x)</p>

<pre><code>x+2
</code></pre>

<p>  end
end</p>

<p>puts Adder.new.add_two(3)
{% endcodeblock %}</p>

<p>
  Now if I save that into a file called “simple.rb,” switch to Rubinius using RVM, and run the script I’ll get the number “5” as expected:
</p>


<p>{% codeblock lang:ruby %}
$ rvm rbx-1.2.4-20110705
$ ruby simple.rb
5
{% endcodeblock %}</p>

<p>
  Not very interesting, I know. But what is interesting is that when I ran simple.rb Rubinius created a new, hidden directory called “.rbx” with a strange, cryptically named file in it:
</p>


<p>{% codeblock lang:ruby %}
$ ls -a
.         ..        .rbx      simple.rb
$ find .rbx
.rbx
.rbx/a7
.rbx/a7/a7fc1eb2edc84efed8db760d37bee43753483f41
{% endcodeblock %}</p>

<p>
  This vaguely reminds me of how git saves the git repository data in a hidden folder called “.git,” also using cryptic hexadecimal names. What we are looking at here is a compiled version of simple.rb: the “a7fc1eb2e…” file contains my Ruby code converted into Rubinius byte code.
</p>




<p>
  Whenever you run a Ruby script, Rubinius uses a two step process to compile and run your code:
</p>




<p>
  <img src="http://geekhmer.github.io/images/rubinius_diagram.png" />
</p>




<p>
  On the top you can see that first Rubinius compiles your code into byte code, and then below later executes it using the Rubinius Virtual Machine, which can compile the byte code into native machine language. Rubinius also caches the byte code using the hexadecimal naming scheme I showed above, avoiding the need for the compile step entirely if the Ruby source code file didn’t change.
</p>




<p>
  You can actually run the Rubinius compiler directly like this:
</p>


<p>{% codeblock lang:ruby %}
$ rbx compile simple.rb -o simple.bytecode
{% endcodeblock %}</p>

<p>
  This compiles my Ruby code and saves the byte code in the specified file. If we look at the simple.bytecode file, we’ll see a series of alphanumeric tokens that don’t make any sense. But if you run the compiler using the “-B” option you can see an annotated version of the Rubinius byte code:
</p>


<p>{% codeblock lang:ruby %}
$ rbx compile simple.rb -o simple.bytecode -B
============= :<strong>script</strong> ==============
Arguments:   0 required, 0 post, 0 total
Arity:       0
Locals:      0
Stack size:  6
Lines to IP: 1: 0..26, 7: 27..63</p>

<p>0000:  push_rubinius            <br/>
0001:  push_literal               :Adder
0003:  push_nil                 <br/>
0004:  push_scope               <br/>
0005:  send_stack                 :open_class, 3</p>

<p>&hellip; etc &hellip;</p>

<p>=============== :add_two ===============
Arguments:   1 required, 0 post, 1 total
Arity:       1
Locals:      1: x
Stack size:  3
Lines to IP: 2: -1..-1, 3: 0..5</p>

<p>0000:  push_local                 0    # x
0002:  meta_push_2              <br/>
0003:  meta_send_op_plus          :+
0005:  ret</p>

<p>&hellip; etc &hellip;
{% endcodeblock %}</p>

<p>
  At the bottom here we can see the compiled version of my silly add_two method. It’s actually somewhat easy to understand the byte code, since it’s annotated so well:
</p>




<p>
  - First “push_local” saves the value of the “x” parameter on the virtual machine stack.<br/>
  - Then it pushes the literal value 2.<br/>
  - Then it executes the + operation.<br/>
  - And finally it returns.
</p>




<p>
  The Rubinius virtual machine reminds me of those old “reverse polish” calculators from the 1980s, in which you would enter values on a stack in a similar way. The Rubinius source code is actually quite easy to understand since a large portion of it is actually written in Ruby, while the rest is written in well documented C++. The Rubinius compiler is no exception: it’s actually written in Ruby too! If you’re interested, you can see how the Rubinius compiler works without having to understand C++ at all. To get started take a look in the “lib/compiler” directory.
</p>




<p>
  The Rubinius virtual machine, which runs the Rubinius byte code, is implemented in C++ and leverages an open source project called LLVM. Like JRuby, it uses a “Just In Time” compiler to convert the byte code to machine language at runtime. This means that your Ruby code, for example the add_two method above, ends up being converted into native machine language and run directly by your computer’s hardware.
</p>




<p>
  <strong>Use the JRuby Compiler</strong><br/>
  Now let’s take a look at how JRuby compiles Ruby code; I’ll start by using RVM to switch over to JRuby, and then I’ll run the same simple.rb script:
</p>


<p>{% codeblock lang:ruby %}
$ rvm jruby-head
$ ruby simple.rb
5
{% endcodeblock %}</p>

<p>
  No surprise, we get the same result. At a high level, JRuby uses the same two step process to run your script – first it compiles the Ruby code into byte code, and then executes the byte code using the Java Virtual Machine (JVM).
</p>




<p>
  Here’s another diagram showing the two step process, this time for JRuby:
</p>




<p>
  <img src="http://geekhmer.github.io/images/jruby_diagram.png" />
</p>




<p>
  Like with Rubinius, it’s possible to run the JRuby compiler directly using the "jrubyc" command… following the Java executable naming pattern ("java" –> "javac"). Running "jrubyc" will create a Java .class file, which we can inspect using the Java decompiler like I did last week:
</p>


<p>{% codeblock lang:ruby %}
$ jrubyc simple.rb
$ ls
simple.class simple.rb
$ javap -c simple.class > simple.bytecode
{% endcodeblock %}</p>

<p>
  Now the simple.bytecode file will contain an annotated version of the Java byte code the JVM will execute. Unlike Rubinius, which creates byte code that is fairly clean, simple and easy to understand, Java byte code is much more cryptic and confusing. Searching through the simple.bytecode file for my method add_two, I found the following snippet of byte code:
</p>


<p>{% codeblock lang:ruby %}
 public static org.jruby.runtime.builtin.IRubyObject method__1$RUBY$add_two(simple, org.jruby.runtime.Thread&hellip;</p>

<pre><code>Code:
   0: aload_3       
   1: astore        9
   3: aload_1       
   4: aload_2       
   5: aload         9
   7: invokedynamic #80,  0             // InvokeDynamic #1:"fixnumOperator:+":(Lorg/jruby/runtime/Thread...
  12: areturn       
</code></pre>

<p>{% endcodeblock %}</p>

<p>
  Although quite difficult to understand, there are a couple of important details to notice:
</p>




<p>
  First, JRuby has compiled my Ruby add_two method into a byte code method called method__1$RUBY$add_two. This proves that my Ruby script has been compiled! That is, when JRuby ran simple.rb above, it did not read the Ruby code, interpret it and just follow the instructions like the MRI interpreter would do. Instead, it converted my Ruby script into byte code, and specifically my add_two method into the byte code snippet above.
</p>




<p>
  Second, notice the use of the “invokedynamic” byte code instruction. This is a new innovation of the Java Virtual Machine, making it easier for the JVM to support dynamic languages like Ruby. Here you can see it’s used by the add_two method to call the + operator of the Ruby Fixnum class, for my x+2 Ruby code. This use of invokedynamic is actually new for Java 1.7 and JRuby 1.7, so if you’re using the current release version of JRuby (1.6.4) or earlier you won’t see it appear in the byte code.
</p>




<p>
  All of the byte code you see above – in other words my Ruby script including the add_two method – will be compiled directly into native machine language if the JVM notices that it is called enough times, that it’s in a "hotspot".
</p>




<p>
  <strong>Who cares how Ruby works?</strong><br/>
  Today I’ve shown you some of the internal, technical details of Rubinius and JRuby. Many of you might find this boring and unimportant: who cares how Ruby works internally? All I care about is that my Ruby program works. And from one point of view that is all that really matters.
</p>




<p>
  However, I find Ruby internals to be fascinating… I really do like having at least a small understanding of what’s going on inside of Ruby while it’s running my code. I also believe it will help me to become a more effective and knowledgeable Ruby developer, even if I never contribute a line of internal code to Rubinius, JRuby or MRI. And studying Ruby internals has definitely lead me to a number of surprising discoveries, and forced me to rethink the mental model I have always had of the Ruby interpreter… or should I say, the Ruby compiler!
</p>

]]></content>
  </entry>
  
</feed>
