<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-05-22T15:05:01+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[5 Tips to Scale Your Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/19/5-tips-to-scale-your-ruby-on-rails-application/"/>
    <updated>2015-05-19T11:39:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/19/5-tips-to-scale-your-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="5 Tips to Scale Your Ruby on Rails Application" />
</p>




<p>
  There are lots of resources on the web that explain how to scale web applications and how to scale Rails. Here's a quick summary of just five of the basic strategies for a scalable Ruby on Rails web application. Some of them are specific to Ruby on Rails; others generalize to any shared-nothing application server architecture.
</p>




<p>

</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IP Geolocation in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/16/ip-geolocation-in-ruby-on-rails-application/"/>
    <updated>2015-05-16T23:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/16/ip-geolocation-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="IP Geolocation in Ruby on Rails Application" />
</p>




<p>
  Sometimes it can be useful to find a user's physical location in our Rails application. For instance, maybe we want to send a special Happy Holidays to users of a particular country. IP address geolocation lets us do exactly that. With IP address geolocation you can get a pretty good idea of where the customer is accessing your site from as long as they aren't using a proxy server or some other means of obscuring their IP address. In this article we will show you how to utilize the Maxmind GeoIP database to look up the location of just about any IP address. Let's get started.
</p>




<p>
  <strong>Setup Rails Application</strong><br/>
  To utilize the IP address geolocation functionality, we first need to add the geoip gem to our gemfile. Open up your gemfile and add in the code listed below:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;geoip&rsquo;, &lsquo;~> 1.4.0&rsquo;
{% endcodeblock %}</p>

<p>
  Great, now let's run a bundle install to install the gem.
</p>


<p>{% codeblock lang:ruby %}
bundle install
{% endcodeblock %}</p>

<p>
  Now we need to download the GeoIP database for use with the geoip gem. A free one <a href="http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz" target="_blank"> can be downloaded at this link</a>, or you can use the paid version if you have a subscription. Once downloaded, extract the compressed archive and place the .dat folder contained within in the root directory of your Rails app.
</p>




<p>
  Great, now let's create a controller so that we can play around with the GeoIP functionality. Run the commands below to create a controller called GeoIpRequest:
</p>


<p>{% codeblock lang:ruby %}
rails g controller geo_ip_request new create
{% endcodeblock %}</p>

<p>
  Next, open up your routes file and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock config/routes.rb lang:ruby %}
Rails.application.routes.draw do
  resource :geo_ip_request, controller: :geo_ip_request</p>

<p>  root to: &ldquo;geo_ip_request#new&rdquo;
end
{% endcodeblock %}</p>

<p>
  Great, now open up your GeoIpRequest controller and modify it so that it looks like the code listed below.
</p>


<p>{% codeblock app/controllers/geo_ip_request_controller.rb lang:ruby %}
class GeoIpRequestController &lt; ApplicationController
  def new
  end</p>

<p>  def create</p>

<pre><code>require 'geoip'
@info = GeoIP.new(Rails.root.join("GeoLiteCity.dat")).city(ip_request_params[:host])
</code></pre>

<p>  end</p>

<p>  private
  def ip_request_params</p>

<pre><code>params.require(:request).permit(:host)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  In the code above, we tell the geoip gem to load our database file and do a search for the host parameter.
</p>




<p>
  Now let's create our views. Open up the new view for the GeoIpRequest controller and modify it so that it looks like the code listed below:
</p>


<p>{% codeblock app/views/geo_ip_request/new.html.erb lang:ruby %}</p>

<h1>GeoIP Example</h1>


<p>Get the country for any ip address or hostname by typing it below and pressing the lookup button.</p>


<p>&lt;%= form_for :request, url: geo_ip_request_index_path do |f| %>
  &lt;%= f.text_field :host %>
  &lt;%= f.submit &ldquo;Lookup&rdquo; %>
&lt;% end %>
{% endcodeblock %}</p>

<p>
  Great, now finally let's do the create view. Open up the create view for the GeoIpRequest controller and modify it so that it looks like the code listed below.
</p>


<p>{% codeblock app/views/geo_ip_request/create.html.erb lang:ruby %}</p>

<h1>IP Address Info</h1>


<p><b>IP:&nbsp;&nbsp;</b>&lt;%= @info.request %><br />
<b>Country:&nbsp;&nbsp;</b>&lt;%= @info.country_name %><br />
<b>City:&nbsp;&nbsp;</b>&lt;%= @info.city_name %><br />
<b>Region:&nbsp;&nbsp;</b>&lt;%= @info.real_region_name %>
{% endcodeblock %}</p>

<p>
  Excellent, now if you fire up your rails development server and and navigate to http://localhost:3000 you will see a form requesting your ip address or hostname. Entering any ip address or host name will show the country, city, and region that ip is from.
</p>




<p>
  So far so good, that's it!!! that's all there is to it!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Concerns in Rails 4 Models]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/14/code-concerns-in-rails-4-models/"/>
    <updated>2015-05-14T12:48:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/14/code-concerns-in-rails-4-models</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Code Concerns in Rails 4 Models" />
</p>




<p>
  You may have noticed that Rails 4 creates a new folder called concerns. Concerns are pieces of code that allow you to better organize the code that you write. This feature has actually been around for a long time prior to Rails 4, Rails 4 merely creates the folders for you and sets up the environment. In this article, we focus primarily on Rails 4.0, but it should apply equally to 3.2.x or even 3.0.x and earlier.
</p>




<p>
  Here is a simple example, lets say we have a model called user. In this model we would typically have something like this:
</p>


<p>{% codeblock lang:ruby %}
class User &lt; ActiveRecord::Base
  has_secure_password</p>

<p>  def self.authenticate(email, password)</p>

<pre><code>user = find_by_email(email)
user if !user.nil? &amp;&amp; user.authenticate(password)
</code></pre>

<p>  end</p>

<p>  def create_password_reset_token</p>

<pre><code>logger.warn "Create password reset token code goes here."
false
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  We can create a a file in the app/models/concerns folder called authentication.rb (app/models/concerns/authentication.rb) and place the following code in it:
</p>


<p>{% codeblock lang:ruby %}
module Authentication
  extend ActiveSupport::Concern</p>

<p>  included do</p>

<pre><code>has_secure_password
</code></pre>

<p>  end</p>

<p>  module ClassMethods</p>

<pre><code>def authenticate(email, password)
  user = find_by_email(email)
  user if user &amp;&amp; user.authenticate(password)
end
</code></pre>

<p>  end</p>

<p>  def create_password_reset_token</p>

<pre><code>logger.warn "Create password reset token code goes here."
false
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  Now, lets refactor the User model to use the new code. Change the users model (app/models/user.rb) so that it looks like this:
</p>


<p>{% codeblock lang:ruby %}
class User &lt; ActiveRecord::Base
  include Authentication
end
{% endcodeblock %}</p>

<p>
  Now if you start the rails server and attempt to authenticate, you'll notice that the functionality hasn't changed at all. That's the idea! You can use this method for organizing and DRYing up your code.
</p>




<p>
  The extend <code>ActiveSupport::Concern</code> tells rails that we are creating a concern.
</p>




<p>
  The code contained within the included block will be executed within the context of the class that is including the module. This is perfect for including functionality provided by 3rd party gems, etc.
</p>




<p>
  Next you will notice the <code>module ClassMethods</code> block. The code contained within this block will be added to the Class itself. For example, the code above adds an authenticate function to the User class. This allows you to do User.authenticate(email, password) instead of User.find_by_email(email).authenticate(password).
</p>




<p>
  Finally you will see the last bit of code, the <code>create_password_reset_token</code> function. Code not included in the <code>ClassMethods</code> block or the <code>included</code> block will be included as instance methods. For example, You could do <code>@user = User.find(params[:id])</code> and then do <code>@user.create_password_reset_token</code> to create a password reset token for the specified user.
</p>




<p>
  Now, all of this is great, but what benefit do you get from organizing your code in this fashion? Well, lets look at a good example of how utilizing this functionality of Rails can save you time and make your code much cleaner. Lets say we have a number of different models, BlogPosts, Articles, Comments, etc and we want to add tagging functionality that will allow the user to tag each object as something. Utilizing concerns we can quickly and easily do this:
</p>


<p>{% codeblock lang:ruby %}
module Taggable
  extend ActiveSupport::Concern</p>

<p>  included do</p>

<pre><code>has_many :taggings, as: :taggable, dependent: :destroy
has_many :tags, through: :taggings 
</code></pre>

<p>  end</p>

<p>  def tag_names</p>

<pre><code>tags.map(&amp;:name)
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  In this simple example, you'll see that simply including Taggable on your modules will (with the database structure in place of course) make your models taggable. This code can quickly and easily be spread upon as many models as needed. Well that's it! Concerns are a great way to keep your code organized and DRY.
</p>




<p>
  So far so good, That it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails with Bootstrap-Sass]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/11/ruby-on-rails-with-bootstrap-sass/"/>
    <updated>2015-05-11T16:41:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/11/ruby-on-rails-with-bootstrap-sass</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/bootstrap.png" alt="Ruby on Rails with Bootstrap-Sass" />
</p>




<p>
  Twitter Bootstrap is an insanely popular CSS framework that is used to quickly and easily throw together great looking websites. Many websites (including this one) are built on this framework, and with good reason; the power and ease of use rival that of most other frameworks.
</p>




<p>
  In this tutorial we will show you how to add the framework using the bootstrap-sass gem. We will also show you how to override the bootstrap styles using the various scss variables provided by the bootstrap framework. Finally we will show you how to use the will_paginate-bootstrap gem to style your pagination using bootstrap's pagination styles.
</p>




<p>
  <strong>Setup Project</strong><br/>
  In an existing or new project, add the following line to Gemfile:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;bootstrap-sass&rsquo;, &lsquo;~> 2.3&rsquo;
{% endcodeblock %}</p>

<p>
  Run a <code>bundle install</code> and start your <code>rails server</code>. Now that the gem is installed you are ready to to start using bootstrap.
</p>




<p>
  The first thing we will need to do is create a new SCSS file to store our bootstrap configuration. Create a file called <code>bootstrap_config.scss</code> in the <code>app/assets/stylesheets</code> folder.  This file will be used to store bootstrap specific configuration. Next, we will need to tell Rails to actually include bootstrap in this file. Open <code>app/assets/stylesheets/bootstrap_config.scss</code> and add the following line:
</p>


<p>{% codeblock app/assets/stylesheets/bootstrap_config.scss lang:ruby %}
@import &ldquo;bootstrap&rdquo;;
{% endcodeblock %}</p>

<p>
  If you want a responsive layout, also add the following line:
</p>


<p>{% codeblock app/assets/stylesheets/bootstrap_config.scss lang:ruby %}
@import &ldquo;bootstrap-responsive&rdquo;;
{% endcodeblock %}</p>

<p>
  This will include bootstrap in your application. Now, any views you create will automatically include bootstrap as long as they use the main application layout. We aren't quite done yet though, if you are on Rails 4 (Rails 3.2 users don't need to do this) you will need to perform one more step. Open up the <code>config/application.rb</code> file and add the following line to your application's configuration:
</p>


<p>{% codeblock config/application.rb lang:ruby %}
config.assets.precompile += %w(<em>.png </em>.jpg <em>.jpeg </em>.gif)
{% endcodeblock %}</p>

<p>
  This is due to rails no longer compiling images in vendor assets by default.
</p>




<p>
  Now go ahead and create a controller and try it out. If you aren't familiar with the framework itself, the absolute best place to learn about it is at <a href="http://getbootstrap.com/" target="_blank">The Official Twitter Boostrap Site</a>. That's all there is to setting it up!
</p>




<p>
  <strong>Bootstrap Variables</strong><br/>
  The bootstrap-sass gem, much like it's official LESS-based cousin, has a number of variables that you can override to change the look and feel of various styles. Lets try it out. Suppose we want to change the background color of our website. To do this we just need to open up <code>app/assets/stylesheets/bootstrap_config.scss</code> and add the following line to the very top of the file:
</p>


<p>{% codeblock app/assets/stylesheets/bootstrap_config.scss lang:ruby %}
$bodyBackground: #e0e0e0;
{% endcodeblock %}</p>

<p>
  Now, if you refresh the page you will notice that the body background has changed to a light gray color. 
</p>




<p>
  <strong>Will Paginate</strong><br/>
  One pitfall that rails users often run into is utilizing will_paginate in a twitter bootstrap project. Luckily the will_paginate-bootstrap gem makes this very easy. Add the following line to your gemfile and then run a <code>bundle install</code> and restart your rails server:
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &lsquo;will_paginate-bootstrap&rsquo;
{% endcodeblock %}</p>

<p>
  Now, open up the view where you are using will_paginate, find any will_paginate lines and add <code>:renderer => BootstrapPagination::Rails</code> to the end of them so they look like this:
</p>


<p>{% codeblock lang:ruby %}
&lt;%= will_paginate @products, :renderer => BootstrapPagination::Rails %>
{% endcodeblock %}</p>

<p>
  Now if you refresh the page, you'll see that that will_paginate is now styled using bootstrap.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 FriendlyId]]></title>
    <link href="http://geekhmer.github.io/blog/2015/05/09/rails-4-friendlyid/"/>
    <updated>2015-05-09T22:13:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/05/09/rails-4-friendlyid</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/happy_ruby_on_rails.jpg" width="400" alt="Rails 4 FriendlyId" />
</p>




<p>
  In this article we will go over using <a href="https://github.com/norman/friendly_id" target="_blank">FriendlyId</a> in Rails 4. It is important to note that the current version of FriendlyId (4.0) does not work with Rails 4. Therefore we will need to use FriendlyId 5.x, which is currently in release candidate status.
</p>




<p>
  First, let's include the FriendlyId gem in our gemfile.
</p>


<p>{% codeblock Gemfile lang:ruby %}
gem &ldquo;friendly_id&rdquo;, &ldquo;~> 5.0.1&rdquo;
{% endcodeblock %}</p>

<p>
  FriendlyId no longer overrides finder code by default. Because of this we will need to change the way our controller code works. FriendlyId now exposes it's functionality via <code>.friendly</code>. For example, to find a post by it's friendly id, we use something like <code>Post.friendly.find(params[:id])</code>. To get FriendlyId working, you need to modify your controllers to use this behavior. An example is shown below.
</p>


<p>{% codeblock app/controllers/posts_controller.rb lang:ruby %}
class PostsController &lt; ApplicationController
  def index</p>

<pre><code>@posts = Post.all
</code></pre>

<p>  end</p>

<p>  def show</p>

<pre><code>@post = Post.friendly.find(params[:id])
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  If you have a large site making extensive use of FriendlyId, you can also restore the old finder override behavior. This isn't recommended though. An example of how to do this is listed below.
</p>


<p>{% codeblock app/models/post.rb lang:ruby %}
class Post &lt; ActiveRecord::Base
  extend FriendlyId
  friendly_id :title, use: [:slugged, :finders]
end
{% endcodeblock %}</p>

<p>
  Once you've added this, finder override functionality should now be restored. For example, the code listed below will now work as before.
</p>


<p>{% codeblock app/controllers/posts_controller.rb lang:ruby %}
class PostsController &lt; ApplicationController
  def index</p>

<pre><code>@posts = Post.all
</code></pre>

<p>  end</p>

<p>  def show</p>

<pre><code>@post = Post.find(params[:id])
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  FriendlyId 5 introduces a new slug candidates feature. This feature allows you to tell friendly id what to do in the case of duplicate slugs. See the code listed below for an example of how to utilize this functionality.
</p>


<p>{% codeblock app/models/post.rb lang:ruby %}
class Post &lt; ActiveRecord::Base
  extend FriendlyId
  friendly_id :slug_candidates, use: [:slugged, :finders]</p>

<p>  def slug_candidates</p>

<pre><code>[
  :title,
  [:title, :id]
]
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>
  The code listed above tells FriendlyId you want to use the slug_candidates method to make the slug unique. It will try the list beginning to last, so in the example above, it will try to generate the slug first using title, and then if a post by that title already exists, it will try again by appending the id.
</p>




<p>
  Some other quick things to note when upgrading to FriendlyId 5:<br/>
  - The default sequence separator has been changed from two dashes (--) to one dash (-). If you have a url scheme in place using the old way of doing things, you might want to find a workaround.<br/>
  - FriendlyId no longer uses a numeric sequence to differentiate a conflicting slug. Instead it uses a UUID (example: 2bc08962-b3dd-4f29-b2e6-244710c86106). If you dislike this functionality, you can utilize the new slug candidates feature explained above.
</p>

]]></content>
  </entry>
  
</feed>
