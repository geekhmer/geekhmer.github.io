<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2015-04-14T21:32:47+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Model Generator Useful Shortcuts]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-model-generator-useful-shortcuts/"/>
    <updated>2015-04-13T13:11:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-model-generator-useful-shortcuts</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Renaming a Database Column" />
</p>




<p>
  <code>rails generate</code> command provides a lot of useful functionality, however some of it may not be immediately known to you as a developer. In this article we will explore a number of useful shortcuts available in the rails model generator.
</p>




<h3>Basics</h3>




<p>
  Let's start with the basic command line usage.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">User</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <code>rails g</code> is the same thing as rails generate. Both commands do the same thing. We will use this shortcut throughout this article.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Product</span> <span class="nb">name</span> <span class="ss">quantity</span><span class="p">:</span><span class="n">integer</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This command generates a model named product with 2 fields, name, which is a string, and quantity, which is an integer. By not specifying the type for name, rails defaults to using string. Below is a complete list of types that you can use with the modal generator.
</p>




<p>
  <strong>Field Type Lists</strong><br/>
  - integer<br/>
  - primary_key<br/>
  - decimal<br/>
  - float<br/>
  - boolean<br/>
  - binary<br/>
  - string<br/>
  - text<br/>
  - date<br/>
  - time<br/>
  - datetime<br/>
  - timestamp
</p>




<p>
  You can also specify the size of a field as seen below.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Client</span> <span class="nb">name</span><span class="ss">:string</span><span class="p">{</span> <span class="mi">100</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This will create a name field with a limit of 100 characters. For the decimal type, you can specify a precision and scale value as well.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Product</span> <span class="nb">name</span> <span class="ss">price</span><span class="p">:</span><span class="n">decimal</span><span class="p">{</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Namespaced Models</strong><br/>
  You can create namespaced models as well. This is useful for example, in creating a special set of administrative users that are separate from your regular users. Running the command below will place the user model in the Admin namespace, which will have a prefixed table name of admin_ in the database.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="n">admin</span><span class="o">/</span><span class="n">user</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  As you can see from the code listed below, the user belongs to the admin namespace like mentioned earlier.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/models/admin/user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Admin</span><span class="o">::</span><span class="no">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Adding an Index</strong><br/>
  You can also add a database index right from the command line.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Site</span> <span class="nb">name</span><span class="ss">:string:index</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  In addition, you can make the index unique.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">Client</span> <span class="nb">name</span><span class="ss">:string:uniq</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Model Relationships</h3>




<p>
  You can specify a basic relationship between models.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="no">User</span> <span class="ss">client</span><span class="p">:</span><span class="n">references</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This will create a user with a column named client_id, add an index, and automatically add a belongs_to relationship to the User model.
</p>




<p>
  You can also make the relationship polymorphic.
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">model</span> <span class="n">picture</span> <span class="ss">imageable</span><span class="p">:</span><span class="n">references</span><span class="p">{</span> <span class="n">polymorphic</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This will set up a polymorphic relationship for pictures. Polymorphic relationships allow you to 'share' a table between many different models. For instance, Products and People can both have pictures.
</p>




<p>
  The rails model generator exposes a lot of useful functionality that can save time if used properly. Thanks for reading!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Renaming a Database Column]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-renaming-a-database-column/"/>
    <updated>2015-04-13T13:01:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/13/ruby-on-rails-renaming-a-database-column</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Renaming a Database Column" />
</p>




<p>
  To rename a database column, first you need to create a migration:
</p>




<p>
  Terminal commands line:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">g</span> <span class="n">migration</span> <span class="no">RenameColumnXinTableYtoZ</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Next you need to edit the migration and add the following line:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rename_column</span> <span class="ss">:table</span><span class="p">,</span> <span class="ss">:old_column</span><span class="p">,</span> <span class="ss">:new_column</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Finally, please run a <code>rake db:migrate</code> and you are all set.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to uninstall RVM?]]></title>
    <link href="http://geekhmer.github.io/blog/2015/04/12/how-to-uninstall-rvm/"/>
    <updated>2015-04-12T15:05:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/04/12/how-to-uninstall-rvm</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="How to uninstall RVM?" />
</p>




<p>
  There are times when you may need to completely remove RVM. For example, lets say that your installation is corrupt, or you don't wish to use RVM anymore. Luckily this is easy to do. The first thing we need to do is to tell RVM to remove itself. This can be accomplished with the rvm impode command. Simply type:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rvm</span> <span class="n">implode</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Once you do that, RVM should remove itself. The next thing you need to do is uninstall the 'rvm' gem. Simply type:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">uninstall</span> <span class="n">rvm</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This will uninstall the RVM gem.
</p>




<p>
  The next thing you need to do is check to make sure that RVM is removed from your path. You need to check files like .bashrc, .bash_profile, and .profile to make sure all traces of the path are removed.
</p>




<p>
  The final thing you need to do is make sure both the .rvm and .rvmrc files have been removed. simply type:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ls</span> <span class="o">-</span><span class="n">a</span> <span class="o">~</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  This will list all of the files in your home directory. Type the following lines to remove the .rvm and .rvmrc files if they exist:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">.</span><span class="n">rvm</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">.</span><span class="n">rvmrc</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, if you no longer have a Ruby installation on your system you may also want to remove the .gem folder if it exists. Once you are finished, make sure to log out/back into your system for all changes to take effect. That's it!!! See ya!!!
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Nested Form Fields]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/23/ruby-on-rails-nested-form-fields/"/>
    <updated>2015-03-23T23:47:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/23/ruby-on-rails-nested-form-fields</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" alt="Ruby on Rails Nested Form Fields" />
</p>




<p>
  It’s super common to want to edit records along with their has_many associations on a single page.
</p>




<p>
  This Rails gem helps creating forms for models with nested has_many associations and relies on jQuery to dynamically add and remove nested form fields without a page reload.<br/>
  - Works for arbitrarily deeply nested associations (tested up to 4 levels).<br/>
  - Works with form builders like simple_form.<br/>
  - Requires at least Ruby 1.9 and the Rails asset pipeline.
</p>




<p>
  To install, add nested_form_fields to your application’s Gemfile:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">nested_form_fields</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Run bundle intall to install the gem:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  In application.js file add:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">nested_form_fields</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  assuming that you have a User model with nested videos:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>user.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:videos</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:videos</span><span class="p">,</span> <span class="n">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Use the nested_fields_for helper inside your user form to add the video fields:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">nested_fields_for</span> <span class="ss">:videos</span> <span class="k">do</span> <span class="o">|</span><span class="n">ff</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;= ff.text_field :video_title</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Links to add and remove fields can be added using the add_nested_fields_link and remove_nested_fields_link helpers:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">nested_fields_for</span> <span class="ss">:videos</span> <span class="k">do</span> <span class="o">|</span><span class="n">ff</span><span class="o">|&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;= ff.remove_nested_fields_link</span>
</span><span class='line'><span class="sr">= ff.text_field :video_title</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  = f.add_nested_fields_link :videos</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Note that remove_nested_fields_link needs to be called within the nested_fields_for call and add_nested_fields_link outside of it via the parent builder.
</p>




<p>
  So far so good, That's it!!! See ya!!! :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Hooks for Metaprogramming]]></title>
    <link href="http://geekhmer.github.io/blog/2015/03/22/ruby-hooks-for-metaprogramming/"/>
    <updated>2015-03-22T10:45:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2015/03/22/ruby-hooks-for-metaprogramming</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" alt="Ruby Hooks for Metaprogramming" />
</p>




<h3>
  Overview
</h3>




<p>
  <strong>What is a Hook?</strong><br/>
   In programming, a hook is a place and usually an interface provided in packaged code that allows a programmer to insert customized programming. For example, a programmer might want to provide code that analyzed how often a particular logic path was taken within a program.
</p>




<h3>
  Ruby Hooks
</h3>




<p>
  Ruby lets you hook in and change a lot of behavior of the core language. Methods, constants, classes, variables… etc. Ruby lets you query them all, and change a lot about them.
</p>




<p>
  Here’s summaries and links for all the hooks I could find:
</p>




<p>
  <strong>Methods</strong><br/>
  - <code>respond_to_missing?</code> - A way to make sure your dynamic methods defined with method_missing also handle respond_to?<br/>
  - <code>method_missing</code> - Called when a method cannot be found, potentially to allow dynamically defining one instead.<br/>
  - <code>method_added</code> - Called whenever a method is added which can be used to modify the method.<br/>
  - <code>method_removed</code> - Called whenever a method is removed.<br/>
  - <code>singleton_method_added</code> - Method added to the singleton class of the object, to be callable just on this one instance.<br/>
  - <code>singleton_method_removed</code> - Method removed from singleton class.<br/>
  - <code>method_undefined</code> - A method has been undefined, with undef_method. Undef_method is different from remove_method because remove_method may still allow superclasses to define the method – undef_method means it’s gone entirely.<br/>
  - <code>singleton_method_undefined</code> - Called when a singleton method is undefined entirely.<br/>
  - <code>initialize_copy</code> - An optional callback when cloning any Object.
</p>




<p>
  <strong>Classes</strong><br/>
  - <code>inherited</code> - A Ruby class is subclassed.
</p>




<p>
  <strong>Modules</strong><br/>
  - <code>append_features</code> - A Module is included, and its constants, methods and variables used.<br/>
  - <code>included</code> - A Module is included, which usually obsoletes "append_features".<br/>
  - <code>extend_object</code> - A Module extends an Object.<br/>
  - <code>extended</code> - An Object is extended by a module, which mostly obsoletes extend_object.<br/>
  - <code>const_missing</code> - A constant isn’t already present.
</p>




<p>
  <strong>Marshalling</strong><br/>
  - <code>marshal_dump</code> - Called on an object to have it dump itself in Ruby Marshal format.<br/>
  - <code>marshal_load</code> - Called on an object to have it load itself in Ruby Mashal format.
</p>




<p>
  <strong>Coercion</strong><br/>
  - <code>coerce</code> - Called by the first type in a two-argument operator on the second argument, to make it turn into something the first argument can recognize.<br/>
  - <code>induced_from</code> - Deprecated, please don’t use.<br/>
  - <code>to_i</code>, <code>to_f</code>, <code>to_s</code>, <code>to_a</code>, <code>to_hash</code>, <code>to_proc</code> and others - Conversions, indicating that the object is being used as a type and should try to convert itself to that type.
</p>

]]></content>
  </entry>
  
</feed>
