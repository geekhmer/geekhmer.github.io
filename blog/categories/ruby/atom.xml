<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | GeeKhmer]]></title>
  <link href="http://geekhmer.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://geekhmer.github.io/"/>
  <updated>2014-11-29T22:46:36+07:00</updated>
  <id>http://geekhmer.github.io/</id>
  <author>
    <name><![CDATA[Bunlong Van]]></name>
    <email><![CDATA[bunlong.van@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add Progress Bar in Ruby on Rails Application]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/14/add-progress-bar-in-ruby-on-rails-application/"/>
    <updated>2014-11-14T22:02:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/14/add-progress-bar-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/youtube_progress_bar.png" width="700" alt="Add Progress Bar in Ruby on Rails Application" />
</p>




<p>
  Okay, today I would like to show how to add progress bar in Ruby on Rails application. For add progress bar in Ruby on Rails application I use nprogress-rails ruby gem.
</p>




<p>
  <strong>Installation</strong><br/>
  Add nprogress-rails ruby gem to Gemfile:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Gemfile </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">nprogress</span><span class="o">-</span><span class="n">rails</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  And then open terminal type:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">bundle</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Usage</strong><br/>
  Add the requires to the application.js:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">nprogress</span>
</span><span class='line'><span class="sr">//</span><span class="o">=</span> <span class="nb">require</span> <span class="n">nprogress</span><span class="o">-</span><span class="n">turbolinks</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Also, into the application.css.scss:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application.css.scss </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;=</span> <span class="nb">require</span> <span class="n">nprogress</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/em&gt;= require nprogress-bootstrap</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  And then, add NProgress.start(); to application.js for loading progress bar whenever you load each pages:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span><span class="p">(</span><span class="n">document</span><span class="p">)</span><span class="o">.</span><span class="n">ready</span><span class="p">(</span><span class="n">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">NProgress</span><span class="o">.</span><span class="n">start</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, let enjoy the progress bar in your application. Thank for reading :)
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Most Gem That I Use for Developing Ruby on Rails Project]]></title>
    <link href="http://geekhmer.github.io/blog/2014/11/07/the-most-gem-that-i-use-for-developing-ruby-on-rails-project/"/>
    <updated>2014-11-07T20:33:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/11/07/the-most-gem-that-i-use-for-developing-ruby-on-rails-project</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/the_most_gem_i_use.jpg" alt="The most gem that I use for developing ruby on rails project" />
</p>




<h3>activerecord</h3>




<p>
  <strong>1. kaminari</strong><br/>
  Description: A Scope & Engine based, clean, powerful, customizable and sophisticated paginator for modern web app frameworks and ORMs.<br/>
  Source: <a href="https://github.com/amatsuda/kaminari" target="_blank">https://github.com/amatsuda/kaminari</a>
</p>




<p>
  <strong>2. i18n-active_record</strong><br/>
  Description: Use to lookup translations in the database.<br/>
  Source: <a href="https://github.com/svenfuchs/i18n-active_record" target="_blank">https://github.com/svenfuchs/i18n-active_record</a>
</p>




<p>
  <strong>3. paperclip</strong><br/>
  Description: Paperclip is intended as an easy file attachment library for Active Record.<br/>
  Source: <a href="https://github.com/thoughtbot/paperclip" target="_blank">https://github.com/thoughtbot/paperclip</a>
</p>




<p>
  <strong>4. paperclip-meta</strong><br/>
  Description: Use for adding width, height, and size to paperclip images.<br/>
  Source: <a href="https://github.com/teeparham/paperclip-meta" target="_blank">https://github.com/teeparham/paperclip-meta</a>
</p>




<p>
  <strong>5. swf_file</strong><br/>
  Description: SWF File is lightweight gem to read swf file headers from within a Ruby application.<br/>
  Source: <a href="https://github.com/DBA/swf_file" target="_blank">https://github.com/DBA/swf_file</a>
</p>




<h3>delayed_job</h3>




<p>
  <strong>1. delayed_job_active_record</strong><br/>
  Description: delayed_job_active_record encapsulates the common pattern of asynchronously executing longer tasks in the background.<br/>
  Source: <a href="https://github.com/collectiveidea/delayed_job" target="_blank">https://github.com/collectiveidea/delayed_job</a>
</p>




<p>
  <strong>2. delayed_job_web</strong><br/>
  Description: Resque like web interface for delayed job.<br/>
  Source: <a href="https://github.com/ejschmitt/delayed_job_web" target="_blank">https://github.com/ejschmitt/delayed_job_web</a>
</p>




<h3>mongoid</h3>




<p>
  <strong>1. mongoid</strong><br/>
  Description: Mongoid is an ODM (Object-Document-Mapper) framework for MongoDB in Ruby.<br/>
  Source: <a href="https://github.com/mongoid/mongoid" target="_blank">https://github.com/mongoid/mongoid</a>
</p>




<p>
  <strong>2. mongoid-rails-instrumentation</strong><br/>
  Description: Add additional information to rails logs about total time for MongoDB queries in action processing.<br/>
  Source: <a href="https://github.com/fredjean/mongoid-rails-instrumentation" target="_blank">https://github.com/fredjean/mongoid-rails-instrumentation</a>
</p>




<h3>solr</h3>




<p>
  <strong>1. rsolr</strong><br/>
  Description: A simple, extensible Ruby client for Apache Solr.<br/>
  Source: <a href="https://github.com/rsolr/rsolr" target="_blank">https://github.com/rsolr/rsolr</a>
</p>




<h3>views</h3>




<p>
  <strong>1. haml-rails</strong><br/>
  Description: Haml-rails provides Haml generators for rails 3.<br/>
  Source: <a href="https://github.com/indirect/haml-rails" target="_blank">https://github.com/indirect/haml-rails</a>
</p>




<p>
  <strong>2. simple_form</strong><br/>
  Description: simple_form aims to be as flexible as possible while helping you with powerful components to create your form.<br/>
  Source: <a href="https://github.com/plataformatec/simple_form" target="_blank">https://github.com/plataformatec/simple_form</a>
</p>




<p>
  <strong>3. unicode</strong><br/>
  Description: Unicode string manipulation library for Ruby.<br/>
  Source: <a href="https://github.com/blackwinter/unicode" target="_blank">https://github.com/blackwinter/unicode</a>
</p>




<p>
  <strong>4. wicked_pdf</strong><br/>
  Description: Wicked PDF uses the shell utility wkhtmltopdf to serve a PDF file to a user from HTML.<br/>
  Source: <a href="https://github.com/mileszs/wicked_pdf" target="_blank">https://github.com/mileszs/wicked_pdf</a>
</p>




<p>
  <strong>5. wkhtmltopdf-binary</strong><br/>
  Description: Provides binaries for WKHTMLTOPDF project in an easily accessible package.<br/>
  Source: <a href="https://rubygems.org/gems/wkhtmltopdf-binary" target="_blank">https://rubygems.org/gems/wkhtmltopdf-binary</a>
</p>




<p>
  <strong>6. best_in_place</strong><br/>
  Description: Best in Place is a jQuery based AJAX Inplace-Editor that takes profit of RESTful server-side controllers to allow users to edit stuff with no need of forms.<br/>
  Source: <a href="https://github.com/bernat/best_in_place" target="_blank">https://github.com/bernat/best_in_place</a>
</p>




<p>
  <strong>7. mustache</strong><br/>
  Description: Mustache is a framework-agnostic way to render logic-free views.<br/>
  Source: <a href="https://github.com/mustache/mustache" target="_blank">https://github.com/mustache/mustache</a>
</p>




<p>
  <strong>8. olive</strong><br/>
  Description: is the rails helper​ gem that enables to use content_for in controllers.<br/>
  Source: <a href="https://github.com/Bunlong/olive" target="_blank">https://github.com/Bunlong/olive</a>
</p>




<p>
  <strong>9. activenavbar</strong><br/>
  Description: is the gem that use to set the active navbar link, a link becomes active when you click on it.<br/>
  Source: <a href="https://github.com/Bunlong/activenavbar" target="_blank">https://github.com/Bunlong/activenavbar</a>
</p>




<h3>utils</h3>




<p>
  <strong>1. uuidtools</strong><br/>
  Description: uuidtools was designed to be a simple library for generating any of the various types of uuids.<br/>
  Source: <a href="https://github.com/sporkmonger/uuidtools/tree/" target="_blank">https://github.com/sporkmonger/uuidtools/tree</a>
</p>




<p>
  <strong>2. geoip</strong><br/>
  Description: The Ruby gem for querying Maxmind.com's GeoIP database, which returns the geographic location of a server given its IP address.<br/>
  Source: <a href="https://github.com/cjheath/geoip" target="_blank">https://github.com/cjheath/geoip</a>
</p>




<p>
  <strong>3. fakie</strong><br/>
  Description: Libphonenumber Ruby wrapper.<br/>
  Source: <a href="https://github.com/seesawco/fakie" target="_blank">https://github.com/seesawco/fakie</a>
</p>




<h3>auth</h3>




<p>
  <strong>1. devise</strong><br/>
  Description: devise is a flexible authentication solution for Rails.<br/>
  Source: <a href="https://github.com/plataformatec/devise" target="_blank">https://github.com/plataformatec/devise</a>
</p>




<p>
  <strong>2. devise-encryptable</strong><br/>
  Description: Devise encryptable behavior.<br/>
  Source: <a href="https://github.com/plataformatec/devise-encryptable" target="_blank">https://github.com/plataformatec/devise-encryptable</a>
</p>




<p>
  <strong>3. CanCan</strong><br/>
  Description: CanCan is an authorization library for Ruby on Rails.<br/>
  Source: <a href="https://github.com/ryanb/cancan" target="_blank">https://github.com/ryanb/cancan</a>
</p>




<p>
  <strong>4. rolify</strong><br/>
  Description: Role management library with resource scoping.<br/>
  Source: <a href="https://github.com/RolifyCommunity/rolify" target="_blank">https://github.com/RolifyCommunity/rolify</a>
</p>




<h3>aws</h3>




<p>
  <strong>1. aws-sdk</strong><br/>
  Description: The official AWS SDK for Ruby.<br/>
  Source: <a href="https://github.com/aws/aws-sdk-ruby" target="_blank">https://github.com/aws/aws-sdk-ruby</a>
</p>




<h3>misc</h3>




<p>
  <strong>1. passenger</strong><br/>
  Description: Phusion Passenger™ is a web server and application server, designed to be fast, robust and lightweight.<br/>
  Source: <a href="https://github.com/phusion/passenger" target="_blank">https://github.com/phusion/passenger</a>
</p>




<p>
  <strong>2. whenever</strong><br/>
  Description: Whenever is a Ruby gem that provides a clear syntax for writing and deploying cron jobs.<br/>
  Source: <a href="https://github.com/javan/whenever" target="_blank">https://github.com/javan/whenever</a>
</p>




<p>
  <strong>3. ruby-graphviz</strong><br/>
  Description: Ruby interface to the GraphViz graphing tool.<br/>
  Source: <a href="https://github.com/glejeune/Ruby-Graphviz/" target="_blank">https://github.com/glejeune/Ruby-Graphviz/</a>
</p>




<h3>rake</h3>




<p>
  <strong>1. sitemap_generator</strong><br/>
  Description: SitemapGenerator is the easiest way to generate Sitemaps in Ruby.<br/>
  Source: <a href="https://github.com/kjvarga/sitemap_generator" target="_blank">https://github.com/kjvarga/sitemap_generator</a>
</p>




<p>
  <strong>2. fog</strong><br/>
  Description: fog is the Ruby cloud services library.<br/>
  Source: <a href="https://github.com/fog/fog" target="_blank">https://github.com/fog/fog</a>
</p>




<p>
  <strong>3. progressbar</strong><br/>
  Description: Ruby/ProgressBar is a text progress bar library for Ruby.<br/>
  Source: <a href="https://github.com/peleteiro/progressbar" target="_blank">https://github.com/peleteiro/progressbar</a>
</p>




<p>
  <strong>4. parallel</strong><br/>
  Description: Ruby parallel processing made simple and fast.<br/>
  Source: <a href="https://github.com/grosser/parallel" target="_blank">https://github.com/grosser/parallel</a>
</p>




<p>
  <strong>5. terminal-table</strong><br/>
  Description: Ruby ASCII Table Generator, simple and feature rich.<br/>
  Source: <a href="https://github.com/tj/terminal-table" target="_blank">https://github.com/tj/terminal-table</a>
</p>




<h3>production</h3>




<p>
  <strong>1. dalli</strong><br/>
  Description: Dalli is a high performance pure Ruby client for accessing memcached servers.<br/>
  Source: <a href="https://github.com/mperham/dalli" target="_blank">https://github.com/mperham/dalli</a>
</p>




<p>
  <strong>2. exception_notification</strong><br/>
  Description: The Exception Notification gem provides a set of notifiers for sending notifications when errors occur in a Rack/Rails application. The built-in notifiers can deliver notifications by email, campfire rooms or via webhooks.<br/>
  Source: <a href="https://github.com/smartinez87/exception_notification" target="_blank">https://github.com/smartinez87/exception_notification</a>
</p>




<p>
  <strong>3. newrelic_rpm</strong><br/>
  Description: New Relic is a performance management system, developed by New Relic, Inc. It provides you with deep information about the performance of your Rails or Ruby application as it runs in production.<br/>
  Source: <a href="https://github.com/newrelic/rpm" target="_blank">https://github.com/newrelic/rpm</a>
</p>




<h3>development & test</h3>




<p>
  <strong>1. brakeman</strong><br/>
  Description: Brakeman is a static analysis tool which checks Ruby on Rails applications for security vulnerabilities.<br/>
  Source: <a href="https://github.com/presidentbeef/brakeman" target="_blank">https://github.com/presidentbeef/brakeman</a>
</p>




<p>
  <strong>2. ffaker</strong><br/>
  Description: A library for generating fake data such as names, addresses, and phone numbers.<br/>
  Source: <a href="https://github.com/EmmanuelOga/ffaker" target="_blank">https://github.com/EmmanuelOga/ffaker</a>
</p>




<p>
  <strong>3. binding_of_caller</strong><br/>
  Description: Retrieve the binding of a method's caller.<br/>
  Source: <a href="https://github.com/banister/binding_of_caller" target="_blank">https://github.com/banister/binding_of_caller</a>
</p>




<h4>guard</h4>




<p>
  <strong>4. rb-inotify</strong><br/>
  Description: This is a simple wrapper over the inotify Linux kernel subsystem for monitoring changes to files and directories.<br/>
  Source: <a href="https://github.com/nex3/rb-inotify" target="_blank">https://github.com/nex3/rb-inotify</a>
</p>




<p>
  <strong>5. guard-rspec</strong><br/>
  Description: Guard::RSpec allows to automatically & intelligently launch specs when files are modified.<br/>
  Source: <a href="https://github.com/guard/guard-rspec" target="_blank">https://github.com/guard/guard-rspec</a>
</p>




<p>
  <strong>6. guard-jasmine</strong><br/>
  Description: Guard::Jasmine automatically tests your Jasmine specs when files are modified.<br/>
  Source: <a href="https://github.com/guard/guard-jasmine" target="_blank">https://github.com/guard/guard-jasmine</a>
</p>




<p>
  <strong>7. guard-jasmine</strong><br/>
  Description: Zeus preloads your Rails app so that your normal development tasks such as console, server, generate, and specs/tests take less than one second.<br/>
  Source: <a href="https://github.com/burke/zeus" target="_blank">https://github.com/burke/zeus</a>
</p>




<h4>javascript</h4>




<p>
  <strong>8. jasminerice</strong><br/>
  Description: Pain free coffeescript testing.<br/>
  Source: <a href="https://github.com/bradphelan/jasminerice" target="_blank">https://github.com/bradphelan/jasminerice</a>
</p>




<h4>console</h4>




<p>
  <strong>9. pry</strong><br/>
  Description: An IRB alternative and runtime developer console.<br/>
  Source: <a href="https://github.com/pry/pry" target="_blank">https://github.com/pry/pry</a>
</p>




<p>
  <strong>10. pry-debugger</strong><br/>
  Description: Fast execution control in Pry.<br/>
  Source: <a href="https://github.com/nixme/pry-debugger" target="_blank">https://github.com/nixme/pry-debugger</a>
</p>




<p>
  <strong>11 pry-rails</strong><br/>
  Description: Avoid repeating yourself, use pry-rails instead of copying the initializer to every rails project. This is a small gem which causes rails console to open pry.<br/>
  Source: <a href="https://github.com/rweng/pry-rails" target="_blank">https://github.com/rweng/pry-rails</a>
</p>




<h4>web server</h4>




<p>
  <strong>12. thin</strong><br/>
  Description: A very fast & simple Ruby web server.<br/>
  Source: <a href="https://github.com/macournoyer/thin/" target="_blank">https://github.com/macournoyer/thin/</a>
</p>




<h4>rspec, capybara and shoulda</h4>




<p>
  <strong>13. rspec-rails</strong><br/>
  Description: rspec-rails is a testing framework for Rails.<br/>
  Source: <a href="https://github.com/rspec/rspec-rails" target="_blank">https://github.com/rspec/rspec-rails</a>
</p>




<p>
  <strong>14. headless</strong><br/>
  Description: Ruby wrapper for Xvfb, the virtual framebuffer.<br/>
  Source: <a href="https://github.com/leonid-shevtsov/headless" target="_blank">https://github.com/leonid-shevtsov/headless</a>
</p>




<p>
  <strong>15. factory_girl_rails</strong><br/>
  Description: factory_girl_rails provides Rails integration for factory_girl.<br/>
  Source: <a href="https://github.com/thoughtbot/factory_girl_rails" target="_blank">https://github.com/thoughtbot/factory_girl_rails</a>
</p>




<p>
  <strong>16. capybara</strong><br/>
  Description: Capybara helps you test web applications by simulating how a real user would interact with your app.<br/>
  Source: <a href="https://github.com/jnicklas/capybara" target="_blank">https://github.com/jnicklas/capybara</a>
</p>




<p>
  <strong>17. shoulda-matchers</strong><br/>
  Description: shoulda-matchers provides Test::Unit- and RSpec-compatible one-liners that test common Rails functionality.<br/>
  Source: <a href="https://github.com/thoughtbot/shoulda-matchers" target="_blank">https://github.com/thoughtbot/shoulda-matchers</a>
</p>




<h3>development</h3>




<p>
  <strong>1. rails-erd</strong><br/>
  Description: Generate Entity-Relationship Diagrams for Rails applications.<br/>
  Source: <a href="https://github.com/voormedia/rails-erd" target="_blank">https://github.com/voormedia/rails-erd</a>
</p>




<p>
  <strong>2. better_errors</strong><br/>
  Description: Better Errors replaces the standard Rails error page with a much better and more useful error page.<br/>
  Source: <a href="https://github.com/charliesome/better_errors" target="_blank">https://github.com/charliesome/better_errors</a>
</p>




<p>
  <strong>3. foreman</strong><br/>
  Description: Manage Procfile-based applications.<br/>
  Source: <a href="https://github.com/ddollar/foreman" target="_blank">https://github.com/ddollar/foreman</a>
</p>




<h3>test</h3>




<p>
  <strong>1. simplecov</strong><br/>
  Description: SimpleCov is a code coverage analysis tool for Ruby.<br/>
  Source: <a href="https://github.com/colszowka/simplecov" target="_blank">https://github.com/colszowka/simplecov</a>
</p>




<p>
  <strong>2. json_spec</strong><br/>
  Description: Easily handle JSON in RSpec and Cucumber.<br/>
  Source: <a href="https://github.com/collectiveidea/json_spec" target="_blank">https://github.com/collectiveidea/json_spec</a>
</p>




<p>
  <strong>3. database_cleaner</strong><br/>
  Description: Strategies for cleaning databases in Ruby. Can be used to ensure a clean state for testing.<br/>
  Source: <a href="https://github.com/DatabaseCleaner/database_cleaner" target="_blank">https://github.com/DatabaseCleaner/database_cleaner</a>
</p>




<h3>assets</h3>




<p>
  <strong>1. asset_sync</strong><br/>
  Description: Asset Sync is built to run with the new Rails Asset Pipeline feature introduced in Rails 3.1. After you run bundle exec rake assets:precompile your assets will be synchronised to your S3 bucket, optionally deleting unused files and only uploading the files it needs to.<br/>
  Source: <a href="https://github.com/rumblelabs/asset_sync" target="_blank">https://github.com/rumblelabs/asset_sync</a>
</p>




<p>
  <strong>2. sass-rails</strong><br/>
  Description: This gem provides official integration for Ruby on Rails projects with the Sass stylesheet language.<br/>
  Source: <a href="https://github.com/rails/sass-rails" target="_blank">https://github.com/rails/sass-rails</a>
</p>




<p>
  <strong>3. bootstrap-sass</strong><br/>
  Description: Official Sass port of Bootstrap.<br/>
  Source: <a href="https://github.com/twbs/bootstrap-sass" target="_blank">https://github.com/twbs/bootstrap-sass</a>
</p>




<p>
  <strong>4. jquery-fileupload-rails</strong><br/>
  Description: jQuery File Upload integrated for Rails Asset Pipeline.<br/>
  Source: <a href="https://github.com/tors/jquery-fileupload-rails" target="_blank">https://github.com/tors/jquery-fileupload-rails</a>
</p>




<p>
  <strong>5. bootstrap-wysihtml5-rails</strong><br/>
  Description: WYSIWYG editor for Bootstrap, integrated in Rails assets pipeline.<br/>
  Source: <a href="https://github.com/Nerian/bootstrap-wysihtml5-rails" target="_blank">https://github.com/Nerian/bootstrap-wysihtml5-rails</a>
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Readable Booleans]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/30/ruby-readable-booleans/"/>
    <updated>2014-08-30T09:58:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/30/ruby-readable-booleans</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/rights_and_wrongsof_ruby.jpg" width="400" />
</p>




<p>
  There's a great little trick you can do to improve the readability of your code. A common problem is dealing with methods that have a boolean flag arguments. Here's an example I ran into just today in a Rails application:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rating_stars</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;,</span> <span class="n">clickable</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  The problem with this is that you typically see calls like this scattered around the application:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">rating_stars</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;,</span> <span class="kp">true</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Would you know what true did there if I hadn't shown you the name of the variable first? I didn't. I had to go hunting for that method definition.
</p>




<p>
  Ironically the opposite problem, a magical dangling false, is much more rare in my experience. That's typically the default for these kind of arguments and it just makes more sense and reads better to leave it out.
</p>




<p>
  Anyway, the point is that we can typically improve the ease of understanding the common case. Remember that one of the new features of Ruby 2.0 is keyword arguments. keyword arguments make it easier create readable method. For example, after looking up the method and understanding what was needed: 
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">rating_stars</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;,</span> <span class="ss">clickable</span><span class="p">:</span> <span class="kp">false</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># &amp;hellip;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">rating_stars</span><span class="p">(</span><span class="o">&amp;</span><span class="n">hellip</span><span class="p">;,</span> <span class="ss">clickable</span><span class="p">:</span> <span class="kp">true</span><span class="p">)</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  So far so good, my hope is that might save a future maintainer a trip to the method definition to understand the call.
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What's New in Rails4 View?]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/14/whats-new-in-rails4-view/"/>
    <updated>2014-08-14T08:37:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/14/whats-new-in-rails4-view</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/what_is_new_in_rails4.png" width="500" />
</p>




<p>
  Well, previouse article I had talked about <a href="http://geekhmer.github.io/blog/2014/08/09/whats-new-in-rails4-activemodel/">What's New in Rails4 ActiveModel?</a>.
  Today We are looking at view:
</p>




<p>
  Assume we have an owner class which has many items and each items are usualy belongs to an owner:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Owner</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:items</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:owner</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Select box</strong><br/>
  - Rails3 & 4<br/>
  In Rails3 & 4 if we want to build a select box with owner we could do it with a single method called:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">collection_select</span><span class="p">(</span><span class="ss">:item</span><span class="p">,</span> <span class="ss">:owner_id</span><span class="p">,</span> <span class="no">Owner</span><span class="o">.</span><span class="n">all</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Radio button & checkbox</strong><br/>
  - Rails3<br/>
  In Rails3 we need do with the loops and builds each of the elements:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%</span> <span class="vi">@owners</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">owner</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &amp;lt;%= radio_button_tag :owner_id, owner.id %&gt;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">owner</span><span class="o">.</span><span class="n">name</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">&amp;lt;% end %&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  HTML output: 
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;owner_id&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;owner_id&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;radio&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;1&quot;</span> <span class="sr">/&gt; Slow-draw</span>
</span><span class='line'><span class="sr">&lt;input id=&quot;owner_id&quot; name=&quot;owner_id&quot; type=&quot;radio&quot; value=&quot;2&quot; /</span><span class="o">&gt;</span> <span class="no">Sheriff</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  - Rails4<br/>
  Now in Rails4 we have <code>collection_radio_buttons & collection_check_boxes</code> method which builds all elements from a collection:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">collection_radio_buttons</span><span class="p">(</span><span class="ss">:item</span><span class="p">,</span> <span class="ss">:owner_id</span><span class="p">,</span> <span class="no">Owner</span><span class="o">.</span><span class="n">all</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span><span class='line'><span class="n">collection_check_boxes</span><span class="p">(</span><span class="ss">:item</span><span class="p">,</span> <span class="ss">:owner_id</span><span class="p">,</span> <span class="no">Owner</span><span class="o">.</span><span class="n">all</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Date field</strong><br/>
  - Rails3<br/>
  At some points we must use <code>date_select</code> form helper:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">f</span><span class="o">.</span><span class="n">date_select</span> <span class="ss">:return_date</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  HTML output:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date_1i&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;item[return_date(1i)]&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;2008&quot;</span><span class="o">&gt;</span><span class="mi">2008</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">  &amp;hellip;</span>
</span><span class='line'><span class="sr">&lt;/se</span><span class="n">lect</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date_2li&quot;</span> <span class="nb">name</span> <span class="o">=</span><span class="s2">&quot;item[return_date(2i)]&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="n">option</span> <span class="n">selected</span><span class="o">=</span><span class="s2">&quot;selected&quot;</span> <span class="n">value</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">&gt;</span><span class="no">January</span><span class="o">&lt;</span><span class="sr">/option&gt;</span>
</span><span class='line'><span class="sr">  &amp;hellip;</span>
</span><span class='line'><span class="sr">&lt;/se</span><span class="n">lect</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nb">select</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date_3i&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;item[return_date(3i)]&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/select&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  - Rails4<br/>
  Rails4 now there is a date_field:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">%=</span> <span class="n">f</span><span class="o">.</span><span class="n">date_field</span> <span class="ss">:return_date</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  HTML output:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">input</span> <span class="nb">id</span><span class="o">=</span><span class="s2">&quot;item_return_date&quot;</span> <span class="nb">name</span><span class="o">=</span><span class="s2">&quot;item[return_date]&quot;</span> <span class="n">type</span><span class="o">=</span><span class="s2">&quot;date&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Memoization to Speed Up Your Code in Ruby/Rails]]></title>
    <link href="http://geekhmer.github.io/blog/2014/08/11/use-memoization-to-speed-up-your-code-in-ruby-slash-rails/"/>
    <updated>2014-08-11T00:28:00+07:00</updated>
    <id>http://geekhmer.github.io/blog/2014/08/11/use-memoization-to-speed-up-your-code-in-ruby-slash-rails</id>
    <content type="html"><![CDATA[<p>
  <img src="http://geekhmer.github.io/images/ruby_on_rails.png" width="400" />
</p>




<p>
  Have you ever heard Memoization? In this article you will get an introduction of Memoization. You will learn what it is, how you can use it to speed up your code.
</p>




<p>
  <strong>What is Memoization?</strong><br/>
  Memoization is the process of storing a computed value to avoid duplicated work by future calls.
</p>




<p>
  <strong>What are Memoization used for?</strong><br/>
  - Perform some work<br/>
  - Store the work result<br/>
  - Use stored results in future calls
</p>




<p>
  <strong>Using</strong><br/>
  In Ruby the most common pattern for using Memoization is the conditional assignment operator: <code>||=</code>.
</p>




<p>
  <strong>Example</strong><br/>
  In Rails if you've ever worked with a user login system, you really family with the pattern of loading the <code>current_user</code> in the <code>application_controller.rb</code>:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Within each request in a Rails application you will usually see multiple calls to <code>current_user</code> that means <code>User.find</code> method is run multiple times.<br/>
</p>




<p>
  In this case, we know the problem is because there are multiple calls to <code>current_user</code> occurring. Let's fix this code by introducing Memoization into the <code>current_user</code> method and storing the result of <code>User.find</code> method by using conditional assignment to an instance variable:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>application_controller.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Well, there are no more calls to rebuild the <code>User</code> object each time <code>current_user</code> method is called.
</p>




<p>
  <strong>When should you memoize?</strong><br/>
  - When you've got duplicated database<br/>
  - When you've got expensive calculations<br/>
  - When you've got repeated calculations that don't change<br/>
</p>




<p>
  <strong>When shouldn't you memoize</strong><br/>
  - Memoization shouldn't be used with methods that take parameters:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;incorrect&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>  <span class="vi">@full_name</span> <span class="o">||=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{first_name} #{last_name}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts full_name(&amp;lsquo;Bunlong&amp;rsquo;, &amp;lsquo;Van&amp;rsquo;) #=&gt; &amp;ldquo;Bunlong Van&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="n">full_name</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Ryan</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Van</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span> <span class="c1">#=&gt; &amp;ldquo;Bunlong Van&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  - Memoization shouldn't be used with methods that use instance variables:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;incorrect&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>  <span class="vi">@full_name</span> <span class="o">||=</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{first_name} #{last_name}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;@first_name = &amp;lsquo;Bunlong&amp;rsquo;</span>
</span><span class='line'><span class="sr">@last_name = &amp;lsquo;Van&amp;rsquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">puts</span> <span class="n">full_name</span> <span class="c1">#=&gt; &amp;ldquo;Bunlong Van&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="vi">@first_name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Ryan</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="vi">@last_name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="no">Van</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;puts full_name #=&gt; &amp;ldquo;Bunlong Van&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Memoization conditional assignment have problem when return nil or false in Ruby</strong><br/>
  If you are not clear in using conditional assignment it can bite you, let try code below:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">print</span>
</span><span class='line'>  <span class="vi">@print</span> <span class="o">||</span> <span class="o">=</span> <span class="k">begin</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;            puts &quot;printing&quot;</span>
</span><span class='line'><span class="sr">            sleep 2</span>
</span><span class='line'><span class="sr">            false</span>
</span><span class='line'><span class="sr">          end</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">print</span> <span class="c1">#=&gt; &amp;ldquo;printing&amp;rdquo;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">print</span> <span class="c1">#=&gt; &amp;ldquo;printing&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  Suprised that "printing" was printed twice? Conditional assignment is always going to run if the instance variable <code>@print</code> is false or nil.<br/>
</p>




<p>
  Well, we can solve the problem by using <code>defined?</code>:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">print</span>
</span><span class='line'>  <span class="k">return</span> <span class="vi">@print</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="vi">@print</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">printing</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>  <span class="vi">@print</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;print #=&gt; &amp;ldquo;printing&amp;rdquo;&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="nb">print</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  <strong>Memoization conditional assignment have problem when return nil or false in Rails</strong><br/>
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>  <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span><span class="p">)</span> <span class="k">if</span> <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>
  What's happen if <code>User.find</code> return nil? Conditional assignment is always going to run and current_user method is always going to call if the instance variable <code>@print</code> is false or nil.
</p>




<p>
  Well, we can fix the problem by using the Memoizable API in Rails:
</p>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;somewhere inside the class&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="kp">extend</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Memoizable</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def current_user</span>
</span><span class='line'><span class="sr">  @current_user ||= User.find(session[:user_id]) if session[:user_id]</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">memoize :current_user</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><p>
  Or we can use <a href="https://github.com/dkubb/memoizable" target="_blank">Memoizable</a> to fix this problem
<p></p>

<p><p>
  So far so good, I hope this article comes in handy for some of you who haven’t heard of memoization yet or who just didn’t really understand what’s going on there. :)
</p></p>
]]></content>
  </entry>
  
</feed>
